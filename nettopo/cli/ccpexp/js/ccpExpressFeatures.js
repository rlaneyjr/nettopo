var iosVersion, licenseCheck = false, isNano = false, isEnableIPS = true, isVlanEnable = true, iosimage = "", iosk9check = "", language = "en", zoneCheck = false,preferences,advipservices=false,advsecurity=false,iosSelected="";
var isAVCSuport=false;
//var xesoftwareString="";

var showRunningConfigFormat, shRunDataLatestFlag = false, ccpExpCLICache = {}, commandsJSON;
var ccpExpressVersionValue='3.3.1';
var enableConsoleLogging=false;
var devCommCLIOutputLogging=false;
var needLandingPageAnimation=true;
var primaryWANDescription = "PrimaryWANDesc_", backupWANDescription = "BackupWANDesc_";
var clubbedCLIExecutionErrorMsg = "Clubbed CLI execution resulted in error.";
var globalCLIOutputSeparator = null, globalSeparatorAvailable = false, clubbedCLIOutputArray = null, clubbedCLIOutputAvailable = false;
var shVerFormatOdmOutput, showVerionOutput, shRunFormatOutput, shRunFormatLatest = false, shRunConfigOutput, shRunConfigLatest = false, shLicFeatureOutput;
var languageLocaleCCPExpress = "en", ipsTabHide = false, securityNotEnabled = false;
var isIRRouter = false;
var cliOutputSeparatorGeneratorCommands = 'conf t \n exit \n show version | i ---';
var defaultConfigLoadedInterfaces = false, defaultConfigLoadedIdentity = false,
  defaultConfigLoadedZones = false, defaultConfigLoadedPolicy = false,
  defaultConfigLoadedIPS = false, defaultConfigLoadedVPN = false, defaultConfigLoadedCWS = false;
var nanoPID="C841M";
var browserName="", browserVersion="";
var dmvpnHubEnableFlag=true, dmvpnSpokeEnableFlag=true;

function setGlobalCLIOutputSeparator()
{
  //consoleLogMethodDetailsStart("performChecks.js", "setGlobalCLIOutputSeparator()");
  try{
    globalCLIOutputSeparator = deviceCommunicator.getExecCmdOutput(cliOutputSeparatorGeneratorCommands);
    //consoleLog("globalCLIOutputSeparator - "+globalCLIOutputSeparator);
  } catch(e)
  {
    globalCLIOutputSeparator = '';
    //consoleLogMethodDetailsEndWithError("performChecks.js", "setGlobalCLIOutputSeparator()", e);
  }
  if (globalCLIOutputSeparator!= null && globalCLIOutputSeparator !=undefined && globalCLIOutputSeparator.trim() != '')
  {
    //if (globalCLIOutputSeparator.trim() != '')
    //{
      globalSeparatorAvailable = true;
    //}
  }
  //consoleLogMethodDetailsEnd("performChecks.js", "setGlobalCLIOutputSeparator()");
}

function consoleLog(consoleString)
{
  if (enableConsoleLogging) {
    console.log(consoleString + "\n");
  }
}

function errorLogInConsole(errString)
{
  console.log(errString + "\n");
}

function consoleLogDevComOutput(outputString) {
  if (devCommCLIOutputLogging) {
    console.log(outputString + "\n");
  }
}

function consoleLogMethodDetailsEnd(className, methodName) {
  if (enableConsoleLogging) {
    //consoleLogMethodDetails(className, methodName, "end");
  }
}

function consoleLogMethodDetailsEndWithError(className, methodName, errorMsg) {
  if (enableConsoleLogging) {
    //consoleLogMethodDetails(className, methodName, "end");
    //consoleLog(className+"-"+methodName+"-Ended with below Exception/Error:");
    console.log(errorMsg+"\n");
  }
}

function consoleLogMethodDetailsStart(className, methodName) {
  //consoleLogMethodDetails(className, methodName, "start");
}

function consoleLogEnclosingMethodDetailsStart(className, methodName) {
  //consoleLogMethodDetails(className, methodName, "start");
}

function consoleLogEnclosingMethodDetailsEnd(className, methodName) {
  //consoleLogMethodDetails(className, methodName, "end");
}

function consoleLogMethodDetails(className, methodName, startOrEnd) {
  if (enableConsoleLogging) {
    var stringToPrint = className + " - " + methodName + " - " + startOrEnd;
    console.log(stringToPrint + "\n")
    if (startOrEnd != null && startOrEnd != undefined && startOrEnd === 'start') {
      console.time(className+",Time taken for Function, " + methodName);
    } else if (startOrEnd != null && startOrEnd != undefined && startOrEnd === 'end') {
      console.timeEnd(className+",Time taken for Function, " + methodName);
    }
  }
}

function getGATrackCode() {
  (function(i, s, o, g, r, a, m) {
    i['GoogleAnalyticsObject'] = r;
    i[r] = i[r] || function() { (i[r].q = i[r].q || []).push(arguments) };
    i[r].l = 1 * new Date();
    a = s.createElement(o);
      m = s.getElementsByTagName(o)[0];
    a.async = 1;
    a.src = g;
    m.parentNode.insertBefore(a, m)
  })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

  ga('create', 'UA-53950677-1', 'auto');
  ga('send', 'pageview');
}

function languageName() {
  var Lang = "e";
  //var tempLang=$.i18n.browserLang();
  //Lang="e";
  //if ((tempLang==="en-US")||(tempLang==="en")) {
  //            Lang="e";
  //}
  //else if ((tempLang==="fr-FR")||(tempLang==="fr")) {
  //            Lang="fr";
  //}
  //Lang="ja";
  $.i18n.properties({
    name: 'CCPExpNG',
    path: 'bundles/',
    language: Lang,
    mode: 'map',
    callback: function() {
    }
  });
  $.i18n.properties({
    name: 'ValidationMessages',
    path: 'bundles/',
    language: Lang,
    mode: 'map',
    callback: function() {
    }
  });
  return Lang;
}
function loadccpExpressLanguages() {
  //consoleLogMethodDetailsStart("performChecks.js", "loadccpExpressLanguages()");
  $("#mainClickForHelp").text($.i18n.prop("mainClickForHelp"));
  $("#mainClickForHelp1").text($.i18n.prop("mainClickForHelp1"));
  $("#mainViewQuickDemo").text($.i18n.prop("mainViewQuickDemo"));
  $("#display").text($.i18n.prop("display"));
  $("#hpInterfaceTitle").text($.i18n.prop("hpInterfaceTitle"));
  $("#hpInterfaceDesc").text($.i18n.prop("hpInterfaceDesc"));
  $("#hpDnsTitle").text($.i18n.prop("basicSettingsTitle"));
  $("#hpDnsDesc").text($.i18n.prop("hpDnsDesc"));
  $("#hpIdentityTitle").text($.i18n.prop("hpIdentityTitle"));
  $("#hpIdentityDesc").text($.i18n.prop("hpIdentityDesc"));
  $("#hpRoutingTitle").text($.i18n.prop("hpRoutingTitle"));
  $("#hpRoutingDesc").text($.i18n.prop("hpRoutingDesc"));
  $("#hpDiagnosisTitle").text($.i18n.prop("hpDiagnosisTitle"));
  $("#hpDiagnosisDesc").text($.i18n.prop("hpDiagnosisDesc"));
  $("#hpConfigureTitle").text($.i18n.prop("hpConfigureTitle"));
  $("#hpConfigureDesc").text($.i18n.prop("hpConfigureDesc"));
  $("#hpTroubleshootTitle").text($.i18n.prop("hpTroubleshootTitle"));
  $("#hpTroubleshootDesc").text($.i18n.prop("hpTroubleshootDesc"));
  $("#hpCliTitle").text($.i18n.prop("hpCliTitle"));
  $("#hpCliDesc").text($.i18n.prop("hpCliDesc"));
  $("#hpAdvisorTitle").text($.i18n.prop("hpAdvisorTitle"));
  $("#hpAdvisorDesc").text($.i18n.prop("hpAdvisorDesc"));
  $("#hpSecurityTitle").text($.i18n.prop("hpSecurityTitle"));
  $("#hpSecurityDesc").text($.i18n.prop("hpSecurityDesc"));
  $("#hpAclDesc").text($.i18n.prop("hpAclDesc"));
  $("#hpWiFiDesc").text($.i18n.prop("hpWiFiDesc"));
  $("#hpWiFiTitle").text($.i18n.prop("hpWiFiTitle"));
  $("#hpBasicUserTitle").text($.i18n.prop("hpBasicUserTitle"));
  $("#hpBasicUserDesc").text($.i18n.prop("hpBasicUserDesc"));
  $("#googleAnalytics").attr("title", $.i18n.prop("googleAnalyticsPopUp"));
  $("#preferencesDialog").attr("title", $.i18n.prop("menuPreference"));
  $("#analyticsInfoMessOne").text($.i18n.prop("analyticsInfoMessOne"));
  $("#analyticsInfoMessTwo").text($.i18n.prop("analyticsInfoMessTwo"));
  $("#analyticsInfoMessThree").text($.i18n.prop("analyticsInfoMessThree"));
  $("#analyticsInfoMessFour").text($.i18n.prop("analyticsInfoMessFour"));
  $("#analyticsInfoMessFive").text($.i18n.prop("analyticsInfoMessFive"));

  $('#analysisTitle').text($.i18n.prop("analysisTitle"));
  $('#ipsFeatureSupportTitle').text($.i18n.prop("ipsFeatureSupportTitle"));
  $('#recSecSettingsTitle ').text($.i18n.prop("recommendedSecuritySettings"));

  $('.switch-label').attr('data-on',$.i18n.prop("onValue"));
  $('.switch-label').attr('data-off',$.i18n.prop("offValue"));

  $('#logsTitle').text($.i18n.prop("logsTitle"));
  $('#updateTitle').text($.i18n.prop("updateTitle"));

  $("#yes").text($.i18n.prop("yes"));
  $("#no").text($.i18n.prop("no"));

  $("#basicWizardInfo").text($.i18n.prop("basicWizardInfo"));
  $("#basicQuickSetup").text($.i18n.prop("basicQuickSetup"));
  $("#basicQuickSetupInfo").text($.i18n.prop("basicQuickSetupInfo"));
  $("#basicAdvSetup").text($.i18n.prop("basicAdvSetup"));
  $("#basicAdvSetupInfo").text($.i18n.prop("basicAdvSetupInfo"));
  $(".moreOptions").text($.i18n.prop("moreOptions"));

  $('.popUpMenuItemMain[data="upgrade"] .popUpMenuText').text($.i18n.prop("ccpUpgrade"));
 $('.popUpMenuItemMain[data="updateIOS"] .popUpMenuText').text($.i18n.prop("IosUpdate"));
  $('.popUpMenuItemMain[data="reset"] .popUpMenuText').text($.i18n.prop("menuBackup"));
  $('.popUpMenuItemMain[data="preference"] .popUpMenuText').text($.i18n.prop("menuPreference"));
  $('.popUpMenuItemMain[data="caa"] .popUpMenuText').text($.i18n.prop("menuActiveAdvisor"));
  $('.popUpMenuItemMain[data="help"] .popUpMenuText').text($.i18n.prop("menuHelp"));
  $('.popUpMenuItemMain[data="feedback"] .popUpMenuText').text($.i18n.prop("menuFeedback"));

  $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));
  //consoleLogMethodDetailsEnd("performChecks.js", "loadccpExpressLanguages()");

  $("#runningConfigBackup").attr("title", runningConfigDownloadFile(false));
}

function runningConfigDownloadFile(spacingNotNeededFlag)
{
  var runningConfigDownloadTitleString = "", runningConfigDownloadTitleSpacing = " ";

  if (spacingNotNeededFlag || languageLocaleCCPExpress == "ja") {
    runningConfigDownloadTitleSpacing = "";
  }

  runningConfigDownloadTitleString =
    $.i18n.prop("shRunConfDwnldName1") + runningConfigDownloadTitleSpacing +
    $.i18n.prop("shRunConfDwnldName2") + runningConfigDownloadTitleSpacing+
    $.i18n.prop("shRunConfDwnldName3")

  return runningConfigDownloadTitleString;
}

function loadjscssfile(filename, filetype) {
  //consoleLogMethodDetailsStart("performChecks.js", "loadjscssfile()");
  //if filename is a external JavaScript file. Else condition for filename is an external CSS file.
  if (filetype == "js") {
    var fileref = document.createElement('script')
    fileref.setAttribute("type", "text/javascript")
    fileref.setAttribute("src", filename)
  }
  else if (filetype == "css") {
    var fileref = document.createElement("link")
    fileref.setAttribute("rel", "stylesheet")
    fileref.setAttribute("type", "text/css")
    fileref.setAttribute("href", filename)
  }
  if (typeof fileref != "undefined") {
    $('head').append(fileref);
  }
  //consoleLogMethodDetailsEnd("performChecks.js", "loadjscssfile()");
}

//Changes for CCPExpress3.1PerformanceImprovement - Start

function getCommandsJSONFileURL() {
  var pageURL = $(location), urlofJSONFile;
  var varProtocol = pageURL.attr('protocol').match(/https/);

  if (varProtocol != null && varProtocol != undefined && varProtocol != '') {
    urlofJSONFile = 'https://'
  } else {
    urlofJSONFile = 'http://'
  }
  urlofJSONFile = urlofJSONFile + pageURL.attr('host') + '/' + deviceCommunicator.getInstallDir() + '/js/CachedCommands.JSON';
  return urlofJSONFile;
}

//Method to get the JSON file from the device
function getCommandsJSON() {
  return deviceCommunicator.getCommandsForCache(getCommandsJSONFileURL());
}

//Method to get the frequently used commands from the JSON file and then create a JSON object
function createCommandsJSON()
{
  //Get the JSON file and its contents
  //consoleLog("JSON cache creation start");

  var localStoreCacheString = window.localStorage.getItem('ccpExpressCache');
  if (localStoreCacheString != undefined || localStoreCacheString != null) {
    ccpExpCLICache = $.parseJSON(localStoreCacheString);
    window.localStorage.removeItem('ccpExpressCache');
  }
  else {
    //var jsonFileContents = getCommandsJSONFile();

    ////consoleLog("jsonFileContents - "+jsonFileContents);

    //Create commandsJSON object
    //commandsJSON = $.parseJSON(jsonFileContents);
    commandsJSON = getCommandsJSON();
    //consoleLog("commandsJSON received - " + JSON.stringify(commandsJSON));

    var cacheIndex = 0;
    //consoleLog("looping throug jSON object starts");
    //Loop through the whole JSON object, take the commands, execute them and store in cache.
    $.each(commandsJSON, function(cmdKey, cliValue) {
      var cmdCacheLatestFlag = true, reloads = 0, reads = 0, reloadInProgress = false, dataLoadSuccess = true, cli = cliValue.Command;
      //consoleLog("adding the command " + cli);
      if (cli.indexOf("deviceCommunicator.getInstallDir()") > -1) {
        cli = cli.replace("deviceCommunicator.getInstallDir()", deviceCommunicator.getInstallDir());
      }
      //consoleLog("direct access to command -" + commandsJSON[cacheIndex]["Command"]);
      var cliOutputValue = "";
      try {
        cliOutputValue = deviceCommunicator.getExecCmdOutput(cli);
        ccpExpCLICache[cli] = {
                                "CLI": cli,
                                "CLIOutput": cliOutputValue,
                                "Latest": cmdCacheLatestFlag,
                                "Reloads": reloads,
                                "Reads": reads,
                                "ReloadInProgress": reloadInProgress,
                                "DataLoadSuccess": dataLoadSuccess};
      }
      catch (e) {
        cliOutputValue = "";
      }


      cacheIndex++;
    });

    moveCacheToLocalStorage();
    ////consoleLog("Cached Commands:" + JSONString);
//  getCacheAccessDetails();
  }
}

function initiateCacheReload(templateName)
{
  reloadShowRunData();
}

function evaluateCacheReload(templateName)
{
  markShowRunDataAsStale();
}
/*
function getCacheAccessDetails()
{
  //consoleLog("PRINTING CACHE START");
  //Gets the read/write counts of all the cached commands and status of the CLLI output stored
  $(ccpExpCLICache).each(function(i, val)
  {
    $.each(val, function(key, val)
    {
      //consoleLog("CLI: " + key + ", IsLatest-" + val["Latest"] + ", #ofReloads-" + val["Reloads"] + ", #ofReads-" + val["Reads"]);
    });
  });
  //consoleLog("PRINTING CACHE DONE");
}
*/
function getCacheCLIAccessDetails(cliJSONEntry)
{
  if (cliJSONEntry != null && cliJSONEntry != undefined) {
    //consoleLog("CLI: " + cliJSONEntry["CLI"] + ", IsLatest-" + cliJSONEntry["Latest"] + ", #ofReloads-" + cliJSONEntry["Reloads"] + ", #ofReads-" + cliJSONEntry["Reads"]);
  }
}

//Method gets the cached CLI output if latest. If not, it loads the latest into cache and returns the same.
function getCommandInCache(cliString)
{
  var commandOutput;
  commandOutput = ccpExpCLICache[cliString];
  return commandOutput;
}

function getCommandInLocalStorage(cliString)
{
  var localStoreCacheString = window.localStorage.getItem('ccpExpressCache');
  var tempCacheObject;
  if (localStoreCacheString != undefined || localStoreCacheString != null) {
    tempCacheObject = $.parseJSON(localStoreCacheString);
  }
  return tempCacheObject[cliString];
}

function markCachedCLIOutputLoadFailed(cliString) {
  var commandInCache = ccpExpCLICache[cliString];
  if (commandInCache != undefined && commandInCache != null) {
    commandInCache["DataLoadSuccess"] = false;
  }
  var JSONString = JSON.stringify(ccpExpCLICache);
  window.localStorage.setItem('ccpExpressCache', JSONString);
}

function markCachedCLIOutputAsStale(cliString) {
  var commandInCache = ccpExpCLICache[cliString];
  if (commandInCache != undefined && commandInCache != null) {
    markCachedCLIOutputObjectAsStale(commandInCache);
  }
}

function moveCacheToLocalStorage()
{
  var JSONString = JSON.stringify(ccpExpCLICache);
  window.localStorage.setItem('ccpExpressCache', JSONString);
}

function markCachedCLIOutputObjectAsStale(cliObjectInCache)
{
  cliObjectInCache["Latest"] = false;
  //moveCacheToLocalStorage();
}

function asynchronousCLICaching() {
  //Loop through the cache
  //Find any CLIOutput is marked with Latest flag as false.
  //If so, execute the command and put the latest data in.
}

function synchronousRefreshCLIOutputInCacheForCLIString(cliString)
{
  var commandInCache = ccpExpCLICache[cliString];
  if (commandInCache != undefined && commandInCache != null) {
    commandInCache["Latest"] = false;
    commandInCache["ReloadInProgress"] = true;
    commandInCache["DataLoadSuccess"] = false;
    commandInCache["CLIOutput"] = deviceCommunicator.getExecCmdOutput(cliString);
    commandInCache["Reloads"] = commandInCache["Reloads"] + 1;
    commandInCache["ReloadInProgress"] = false;
    commandInCache["DataLoadSuccess"] = true;
    commandInCache["Latest"] = true;
  }
  //moveCacheToLocalStorage();
  return commandInCache;
}

function synchronousRefreshCLIOutputInCache(commandInCache)
{
  if (commandInCache != undefined && commandInCache != null) {
    commandInCache["Latest"] = false;
    commandInCache["ReloadInProgress"] = true;
    commandInCache["DataLoadSuccess"] = false;
    commandInCache["CLIOutput"] = deviceCommunicator.getExecCmdOutput(commandInCache["CLI"]);
    commandInCache["Reloads"] = commandInCache["Reloads"] + 1;
    commandInCache["ReloadInProgress"] = false;
    commandInCache["DataLoadSuccess"] = true;
    commandInCache["Latest"] = true;
  }
  //moveCacheToLocalStorage()
  return commandInCache;
}

function markShowRunDataAsStale() {
  //markCachedCLIOutputAsStale("show running-config | format");
  //markCachedCLIOutputAsStale("show running-config");
}

function reloadShowRunData()
{
  //synchronousRefreshCLIOutputInCacheForCLIString("show running-config | format");
  //synchronousRefreshCLIOutputInCacheForCLIString("show running-config");
  //synchronousRefreshCLIOutputInCacheForCLIString("show running-config | include ip route");
}




function getOneTimeUsers() {
  //consoleLogMethodDetailsStart("performChecks.js", "getOneTimeUsers()");
  loadjscssfile("../js/deviceCommunicator.js", "js");

  //Changes for CCPExpress3.1PerformanceImprovement
  //Loading the cache upon page load. This has to be done after device communicator is loaded.
  //createCommandsJSON();
  if (!globalSeparatorAvailable) {
    setGlobalCLIOutputSeparator();
  }

  var cliArray = [];
  cliArray.push("show version | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshVer.odm");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show running-config | format");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show run | i licensefeature");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show run | i zone ");

  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show run | i licenseudi");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show ip interface brief ");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show version");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show running-config");


/*
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show flow record nbar-appmon");
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push("show flow monitor application-mon");
*/

/*
  //Commenting out unwanted push to CLI Array.
  //In future, if any more CLIs are to be considered, please ensure to add those here.
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push();
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push();
  cliArray.push(cliOutputSeparatorGeneratorCommands);
  cliArray.push();
  cliArray.push(cliOutputSeparatorGeneratorCommands);
*/

  clubbedCLIOutputArray = deviceCommunicator.clubShowCmdsExecuteAndSplitOutput(cliArray, globalCLIOutputSeparator);

  if (clubbedCLIOutputArray != null && clubbedCLIOutputArray.length >0) {
    clubbedCLIOutputAvailable = true;
    shVerFormatOdmOutput = clubbedCLIOutputArray[0];
    shRunFormatOutput = clubbedCLIOutputArray[1];
    shRunFormatLatest = true;
    //shLicFeatureOutput = clubbedCLIOutputArray[2];
    showVerionOutput = clubbedCLIOutputArray[6];
    shRunConfigOutput = clubbedCLIOutputArray[7];
    shRunConfigLatest = true;
  }

  var xml,
    oneTimeUsers = [],
    encrypted,
    password,
    privilegelevel,
    user,
    version,
    ver,
    verOnlyNo,
    href = $(location).attr('href');

  try {

    //snort implementation
    /*xml = deviceCommunicator.getExecCmdOutput("show version | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshVer.odm");
    version = $(xml).find('Version').text();
    xesoftwareString=$(xml).find('IOS-XE').text();
    ver = parseFloat(version);
    verOnlyNo = ver.toFixed(1);
    iosVersion = verOnlyNo;
    var patt1 = /^[-+]?[0-9]+\.[0-9]+$/g;
    iosimage = $(xml).find('Software').text();
    if (xesoftwareString!="") {
      xml = deviceCommunicator.getExecCmdOutput("show version");
      newline = xml.split("\n");
      for(n=0;n<newline.length;n++){
        if (newline[n].indexOf("Version")>-1) {
          versonsplit=newline[n].split("Version")[1];
          var inputString=versonsplit.trim().split(" ");
          if (n>=1&&parseFloat(inputString[0]).toString().match(patt1)) {
            ver = parseFloat(inputString[0]);
    verOnlyNo = ver.toFixed(1);
    iosVersion = verOnlyNo;
          }
        }
      }

    }*/
    if (clubbedCLIOutputAvailable && shVerFormatOdmOutput != null) {
      xml = shVerFormatOdmOutput;
    }
    else {
      xml = deviceCommunicator.getExecCmdOutput("show version | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshVer.odm");
    }
    version = $(xml).find('Version').text();
    ver = parseFloat(version);
    verOnlyNo = ver.toFixed(1);
    iosVersion = verOnlyNo;
    iosimage = $(xml).find('Software').text();
  }
  catch (error) {

    versionAlertBox();
  }
  if ((href.indexOf("ccpExpress.html") !== -1 || href.indexOf("endUserView.html") !== -1) && iosVersion < 15.2) {

    /**************** condition to check router IOS version *****************/
    //if (iosVersion < 15.2) {

      versionAlertBox();

    //}


  }

  /******************************Pop UP for One Time User **********************************/

  if (clubbedCLIOutputAvailable && shRunFormatOutput != null && shRunFormatLatest) {
      xml = shRunFormatOutput;
    }
  else {
    xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
  }

  $(xml).find('username').each(function() {
    encrypted = false;
    user = $(this).find('UserName').text();
    privilegelevel = $(this).find('UserPrivilegeLevel').text();
    if (privilegelevel === "") {
      privilegelevel = 1;
    }
    $(this).find('one-time').each(function() {
      $(this).find('password').each(function() {
        password = $(this).find('UnencryptedUserPassword').text();
        oneTimeUsers.push({userName: user, password: password, encrypt: encrypted, privilege: privilegelevel});
      });
      $(this).find('secret').each(function() {
        password = $(this).find('HiddenUserSecretString').text();
        encrypted = true;
        oneTimeUsers.push({userName: user, password: password, encrypt: encrypted, privilege: privilegelevel});
      });
    });

  });
  //consoleLogMethodDetailsEnd("performChecks.js", "getOneTimeUsers()");
  return oneTimeUsers;
}

function showOneTimeUser(userNumber, oneTimeUsers) {
  //consoleLogMethodDetailsStart("performChecks.js", "showOneTimeUser()");
  loadjscssfile("../external/development-bundle/themes/flick/jquery-ui-1.8.17.custom.css1", "css");
  //loadAndDisplayLanguages();
  $("#oneTimeUSer-dialogForm").dialog("open");
  $('#oneTimeUSer-dialogForm').append('<div id="oneTimeUserError" class="ui-state-error ui-corner-all" style="padding: 0 .7em;"><p><span  class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span><span id="oneTimeUserErrorMessage"></span></p></div>');
  $('#oneTimeUSer-dialogForm').append('<form id="oneTimeUserForm" method="get" action=""></form>');
  $('#oneTimeUserForm').append('<table id="onetimeUserTable"></table>');
  $('#onetimeUserTable').append('<tr><td>' + $.i18n.prop("oneTimeUserName") + '</td><td><input type="text" name="username" id="oneTimeUserInput" class="required changeUser"/></td></tr>');
  $('#onetimeUserTable').append('<tr><td>' + $.i18n.prop("oneTimePswd") + '</td><td><input type="password" name="password" id="paassworInput" class="required" minlength="1" maxlength = "25"/></td></tr>');
  $('#onetimeUserTable').append('<tr><td>' + $.i18n.prop("oneTimeConfirmPswd") + '</td><td><input type="password" name="confirmpassword" id="confirmInput" class="required" minlength="1" maxlenght = "25"equalTo="#paassworInput"/></td></tr>');
  $('#onetimeUserTable').append('<tr style="display:none"><td>' + $.i18n.prop("oneTimePrivelege") + '</td><td><select name="privileges" id="privileges"></select></td></tr>');
  $('#privileges').append('<option>1</option>');
  $('#privileges').append('<option>2</option>');
  $('#privileges').append('<option>3</option>');
  $('#privileges').append('<option>4</option>');
  $('#privileges').append('<option>5</option>');
  $('#privileges').append('<option>6</option>');
  $('#privileges').append('<option>7</option>');
  $('#privileges').append('<option>8</option>');
  $('#privileges').append('<option>9</option>');
  $('#privileges').append('<option>10</option>');
  $('#privileges').append('<option>11</option>');
  $('#privileges').append('<option>12</option>');
  $('#privileges').append('<option>13</option>');
  $('#privileges').append('<option>14</option>');
  $('#privileges').append('<option selected>15</option>');
  $('#privileges').hide();
  $('#oneTimeUserError').hide();
  $("#oneTimeUSer-dialogForm").dialog().dialog("widget").find(".ui-dialog-titlebar-close").hide();
  $('<p id = "oneTimeUserInfo" style="color: blue"></p>').html($.i18n.prop("NoteUsername") + ' ' + oneTimeUsers[userNumber].userName + " " + $.i18n.prop("oneTimeUserMessage")).prependTo('#oneTimeUserForm');
  $("#oneTimeUSer-dialogForm").dialog("option", "title", $.i18n.prop("oneTimeUserTitle"));
  $('#oneTimeUserInput').val("");
  $('#paassworInput').val("");
  $('#confirmInput').val("");
  $('#privileges').val(oneTimeUsers[userNumber].privilege);
  //consoleLogMethodDetailsEnd("performChecks.js", "showOneTimeUser()");
}
function checkForNanoDevice(liceUid) {
  //consoleLogMethodDetailsStart("performChecks.js", "checkForNanoDevice()");
  try {
    var found = false;
    resp = liceUid;
    //deviceCommunicator.getExecCmdOutput("show license udi");
    licenseSplit = resp.split("\n");
    for (var i = 1; i < licenseSplit.length; i++) {
      var licenseDetails = licenseSplit[i].split(/\s+/);
       var startReg=new RegExp('^' + nanoPID, 'i');
      if ((licenseDetails[1].trim() == "CISCO414R-K9") || (licenseDetails[1].trim() == "CISCO418R-K9") || (licenseDetails[1].trim() == "WIM-3G") || (licenseDetails[1].trim() == "WIM-1T") ||  startReg.test(licenseDetails[1].trim())) {
        found = true;
        break;
      }
    }
    //consoleLogMethodDetailsEnd("performChecks.js", "checkForNanoDevice()");
    return found;
  } catch (error) {
    errorLogInConsole("Error in checkForNanoDevice()");
    //consoleLogMethodDetailsEndWithError("performChecks.js", "checkForNanoDevice()",error);
    return found;
  }
}

function isVlanCheckEnable(){
    try{
        var check = false,response;
        response = deviceCommunicator.getConfigCmdOutput("interface vlan?");
    }catch(error){
        var respOutput = error.errorResponse;
        if(respOutput == "Vlan"){
                  check = true;
          return check;
        } else {
          return check;
        }
    }
}

function isIPSEnableForDevice(liceUid) {
  //consoleLogMethodDetailsStart("performChecks.js", "isIPSEnableForDevice()");
  try {
    var found = true;
    resp = liceUid;
    licenseSplit = resp.split("\n");
    for (var i = 1; i < licenseSplit.length; i++) {
      var licenseDetails = licenseSplit[i].split(/\s+/);
       var startReg=new RegExp('^' + nanoPID+"-4X".trim(), 'i');
      if ((licenseDetails[1].trim() == "CISCO414R-K9") || (startReg.test(licenseDetails[1].trim()))) {
        found = false;
        break;
      }
    }
    //consoleLogMethodDetailsEnd("performChecks.js", "isIPSEnableForDevice()");
    return found;
  } catch (error) {
    //consoleLogMethodDetailsEndWithError("performChecks.js", "isIPSEnableForDevice()",error);
    return found;
  }
}

function check860device(versionCheckOutput) {
  //consoleLogMethodDetailsStart("performChecks.js", "check860device()");
  //code
  var platformType;
  if (clubbedCLIOutputAvailable && versionCheckOutput != null) {
    platformType = deviceCommunicator.getPlatformTypeFromShowVersionOutput(versionCheckOutput);
  }
  else {
    platformType = deviceCommunicator.getPlatformType();
  }

  var returnValue;
  if ((iosimage.toLowerCase().indexOf("k9") > -1 && iosVersion < 15.5) && (platformType.indexOf('867') != -1 || platformType.indexOf('866') != -1)) {
    returnValue = "staticNatEnable";
  } else if ((iosimage.toLowerCase().indexOf("k9") > -1 && iosVersion >= 15.5) && (platformType.indexOf('867') != -1 || platformType.indexOf('866') != -1)) {
    zoneCheck = checkZone();
    returnValue = "SecurityEnable";
  } else {
    returnValue = "nothing";
  }
  //consoleLogMethodDetailsEnd("performChecks.js", "check860device()");
  return returnValue;

}

function checkZone(shZoneSecurityCLIOutput) {
  //consoleLogMethodDetailsStart("performChecks.js", "checkZone()");
  var checkZoneReturnValue = false;
  try {
    var reg = new RegExp("[,\\n]");
    var cliOutputcheck;
    //if (clubbedCLIOutputAvailable &&  shZoneSecurityCLIOutput!= null) {
    //  cliOutputcheck = shZoneSecurityCLIOutput;
    //}
    //else {
      cliOutputcheck = deviceCommunicator.getExecCmdOutput("show zone security");
    //}
    var rowscheck = cliOutputcheck.split(reg);
    var countzone = 0;

    for (var i = 0; i < rowscheck.length; i++) {
      if (rowscheck[i].indexOf("zone WAN") > -1 || rowscheck[i].indexOf("zone VPN") > -1 || rowscheck[i].indexOf("zone DMZ") > -1 || rowscheck[i].indexOf("zone LAN") > -1) {

        countzone = countzone + 1;

      }
    }

    cliOutputcheckflowrecord = deviceCommunicator.getExecCmdOutput("show flow record nbar-appmon");
    cliOutputcheckflowmoniter = deviceCommunicator.getExecCmdOutput("show flow monitor application-mon");
    //consoleLogMethodDetailsEnd("performChecks.js", "checkZone()");
    if (countzone >= 4) {
      checkZoneReturnValue = true;
    } else {
      checkZoneReturnValue = false;
    }
  } catch (error) {
    //consoleLogMethodDetailsEndWithError("performChecks.js", "checkZone()",error);
    checkZoneReturnValue = false;
  }
  return checkZoneReturnValue;
}
function checkSecurityLicense() {
  //consoleLogMethodDetailsStart("performChecks.js", "checkSecurityLicense()");
  var checkSecurityLicenseReturnValue = false;

  try {
    var found = false;

    //if (clubbedCLIOutputAvailable &&  shLicFeatureOutput!= null) {
    //  resp = shLicFeatureOutput;
    //}
    //else {
      resp = deviceCommunicator.getExecCmdOutput("show license feature");
    //}

    licenseSplit = resp.split("\n");
    for (var i = 1; i < licenseSplit.length; i++) {
      var licenseDetails = licenseSplit[i].split(/\s+/);
      if ((licenseDetails[0].trim()=="securityk9" && licenseDetails[4].trim().toLowerCase()=="yes") ||(licenseDetails[0].trim()=="seclitek9" && licenseDetails[4].trim().toLowerCase()=="yes") || (licenseDetails[0].trim()=="advipservices" && licenseDetails[4].trim().toLowerCase()=="yes") || (licenseDetails[0].trim()=="advsecurity" && licenseDetails[4].trim().toLowerCase()=="yes")) {
            found=true;
            if(licenseDetails[0].trim()=="advsecurity" && licenseDetails[4].trim().toLowerCase()=="yes"){
                advsecurity=true;
            }
            if((licenseDetails[0].trim()=="advipservices" && licenseDetails[4].trim().toLowerCase()=="yes")){
                advipservices=true;
            }
        break;
      }
    }

    //consoleLogMethodDetailsEnd("performChecks.js", "checkSecurityLicense()");
    if (found && iosVersion > 15.4) {
      checkSecurityLicenseReturnValue = true; }
    else {
      checkSecurityLicenseReturnValue = false; }
  }
  catch (error) {
    checkSecurityLicenseReturnValue = false;
  }
  return checkSecurityLicenseReturnValue;
}

function initializePreferenceToolTips(){
    //consoleLogMethodDetailsStart("performChecks.js", "initializePreferenceToolTips()");
    $('#analysisTitle').siblings( ".fa-question-circle" ).tooltip({items: "em", content: $.i18n.prop("analysisDesc"), track: true, tooltipClass: 'tooltipNano'});
    $('#ipsFeatureSupportTitle').siblings( ".fa-question-circle" ).tooltip({items: "em", content: $.i18n.prop("ipsFeatureSupportDesc"), track: true, tooltipClass: 'tooltipNano'});
    $('#recSecSettingsTitle').siblings( ".fa-question-circle" ).tooltip({items: "em", content: $.i18n.prop("ciscoRecomSettings"), track: true, tooltipClass: 'tooltipNano'});
    $('#updateTitle').siblings( ".fa-question-circle" ).tooltip({items: "em", content: $.i18n.prop("updateDesc"), track: true, tooltipClass: 'tooltipNano'});
    $('#logsTitle').siblings( ".fa-question-circle" ).tooltip({items: "em", content: $.i18n.prop("logsDesc"), track: true, tooltipClass: 'tooltipNano'});
    //consoleLogMethodDetailsEnd("performChecks.js", "initializePreferenceToolTips()");
}

function loadPreferences(){
    //consoleLogMethodDetailsStart("performChecks.js", "loadPreferences()");
    if (languageLocaleCCPExpress == "ja" && !securityNotEnabled) {
          $('#ipsJapDisable').show();
    }
    var securitySettingsEnabled = true, secSetCmdOuput, tempHolder;
    secSetCmdOuput = deviceCommunicator.getExecCmdOutput("show run | i service password-encryption");
    if (secSetCmdOuput!= null && secSetCmdOuput != undefined && secSetCmdOuput != "") {
      var commandOutputArray =secSetCmdOuput.split(/\s+/);
      if (commandOutputArray[0] == "no") {
        securitySettingsEnabled = false;
      }
      else {
        securitySettingsEnabled = true;
      }
    } else
    {
      securitySettingsEnabled = false;
    }
    
    preferences=deviceCommunicator.getCommandsForCache("../preferences.JSON");
    if (preferences!=null && preferences!=undefined) {
        if (preferences.analytics) {
            $('#analyticsCheck').prop("checked",true);
        }else{
            $('#analyticsCheck').prop("checked",false);
        }
        if (preferences.japIPSEnable) {
            $('#ipsFeatureJapDisableCheck').prop("checked",true);
                        if (languageLocaleCCPExpress == "ja") {
                          ipsTabHide = false;
                        }
        }else{
            $('#ipsFeatureJapDisableCheck').prop("checked",false);
                        if (languageLocaleCCPExpress == "ja") {
                          ipsTabHide = true;
                        }
        }

        if (securitySettingsEnabled && preferences.recmndSecrtySettings) {
            $('#recommmendedSecuritySettingsCheck').prop("checked",true);
        } else if (securitySettingsEnabled) {
            $('#recommmendedSecuritySettingsCheck').prop("checked",true);
        }
        else{
            $('#recommmendedSecuritySettingsCheck').prop("checked",false);
        }

        if (preferences.updates) {
            $('#updatesCheck').prop("checked",true);
        }else{
            $('#updatesCheck').prop("checked",false);
        }
        if (preferences.logs) {
            $('#logsCheck').prop("checked",true);
        }else{
            $('#logsCheck').prop("checked",false);
        }
    }else{
            $('#analyticsCheck').prop("checked",false);
            $('#ipsFeatureJapDisableCheck').prop("checked", false);
            $('#recommmendedSecuritySettingsCheck').prop("checked", false);
            $('#updatesCheck').prop("checked",false);
            $('#logsCheck').prop("checked",false);
    }
    $('#logsOption').hide();
    //consoleLogMethodDetailsEnd("performChecks.js", "loadPreferences()");
}

function getChangedPreferences(analyticsOpened){
    var json="";
    if (preferences!=null && preferences!=undefined) {
        if ($('#analyticsCheck').is(':checked')) {
            preferences.analytics=true;
        }else{
            preferences.analytics=false;
        }
        if ($('#ipsFeatureJapDisableCheck').is(':checked')) {
            preferences.japIPSEnable=true;
                        if (languageLocaleCCPExpress == "ja") {
                          ipsTabHide = false;
                        }
        }else{
                  console.log("japIPSEnable to false in getChangedPreferences");
            preferences.japIPSEnable=false;
                        if (languageLocaleCCPExpress == "ja") {
                          ipsTabHide = true;
                        }
        }

        if ($('#recommmendedSecuritySettingsCheck').is(':checked')) {
            preferences.recmndSecrtySettings=true;
        }else{
            preferences.recmndSecrtySettings=false;
        }

        if ($('#updatesCheck').is(':checked')) {
            preferences.updates=true;
        }else{
            preferences.updates=false;
        }
        if ($('#logsCheck').is(':checked')) {
            preferences.logs=true;
        }else{
            preferences.logs=false;
        }
        if (analyticsOpened) {
            preferences.analyticsOpened=true;
        }
        json='{\\"analytics\\":'+preferences.analytics+',\\"japIPSEnable\\":'+preferences.japIPSEnable+',\\"recmndSecrtySettings\\":'+preferences.recmndSecrtySettings+',\\"updates\\":'+preferences.updates+',\\"logs\\":'+preferences.logs+',\\"analyticsOpened\\":'+preferences.analyticsOpened+'}';
    }else{

        json='{\\"analytics\\":false,\\"japIPSEnable\\":false,\\"recmndSecrtySettings\\":false,\\"updates\\":false,\\"logs\\":false,\\"analyticsOpened\\":false}';
    }
    return json;
}

function checkPreferencesChange(){
    var flag=false;
    if ($('#analyticsCheck').is(':checked') != preferences.analytics) {
            flag=true;
    }
    else if ($('#ipsFeatureJapDisableCheck').is(':checked') != preferences.japIPSEnable) {
            flag=true;
    }
    else if ($('#recommmendedSecuritySettingsCheck').is(':checked') != preferences.recmndSecrtySettings) {
            flag=true;
    }
    else if ($('#updatesCheck').is(':checked') != preferences.updates) {
            flag=true;
    }
    else if ($('#logsCheck').is(':checked') != preferences.logs) {
            flag=true;
    }
    return flag;
}

function storePreferences(json){
    //consoleLogMethodDetailsStart("performChecks.js", "loadPreferences()");
    var fileLoc=deviceCommunicator.getInstallDir();
    if (fileLoc.slice(-1)!="/"){
        fileLoc=fileLoc+"/";}

    /*var EMScript='event manager applet storePreferences\n'+
             'event none sync yes\n'+
             'action 1 file open LOG '+fileLoc+'preferences.JSON w+\n'+
             'action 2 file puts LOG "'+json+'"\n'+
             'action 3 file close LOG\n';
    var runScript='event manager run storePreferences\n';
    var deleteScript='no event manager applet storePreferences';
    deviceCommunicator.getConfigCmdOutput(EMScript);
    deviceCommunicator.getExecCmdOutput(runScript);
    deviceCommunicator.getConfigCmdOutput(deleteScript);*/
    var messagePost = [{
        "name": "preferences",
        "fileLoc": fileLoc,
        "json": json
    }];
    worker.postMessage(JSON.stringify(messagePost));
    worker.onmessage = function(event) {
        var resp = JSON.parse(event.data);
        if (resp[0]['cliName'] == "deleteEM") {
            loadPreferences();
            worker.terminate();
        }
    };

    //consoleLogMethodDetailsEnd("performChecks.js", "loadPreferences()");
}


//On window loaded
window.onload=function(){
    setTimeout(function(){
        if (!preferences.analyticsOpened) {
            worker = new Worker('../js/settingsWorker.js');
            $("#googleAnalytics").dialog("open");
        }
    },2000);

}

/***********************To do Internationalization***********************************/


$(document).ready(function() {
  $('#topnav-10').hide();
  $('#topnav-11').hide();
  languageName();
  languageLocaleCCPExpress = $.i18n.prop("langwage");
  if (languageLocaleCCPExpress == "ja") {
    ipsTabHide = true;
  }


  loadccpExpressLanguages();
  $("#ccpHome").removeClass("backgroundColor");
  $('#ccpHome').show();
  $('.bubble').hide();
  $('#maincontent').show();
  var oneTimeUsers = [],
    NonOneTimeUsers = 0;
  oneTimeUsers = getOneTimeUsers();
  var xml;
  //var interfaceType, visible = false; $("#mainFadeInbox").hide().slideDown();

  var arrval = [], ccpexpVersion;
  if (ccpExpressVersionValue!= "ccpexpressTextversion") {
    ccpexpVersion = ccpExpressVersionValue;
  } else {
    readVal = deviceCommunicator.readFromTemplate("version.txt", arrval, true);
    versionText = readVal.split(/\s+/);
    ccpexpVersion = versionText[2];
  }
  //$('.popUpMenuVersion').text(($.i18n.prop("version") + " " + ccpexpVersion));
  $('#versionText').text($.i18n.prop("version"));
  $('#versionNoText').text(ccpexpVersion);


  licenseCheck = checkSecurityLicense();
  if (!licenseCheck) {
    iosk9check = check860device(showVerionOutput);
    if (iosk9check == "SecurityEnable" || iosk9check == "staticNatEnable") {
      //code
      $('#topnav-11').show();
    } else {
      $('#topnav-11').hide();
      securityNotEnabled = true;
    }
  }
  else {
    $('#topnav-11').show();
  }
  var licenseUid = "";
  try {

    //if (clubbedCLIOutputAvailable) {
    //  licenseUid = clubbedCLIOutputArray[4];
    //}
    //else {
      licenseUid = deviceCommunicator.getExecCmdOutput("show license udi");
    //}


    isNano = checkForNanoDevice(licenseUid);
    isEnableIPS = isIPSEnableForDevice(licenseUid);
    isVlanEnable = isVlanCheckEnable();
    //dmvpnHubEnableFlag=false;
    //dmvpnSpokeEnableFlag = false;
    dmvpnHubEnableFlag=isDmvpnHubEnabledForDevice(licenseUid);
    dmvpnSpokeEnableFlag = isDmvpnSpokeEnabledForDevice(licenseUid);
  } catch (error) {
    licenseUid = "";
  }

  $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());
  if ($.browser.chrome) {
    $('ul#topnav li').find('a').each(function() {
      //$(this).css("z-index","1");
    });
  }

  /*$("#feedback").hover(function() {
    $("#display").slideDown(500);
  }, function() {
    $("#display").slideUp();
  });*/
  $('#moreMenuOptionsMain').click(function(){
    $('.popUpMenuDiv').fadeToggle("fast",function() {
    $(this).css("overflow","visible");
    });
  });

  $('#runningConfigDownload').click(function(){
          var cli=getRunningConfigOutput();
          //Based on Japanese team feedback during demo, the file name should be in English
          //createConfig(cli,runningConfigDownloadFile(true),".txt");
          createConfig(cli,"RunningConfigBackup",".txt");
  });

  $('body').click(function(e){
    var target = $(e.target).parent();
    if ($(this).find('#moreMenuOptionsMain').length>0 && !$('.popUpMenuDivMain').is(':hidden') && !target.is('a#moreMenuOptionsMain') && target.parents('.popUpMenuDivMain').length==0 && !target.is('.popUpMenuDiv')) {
        $('.popUpMenuDiv').fadeToggle();
    }
    if ($(this).find('#moreMenuOptions').length>0 && !$('.popUpMenuDiv').is(':hidden') && !target.is('a#moreMenuOptions') && target.parents('.popUpMenuDiv').length==0 && !target.is('.popUpMenuDiv')) {
        $('.popUpMenuDiv').fadeToggle();
    }
  });
  $('.popUpMenuItemMain').click(function(){
    $('.popUpMenuDiv').fadeToggle();
    if ($(this).attr("data")=="upgrade") {
    var loc=window.location.href.toString();
    var splitLoc=loc.split("/html/");
    window.location.replace(splitLoc[0]+"/html/frames.html?feature=upgradeCCP");
    }else if ($(this).attr("data")=="updateIOS") {
    var loc=window.location.href.toString();
    var splitLoc=loc.split("/html/");
    window.location.replace(splitLoc[0]+"/html/frames.html?feature=upgradeIOS");
    }else if ($(this).attr("data")=="feedback") {
    window.open("https://www.ciscofeedback.vovici.com/se.ashx?s=6A5348A77E0CDC49");
    }else if ($(this).attr("data")=="help") {
    window.open("http://www.cisco.com/c/en/us/td/docs/net_mgmt/cisco_configuration_professional_express/v3_3/guides/featureguide/ccp_express_Feature_Guide.html");
    }else if ($(this).attr("data")=="caa") {
    var loc=window.location.href.toString();
    var splitLoc=loc.split("/html/");
    window.location.replace(splitLoc[0]+"/html/frames.html?feature=phonehome");
    }else if ($(this).attr("data")=="preference") {
    $('#preferencesDialog').dialog("open");
    worker = new Worker('../js/settingsWorker.js');
    }else if ($(this).attr("data")=="reset") {
    var loc=window.location.href.toString();
    var splitLoc=loc.split("/html/");
    window.location.replace(splitLoc[0]+"/html/frames.html?feature=reset");
    }
    });

    if (clubbedCLIOutputAvailable) {
      xml = clubbedCLIOutputArray[5];
    }
    else {
      xml = deviceCommunicator.getExecCmdOutput("show ip interface brief");
    }



  if (xml.toLowerCase().indexOf('wlan') !== -1 || xml.toLowerCase().indexOf('wlan') !== -1) {
    $('#topnav-10').show();
  }
  loadPreferences();
  initializePreferenceToolTips();
  $("#preferencesDialog").dialog({
    autoOpen: false,
    height: 490,
    width: 675,
    modal: true,
    buttons: [{
        text: $.i18n.prop("ok"),
        click: function() {
          $(this).dialog("close");
        }
      }],
    close: function() {
      var check=checkPreferencesChange();
      if (check) {
        var json=getChangedPreferences();
        storePreferences(json);
        if (ipsTabHide) {
          $("#ipsTab").hide();
          var activeTabIdx = $("#utmTabs").tabs("option","active");
          if(activeTabIdx != null && activeTabIdx != undefined)
          {
            var selector = '#utmTabs > ul > li';
            var activeTab = $(selector).eq(activeTabIdx).attr('id');
            if(activeTab != null && activeTab != undefined && activeTab == 'ipsTab')
            {
              $('#zonesTabTitle').trigger('click');
            }
          }
        } else {
          $("#ipsTab").show();
        }
        //Store the Cisco recommended settings
        if ($('#recommmendedSecuritySettingsCheck').is(':checked')) {
          deviceCommunicator.getConfigCmdOutput("service password-encryption");
        } else {
          deviceCommunicator.getConfigCmdOutput("no service password-encryption");
        }
      }else{
        worker.terminate();
      }
    }
  });

  $("#googleAnalytics").dialog({
    autoOpen: false,
    height: 490,
    width: 675,
    modal: true,
    buttons: [{
        text: $.i18n.prop("yes"),
        click: function() {
      $('#analyticsCheck').prop('checked',true);
          getGATrackCode();
          $(this).dialog("close");
        }}, {
        text: $.i18n.prop("no"),
        click: function() {
      $('#analyticsCheck').prop('checked',false);
          $(this).dialog("close");
        }
      }],
    close: function() {
      var json=getChangedPreferences(true);
      storePreferences(json);
      if (ipsTabHide) {
        $("#ipsTab").hide();
      } else {
        $("#ipsTab").show();
      }
    }
  });
  if (preferences.analytics) {
    getGATrackCode();
  }

  if (oneTimeUsers.length > 0) {
    //loadjscssfile("../external/jQueryFramework.js", "js");
    loadjscssfile("../js/ccpExpressValidation.js", "js");

    $("#oneTimeUSer-dialogForm").dialog({
      autoOpen: false,
      modal: true,
      height: 330,
      width: 550,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            if ($('#oneTimeUserForm').valid()) {
              $("#oneTimeUSer-dialogForm").dialog("close");
              setTimeout(function() {
                var arr, response, editUsername;
                arr = $('#oneTimeUserForm').formToArray();
                try {

                  if (oneTimeUsers[NonOneTimeUsers].encrypt === true) {
                    response = deviceCommunicator.configureCommandsFromTemplate("userSecretCreate.txt", arr, false);
                  } else {
                    response = deviceCommunicator.configureCommandsFromTemplate("userPasswordCreate.txt", arr, false);
                  }
                  arr = [];
                  editUsername = oneTimeUsers[NonOneTimeUsers].userName;
                  arr.push({name: "username", value: editUsername});
                  response = deviceCommunicator.configureCommandsFromTemplate("userFormDelete.txt", arr, false);
                  NonOneTimeUsers = NonOneTimeUsers + 1;
                  if (NonOneTimeUsers < oneTimeUsers.length) {
                    $('#oneTimeUserInfo').remove();
                    $('#oneTimeUSer-dialogForm').empty();
                    showOneTimeUser(NonOneTimeUsers, oneTimeUsers);
                  } else {

                    deviceCommunicator.doWriteMemory();
                  }
                } catch (error) {
                  $('#oneTimeUserErrorMessage').html(error.errorResponse);
                  $('#oneTimeUserError').show();
                  $("#oneTimeUSer-dialogForm").dialog("open");
                  return false;
                }
              }, 100);
            }
          }
        }],
      close: function() {
        $("#oneTimeUSer-dialogForm").dialog("close");
      }

    });
    showOneTimeUser(0, oneTimeUsers);
    $('#oneTimeUserInput').keyup(function() {
      var newUserName = $(this).val().toLowerCase();
      newUserName = newUserName.trim("");
      $.validator.addClassRules({
        changeUser: {changeUsername: true}
      });
      $.validator.addMethod("changeUsername", function(value, element) {
        return (!(newUserName === oneTimeUsers[NonOneTimeUsers].userName));
      }, "Please change username");

    }).keyup();

    validatorUser = $('#oneTimeUserForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });


  }

  /**
   * Animations for landing page start.
   * The variable needLandingPageAnimation should be true for the animations to enable.
   */

  /**
   * The class fa-spin should be changed to fa-pulse when font awesome 4.3.0 or higher is incorporated.
   */
  var animClassName = 'fa-pulse';
  $("#topnav-7").hover(
    function() {
      if (needLandingPageAnimation) {
        $(this).find("em").addClass(animClassName);
      }
    },
    function() {
      if (needLandingPageAnimation) {
        $(this).find("em").removeClass(animClassName);
      }
    }
  );

  /*
   $("#topnav-8").mouseover(function() {
   if (needLandingPageAnimation) {
   $(this).find("em").addClass('fa-spin');
   }
   }).mouseout(function() {
   if (needLandingPageAnimation) {
   $(this).find("em").removeClass('fa-spin');
   }
   });
   */

   /*
  var anycliFAClass = $("#topnav-8").find("em");
  var anycliFAIconAnim = false, anycliFAIAnimationRunning = false;
  $("#topnav-8").hover(
    function() {
      if (needLandingPageAnimation) {
        if (anycliFAIconAnim === false)
        {
          anycliFAIAnimationRunning = true;

          anycliFAClass.css('font-size', '20px');
          anycliFAClass.css('padding-top', '28px');
          anycliFAIconAnim =
            setInterval(function() {
              if (anycliFAIAnimationRunning)
              {
                anycliFAClass.css('font-size', '48px');
                anycliFAClass.css('padding-top', '0px');
              }
              setTimeout(function() {
                if (anycliFAIAnimationRunning)
                {
                  anycliFAClass.css('font-size', '20px');
                  anycliFAClass.css('padding-top', '28px');
                }
              }, 300)
            }, 600
              );
        }
      }
    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(anycliFAIconAnim);
        anycliFAIconAnim = false;
        anycliFAIAnimationRunning = false;
        setTimeout(function() {
          anycliFAClass.css('font-size', '48px');
          anycliFAClass.css('padding-top', '0px');
        }, 100);

      }
    }
  );
*/

  /**
   * The above animation for topnav-8 was replaced by below icon animation after the ICON is changed to fa-terminal
   */


   var anycliFAClass = $("#topnav-8").find("em");
   var anycliFAIconAnim = false, anycliFAIAnimationRunning = false;
   $("#topnav-8").hover(
   function() {
   if (needLandingPageAnimation &&
       anycliFAIconAnim === false)
   {
   anycliFAIAnimationRunning = true;
   //anycliFAClass.toggleClass('fa-angle-right fa-terminal');
   anycliFAIconAnim =
   setInterval(function(){
   ////consoleLog(Date()+"started toggling");
   if (anycliFAIAnimationRunning) {
   anycliFAClass.toggleClass('fa-angle-right fa-terminal');
   }

   setTimeout(function(){

   if (anycliFAIAnimationRunning) {
   anycliFAClass.toggleClass('fa-angle-right fa-terminal');
   }
   ////consoleLog(Date()+"just toggling");
   },300)
   },600
   );

   }
   },
   function() {
   if (needLandingPageAnimation) {
   clearInterval(anycliFAIconAnim);
   anycliFAIconAnim = false;
   anycliFAIAnimationRunning = false;
   setTimeout(function(){
   if (anycliFAClass.hasClass('fa-angle-right')) {
   ////consoleLog(anycliFAClass.parent().html());
   anycliFAClass.toggleClass('fa-angle-right fa-terminal');
   ////consoleLog(anycliFAClass.parent().html());
   ////consoleLog("toggling final");
   }
   },100);
   }
   }
   );


  var stRouteFAClass = $("#topnav-4").find("em");
  var stRouteFAIconAnim = false, stRouteFAIAnimationRunning = false;
  $("#topnav-4").hover(
    function() {
      if (needLandingPageAnimation &&
          stRouteFAIconAnim === false)
        {
          stRouteFAIAnimationRunning = true;
          stRouteFAClass.addClass('fa-flip-vertical');
          stRouteFAIconAnim =
            setInterval(
              function() {
                if (stRouteFAIAnimationRunning)
                {
                  stRouteFAClass.removeClass('fa-flip-vertical');
                }
                setTimeout(function() {
                  if (stRouteFAIAnimationRunning)
                  {
                    stRouteFAClass.addClass('fa-flip-vertical');
                  }
                }, 300)
              }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(stRouteFAIconAnim);
        stRouteFAIconAnim = false;
        stRouteFAIAnimationRunning = false;
        setTimeout(function() {
          if (stRouteFAClass.hasClass('fa-flip-vertical')) {
            ////consoleLog(stRouteFAClass.parent().html());
            stRouteFAClass.removeClass('fa-flip-vertical');
            ////consoleLog(stRouteFAClass.parent().html());
            ////consoleLog("toggling final");
          }
        }, 100);
      }
    }
  );
  
  var aclFAClass = $("#topnav-13").find("em");
  var aclFAIconAnim = false, aclFAIAnimationRunning = false;
  $("#topnav-13").hover(
    function() {
      if (needLandingPageAnimation &&
          aclFAIconAnim === false)
        {
          aclFAIAnimationRunning = true;
          aclFAClass.addClass('fa-unlock');
          aclFAIconAnim =
            setInterval(
              function() {
                if (aclFAIAnimationRunning)
                {
                  aclFAClass.removeClass('fa-unlock');
                }
                setTimeout(function() {
                  if (aclFAIAnimationRunning)
                  {
                    aclFAClass.addClass('fa-unlock');
                  }
                }, 300)
              }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(aclFAIconAnim);
        aclFAIconAnim = false;
        aclFAIAnimationRunning = false;
        setTimeout(function() {
          if (aclFAClass.hasClass('fa-unlock')) {
            ////consoleLog(stRouteFAClass.parent().html());
            aclFAClass.removeClass('fa-unlock');
            ////consoleLog(stRouteFAClass.parent().html());
            ////consoleLog("toggling final");
          }
        }, 100);
      }
    }
  );

  var wizardFAClass = $("#topnav-12").find("em");
  var wizardFAIconAnim = false, wizardFAIAnimationRunning = false;
  $("#topnav-12").hover(
    function() {
      if (needLandingPageAnimation &&
          wizardFAIconAnim === false)
        {
          wizardFAIAnimationRunning = true;
          //wizardFAClass.toggleClass('fa-forward fa-fast-forward');
          wizardFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (wizardFAIAnimationRunning) {
                wizardFAClass.toggleClass('fa-forward fa-fast-forward');
              }

              setTimeout(function() {

                if (wizardFAIAnimationRunning) {
                  wizardFAClass.toggleClass('fa-forward fa-fast-forward');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(wizardFAIconAnim);
        wizardFAIconAnim = false;
        wizardFAIAnimationRunning = false;
        setTimeout(function() {
          if (wizardFAClass.hasClass('fa-forward')) {
            ////consoleLog(wizardFAClass.parent().html());
            wizardFAClass.toggleClass('fa-fast-forward fa-forward');
            ////consoleLog(wizardFAClass.parent().html());
            ////consoleLog(Date()+"toggling final");
          }
        }, 100);
      }
    }
  );


  var caaFAClass = $("#topnav-9").find("em");
  var caaFAIconAnim = false, caaFAIAnimationRunning = false;
  $("#topnav-9").hover(
    function() {
      if (needLandingPageAnimation &&
          caaFAIconAnim === false)
        {
          caaFAIAnimationRunning = true;
          //caaFAClass.toggleClass('fa-cloud fa-cloud-upload');
          caaFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (caaFAIAnimationRunning) {
                caaFAClass.toggleClass('fa-cloud fa-cloud-upload');
              }

              setTimeout(function() {

                if (caaFAIAnimationRunning) {
                  caaFAClass.toggleClass('fa-cloud fa-cloud-upload');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(caaFAIconAnim);
        caaFAIconAnim = false;
        caaFAIAnimationRunning = false;
        setTimeout(function() {
          if (caaFAClass.hasClass('fa-cloud')) {
            ////consoleLog(caaFAClass.parent().html());
            caaFAClass.toggleClass('fa-cloud fa-cloud-upload');
            ////consoleLog(caaFAClass.parent().html());
            ////consoleLog("toggling final");
          }
        }, 100);
      }
    }
  );

  var identityFAClass = $("#topnav-3").find("em");
  var identityFAIconAnim = false, identityFAIAnimationRunning = false;
  $("#topnav-3").hover(
    function() {
      if (needLandingPageAnimation &&
          identityFAIconAnim === false)
        {
          identityFAIAnimationRunning = true;
          identityFAClass.toggleClass('fa-users fa-user-plus');
          identityFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (identityFAIAnimationRunning) {
                identityFAClass.toggleClass('fa-users fa-user-plus');
              }

              setTimeout(function() {

                if (identityFAIAnimationRunning) {
                  identityFAClass.toggleClass('fa-users fa-user-plus');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(identityFAIconAnim);
        identityFAIconAnim = false;
        identityFAIAnimationRunning = false;
        setTimeout(function() {
          if (identityFAClass.hasClass('fa-user-plus')) {
            ////consoleLog(identityFAClass.parent().html());
            identityFAClass.toggleClass('fa-users fa-user-plus');
            ////consoleLog(identityFAClass.parent().html());
            ////consoleLog("toggling final");
          }
        }, 100);
      }
    }
  );

  var dhcpdnsFAClass = $("#topnav-2").find("em");
  var dhcpdnsFAIconAnim = false, dhcpdnsFAIAnimationRunning = false;
  $("#topnav-2").hover(
    function() {
      if (needLandingPageAnimation &&
          dhcpdnsFAIconAnim === false)
        {
          dhcpdnsFAIAnimationRunning = true;
          //dhcpdnsFAClass.toggleClass('fa-folder fa-folder-open');
          dhcpdnsFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (dhcpdnsFAIAnimationRunning) {
                dhcpdnsFAClass.toggleClass('fa-cog fa-cogs');
              }

              setTimeout(function() {

                if (dhcpdnsFAIAnimationRunning) {
                  dhcpdnsFAClass.toggleClass('fa-cog fa-cogs');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(dhcpdnsFAIconAnim);
        dhcpdnsFAIconAnim = false;
        dhcpdnsFAIAnimationRunning = false;
        setTimeout(function() {
          if (dhcpdnsFAClass.hasClass('fa-folder')) {
            ////consoleLog(dhcpdnsFAClass.parent().html());
            dhcpdnsFAClass.toggleClass('fa-folder fa-folder-open');
            ////consoleLog(dhcpdnsFAClass.parent().html());
            ////consoleLog("toggling final");
          }
        }, 100);
      }
    }
  );


  var securityFAClass = $("#topnav-11").find("em");
  var securityFAIconAnim = false, securityFAIAnimationRunning = false;
  $("#topnav-11").hover(
    function() {
      if (needLandingPageAnimation &&
          securityFAIconAnim === false)
        {
          securityFAIAnimationRunning = true;
          //securityFAClass.addClass('fa-flip-horizontal');
          securityFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (securityFAIAnimationRunning) {
                securityFAClass.addClass('fa-flip-horizontal');
              }

              setTimeout(function() {

                if (securityFAIAnimationRunning) {
                  securityFAClass.removeClass('fa-flip-horizontal');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(securityFAIconAnim);
        securityFAIconAnim = false;
        securityFAIAnimationRunning = false;
        setTimeout(function() {
          securityFAClass.removeClass('fa-flip-horizontal');
        }, 100);
      }
    }
  );


  var dashboardFAClass = $("#topnav-5").find("em");
  var dashboardFAIconAnim = false, dashboardFAIAnimationRunning = false;
  $("#topnav-5").hover(
    function() {
      if (needLandingPageAnimation &&
          dashboardFAIconAnim === false)
        {
          dashboardFAIAnimationRunning = true;
          //dashboardFAClass.addClass('fa-flip-horizontal');
          dashboardFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (dashboardFAIAnimationRunning) {
                dashboardFAClass.addClass('fa-flip-horizontal');
              }

              setTimeout(function() {

                if (dashboardFAIAnimationRunning) {
                  dashboardFAClass.removeClass('fa-flip-horizontal');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(dashboardFAIconAnim);
        dashboardFAIconAnim = false;
        dashboardFAIAnimationRunning = false;
        setTimeout(function() {
          dashboardFAClass.removeClass('fa-flip-horizontal');
        }, 100);
      }
    }
  );

  var interfaceFAClass = $("#topnav-1").find("em");
  var interfaceFAIconAnim = false, interfaceFAIAnimationRunning = false;
  $("#topnav-1").hover(
    function() {
      if (needLandingPageAnimation &&
          interfaceFAIconAnim === false)
        {
          interfaceFAIAnimationRunning = true;
          interfaceFAClass.css('color', '#fff');
          interfaceFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (interfaceFAIAnimationRunning) {
                interfaceFAClass.css('color', '#198fc4');
              }

              setTimeout(function() {

                if (interfaceFAIAnimationRunning) {
                  interfaceFAClass.css('color', '#fff');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(interfaceFAIconAnim);
        interfaceFAIconAnim = false;
        interfaceFAIAnimationRunning = false;
        setTimeout(function() {
          interfaceFAClass.css('color', '#5c5c5c');
        }, 100);
      }
    }
  );

/* PnP will be hidden as its EoL. Commenting out the code for PnP Logo Animation */

/*
  var pnpFAClass = $("#topnav-6").find("em");
  var pnpFAIconAnim = false, pnpFAIAnimationRunning = false;
  $("#topnav-6").hover(
    function() {
      if (needLandingPageAnimation &&
          pnpFAIconAnim === false)
        {
          pnpFAIAnimationRunning = true;
          pnpFAClass.css('color', '#fff');
          pnpFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (pnpFAIAnimationRunning) {
                pnpFAClass.css('color', '#198fc4');
              }

              setTimeout(function() {

                if (pnpFAIAnimationRunning) {
                  pnpFAClass.css('color', '#fff');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(pnpFAIconAnim);
        pnpFAIconAnim = false;
        pnpFAIAnimationRunning = false;
        setTimeout(function() {
          pnpFAClass.css('color', '#5c5c5c');
        }, 100);
      }
    }
  );
*/
  var wirelessFAClass = $("#topnav-10").find("em");
  var wirelessFAIconAnim = false, wirelessFAIAnimationRunning = false;
  $("#topnav-10").hover(
    function() {
      if (needLandingPageAnimation &&
          wirelessFAIconAnim === false)
        {
          wirelessFAIAnimationRunning = true;

          wirelessFAClass.css('font-size', '36px');
          wirelessFAClass.css('padding-top', '12px');
          wirelessFAIconAnim =
            setInterval(function() {
              if (wirelessFAIAnimationRunning)
              {
                wirelessFAClass.css('font-size', '48px');
                wirelessFAClass.css('padding-top', '0px');
              }
              setTimeout(function() {
                if (wirelessFAIAnimationRunning)
                {
                  wirelessFAClass.css('font-size', '36px');
                  wirelessFAClass.css('padding-top', '12px');
                }
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(wirelessFAIconAnim);
        wirelessFAIconAnim = false;
        wirelessFAIAnimationRunning = false;
        setTimeout(function() {
          wirelessFAClass.css('font-size', '48px');
          wirelessFAClass.css('padding-top', '0px');
        }, 100);

      }
    }
  );


  var qwizFAClass = $("#basictopnav-12").find("em");
  var qwizFAIconAnim = false, qwizFAIAnimationRunning = false;
  $("#basictopnav-12").hover(
    function() {
      if (needLandingPageAnimation &&
          qwizFAIconAnim === false)
        {
          qwizFAIAnimationRunning = true;
          //qwizFAClass.toggleClass('fa-forward fa-fast-forward');
          qwizFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (qwizFAIAnimationRunning) {
                qwizFAClass.toggleClass('fa-forward fa-fast-forward');
              }

              setTimeout(function() {

                if (qwizFAIAnimationRunning) {
                  qwizFAClass.toggleClass('fa-forward fa-fast-forward');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(qwizFAIconAnim);
        qwizFAIconAnim = false;
        qwizFAIAnimationRunning = false;
        setTimeout(function() {
          if (qwizFAClass.hasClass('fa-forward')) {
            ////consoleLog(qwizFAClass.parent().html());
            qwizFAClass.toggleClass('fa-fast-forward fa-forward');
            ////consoleLog(qwizFAClass.parent().html());
            ////consoleLog(Date()+"toggling final");
          }
        }, 100);
      }
    }
  );

  $('#runningConfigBackup').tooltip({
      tooltipClass: "custom-tooltip-styling"
  });

  var advsetupFAClass = $("#basictopnav-13").find("em");
  var advsetupFAIconAnim = false, advsetupFAIAnimationRunning = false;
  $("#basictopnav-13").hover(
    function() {
      if (needLandingPageAnimation &&
          advsetupFAIconAnim === false)
        {
          advsetupFAIAnimationRunning = true;
          //advsetupFAClass.toggleClass('fa-align-justify fa-list');
          advsetupFAIconAnim =
            setInterval(function() {
              ////consoleLog(Date()+"started toggling");
              if (advsetupFAIAnimationRunning) {
                advsetupFAClass.toggleClass('fa-align-justify fa-list');
              }

              setTimeout(function() {

                if (advsetupFAIAnimationRunning) {
                  advsetupFAClass.toggleClass('fa-align-justify fa-list');
                }
                ////consoleLog(Date()+"just toggling");
              }, 300)
            }, 600
              );
        }

    },
    function() {
      if (needLandingPageAnimation) {
        clearInterval(advsetupFAIconAnim);
        advsetupFAIconAnim = false;
        advsetupFAIAnimationRunning = false;
        setTimeout(function() {
          if (advsetupFAClass.hasClass('fa-align-justify')) {
            ////consoleLog(advsetupFAClass.parent().html());
            advsetupFAClass.toggleClass('fa-align-justify fa-list');
            ////consoleLog(advsetupFAClass.parent().html());
            ////consoleLog(Date()+"toggling final");
          }
        }, 100);
      }
    }
  );
});

function getFormattedDate() {
        var date = new Date();
        var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +  date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

        return str;
}

function getHostName(){	
	var hostnameString = deviceCommunicator.getExecCmdOutput("show run | i hostname");
	var hostnameSplit = hostnameString.split(" ");
	var hostname = hostnameSplit[1];
	return hostname;	
}

function getHostIPAddress(){
	var ipAddress = $(location).attr('hostname');
	return ipAddress;
}
function createConfig(configData,fileName,ext){
        // download stuff
            $('#tempDownload').remove();
            var buffer = configData;
			var ipaddress = getHostIPAddress();
			var hostname = getHostName();
			if (hostname !== null || hostname !== undefined || hostname !== ""){
               fileName=fileName+"_"+getFormattedDate()+"_"+hostname+ext;
			}
			else{
			   fileName=fileName+"_"+getFormattedDate()+"_"+ipaddress+ext;
			}
            var blob = new Blob([buffer], {
                "type": "text/plain;charset=utf8;"
            });
            var link = document.createElement("a");
                        // feature detection
            if(link.download !== undefined) {
                // Browsers that support HTML5 download attribute
                link.setAttribute("href", window.URL.createObjectURL(blob));
                link.setAttribute("download", fileName);
            }
            else if(navigator.msSaveBlob) {
                                // IE 10+
                navigator.msSaveBlob(blob, fileName);
            } else {
                // it needs to implement server side export
                //alert($.i18n.prop("dlnotsupbrow"));
            }
            link.innerHTML = "Export";
            link.style.display='none';
                        link.setAttribute("id", "tempDownload");
            document.body.appendChild(link);
                        link.click();
}

function getRunningConfigOutput()
{
  if (!shRunConfigLatest || shRunConfigOutput == null || shRunConfigOutput =="") {
    shRunConfigOutput = deviceCommunicator.getExecCmdOutput("show running-config");
    shRunConfigLatest = true;
  }
  var runConfOutput = shRunConfigOutput;
  return runConfOutput;
}

function isDmvpnSpokeEnabledForDevice(liceUid) {
  //consoleLogMethodDetailsStart("performChecks.js", "isDmvpnSpokeEnabledForDevice()");
  var found = true, licenseSplit;
  try {
    resp = liceUid;
    licenseSplit = resp.split("\n");
    for (var i = 1; i < licenseSplit.length; i++) {
      var licenseDetails = licenseSplit[i].split(/\s+/);
      if (licenseDetails[1] != undefined && licenseDetails[1].trim() == "C841M-4X-JSEC/K9") 
      {
        found = false;
        break;
      }
    }
    //consoleLogMethodDetailsEnd("performChecks.js", "isDmvpnSpokeEnabledForDevice()");
    return found;
  } catch (error) {
    errorLogInConsole("Error in isDmvpnSpokeEnabledForDevice()");
    //consoleLogMethodDetailsEndWithError("performChecks.js", "isDmvpnSpokeEnabledForDevice()",error);
    return found;
  }
}

function isDmvpnHubEnabledForDevice(liceUid) {
  //consoleLogMethodDetailsStart("performChecks.js", "isDmvpnHubEnabledForDevice()");
  var found = true, licenseSplit;
  try {
    resp = liceUid;
    licenseSplit = resp.split("\n");
    for (var i = 1; i < licenseSplit.length; i++) {
      var licenseDetails = licenseSplit[i].split(/\s+/);
      //console.log("Box type is ------->>>"+licenseDetails[1].trim()+"<<<------");
      if (licenseDetails[1] != undefined && licenseDetails[1].trim() == "C841M-4X-JSEC/K9") 
      {
        found = false;
        break;
      }
    }
    //consoleLogMethodDetailsEnd("performChecks.js", "isDmvpnHubEnabledForDevice()");
  } catch (error) {
    errorLogInConsole("Error in isDmvpnHubEnabledForDevice()" + error);
    //consoleLogMethodDetailsEndWithError("performChecks.js", "isDmvpnHubEnabledForDevice()",error);
 }
    return found;
}

function badBrowser() {
  //consoleLogMethodDetailsStart("performChecks.js", "badBrowser()");
  
  //$.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());
  var userAgent = navigator.userAgent.toLowerCase();
  // IE 11 check
  var isIE11 = !!userAgent.match(/trident.*rv\:11\./);
  
  if(userAgent.indexOf('chrome') != -1 && userAgent.indexOf('safari') != -1 && userAgent.indexOf('edge') != -1) { 
    userAgent = userAgent.substring(userAgent.indexOf('edge/') + 5);
    userAgent = userAgent.substring(0,userAgent.indexOf('.'));
	browserVersion = userAgent;
    browserName = "Edge"; 
  } else if (userAgent.indexOf('msie') != -1) {
    userAgent = userAgent.substring(userAgent.indexOf('msie') + 5);
    userAgent = userAgent.substring(0,userAgent.indexOf('.'));	
    browserVersion = userAgent;
    browserName = "Internet Explorer";
  } else if (isIE11) {
    userAgent = userAgent.substring(userAgent.indexOf('rv') + 3);
    userAgent = userAgent.substring(0,userAgent.indexOf('.'));	
    browserVersion = userAgent;
    browserName = "Internet Explorer";
  } else if (userAgent.indexOf('chrome') == -1 && userAgent.indexOf('safari') != -1 && userAgent.indexOf('opr') == -1) {    
    userAgent = userAgent.substring(userAgent.indexOf('safari/') + 8);
    userAgent = userAgent.substring(0, userAgent.indexOf('.'));
    browserVersion = userAgent;
    browserName = "Safari";         
  } else if (userAgent.indexOf('chrome') != -1  && userAgent.indexOf('safari') != -1 && userAgent.indexOf('opr') == -1) {
    userAgent = userAgent.substring(userAgent.indexOf('chrome/') + 7);
    userAgent = userAgent.substring(0, userAgent.indexOf('.'));
    browserVersion = userAgent;
    $.browser.safari = false;
    browserName = "Chrome";
  } else if (userAgent.indexOf('chrome') != -1 && userAgent.indexOf('safari') != -1 && userAgent.indexOf('opr') != -1) {
	userAgent = userAgent.substring(userAgent.indexOf('opr/') + 4);
	userAgent = userAgent.substring(0,userAgent.indexOf('.'));
	browserVersion = userAgent;
	browserName = "Opera";
  } else if (userAgent.indexOf('firefox') != -1) {    
    userAgent = userAgent.substring(userAgent.indexOf('firefox/') + 8);
    userAgent = userAgent.substring(0, userAgent.indexOf('.'));
    browserVersion = userAgent;
    browserName = "Firefox";         
  }
  
  /*
  if ($.browser.chrome) {
    userAgent = userAgent.substring(userAgent.indexOf('chrome/') + 7);
    userAgent = userAgent.substring(0, userAgent.indexOf('.'));
    version = userAgent;
  } else if ($.browser.mozilla) {
    userAgent = userAgent.substring(userAgent.indexOf('firefox/') + 8);
    userAgent = userAgent.substring(0, userAgent.indexOf('.'));
    version = userAgent;
  } else if ($.browser.msie) {
    version = parseInt($.browser.version, 10);
  }*/
  //consoleLogMethodDetailsEnd("performChecks.js", "badBrowser()");
  if (!((browserName == "Chrome" && browserVersion >= 30) || (browserName == "Firefox" && browserVersion >= 25) ||(browserName == "Internet Explorer" && browserVersion >=10))) { 
    return true; 
  }
  return false;
}
function getBadBrowser(c_name)
{
  //consoleLogMethodDetailsStart("performChecks.js", "getBadBrowser()");
  if (document.cookie.length > 0)
  {
    c_start = document.cookie.indexOf(c_name + "=");
    if (c_start != -1)
    {
      c_start = c_start + c_name.length + 1;
      c_end = document.cookie.indexOf(";", c_start);
      if (c_end == -1){
        c_end = document.cookie.length;}
      //consoleLogMethodDetailsEnd("performChecks.js", "getBadBrowser()");
      return unescape(document.cookie.substring(c_start, c_end));
    }
  }
  //consoleLogMethodDetailsEnd("performChecks.js", "getBadBrowser()");
  return "";
}

function setBadBrowser(c_name, value)
{
  document.cookie = c_name + "=" + escape(value);
}
if (badBrowser() && getBadBrowser('browserWarning') != 'seen') {
  $(function() {
    $('.expand-down ul').append('<div  id="browserInfoVer" class="browserInfo"></div>');
    $('#browserInfoVer').append('<p><img src="images/information.png"/><span id="browserInfoVerClose" class="browserInfoClose"></span><span id="browserInfoVerMessage" class="browserInfoMessage"><noscript id="scriptDisable">' + $.i18n.prop("ScriptMessage") + '</noscript></span></p>');
    $('#browserInfoVerMessage').html($.i18n.prop("browserVersion"));
    $('#browserInfoVerClose').html("<a href='#'  id='warningClose'><span class='closeButton' title='" + $.i18n.prop("closeInfoWindow") + "'></span></a>");
    $('#browserInfoVer').show();
    if ($.browser.msie) {
      $('#browserInfoVerClose').css({position: 'absolute', top: 0, left: 487});
    }
    $('#warningClose').click(function() {
      setBadBrowser('browserWarning', 'seen');

      $('#browserInfoVer').hide();
      return false;
    });
  });
}
function versionAlertBox() {
  //consoleLogMethodDetailsStart("performChecks.js", "versionAlertBox()");

  $(function() {
    $('.expand-down ul').append('<div id="iosInfo"  class="browserInfo"></div>');
    $('#iosInfo').append('<p><img src="images/information.png"/><span id="iosInfoClose" class="browserInfoClose"></span><span id="iosInfoMessage" class="browserInfoMessage"><noscript id="scriptDisable">' + $.i18n.prop("ScriptMessage") + ' </noscript></span></p>');
    $('#iosInfoMessage').html($.i18n.prop("routerIOS"));
    $('#iosInfoClose').html("<a href='#'  id='iosClose'><span class='closeButton' title='" + $.i18n.prop("closeInfoWindow") + "'></span></a>");
    $('#iosInfo').show();
    if ($.browser.msie) {
      $('#iosInfoClose').css({position: 'absolute', top: 0, left: 487});
    }
    //consoleLogMethodDetailsEnd("performChecks.js", "versionAlertBox()");
    $('#iosClose').click(function() {

      $('#iosInfo').hide();
      return false;
    });
  });
}
$(document).ready(function() {

  loadAndDisplayValidationMsgs();

  /***************CLASSES that can be added to attain validations on GUI*******************************/

// To validate IPv4 address
  $.validator.addClassRules({
    requiredipv4: {required: true, ipv4: true}
  });

// To validate IPv6 address
  $.validator.addClassRules({
    requiredipv6: {required: true, ipv6: true}
  });

// To validate IPv4 address for DHCP-DNS module
  $.validator.addClassRules({
    notrequiredipv4: {ipv4: true}
  });

// To validate IPv4 Prefix address it validates 0.0.0.0 as well
  $.validator.addClassRules({
    requiredIPv4Prefix: {required: true, validPrefixAddress: true}
  });

// To validate input can be both IPv4 or IPv6 address
  $.validator.addClassRules({
    requiredIPv4IPv6Address: {ipv4oripv6: true}
  });

// To validate Prefix and Prefix Mask values are in sync with each other
  $.validator.addClassRules({
    requiredIPv4PrefixAndPrefixMask: {required: true, validPrefixMaskAddress: true, validPrefixAndPrefixMask: true}
  });
// To validate  IPv4 Subnet Mask values
  $.validator.addClassRules({
    requiredIPv4SubnetMask: {required: true, validPrefixMaskAddress: true}
  });

// To validate Prefix Mask values are within a given range(0-128)
  //$.validator.addClassRules({
  //  requiredIPv6PrefixAndPrefixMask: {required: true, range: [0, 128]}
  //});

  $.validator.addClassRules({
    requiredIPv6PrefixAndPrefixMask: {required: true, validIpv6Range:true}
  });

  $.validator.addClassRules({
    checkVlanIdIsInRange: {required: true, validVLANID1To4094:true}
  });


//To validate Poolname - permitting only ALPHABETS and NUMBERS
  $.validator.addClassRules({
    requiredPoolName: {required: true, nameCheck: true}
  });

//To validate VPI lies between the range of  - 0 to 31 (inclusive)
  $.validator.addClassRules({
    requiredVPI: {range: [0, 31]}
  });
//To validate VCI lies between the range of  - 1 to 1023 (inclusive)
  $.validator.addClassRules({
    requiredVCI: {range: [1, 1023]}
  });

//To validate VLanID lies between the range of  - 1 to 4094 (inclusive) excluding (1002 to 1005 inclusive)
  $.validator.addClassRules({
    requiredVlanRange: {range: [1, 4094], validVLanID: true}
  });

//To validate CNS HostNname - with two dots and three values, excluding special characters except "-"
  $.validator.addClassRules({
    requiredCNShostname: {required: true, validCNShostname: true}
  });

//To validate GSM Profile creation - excluding special character "?"
  $.validator.addClassRules({
    requiredAPNUserPswd: {required: true, validAPNUserPswd: true}
  });

//To validate OTASP Phone No. - with digits or '*' or '#'
  $.validator.addClassRules({
    requiredOTASPPhoneNo: {required: true, validOTASPPhoneNo: true}
  });

  $.validator.addClassRules({
    requiredHexaKeyValue: {required: true, validHexaKeyValue: true}
  });

  $.validator.addClassRules({
    requiredHexaKeyValueCheck: {required: true, validHexaKeyValueCheck: true}
  });

  $.validator.addClassRules({
    requiredHexaKeyValueLength: {required: true, validHexaKeyValueLength: true}
  });
  $.validator.addClassRules({
    requiredBaseDn: {required: true, basedn: true}
  });
  $.validator.addClassRules({
    requiredEncryptHexaKeyValue: {required: true, validEncryptHexaKeyValueLength: true}
  });

//To validate autonomous number lies between the range of  - 1 to 65535 (inclusive)
  $.validator.addClassRules({
    requiredAutoKeyRangeVPN: {required: true, validAutonomousKey: true}
  });
//To validate tunnel ip, backup tunnel ip and remote tunnel ip of dmvpn in the same subnet.
  $.validator.addClassRules({
    requiredTipRipSameSubnet: {required: true, validTunnelSubnet: true}
  });
//To validate tunnel ip, backup tunnel ip, Transport address and remote tunnel ip of dmvpn are not same.
  $.validator.addClassRules({
    requiredIsSameIpAddr: {required: true, validDistintIPAddrDmvpnSpoke: true}
  });

  $.validator.addClassRules({
    reqDiffPoolAddress: {required: true, ipv4:true, isDiffPoolAddress: true}
  });

  $.validator.addClassRules({
    reqSameSubnetPoolAddress: {required: true, isSameSubnetPoolAddress: true}
  });
  
  $.validator.addClassRules({
    reqToAddrGreaterThanFromAddr: {required: true, isToAddrGreaterThanFromAddr: true}
  });
  
  
//To validate tunnel ip and backup tunnel is in the same subnet DMVPN
  $.validator.addClassRules({
    requiredSameSubnetDmvpn: {required: true, validTunnelBackupMaskDmvpn: true}
  });
//To validate tunnel ip and backup tunnel is in the same subnet IPSEC
  $.validator.addClassRules({
    requiredSameSubnet: {required: true, validTunnelBackupMask: true}
  });
  $.validator.addClassRules({
    requiredHubSameSubnet: {required: true, validHubTunnelBackupMask: true}
  });
  //To validate DHCP Pool
  $.validator.addClassRules({
    requiredDHCPPool: {required: true, validateDHCPPool: true}
  });
  //To validate Source Port and Destination port in ACL
  $.validator.addClassRules({
    requiredAutoKeyRange: {required: true, validPortCheck: true}
  });
  /************************************BELOW code is related to validations *********************************/

  /*******Calling the  JavaScript functions and printing the appropriate correction messages************/

  $.validator.addMethod("ipv4", function(value, element) {
    return validateIpv4Address(value);
  }, $.i18n.prop("validateIpv4Address"));

  $.validator.addMethod("validIpSubnet", function(value, element) {
    return isValidIpSubnet(value, element);
  }, $.i18n.prop("isValidIpSubnet"));

  $.validator.addMethod("validVLANID1To4094", function(value, element) {
    return isValidVLANID(value);
  }, $.i18n.prop("vlanIDError"));

  $.validator.addMethod("validIpAndSubnetId", function(value, element) {
    return isValidSubnetId(value, element);
  }, $.i18n.prop("isValidSubnetId"));

  $.validator.addMethod("ipv6", function(value, element) {
    return validateIpv6Address(value);
  }, $.i18n.prop("validateIpv6Address"));

  $.validator.addMethod("validIpv6Range", function(value, element) {
    return isValidIpv6Range(value);
  }, $.i18n.prop("ipv6Error"));

  $.validator.addMethod("ipv4oripv6", function(value, element) {
    return validateIpv4orIpv6Address(value);
  }, $.i18n.prop("validateIpv4orIpv6Address"));
  $.validator.addMethod("basedn", function(value, element) {
    return validateLdapDn(value);
  }, $.i18n.prop("validatebasedn"));

  $.validator.addMethod("nameCheck", function(value, element) {
    return onlyAlphabetsAndCharacters(value);
  }, $.i18n.prop("onlyAlphabetsAndCharacters"));

  $.validator.addMethod("validVLanID", function(value, element) {
    return excludeFromRange(value);
  }, $.i18n.prop("excludeFromRange"));

  $.validator.addMethod("validPrefixAddress", function(value, element) {
    return includeWildIPaddress(value);
  }, $.i18n.prop("includeWildIPaddress"));

  $.validator.addMethod("validPrefixMaskAddress", function(value, element) {
    return isValidSubnetMask(value);
  }, $.i18n.prop("isValidSubnetMask"));

  $.validator.addMethod("validPrefixAndPrefixMask", function(value, element) {
    return isPrefixAndPrefixMask(value);
  }, $.i18n.prop("isPrefixAndPrefixMask"));

  $.validator.addMethod("validPrefixAndPrefixMaskDmVPN", function(value, element) {
    return isPrefixAndPrefixMaskDmvpn(value);
  }, $.i18n.prop("isPrefixAndPrefixMaskDmvpn"));

  $.validator.addMethod("validDefaultRoutingAddress", function(value, element) {
    return isDefaultRouting(value);
  }, $.i18n.prop("isDefaultRouting"));

  $.validator.addMethod("validCNShostname", function(value, element) {
    return isCNShostname(value);
  }, $.i18n.prop("isCNShostname"));
  $.validator.addMethod("validOTASPPhoneNo", function(value, element) {
    return isOTASPPhoneNo(value);
  }, $.i18n.prop("isOTASPPhoneNo"));
  $.validator.addMethod("validAPNUserPswd", function(value, element) {
    return isAPNUserPswd(value);
  }, $.i18n.prop("isAPNUserPswd"));
  $.validator.addMethod("validHexaKeyValue", function(value, element) {
    return isHexaKeyValue(value);
  }, $.i18n.prop("isHexaKeyValue"));
  $.validator.addMethod("validHexaKeyValueCheck", function(value, element) {
    return isHexaKeyValueCheck(value);
  }, $.i18n.prop("isHexaKeyValueCheck"));
  $.validator.addMethod("validHexaKeyValueLength", function(value, element) {
    return isHexaKeyValueLength(value);
  }, $.i18n.prop("isHexaKeyValueLength"));
  $.validator.addMethod("validEncryptHexaKeyValueLength", function(value, element) {
    return isHexaKeyValueEncrypt(value);
  }, $.i18n.prop("isHexaKeyValueEncrypt"));
  $.validator.addMethod("validAutonomousKey", function(value, element) {
    return isValidAutonomousKey(value);
  }, $.i18n.prop("isValidAutonomousKey"));
  $.validator.addMethod("validTunnelSubnet", function(value, element) {
    var ip1 = $("#tunnelIp").val(),
      ip2 = $("#tunnelAddr").val(),
      ip3 = $("#backupTunnelIP").val(),
      mask = $("#tunnelMask").val();
    return configureVpn.isInSameSubnet(ip1, ip2, ip3, mask);
  }, $.i18n.prop("isInSameSubnet"));
  $.validator.addMethod("validTunnelBackupMask", function(value, element) {
    var ip1 = $("#s2sTunnelIP").val(),
      ip2 = $("#s2sBackupIP").val(),
      ip3 = "",
      mask = $("#s2sTunnelMask").val();
    return configureVpn.isInSameSubnet(ip1, ip2, ip3, mask);
  }, $.i18n.prop("validTunnelBackupMask"));
  $.validator.addMethod("validHubTunnelBackupMask", function(value, element) {
    var ip1 = $("#dmvpnTunnelIp").val(),
      ip2 = $("#hubBackupIP").val(),
      ip3 = "",
      mask = $("#dmvpnHubTunnelMask").val();
    return configureVpn.isInSameSubnet(ip1, ip2, ip3, mask);
  }, $.i18n.prop("validTunnelBackupMask"));
  $.validator.addMethod("validTunnelBackupMaskDmvpn", function(value, element) {
    var ip1 = $("#tunnelIp").val(),
      ip2 = $("#tunnelAddr").val(),
      ip3 = "",
      mask = $("#tunnelMask").val();
    return configureVpn.isInSameSubnet(ip1, ip2, ip3, mask);
  }, $.i18n.prop("validTunnelRemoteMask"));
  $.validator.addMethod("validDistintIPAddrDmvpnSpoke", function(value, element) {
    return configureVpn.isDistintIPAddrDmvpnSpoke();
  }, $.i18n.prop("ipAddressSpokeHubDistinctMessage"));
  $.validator.addMethod("validateDHCPPool", function(value, element) {
    return validateDHCPPool(value);
  }, $.i18n.prop("validateDHCPPool"));

  $.validator.addMethod("isDiffPoolAddress", function(value, element) {
    var ip1 = $("#remoteAddressPoolFrom").val();
    var ip2 = $("#remoteAddressPoolTo").val();
    return !configureVpn.isSameValue(ip1, ip2);
  }, $.i18n.prop("remoteAccessPoolRangeSameValError"));

  $.validator.addMethod("isSameSubnetPoolAddress", function(value, element) {
    var ip1 = $("#remoteAddressPoolFrom").val();
    var ip2 = $("#remoteAddressPoolTo").val();
    return !configureVpn.remoteAccessPoolValidation(ip1, ip2);
  }, $.i18n.prop("remoteAccessPoolRangeError"));

  $.validator.addMethod("isToAddrGreaterThanFromAddr", function(value, element) {
    var ip1 = $("#remoteAddressPoolFrom").val();
    var ip2 = $("#remoteAddressPoolTo").val();
    return !configureVpn.remoteAccessFromToValidation(ip1, ip2);
  }, $.i18n.prop("remoteAccessFromLessThanToError"));


    $.validator.addMethod("userInputCheck", function(value, element) {
    return userInputCheck(value, element);
  }, $.i18n.prop("userNameExists"));

  $.validator.addMethod("duplicatePoolCheck", function(value, element) {
    return duplicatePoolCheck(value, element);
  }, $.i18n.prop("poolExists"));
  $.validator.addMethod("validPortCheck", function(value, element) {
    return isPortValid(value);
  }, $.i18n.prop("isPortValid"));
});
/***************************************JAVA SCRIPT FUNCTIONS  for validations************************/


/*************************************To explicitly allow 0.0.0.0 for IPv4 Prefix IP address****************************************/

function includeWildIPaddress(ip) {
  var reg = /^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/i,
    wildReg = /^0.0.0.0$/;
  if (reg.test(ip) || wildReg.test(ip)) {
    return true;
  }
  else {
    return false;
  }


}
/******************************************************  To validate IPV4 *********************************************************/
function validateIpv4Address(ip) {
  var reg = /^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/i;
  if (ip !== "") {
    if (reg.test(ip)) {
      return true;
    }
    else {
      return false;
    }
  }
  else {
    return true;
  }
}

/*********************************************  To validate IP Address and Subnet mask combination ****************************************/



function isValidVLANID(vlanidstring) {
  var reg = /^([1-9]|[1-9][0-9]|[0-9][0-9][0-9]|[1-3][0-9][0-9][0-9]|40[0-9][0-4])$/;
  if (reg.test(vlanidstring)) {
    return true;
  }
  return false;

//  if(vlanidstring === parseInt(vlanidstring, 10) && vlanidstring>0 && vlanidstring<4095)
//  {
//    return true;
//  }
//  else
//  {
//    return false;
//  }
//  return false;
}

function isValidIpSubnet(subStr, element) {

var temp = $('input[data='+$(element).attr("id")+']');
var ipStr = temp.val();
var loop = "";
loop = $('input:hidden[name=loopy]').val();

if(subStr == "255.255.255.255" && (loop.toLowerCase().indexOf('loopback')===0))
{
  return true;
}
 else
 {
var ip = ipStr.split(".");
var sub = subStr.split(".");

var ip0 = parseInt(ip[0],10);
var ip1 = parseInt(ip[1],10);
var ip2 = parseInt(ip[2],10);
var ip3 = parseInt(ip[3],10);

var sub0 = parseInt(sub[0],10);
var sub1 = parseInt(sub[1],10);
var sub2 = parseInt(sub[2],10);
var sub3 = parseInt(sub[3],10);

var r0 = ip0 & sub0;
var r1 = ip1 & sub1;
var r2 = ip2 & sub2;
var r3 = ip3 & sub3;

var subnetId= r0+"."+r1+"."+r2+"."+r3;

var or0 = ip0 | getComplement(sub0);
var or1 = ip1 | getComplement(sub1);
var or2 = ip2 | getComplement(sub2);
var or3 = ip3 | getComplement(sub3);

var broadcastId= or0+"."+or1+"."+or2+"."+or3;

if((subnetId==ipStr && temp.attr("uncheck")!="network") || broadcastId==ipStr)
{
return false;
}
else{
return true;
}

 }
}
function getComplement(subs)
{
var a =0;
if(subs == 0)
{
a =255;
}
else if(subs< 255)
{
a= 1;
while(((subs>>>1)& 1) == 0)
{
a= (a << 1)|1;
subs= subs >>> 1;
}
}
return a;
}

/*************************************************** To return valid Subnet ID****************************************************/

function isValidSubnetId(subStr, element) {

var temp = $('input[data='+$(element).attr("id")+']');
var ipStr = temp.val();

var ip = ipStr.split(".");
var sub = subStr.split(".");

var ip0 = parseInt(ip[0],10);
var ip1 = parseInt(ip[1],10);
var ip2 = parseInt(ip[2],10);
var ip3 = parseInt(ip[3],10);

var sub0 = parseInt(sub[0],10);
var sub1 = parseInt(sub[1],10);
var sub2 = parseInt(sub[2],10);
var sub3 = parseInt(sub[3],10);

var r0 = ip0 & sub0;
var r1 = ip1 & sub1;
var r2 = ip2 & sub2;
var r3 = ip3 & sub3;

var subnetId= r0+"."+r1+"."+r2+"."+r3;
// alert("Subnet ID = "+subnetId);

if(subnetId==ipStr)
{
return true;
}
else{
return false;
}
}

/*********************************************  To validate IPV6 ****************************************/

function validateIpv6Address(ipv6) {
  var reg = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
  if (reg.test(ipv6)) {
    return true;
  }
  return false;

}

function isValidIpv6Range(ipv6string) {
  var reg=/^([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])$/;
  if (reg.test(ipv6string)) {
    return true;
  }
//  if(ipv6string === parseInt(ipv6string, 10))
//  {
//    if(parseInt(ipv6string, 10)>-1 && parseInt(ipv6string, 10)<129)
//      return true;
//    else
//      return false;
//  }
//  else
//    return false;

  return false;
}

/********************************************To validate Base Dn in LDAP*******************************************/

function validateLdapDn(ldapDn) {
  if (typeof ldapDn === 'undefined') {
    return false;
  }
  var reg = /^(\w+[=]{1}\w+)([,{1}]\w+[=]{1}\w+)*$/;
  var ascapeChar = /\s+/g;
  var ascapeSpecial = /(['\_\-.*+?^!:${}()|\[\]\/\\])/g;
  var removeSpaces = ldapDn.replace(ascapeChar, '');
  var finalValue = removeSpaces.replace(ascapeSpecial, '');
  if (reg.test(finalValue)) {
    return true;
  }
  return false;
}
/********************************************To validate Base Dn in LDAP*******************************************/
function validateDHCPPool(poolName) {
  if (typeof poolName === 'undefined') {
    return false;
  }
  var poolNameValidate = $.trim(poolName);
  if ((!poolNameValidate) || poolNameValidate === 'select') {
    return false;
  }
  return true;
}
/*************************************To allow IPv4 or IPv6 address****************************************/

function validateIpv4orIpv6Address(ip) {
  if (validateIpv4Address(ip) || validateIpv6Address(ip) || ip === "") {
    return true;
  } else {
    return false;
  }
}


/*******************  To validate value in a textbox should be only alphabets and special characters********************************/
function onlyAlphabetsAndCharacters(value) {
  var reg = /^[^\?]+$/;
  if (reg.test(value)) {
    return true;
  }
  else {
    return false;
  }
}
/****************************************To exclude some values from a given RANGE***********************************************/

function excludeFromRange(value) {
  if (value >= 1002 && value <= 1005) {
    return false;
  }
  return true;
}
/***********************************To perform masking for Prefix in Static Routing************************************/
//Determine if string is a valid IP mask; i.e. left contiguous
function isValidSubnetMask(maskStr) {
  if (includeWildIPaddress(maskStr)) {
    if (isDefaultRouting(maskStr)) {
      return true;
    }
    else {
      //var j, str;
      var zeroBit = 0, i, len;
      var foundzero = false;
      // flag - to check its a MASK or not

      var mask = maskStr.split(".");
      // splitted octets with delimiter in ip address

      //var maskInt = [];
      // int octets

      var arr = [];
      // char array of binary string of prefix mask

      var maskBinString;
      //to store the binary concatenated string

      var flag = 0;
      // flag to decide its a mask or not

      var maskBin0 = (parseInt(mask[0], 10)).toString(2);
      //ip address octet values to decimal values to binary values

      var maskBin1 = (parseInt(mask[1], 10)).toString(2);
      var maskBin2 = (parseInt(mask[2], 10)).toString(2);
      var maskBin3 = (parseInt(mask[3], 10)).toString(2);


// append 0's in order to make it 8 bit binary value.
      if ((maskBin0.length) < 8) {
        maskBin0 = zeroBit + maskBin0;

      }
      if ((maskBin1.length) < 8) {
        maskBin1 = zeroBit + maskBin1;

      }
      if ((maskBin2.length) < 8) {
        maskBin2 = zeroBit + maskBin2;

      }
      if ((maskBin3.length) < 8) {
        maskBin3 = zeroBit + maskBin3;

      }

      maskBinString = maskBin0 + maskBin1 + maskBin2 + maskBin3;
      arr = maskBinString.split("");
      len = arr.length;
      switch (len)
      {
        case (8):
          if (maskBinString == "00000000") {
            flag = 0;
          }
          break;

        default:
          for (i = 0; i < len; i++) {
            if (arr[i] == '0') {
            // to check the trail of 1's in the mask value
              foundzero = true;

            }
            else if (arr[i] == '1' && foundzero === true) {

              flag = 0;
              break;

            }
            flag = 1;
          }
          // for loop
          break;
      }
      // switch
      if (flag == 0) {
        return false;
      }
      else {
        return true;
      }
    }
  }
  return false;

}

/**************************To validate Prefix and Prefix Mask together (Prefix & Mask == Prefix)******************************/
function isPrefixAndPrefixMask(maskStr) {
  var prefixStr = $(".isPrefix").val();
  var mask = maskStr.split(".");
  var prefix = prefixStr.split(".");

// all integer values of 4 octets of IPv4

  var mask0 = parseInt(mask[0], 10);
  var prefix0 = parseInt(prefix[0], 10);

  var mask1 = parseInt(mask[1], 10);
  var prefix1 = parseInt(prefix[1], 10);

  var mask2 = parseInt(mask[2], 10);
  var prefix2 = parseInt(prefix[2], 10);

  var mask3 = parseInt(mask[3], 10);
  var prefix3 = parseInt(prefix[3], 10);

  var r0 = prefix0 & mask0;
  var r1 = prefix1 & mask1;
  var r2 = prefix2 & mask2;
  var r3 = prefix3 & mask3;

//validation condition on prefix and prefix mask = Prefix

  if ((r0 == prefix0) && (r1 == prefix1) && (r2 == prefix2) && (r3 == prefix3)) {
    return true;
  }
  else {
    return false;
  }
}
/*********************To validate Prefix and Prefix Mask together for dmvpn (Prefix & Mask == Prefix)*************************/

function isPrefixAndPrefixMaskDmvpn(maskStr) {
  var prefixStr = $(".isPrefixDmvpn").val();
  var mask = maskStr.split(".");
  var prefix = prefixStr.split(".");

// all integer values of 4 octets of IPv4

  var mask0 = parseInt(mask[0], 10);
  var prefix0 = parseInt(prefix[0], 10);

  var mask1 = parseInt(mask[1], 10);
  var prefix1 = parseInt(prefix[1], 10);

  var mask2 = parseInt(mask[2], 10);
  var prefix2 = parseInt(prefix[2], 10);

  var mask3 = parseInt(mask[3], 10);
  var prefix3 = parseInt(prefix[3], 10);

  var r0 = prefix0 & mask0;
  var r1 = prefix1 & mask1;
  var r2 = prefix2 & mask2;
  var r3 = prefix3 & mask3;

//validation condition on prefix and prefix mask = Prefix

  if ((r0 == prefix0) && (r1 == prefix1) && (r2 == prefix2) && (r3 == prefix3)) {
    return true;
  }
  else {
    return false;
  }
}
/************************Automous key validation*****************************/
function isValidAutonomousKey(autonomousKey) {
  var keyRegex = /^\d+$/;
  if (!keyRegex.test(autonomousKey)) {
    return false;
  } else {
    if (autonomousKey > 0 && autonomousKey <= 65535) {
      return true;
    } else {
      return false;
    }
  }
}
/***************************Port validation**************************************************/
function isPortValid(autonomousKey) {
  var reg = /^[a-z|A-Z|0-9]*$/;
  if (autonomousKey > 0 && autonomousKey <= 65535) {
    return true;
  } else if(reg.test(autonomousKey)){
    return true;
  } else {
    return false;
  }
}
/**********************************supporting default static routing*************************************************************/
function isDefaultRouting(maskStr) {
  var prefixStr = $(".isPrefix").val(), reg = /^0.0.0.0$/;


  if (reg.test(maskStr) && reg.test(prefixStr)) {
    return true;
  }
  else {
    return false;
  }
}


/**************************CNS hostname - with two dots and three values, excluding special characters except "-"******************/  function isCNShostname(name) {

  var regAlphaNumHypen = /^[\w\-]+\.[\w\-]+\.[\w\-]+$/,
    regNum = /^[\d]+\.[\d]+\.[\d]+$/;
  if ((regAlphaNumHypen.test(name)) && (!regNum.test(name))) {
    return true;
  }
  return false;
}


/**************************OTASP Phone No. - Number must consist of digits or '*' or '#'******************/
function isOTASPPhoneNo(number) {

  var regNum = /[A-Z| a-z |\^ |\$ |\@ |\! |\( |\) |\% |\& |\? |\< |\> |\- |\/ |\+ | \~]/;
  if (regNum.test(number)) {
    return false;
  }
  return true;
}

/**************************GSM Profile Creation- ? shouldn't be entered******************/
function isAPNUserPswd(value) {

  var regNum = /^\?$/;
  if (regNum.test(value)) {
    return false;
  }
  return true;
}

/****************************HexaKey******************************************************/
function isHexaKeyValue(value) {

  var regNum = /[G-Z| a-z |\^ |\$ |\@ |\! |\( |\) |\% |\& |\? |\< |\> |\- |\/ |\+ | \~]/;
  if (regNum.test(value)) {
    return false;
  }
  return true;
}

function isHexaKeyValueCheck(value) {
  if (value.length == 32 || value.length == 66) {
    return true;
  }
  return false;
}

function isHexaKeyValueLength(value) {
  if (value.length == 32) {
    return true;
  }
  return false;
}

function isHexaKeyValueEncrypt(value) {
  if (value.length == 66) {
    return true;
  }
  return false;
}

function userInputCheck()
{
  var items=[];
    $('#userTable tbody tr td:nth-child(2)').each( function(){
    items.push($(this).text());
    });
    var userInputName = $("#userInput").val();
    var flag = 0;
    for(var i = 0; i < items.length; ++i)
    {
      if(items[i] == userInputName)
      {
        flag = 1;
        break;
      }
    }
    if(flag==1){
      return false;
    }
  else{
    return true;
  }
}

function duplicatePoolCheck()
{
  var items=[];
    $('#dhcpTable tbody tr td:nth-child(2)').each( function(){
    items.push($(this).text());
    });
    var userInputName = $("#poolName").val();
    var flag = 0;
    for(var i = 0; i < items.length; ++i)
    {
      if(items[i] == userInputName)
      {
        flag = 1;
        break;
      }
    }
  if(flag==1){
      return false;
    }
  else{
    return true;
  }
}
/***********************To do Internationalization for validation messages***********************************/
function loadAndDisplayValidationMsgs() {
  languageName();
  /* Validation messages are overidded by properties file in their respective classes. */

  /* Inbuilt validations present in JQuery.validator.js are overriden here*/
  $.validator.messages.required = $.i18n.prop("required");
  $.validator.messages.minlength = $.i18n.prop("minlength");
  $.validator.messages.maxlength = $.i18n.prop("maxlength");
  $.validator.messages.number = $.i18n.prop("number");




}/* This function gets the output in form of XML
 *  after running the command on the device and parses the values to update in the table
 */
var priDnsList = [];
var ntpArr1=['pool.ntp.org','asia.pool.ntp.org','europe.pool.ntp.org','north-america.pool.ntp.org','oceania.pool.ntp.org','south-america.pool.ntp.org'];

var dhcpDns = (function() {
  var dnsFlag = false, ntpServerLoadCheck = false, ntpSyncLoadCheck = false, defaultClockTimeZone = true, ntpIPAddressPeer="";
  function loadJS(url) {
    $.getScript(url);

  }

  function refreshNTPServerList(){
        var selectedVal=$('#basicTimeZone option:selected').text();
        $('#basicTimeZone option').each(function(){
            if ($(this).text()==selectedVal) {
                var $curr=$(this);
                if ($('#ntpServerBasicSettings').val().trim()=="") {
                    $('#ntpServerBasicSettings').val($(this).attr("ntp-server-basicSettings"));
                }else{
                    $.each(ntpArr1,function(index,value){
                        if (value==$('#ntpServerBasicSettings').val().trim()) {
                            $('#ntpServerBasicSettings').val($curr.attr('ntp-server-basicSettings'));
                        }
                    });
                }
                return false;
            }
        });
  } 

  function setClockTimeZoneDefault(){
   var clockTimeZoneValue="0";
    if($.i18n.prop('langwage') == "en"){
      clockTimeZoneValue = "5.30";			
    }
    else{
      clockTimeZoneValue = "9"; 
    }
   return clockTimeZoneValue;
  }

  function refresh() {
    priDnsList = [];
    var xml,
      hostNameValue,
      domainNameValue;

    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
          ntpServerLoadCheck = false;
	  ntpSyncLoadCheck = false;
    //Code added to extract NTP information
      ntpIPAddressPeer = "";
      $(xml).find('ntp').each(function() {
      $('#ntpEnableBasicSettings').prop("checked", true);
      ntpServerLoadCheck = true;
      $(this).find('master').each(function() {
        $('#ntpSyncBasicSettings').prop("checked", true);
        ntpSyncLoadCheck = true;
      });
      $(this).find('server').each(function() {
        $(this).find('HostNamePeer').each(function() {
          $('#ntpEnableBasicSettings').prop("checked", true);
          $('#ntpServerBasicSettings').val($(this).text());
        });
	$(this).find('IPAddressPeer').each(function() {
          $('#ntpEnableBasicSettings').prop("checked", true);
	  ntpIPAddressPeer = $(this).text();
          $('#ntpServerBasicSettings').val(ntpIPAddressPeer);
        });
      });
      if ($('#ntpEnableBasicSettings').is(':checked')) {
        $('#showNTPServerBasicSettings').show();
      } else {
        $('#showNTPServerBasicSettings').hide();
      }
    });

    //Code added to extract Clock information
    var clockTimezoneValue="0";
    $(xml).find('timezone').each(function() {
      $(this).find('HoursOffsetUTC').each(function() {
        clockTimezoneValue = $(this).text();
	defaultClockTimeZone = false;
      });
      $(this).find('MinutesOffsetUTC').each(function() {
        var tempMinutesValue = $(this).text();
        if (tempMinutesValue!= null && tempMinutesValue!=undefined && tempMinutesValue!="0") {
	  defaultClockTimeZone = false;
          clockTimezoneValue = clockTimezoneValue+ "."+tempMinutesValue;
        }
      });
    });
    if(defaultClockTimeZone){		  
      clockTimezoneValue = setClockTimeZoneDefault();
    }
    $('#basicTimeZone').val(clockTimezoneValue);
    refreshNTPServerList();
      
    $(xml).find('hostname').each(function() {
      $(this).find('SystemNetworkName').each(function() {
        hostNameValue = $(this).text();
        $('#hostNameInput').val(hostNameValue);
      });
    });

    $(xml).find('ip').each(function() {
      $(this).find('domain').each(function() {
        $(this).find('name').each(function() {
          $(this).find('DefaultDomainName').each(function() {
            domainNameValue = $(this).text();
            $('#domainName').val(domainNameValue);
          });
        });
      });
    });

    /******************IPv4 entry in Primary or Secondary DNS*********************************/
    $(xml).find('ip').each(function() {
      $(this).find('name-server').each(function() {
        $(this).find('DomainServerIPAddressMax6').each(function() {
          priDnsList.push($(this).text());

        });
        /******************IPv6 entry in Primary or Secondary DNS*********************************/
        $(this).find('DomainServerIPv6AddressMax6').each(function() {
          priDnsList.push($(this).text());
        });
      });
    });
    /**********************Show the config values of Primary & Secondary DNS on the GUI from device ********************/
    $('#primaryDNS').val('');
    $('#secondaryDNS').val('');
    if (priDnsList.length >= 1 && priDnsList[0] !== null) {
      $('#primaryDNS').val(priDnsList[0]);
      $('#primaryDNSOld').val(priDnsList[0]);
    } else {
      $('#primaryDNSOld').val("");
    }
    if (priDnsList.length > 1 && priDnsList[1] !== null) {
      $('#secondaryDNS').val(priDnsList[1]);
      $('#secondaryDNSOld').val(priDnsList[1]);
    } else {
      $('#secondaryDNSOld').val("");
    }

    /********************* DNS values to be disabled - if no DNS servers are configured  for DHCP module***********************/

    if (priDnsList.length === 0) {
      $('#checkDNS').attr("disabled", true);
      //$('#DNSipPriAddress').attr("disabled", true);
      //$('#DNSipSecAddress').attr("disabled", true);
    } else {
      $('#checkDNS').attr("disabled", false);
      //$('#DNSipPriAddress').attr("disabled", false);
      //$('#DNSipSecAddress').attr("disabled", false);
    }

    refreshDHCP(xml);

  }

  /*******************************************DHCP - reading CLI format*********************************************/
  function refreshDHCP(xml) {

    $("#dhcpTable  tbody").empty();
    $(xml).find('ip > dhcp').each(function() {
        $(this).find('pool').each(function() {
          var poolname = $(this).find('PoolName').text(),
            network = $(this).find('NetworkNumberDottedDecimalNotation').text(),
            subnetMask = $(this).find('IPPrefixMask').text(),
            defaultRouter = $(this).find('RouterNameIPAddress').text();

          $('<tr></tr>').html('<td>' + poolname + '</td><td>' +
                              network + '</td><td>' + subnetMask + '</td><td>' +
                              defaultRouter + '</td>').appendTo('#dhcpTable');
        });
     // });
    });
    addTableColumn("dhcpTable", "dhcpEdit", "dhcpDelete");
    $("#dhcpTable tr:nth-child(even)").addClass("striped");
    var dhcpRowCount = $('#dhcpTable tbody tr').length;
    if (dhcpRowCount == 0) {
      $("#nodhcpMessage").show();
      $("#dhcpTable").hide();
      $("#Edit").hide();
      $("#Delete").hide();
    } else {
      $("#nodhcpMessage").hide();
      $("#dhcpTable").show();
      $("#Edit").show();
      $("#Delete").show();
    }
    //enableDisableButton("dhcpTable", $.i18n.prop("dhcpAdd"))
    //changeBtnState("dhcpTable", $.i18n.prop("dhcpEdit"));
    enableDisableButton("dhcpTable", "Add");
    changeBtnState("dhcpTable", "Edit");

  }

  /************ To display the checkbox to import all dhcp*****************************************************************/

  function importCheckboxForDhcp(poolName) {


    var xmlcheck;
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xmlcheck = shRunFormatOutput;
    $(xmlcheck).find('ip').each(function() {
      $(this).find('dhcp').each(function() {
        $(this).find('pool').each(function() {
          if ($(this).find('PoolName').text() === poolName) {
            if ($(this).find('import').length === 0) {
              $("#importall").attr("checked", false);
            } else {
              $("#importall").attr("checked", true);
            }
          }
        });
      });
    });
  }

  /************* To display the DNS server values under pool name selected if Configured and checkbox is Unchecked***********/

  function populateDNSvaluesForDHCPpool(poolName) {
    var xmlDoc, hasWlanAP = false, hasSwitchPortModeTrunk = false, nativeVlan = "",
      enableTrunkLblString = "", enableNativeVlanLblString = "";
      DHCP_DNS_List = [];
    DHCP_DNS_List.length = 0;
    
    var xml;
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;

    if (xml.indexOf("Building configuration...") !== -1) {
      xml = xml.substring(25, xml.length);
      xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
    }
    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
    regEx = new RegExp("&#x03;", "g");
    xml = xml.replace(regEx, "");
    try {
      xmlDoc = $.parseXML(xml);
    } catch (error) {
      xmlDoc = xml;
    }

    if (poolName.length > 0) {
      $(xmlDoc).find('ip').each(function() {
        $(this).find('dhcp').each(function() {
          $(this).find('pool').each(function() {
            if ($(this).find('PoolName').text() === poolName) {
              $(this).find('ServerNameIPAddress').each(function() {
                DHCP_DNS_List.push($.trim($(this).text()));
              });
            }
          });
        });
      });
      /**********************Show the DNS server config values under a DHCP pool in the DHCP-EDIT mode********************/


      if (DHCP_DNS_List.length == 1 && DHCP_DNS_List[0] == $('#DefaultRoute').val()) {

        $("#checkDNSProxy").attr("checked", true);
        $("#checkDNSProxy").attr("disabled", false);
	$("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute") + ' <span class="ccpexpCSSReplaceClass737">*</span>:');
        //$("#checkDNS").attr("checked", false);
        //$("#checkDNS").attr("disabled", true);
        $('#DNSipPriAddress').val("");
        $('#DNSipSecAddress').val("");
      }
      else{
	$("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute")+':');
        if (DHCP_DNS_List.length == 2 && DHCP_DNS_List[1] !== null) {
          //$("#checkDNS").attr("checked", true);
          //$("#checkDNS").attr("disabled", false);
	  $("#checkDNSProxy").attr("disabled", false);
          $("#checkDNSProxy").attr("checked", false);
	  if (DHCP_DNS_List[0] == $('#DefaultRoute').val()) {
	    $("#checkDNSProxy").attr("checked", true);
	    $("#checkDNSProxy").attr("disabled", false);
	    $("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute") + ' <span class="ccpexpCSSReplaceClass737">*</span>:');
	    $('#DNSipPriAddress').val(DHCP_DNS_List[1]);
          $('#primaryDNS-DHCPOld').val(DHCP_DNS_List[1]);
	  } else {
	    $('#DNSipPriAddress').val(DHCP_DNS_List[0]);
          $('#primaryDNS-DHCPOld').val(DHCP_DNS_List[0]);
	  $('#DNSipSecAddress').val(DHCP_DNS_List[1]);
          $('#secondaryDNS-DHCPOld').val(DHCP_DNS_List[1]);
	  }
        } else {
          $('#DNSipPriAddress').val("");
          $('#primaryDNS-DHCPOld').val("");
	  $('#DNSipSecAddress').val("");
          $('#secondaryDNS-DHCPOld').val("");
          $("#checkDNSProxy").attr("disabled", false);
          $("#checkDNSProxy").attr("checked", false);
        }
        if (DHCP_DNS_List.length > 2 && DHCP_DNS_List[2] !== null) {
	  $("#checkDNSProxy").attr("disabled", false);
          $("#checkDNSProxy").attr("checked", false);
	  $('#DNSipPriAddress').val(DHCP_DNS_List[1]);
          $('#primaryDNS-DHCPOld').val(DHCP_DNS_List[1]);
          $('#DNSipSecAddress').val(DHCP_DNS_List[2]);
          $('#secondaryDNS-DHCPOld').val(DHCP_DNS_List[2]);
	  if (DHCP_DNS_List[0] == $('#DefaultRoute').val()) {
	    $("#checkDNSProxy").attr("checked", true);
	    $("#checkDNSProxy").attr("disabled", false);
	    $("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute") + ' <span class="ccpexpCSSReplaceClass737">*</span>:');
	  }
        }
	
	if (DHCP_DNS_List.length == 1 && DHCP_DNS_List[0] != $('#DefaultRoute').val()) {
	  $('#DNSipPriAddress').val(DHCP_DNS_List[0]);
          $('#primaryDNS-DHCPOld').val(DHCP_DNS_List[0]);
	  $('#DNSipSecAddress').val("");
          $('#secondaryDNS-DHCPOld').val("");
	}

        if (priDnsList.length === 0) {
          //$('#checkDNS').attr("disabled", true);
          //$('#DNSipPriAddress').attr("disabled", true);
          //$('#DNSipSecAddress').attr("disabled", true);
          $("#checkDNS").attr("checked", false);
          $("#checkDNS").attr("disabled", true);
        } else {
	  $("#checkDNS").attr("disabled", false);
	  if (priDnsList.length >= 1) {
	    if (priDnsList.length == 1 && priDnsList[0] == $('#DNSipPriAddress').val() && $('#DNSipSecAddress').val()=="") {
	      $("#checkDNS").attr("checked", true);
	      $('#DNSipPriAddress').attr("disabled", true);
	      $('#DNSipSecAddress').attr("disabled", true);
          $("#checkDNS").attr("disabled", false);
	    } else if (priDnsList.length > 1 && priDnsList[0] == $('#DNSipPriAddress').val() && priDnsList[1] == $('#DNSipSecAddress').val()) {
	      $("#checkDNS").attr("checked", true);
	      $('#DNSipPriAddress').attr("disabled", true);
	      $('#DNSipSecAddress').attr("disabled", true);
	    }
	  }
          //$('#checkDNS').attr("disabled", false);
          //$('#DNSipPriAddress').attr("disabled", false);
          //$('#DNSipSecAddress').attr("disabled", false);
          //$("#checkDNSProxy").attr("disabled", false);
          //$("#checkDNSProxy").attr("checked", false);
        }

      }
    }

    $(xmlDoc).find('interface').each(function() {
      var interfaceName;
      //var interfaceXml;
      interfaceName = $(this).find('Param:first').text();
      if (interfaceName.indexOf('Wlan') !== -1 && interfaceName.indexOf('GigabitEthernet') !== -1) {
        hasWlanAP = true;
        $("#wlanInterfaceName").val(interfaceName);
        enableTrunkLblString = $.i18n.prop("enableTrunkOn") + " " + interfaceName;
        enableNativeVlanLblString = $.i18n.prop("enableNativeVlanOn") + " " + interfaceName;
        $(this).find('switchport').each(function() {
          $(this).find('mode').each(function() {
            $(this).find('trunk').each(function() {
              hasSwitchPortModeTrunk = true
            });
          });
        });

        $(this).find('native').each(function() {
          $(this).find('vlan').each(function() {
            if ($(this).find('VLANIDNativeVLANPortTrunkingMode')) {
              nativeVlan = $(this).find('VLANIDNativeVLANPortTrunkingMode').text();
            }
          });
        });
        return false;
      }
    });
    if (hasWlanAP) {
      $("#enableTrunkLbl").text(enableTrunkLblString);
      $("#enableNativeVlanLbl").text(enableNativeVlanLblString);
      $('#enableTrunkTR').show();
      $('#enableNativeVlanTR').show();
      if (hasSwitchPortModeTrunk || poolName.length === 0) {
        $("#enableTrunk").prop("checked", true);
      } else {
        $("#enableTrunk").prop("checked", false);
      }
      if (nativeVlan.length > 0) {
        $('#nativeVlanTR').show();
        $("#nativeVlan").rules("add", {required: true, range: [1, 4094]});
        $("#enableNativeVlan").prop("checked", true);
        $("#nativeVlan").val(nativeVlan);
      } else {
        $("#enableNativeVlan").prop("checked", false);
        $('#nativeVlanTR').hide();
      }
    } else {
      $("#nativeVlan").removeClass("required");
      $("#nativeVlan").rules("remove");
      $("#enableTrunk").prop("checked", false);
      $("#enableNativeVlan").prop("checked", false);
      $('#wlanInterfaceName').val("");
      $('#enableTrunkTR').hide();
      $('#enableNativeVlanTR').hide();
      $('#nativeVlanTR').hide();
      $("#nativeVlan").val("");
    }
  }

  function highlightDHCP() {
    var $tr;
    $('#dhcpTable tbody tr').on('click', (function() {
      $tr = $(this).closest("tr");
      $tr.siblings().removeClass('hilite');
      $tr.toggleClass('hilite');

    }));
  }
  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {


    $("#dhcpPageTitle").text($.i18n.prop("basicSettingsTitle"));
    $("#dhcpact").text($.i18n.prop("dhcpact"));
    $("#DHCPpoolDefaultRoute").text($.i18n.prop("DHCPpoolDefaultRoute")+':');
    $("#poolName").attr("placeholder", $.i18n.prop("DHCPpoolName"));
    $("#subnetMask").attr("placeholder", $.i18n.prop("DHCPpoolSubnetMask"));
    $("#dialog-form").attr("title", $.i18n.prop("AddDhcpTitle"));
    $("#cliLegend").text($.i18n.prop("cliLegend"));
    $("#HName").html($.i18n.prop("HName") + ' <span class="ccpexpCSSReplaceClass735">*</span>:');
    $("#hostNameInput").attr("placeholder", $.i18n.prop("HName"));
    $("#domainNameLabel").text($.i18n.prop("domainNameLabel"));
    $("#domainName").attr("placeholder", $.i18n.prop("domainName"));
    $("#dnsLegend").text($.i18n.prop("dnsLegend"));
    $("#primaryDNSLabel").text($.i18n.prop("primaryDNSLabel"));
    $("#primaryDNS").attr("placeholder", $.i18n.prop("primaryDNS"));
    $("#secondaryDNSLabel").text($.i18n.prop("secondaryDNSLabel"));
    $("#secondaryDNS").attr("placeholder", $.i18n.prop("secondaryDNS"));
    $("#dhcpLegend").text($.i18n.prop("dhcpLegend"));
    $("#dhcpact").text($.i18n.prop("dhcpact"));
    $("#noDataDHCPMessage").text($.i18n.prop("noDataAva"));

    $("#Add").text($.i18n.prop("Add"));
    $("#Edit").text($.i18n.prop("Edit"));
    $("#Delete").text($.i18n.prop("Delete"));
    $("#poolNameHeader").text($.i18n.prop("poolNameHeader"));
    $("#networkHeader").text($.i18n.prop("networkHeader"));
    $("#subnetMaskHeader").text($.i18n.prop("subnetMaskHeader"));
    $("#router").text($.i18n.prop("router"));
    $("#DHCPpool").text($.i18n.prop("DHCPpool"));
    $("#DHCPpoolName").html($.i18n.prop("DHCPpoolName") + ' <span class="ccpexpCSSReplaceClass736">*</span>:');
    $("#poolName").attr("placeholder", $.i18n.prop("DHCPpoolName"));
    $("#DHCPpoolNetwork").html($.i18n.prop("DHCPpoolNetwork") + ' <span class="ccpexpCSSReplaceClass737">*</span>:');
    $("#network").attr("placeholder", $.i18n.prop("network"));
    $("#DHCPpoolSubnetMask").html($.i18n.prop("DHCPpoolSubnetMask") + ' <span class="ccpexpCSSReplaceClass737">*</span>:');
    $("#subnetMask").attr("placeholder", $.i18n.prop("DHCPpoolSubnetMask"));
    $("#DHCPpoolDefaultRoute").text($.i18n.prop("DHCPpoolDefaultRoute")+':');
    $("#DefaultRoute").attr("placeholder", $.i18n.prop("DefaultRoute"));
    $("#checkboxToIncludeDNS").text($.i18n.prop("checkboxToIncludeDNS"));
    $("#checkboxToIncludeDNSProxy").text($.i18n.prop("enableDNSProxy"));

    $("#DNSipPriAddress").attr("placeholder", $.i18n.prop("primaryDNS"));
    $("#DNSipSecAddress").attr("placeholder", $.i18n.prop("DefaultRoute"));

    $("#warningLabel").text($.i18n.prop("warningLabel"));
    $("#enableDNSProxyWarning").text($.i18n.prop("enableDNSProxyWarning"));
    $("#proceedWithConfiguration").text($.i18n.prop("proceedWithConfiguration"));

    $("#DHCPpoolPriDNS").text($.i18n.prop("DHCPpoolPriDNS"));

    $("#DHCPpoolPriDNS").text($.i18n.prop("DHCPpoolPriDNS"));
    $("#DHCPpoolSecDNS").text($.i18n.prop("DHCPpoolSecDNS"));
    $("#importDNS").text($.i18n.prop("importDNS"));
    $("#DNSdesc").text($.i18n.prop("DNSdesc"));
    $("#applyDNS").text($.i18n.prop("applyDNS"));
    $("#applyChange").text($.i18n.prop("applyChange"));
    $("#nativeVlanLbl").text($.i18n.prop("nativeVlan"));
    $("#dhcpSelectRowStr").text($.i18n.prop("selectRowStr"));
    $("#dhcpDeleteRowStr").text($.i18n.prop("dhcpDeleteRowStr"));
    $("#selectaRow").attr("title", $.i18n.prop("selectaRow"));
    $("#dialog-form").attr("title", $.i18n.prop("AddDhcpTitle"));

    $("#timeZoneLabel").text($.i18n.prop("wizardTimeZone"));
    $('#ntpMesgBasicSettings').text($.i18n.prop("ntpEnable"));
    $("#ntpServerBasicSettings").attr("placeholder", $.i18n.prop("domainOrIP"));
    $("#ntpServerTextBasicSettings").text($.i18n.prop("ntpServer"));
    $('.ntpSync').text($.i18n.prop("syncTime"));
    $('#ntpSyncBasicSettings').attr("title",$.i18n.prop("ntpHelpText"));

$('#basicTimeZone option[timeZoneId=1]').text($.i18n.prop('timeZoneId1'));
$('#basicTimeZone option[timeZoneId=2]').text($.i18n.prop('timeZoneId2'));
$('#basicTimeZone option[timeZoneId=3]').text($.i18n.prop('timeZoneId3'));
$('#basicTimeZone option[timeZoneId=4]').text($.i18n.prop('timeZoneId4'));
$('#basicTimeZone option[timeZoneId=5]').text($.i18n.prop('timeZoneId5'));
$('#basicTimeZone option[timeZoneId=6]').text($.i18n.prop('timeZoneId6'));
$('#basicTimeZone option[timeZoneId=7]').text($.i18n.prop('timeZoneId7'));
$('#basicTimeZone option[timeZoneId=8]').text($.i18n.prop('timeZoneId8'));
$('#basicTimeZone option[timeZoneId=9]').text($.i18n.prop('timeZoneId9'));
$('#basicTimeZone option[timeZoneId=10]').text($.i18n.prop('timeZoneId10'));
$('#basicTimeZone option[timeZoneId=11]').text($.i18n.prop('timeZoneId11'));
$('#basicTimeZone option[timeZoneId=12]').text($.i18n.prop('timeZoneId12'));
$('#basicTimeZone option[timeZoneId=13]').text($.i18n.prop('timeZoneId13'));
$('#basicTimeZone option[timeZoneId=14]').text($.i18n.prop('timeZoneId14'));
$('#basicTimeZone option[timeZoneId=15]').text($.i18n.prop('timeZoneId15'));
$('#basicTimeZone option[timeZoneId=16]').text($.i18n.prop('timeZoneId16'));
$('#basicTimeZone option[timeZoneId=17]').text($.i18n.prop('timeZoneId17'));
$('#basicTimeZone option[timeZoneId=18]').text($.i18n.prop('timeZoneId18'));
$('#basicTimeZone option[timeZoneId=19]').text($.i18n.prop('timeZoneId19'));
$('#basicTimeZone option[timeZoneId=20]').text($.i18n.prop('timeZoneId20'));
$('#basicTimeZone option[timeZoneId=21]').text($.i18n.prop('timeZoneId21'));
$('#basicTimeZone option[timeZoneId=22]').text($.i18n.prop('timeZoneId22'));
$('#basicTimeZone option[timeZoneId=23]').text($.i18n.prop('timeZoneId23'));
$('#basicTimeZone option[timeZoneId=24]').text($.i18n.prop('timeZoneId24'));
$('#basicTimeZone option[timeZoneId=25]').text($.i18n.prop('timeZoneId25'));
$('#basicTimeZone option[timeZoneId=26]').text($.i18n.prop('timeZoneId26'));
$('#basicTimeZone option[timeZoneId=27]').text($.i18n.prop('timeZoneId27'));
$('#basicTimeZone option[timeZoneId=28]').text($.i18n.prop('timeZoneId28'));
$('#basicTimeZone option[timeZoneId=29]').text($.i18n.prop('timeZoneId29'));
$('#basicTimeZone option[timeZoneId=30]').text($.i18n.prop('timeZoneId30'));
$('#basicTimeZone option[timeZoneId=31]').text($.i18n.prop('timeZoneId31'));
$('#basicTimeZone option[timeZoneId=32]').text($.i18n.prop('timeZoneId32'));
$('#basicTimeZone option[timeZoneId=33]').text($.i18n.prop('timeZoneId33'));
$('#basicTimeZone option[timeZoneId=34]').text($.i18n.prop('timeZoneId34'));
$('#basicTimeZone option[timeZoneId=35]').text($.i18n.prop('timeZoneId35'));
$('#basicTimeZone option[timeZoneId=36]').text($.i18n.prop('timeZoneId36'));
$('#basicTimeZone option[timeZoneId=37]').text($.i18n.prop('timeZoneId37'));
$('#basicTimeZone option[timeZoneId=38]').text($.i18n.prop('timeZoneId38'));
$('#basicTimeZone option[timeZoneId=39]').text($.i18n.prop('timeZoneId39'));
$('#basicTimeZone option[timeZoneId=40]').text($.i18n.prop('timeZoneId40'));
$('#basicTimeZone option[timeZoneId=41]').text($.i18n.prop('timeZoneId41'));
$('#basicTimeZone option[timeZoneId=42]').text($.i18n.prop('timeZoneId42'));
$('#basicTimeZone option[timeZoneId=43]').text($.i18n.prop('timeZoneId43'));
$('#basicTimeZone option[timeZoneId=44]').text($.i18n.prop('timeZoneId44'));
$('#basicTimeZone option[timeZoneId=45]').text($.i18n.prop('timeZoneId45'));
$('#basicTimeZone option[timeZoneId=46]').text($.i18n.prop('timeZoneId46'));
$('#basicTimeZone option[timeZoneId=47]').text($.i18n.prop('timeZoneId47'));
$('#basicTimeZone option[timeZoneId=48]').text($.i18n.prop('timeZoneId48'));
$('#basicTimeZone option[timeZoneId=49]').text($.i18n.prop('timeZoneId49'));
$('#basicTimeZone option[timeZoneId=50]').text($.i18n.prop('timeZoneId50'));
$('#basicTimeZone option[timeZoneId=51]').text($.i18n.prop('timeZoneId51'));
$('#basicTimeZone option[timeZoneId=52]').text($.i18n.prop('timeZoneId52'));
$('#basicTimeZone option[timeZoneId=53]').text($.i18n.prop('timeZoneId53'));
$('#basicTimeZone option[timeZoneId=54]').text($.i18n.prop('timeZoneId54'));
$('#basicTimeZone option[timeZoneId=55]').text($.i18n.prop('timeZoneId55'));
$('#basicTimeZone option[timeZoneId=56]').text($.i18n.prop('timeZoneId56'));
$('#basicTimeZone option[timeZoneId=57]').text($.i18n.prop('timeZoneId57'));
$('#basicTimeZone option[timeZoneId=58]').text($.i18n.prop('timeZoneId58'));
$('#basicTimeZone option[timeZoneId=59]').text($.i18n.prop('timeZoneId59'));
$('#basicTimeZone option[timeZoneId=60]').text($.i18n.prop('timeZoneId60'));
$('#basicTimeZone option[timeZoneId=61]').text($.i18n.prop('timeZoneId61'));
$('#basicTimeZone option[timeZoneId=62]').text($.i18n.prop('timeZoneId62'));
$('#basicTimeZone option[timeZoneId=63]').text($.i18n.prop('timeZoneId63'));
$('#basicTimeZone option[timeZoneId=64]').text($.i18n.prop('timeZoneId64'));
$('#basicTimeZone option[timeZoneId=65]').text($.i18n.prop('timeZoneId65'));
$('#basicTimeZone option[timeZoneId=66]').text($.i18n.prop('timeZoneId66'));
$('#basicTimeZone option[timeZoneId=67]').text($.i18n.prop('timeZoneId67'));
$('#basicTimeZone option[timeZoneId=68]').text($.i18n.prop('timeZoneId68'));
$('#basicTimeZone option[timeZoneId=69]').text($.i18n.prop('timeZoneId69'));
$('#basicTimeZone option[timeZoneId=70]').text($.i18n.prop('timeZoneId70'));
$('#basicTimeZone option[timeZoneId=71]').text($.i18n.prop('timeZoneId71'));
$('#basicTimeZone option[timeZoneId=72]').text($.i18n.prop('timeZoneId72'));
$('#basicTimeZone option[timeZoneId=73]').text($.i18n.prop('timeZoneId73'));
$('#basicTimeZone option[timeZoneId=74]').text($.i18n.prop('timeZoneId74'));
$('#basicTimeZone option[timeZoneId=75]').text($.i18n.prop('timeZoneId75'));
$('#basicTimeZone option[timeZoneId=76]').text($.i18n.prop('timeZoneId76'));
$('#basicTimeZone option[timeZoneId=77]').text($.i18n.prop('timeZoneId77'));
$('#basicTimeZone option[timeZoneId=78]').text($.i18n.prop('timeZoneId78'));
$('#basicTimeZone option[timeZoneId=79]').text($.i18n.prop('timeZoneId79'));
$('#basicTimeZone option[timeZoneId=80]').text($.i18n.prop('timeZoneId80'));
$('#basicTimeZone option[timeZoneId=81]').text($.i18n.prop('timeZoneId81'));
$('#basicTimeZone option[timeZoneId=82]').text($.i18n.prop('timeZoneId82'));
    
  }
  function dhcpDnsLoading() {
    loadAndDisplayLanguages();
    var addDHCP = false, validatorDHCP, editDHCPLoadedFirstTimeCheck=false;
    //var edit = false, editDHCP = false, validatorUser;
    $('#hideAll').css('display', 'block');
    //This function should be called first

    refresh();
    $('#error').hide();
    $('#hostnameError').hide();

    $.each(ntpArr1,function(index,value){
        $('#ntp-list-basicSettings').append('<option>'+value+'</option>');
    });

    $('#basicTimeZone').change(function(){
      refreshNTPServerList();
    });

    $('#ntpSyncBasicSettings').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('#ntpEnableBasicSettings').change(function(){
        if ($(this).is(':checked')) {
            $('#showNTPServerBasicSettings').show();
        }else{
            $('#ntpSyncBasicSettings').attr("checked", false);
            $('#showNTPServerBasicSettings').hide();
        }
    });

    /**----------------------------------DNS code ---------------------------------------------------------------------------**/
    $('#DNSError').hide();
    validatorDNS = $('#DNSForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    /**----------------------------------DHCP code ---------------------------------------------------------------------------**/



    $('#errorDHCP').hide();
    validatorDHCP = $('#ipv4dhcpForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });


    /*****Show the  DNS ip addresses in the GUI on DHCP -ADD/EDIT , by clicking on Checkbox(include DNS values to the DHCP pool*******/

    $("#checkDNSProxy")
      .click(function() {
        checkboxstate = $(this).is(':checked');
        if (checkboxstate) {
          $('#checkDNS').attr("checked", false);
          $('#checkDNS').attr("disabled", false);
          $('#DNSipPriAddress').val("");
          $('#DNSipSecAddress').val("");
          $('#DNSipPriAddress').attr("disabled", false);
          $('#DNSipSecAddress').attr("disabled", false);
          $("#DefaultRoute").removeClass('notrequiredipv4');
          $("#DefaultRoute").addClass('requiredipv4');
          $("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute") + ' <span class="ccpexpCSSReplaceClass737">*</span>:');
          //Add code to display warning message for Domain filtering.
          if (editDHCPLoadedFirstTimeCheck === false) {
            $("#dnsProxyEnableWarningDiv").show();
          }
        } else {
          if (priDnsList.length > 0) {
            $('#checkDNS').attr("disabled", false);
            //$('#DNSipPriAddress').attr("disabled", false);
            //$('#DNSipSecAddress').attr("disabled", false);
          }
          $("#DefaultRoute").removeClass('requiredipv4');
          $("#DefaultRoute").addClass('notrequiredipv4');
          $("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute")+':');
          //Add code to hide warning message for Domain filtering.
          $("#dnsProxyEnableWarningDiv").hide();
          if (editDHCPLoadedFirstTimeCheck) {
            editDHCPLoadedFirstTimeCheck = false;
          }
        }
    });

    $("#checkDNS")
      .click(function() {
        var reg = /^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/i;
        checkboxstate = $(this).is(':checked');
        dnsPriVal = $("#primaryDNSOld").val();
        dnsSecVal = $("#secondaryDNSOld").val();
        dnsPriConfigVal = $("#primaryDNS-DHCPOld").val();
        dnsSecConfigVal = $("#secondaryDNS-DHCPOld").val();
        if (checkboxstate) {
          if (reg.test(dnsPriVal) && reg.test(dnsSecVal)) {

            $('#DNSipPriAddress').val(dnsPriVal);
            $('#DNSipSecAddress').val($.trim(dnsSecVal));

          }
          else if (reg.test(dnsPriVal) && !(reg.test(dnsSecVal))) {
            $('#DNSipPriAddress').val(dnsPriVal);
            $('#DNSipSecAddress').val("");
          }
          else if (reg.test(dnsSecVal) && !(reg.test(dnsPriVal))) {

            $('#DNSipPriAddress').val(dnsSecVal);
            $('#DNSipSecAddress').val("");
          }
          else {
            $('#DNSipPriAddress').val("");
            $('#DNSipSecAddress').val("");
          }
          //$('#checkDNSProxy').attr("checked", false);
          //$('#checkDNSProxy').attr("disabled", true);
	  $('#DNSipPriAddress').attr("disabled", true);
          $('#DNSipSecAddress').attr("disabled", true);
        }
// ISSUE :changing the state of checkbox, configured values didn't show up, untill you refresh the page.
        else {
          $('#DNSipPriAddress').val(dnsPriConfigVal);
          $('#DNSipSecAddress').val(dnsSecConfigVal);
          //$('#checkDNSProxy').attr("disabled", false);
          $('#DNSipPriAddress').attr("disabled", false);
          $('#DNSipSecAddress').attr("disabled", false);
        }
      });
    /********************************************************************************************************************************/
    var widthLang = 790;
    var languageLocalization = $.i18n.prop("langwage");
    if (languageLocalization === "ja") {
      widthLang = 846;
    }

    $("#dialog-formDHCP").dialog({
      autoOpen: false,
      height: 510,
      width: widthLang,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            if ($('#ipv4dhcpForm').valid()) {
              $("#dialog-formDHCP").dialog("close");
              blockPage("Applying");
              setTimeout(function() {
                var poolName, network, defaultRouteIp, editDhcp, arr, response, dnsArr = [], isPreview = false, dhcpPoolName, xml, defaultRoute;
                //var dnsValue;
                //sending the diabled fields form value
                $("#poolName").attr("disabled", false);
                $("#subnetMask").attr("disabled", false);
                arr = $('#ipv4dhcpForm').formToArray();
                // current DHCP-DNS values
                dnsPriValue = $('#DNSipPriAddress').val();
                dnsSecValue = $('#DNSipSecAddress').val();
                // hidden configured pri and sec dns-server CLI values
                dnsConfigPriValue = $('#primaryDNS-DHCPOld').val();
                dnsConfigSecValue = $('#secondaryDNS-DHCPOld').val();
                dhcpPoolName = $('#poolName').val();
                defaultRoute = $('#DefaultRoute').val();
                $('#dnsProxyEnableWarningDiv').hide();
                try {
                  if (addDHCP) {
                    editDHCPLoadedFirstTimeCheck = false;
                    //$("#subnetMask").attr("disabled",true); // if error is thrown state of the fields should remain same
                    response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP.txt", arr, isPreview);

                    /************If checkbox is checked - take the configured DNS values, else enter new DNS values in the textbox****************/

                    if (dnsPriValue.length > 0 || dnsSecValue.length > 0) {
                      dnsArr.push({name: "ipv4PoolName", value: dhcpPoolName},
                                  {name: "DNSipPriAddress", value: dnsPriValue},
                                  {name: "DNSipSecAddress", value: dnsSecValue});
                      response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP_DNS.txt", dnsArr, isPreview);
                      dnsArr = [];
                    }
                    else {
                      response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP.txt", arr, isPreview);
                    }
                    /* If Import all dhcp check box is checked*/
                    if ($('#importall').attr('checked')) {
                      response = deviceCommunicator.configureCommandsFromTemplate("import.txt", arr, isPreview);
                    } else {
                      response = deviceCommunicator.configureCommandsFromTemplate("noimport.txt", arr, isPreview);
                    }
                    /* If Default-Router is entered in gui the configure cli*/
                    if (defaultRoute.length > 0) {
                      response = deviceCommunicator.configureCommandsFromTemplate("defaultRoute.txt", arr, isPreview);
                    }

                    if ($('#checkDNSProxy').attr('checked')) {
		      if ($("#DNSipPriAddress").val() != "" || $("#DNSipSecAddress").val() != "") {
			
		      arr.push(
                                    {name: "DNSipPriAddress", value: $("#DNSipPriAddress").val()},
                                    {name: "DNSipSecAddress", value: $("#DNSipSecAddress").val()});
		      }
                      response = deviceCommunicator.configureCommandsFromTemplate2("addDNSProxyForDHCPPool.txt", arr, isPreview);
                    }
                    $('#dhcpDNSchkbx').prop('checked', false);
                  } //add
                  else {
                    editDHCPLoadedFirstTimeCheck = true;
                    poolName = $('#dhcpTable tr.hilite').find("td").eq(1).text();
                    network = $('#dhcpTable tr.hilite').find("td").eq(2).text();
                    subnetMask = $('#dhcpTable tr.hilite').find("td").eq(3).text();
                    defaultRouteIp = $('#dhcpTable tr.hilite').find("td").eq(4).text();
                    // if error is thrown state of the fields should remain same
                    $("#poolName").attr("disabled", true);
                    //$("#subnetMask").attr("disabled",true);
                    if (defaultRouteIp.length > 0 && defaultRouteIp !== defaultRoute) {
                      var deleteDefaultRoute = [{name: "defaultRoute", value: defaultRouteIp}];
                      try{
                      response = deviceCommunicator.configureCommandsFromTemplate2("deleteDHCPDefaultRoute.txt", deleteDefaultRoute, isPreview);
                        }
              catch(e){
                  errorLogInConsole(e.errorResponse);
              }
                    }
                    editDhcp = [{name: "ipv4PoolName", value: poolName},
                                {name: "ipv4PoolNetwork", value: network},
                                {name: "SubnetMask", value: subnetMask},
                                {name: "defaultRoute", value: defaultRouteIp}];
                    response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP.txt", arr, isPreview);

                    /* If Import all dhcp check box is checked*/
                    if ($('#importall').attr('checked')) {
                      response = deviceCommunicator.configureCommandsFromTemplate("import.txt", arr, isPreview);
                    } else {
                      response = deviceCommunicator.configureCommandsFromTemplate("noimport.txt", arr, isPreview);
                    }
                    if (defaultRoute.length > 0) {
                      try{
                  response = deviceCommunicator.configureCommandsFromTemplate("defaultRoute.txt", arr, isPreview);
              }
                      catch(e){
                  errorLogInConsole(e.errorResponse);
            }
                    }
                    else {
                      //Fix for CSCur56597 - Start
                      //response = deviceCommunicator.configureCommandsFromTemplate("noDefaultRoute.txt", arr, isPreview);

                      //Get show run parse of the default-router and get the DefaultRoute from it.
                      var userSearchCmdStr = "show running-config | include default-router";
                      //The first element of the array has the user details.
                      var defRouteDetailsCheckResult = deviceCommunicator.getExecCmdOutput(userSearchCmdStr);
                      var defRouteExisting = false, defRouteShowRunString;
                      //If default-router is existing, then execute the below command
                      if (defRouteDetailsCheckResult != null && defRouteDetailsCheckResult != undefined) {
                        if ($.isArray(defRouteDetailsCheckResult) && defRouteDetailsCheckResult.length > 0)
                        {
                          defRouteExisting = true;
                          defRouteShowRunString = defRouteDetailsCheckResult[0];
                        } else if (typeof defRouteDetailsCheckResult === 'string' && defRouteDetailsCheckResult != "")
                        {
                          defRouteExisting = true;
                          defRouteShowRunString = defRouteDetailsCheckResult;
                        }
                      }
                      if (defRouteExisting) {
                        //Remove the DefaultRoute
                        try{
                response = deviceCommunicator.configureCommandsFromTemplate("noDefaultRoute.txt", arr, isPreview);
            }
            catch(e){
                errorLogInConsole(e.errorResponse);
            }
                        var cmdSplitArray = defRouteShowRunString.split(" ");
                        ////consoleLog("cmdSplitArray - "+cmdSplitArray);
                        var confCmdStrRemoveExclusion = "no ip dhcp excluded-address " + cmdSplitArray[1];
                        ////consoleLog ("DHCP CSCur56597 - confCmdStrRemoveExclusion -> "+confCmdStrRemoveExclusion);
                        try{
                response = deviceCommunicator.getConfigCmdOutput(confCmdStrRemoveExclusion, false);
            }
            catch(e){
                errorLogInConsole(e.errorResponse);
            }
                        ////consoleLog ("DHCP CSCur56597 - Response after exclusion removal -> "+response);
                      }
                      //Fix for CSCur56597 - End
                    }

                    /*If checkbox is checked - take the DNS pool values, ELSE put DNS values under the DHCP POOL to be edited or enter the NEW values*/

                    if ((dnsConfigPriValue !== null || dnsConfigPriValue !== "") || (dnsConfigSecValue !== null ||
                      dnsConfigSecValue !== "")) {

                      if ((dnsConfigPriValue !== dnsPriValue) || (dnsConfigSecValue !== dnsSecValue)) {
                        if (((dnsPriValue !== "") && (dnsSecValue === "")) || ((dnsPriValue === "") && (dnsSecValue !== "")) ||
                            ((dnsPriValue !== "") && (dnsSecValue !== ""))) {
                          dnsArr.push({name: "ipv4PoolName", value: dhcpPoolName},
                                      {name: "DNSipPriAddress", value: dnsPriValue},
                                      {name: "DNSipSecAddress", value: dnsSecValue});
                          response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP_DNS.txt", dnsArr, isPreview);
                          dnsArr = [];
                        }
                        else {
                          dnsArr.push({name: "ipv4PoolName", value: dhcpPoolName});
                          //response = deviceCommunicator.configureCommandsFromTemplate("ipv4DHCPDelete_DNS.txt", dnsArr, isPreview);
                          dnsArr = [];
                        }
                      }
                      // old and new values are EQUAL and not NULL
                      else {
                        response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP.txt", arr, isPreview);
                      }
                    }
                    // if  old  DNS values are null.
                    else {
                      if (((dnsPriValue !== null || dnsPriValue !== "") && (dnsSecValue === null || dnsSecValue === "")) ||
                          ((dnsPriValue === null || dnsPriValue === "") && (dnsSecValue !== null || dnsSecValue !== "")) ||
                          ((dnsPriValue !== null || dnsPriValue !== "") && (dnsSecValue !== null || dnsSecValue !== ""))) {
                        dnsArr.push({name: "ipv4PoolName", value: dhcpPoolName},
                                    {name: "DNSipPriAddress", value: dnsPriValue},
                                    {name: "DNSipSecAddress", value: dnsSecValue});
                        response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP_DNS.txt", dnsArr, isPreview);
                        dnsArr = [];
                      }
                      // old and new values are NULL
                      else {
                        response = deviceCommunicator.configureCommandsFromTemplate("addNewDHCP.txt", arr, isPreview);
                      }
                    }
                    if ($('#checkDNSProxy').attr('checked')) {
		      if ($("#DNSipPriAddress").val() != "" || $("#DNSipSecAddress").val() != "") {
			
		      arr.push(
                                    {name: "DNSipPriAddress", value: $("#DNSipPriAddress").val()},
                                    {name: "DNSipSecAddress", value: $("#DNSipSecAddress").val()});
		      }
                      response = deviceCommunicator.configureCommandsFromTemplate2("addDNSProxyForDHCPPool.txt", arr, isPreview);
                    } else if (DHCP_DNS_List.length > 0) {
		      arr.push({name:"formcli", value:"no dns-server \n"});
		      if ($("#DNSipPriAddress").val() != "" || $("#DNSipSecAddress").val() != "") {
		        if(arr[arr.length-1].name=="formcli"){
		          arr[arr.length-1].value="no dns-server \n dns-server "+$("#DNSipPriAddress").val()+" "+$("#DNSipSecAddress").val();
		        }else{
			arr.push({name:"formcli", value:"no dns-server \n dns-server "+$("#DNSipPriAddress").val()+" "+$("#DNSipSecAddress").val()});
		        }
		      }
                      response = deviceCommunicator.configureCommandsFromTemplate2("deleteDNSProxyForDHCPPool.txt", arr, isPreview);
                      var dhcpPoolRowsCount = $('#dhcpTable tbody tr').length;
                      if (dhcpPoolRowsCount == 1) {
                        arr = [{name: "ipv4PoolName", value: poolName}];
                        response = deviceCommunicator.configureCommandsFromTemplate2("deleteDNSProxySettings.txt", deleteDefaultRoute, false);
                      }
                    }
                  }
                  //edit (ELSE)
                  if ($("#wlanInterfaceName").val().length > 0) {
                    arr.push({name: "wlanInterfaceName", value: $("#wlanInterfaceName").val()});
                    if ($('#enableTrunk').is(':checked')) {
                      deviceCommunicator.configureCommandsFromTemplate("enableTrunkOnInterface.txt", arr, isPreview);
                    } else {
                      deviceCommunicator.configureCommandsFromTemplate("disableTrunkOnInterface.txt", arr, isPreview);
                    }

                    if ($('#enableNativeVlan').is(':checked') && $('#nativeVlan').val().length > 0) {
                      deviceCommunicator.configureCommandsFromTemplate("enableNativeVlanOnInterface.txt", arr, isPreview);
                    } else {
                      deviceCommunicator.configureCommandsFromTemplate("disableNativeVlanOnInterface.txt", arr, isPreview);
                    }
                  }

                  //$(this).dialog("close");
                  if (!shRunFormatLatest) {
                    shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
                    shRunFormatLatest = true;
                  }
                  xml = shRunFormatOutput;

                  refreshDHCP(xml);
                  $.unblockUI();
                  deviceCommunicator.doWriteMemory();
                } catch (error) {
                  $("#dialog-formDHCP").dialog("open");
                  $('#errorMessageDHCP').html(error.errorResponse);
                  $('#errorDHCP').show();
                  if (addDHCP) {
                    deviceCommunicator.configureCommandsFromTemplate("ipv4DHCPDelete.txt", arr, false);
                  }
                  $.unblockUI();
                }
              }, 1000);

            }
          }
        }, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $("#dnsProxyEnableWarningDiv").hide();
            $(this).dialog("close");
          }
        }],
      close: function() {
            $('#dhcpDNSchkbx').prop('checked', false);
            $("#dnsProxyEnableWarningDiv").hide();
      }
    });

    $("#selectaRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#deleteaRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
            $("#Delete").trigger("click");
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {
        $(this).dialog("close");
      }
    });

    //buttons for dhcp table
    $("#Add")
      .button()
      .click(function() {
        addDHCP = true;
	$('#ipv4dhcpForm').resetForm();
        $('#poolName').addClass('duplicatePoolCheck');
        $("#dialog-formDHCP").dialog("open");
	$("#checkDNS").attr("checked", false);
	$("#DHCPpoolDefaultRoute").html($.i18n.prop("DHCPpoolDefaultRoute")+':');
        $('#errorDHCP').hide();
        $('#enableTrunkTR').hide();
        $('#enableNativeVlanTR').hide();
        $('#nativeVlanTR').hide();
        validatorDHCP.resetForm();
        $('#PoolName').val('');
        $('#network').val('');
        $('#subnetMask').val('');
        $('#subnetMask').removeAttr("disabled");
        $("#poolName").attr("disabled", false);
        $("#checkDNSProxy").attr("disabled", false);
	$("#checkDNSProxy").attr("checked", false);
	$('#DNSipPriAddress').attr("disabled", false);
        $('#DNSipSecAddress').attr("disabled", false);
        //$("#subnetMask").attr("disabled", true);
        $("#importall").attr("checked", true);
        $("#dialog-formDHCP").dialog("option", "title", $.i18n.prop("AddDhcpTitle"));
        populateDNSvaluesForDHCPpool("");
      });

    $(".dhcpEdit").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerDHCPEdit($this);
    });
    $('#dhcpTable tbody tr').live('dblclick', function() {
      $this = $(this).closest("tr");
      triggerDHCPEdit($this);
    });

    function triggerDHCPEdit($this) {
      $('#dhcpTable input:checkbox').removeAttr('checked');
      $('#dhcpTable input:checkbox').removeAttr('checked');
      $this.find('input:checkbox').eq(0).prop("checked", true);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      enableDisableButton("dhcpTable", "Add");
      $("#Edit").trigger("click");
    }

    $("#Edit")
      .button()
      .click(function() {
        var poolName, network, subnetMask, editDHCP, defaultRoute;
        //var td, subnetMasking;
        $td = $('#dhcpTable tr.hilite').closest('tr').children('td');
        if ($td.length !== 0) {
          $('#errorDHCP').hide();
          validatorDHCP.resetForm();
          $('#poolName').removeClass('duplicatePoolCheck');
	  $("#checkDNS").attr("checked", false);
	   $('#DNSipPriAddress').attr("disabled", false);
	  $('#DNSipSecAddress').attr("disabled", false);
          $("#dialog-formDHCP").dialog("open");
          $("#dialog-formDHCP").dialog("option", "title", $.i18n.prop("EditDhcpTitle"));
          $('#enableTrunkTR').hide();
          $('#enableNativeVlanTR').hide();
          $('#nativeVlanTR').hide();
          addDHCP = false;
          editDHCP = true;
          poolName = $('#dhcpTable tr.hilite').find("td").eq(1).text();
          network = $('#dhcpTable tr.hilite').find("td").eq(2).text();
          subnetMask = $('#dhcpTable tr.hilite').find("td").eq(3).text();
          defaultRoute = $('#dhcpTable tr.hilite').find("td").eq(4).text();
          $('#poolName').val(poolName);
          $('#network').val(network);
          if (subnetMask == null || subnetMask == "") {
            $('#subnetMask').val('255.255.255.0');
          } else {
            $('#subnetMask').val(subnetMask);
          }
          $('#DefaultRoute').val($.trim(defaultRoute));
          $("#poolName").attr("disabled", true);
          //$("#subnetMask").attr("disabled", true);

          //calling populateDNSvaluesForDHCPpool() to populate DNS server values
          populateDNSvaluesForDHCPpool(poolName);

          importCheckboxForDhcp(poolName);
        } else {
          $("#selectaRow").dialog("open");
        }

      });
    /*delete dhcpdns data by clicking delete icon*/
    $(".dhcpDelete").live('click', function(e) {
      dnsFlag = true;
      $this = $(this).closest("tr");
      var dhcpChkbox = $this.find('input:checkbox').eq(0);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      dhcpChkbox.prop('checked', true);
      enableDisableButton("dhcpTable", "Add");
      $("#deleteaRow").dialog("open");
      //$("#Delete").trigger("click");

    });

    $("#Delete")
      .button()
      .click(function(e) {
        var poolName, poolNetwork, defaultRoute, arr, xml;
        //var td;
        var dhcpAllRowCount = $('#dhcpTable tbody tr').length;
        var selectedRows = $("#dhcpTable tbody input:checkbox:checked").length;
        $td = $('#dhcpTable tr.hilite').closest('tr').children('td');
        if (selectedRows == 0) {
          $.unblockUI();
          $("#selectaRow").dialog("open");
        } else {
          blockPage("Applying");
          setTimeout(function() {
            if (selectedRows > 1 && !dnsFlag) {
              $("#dhcpTable tbody input:checkbox").each(function() {
                if (this.checked) {
                  $td = $(this).closest("tr").children('td');
                  poolName = $td.eq(1).text();
                  poolNetwork = $td.eq(2).text();
                  defaultRoute = $td.eq(4).text();
                  arr = [{name: "ipv4PoolName", value: poolName}, {name: "ipv4PoolNetwork", value: poolNetwork}];
                  deviceCommunicator.configureCommandsFromTemplate("ipv4DHCPDelete.txt", arr, false);
                  if (defaultRoute.length > 0) {
                    var deleteDefaultRoute = [{name: "defaultRoute", value: defaultRoute}];
                    response = deviceCommunicator.configureCommandsFromTemplate2("deleteDHCPDefaultRoute.txt", deleteDefaultRoute, false);
                  }
                }
              });
            } else {
              poolName = $td.eq(1).text();
              poolNetwork = $td.eq(2).text();
              defaultRoute = $td.eq(4).text();
              arr = [{name: "ipv4PoolName", value: poolName}, {name: "ipv4PoolNetwork", value: poolNetwork}];
              deviceCommunicator.configureCommandsFromTemplate("ipv4DHCPDelete.txt", arr, false);
              if (defaultRoute.length > 0) {
                var deleteDefaultRoute = [{name: "defaultRoute", value: defaultRoute}];
                response = deviceCommunicator.configureCommandsFromTemplate2("deleteDHCPDefaultRoute.txt", deleteDefaultRoute, false);
              }
            }

            if (dhcpAllRowCount == 1 || dhcpAllRowCount == selectedRows) {
              arr = [{name: "ipv4PoolName", value: poolName}];
              response = deviceCommunicator.configureCommandsFromTemplate2("deleteDNSProxySettings.txt", arr, false);
            }
            dnsFlag = false;
            if (!shRunFormatLatest) {
              shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
              shRunFormatLatest = true;
            }
            xml = shRunFormatOutput;

            refreshDHCP(xml);
            $.unblockUI();
            deviceCommunicator.doWriteMemory();

          }, 1000);
        }
      });

    $('#enableNativeVlan').click(function() {
      if ($("#enableNativeVlan:checked").val() === undefined) {
        $("#nativeVlan").removeClass("required");
        $("#nativeVlan").rules("remove");
        $('#nativeVlanTR').hide();
        $("#nativeVlan").val("");
      } else {
        $("#nativeVlan").rules("add", {required: true, range: [1, 4094]});
        $('#nativeVlanTR').show();
        $("#nativeVlan").val("");
      }
    });

    /**------------------------------------------------Apply button in DNS form-----------------------------------------------**/

    $("#applyDNS")
      .button()
      .click(function(e) {
        if ($('#DNSForm').valid()) {
          blockPage("Applying");
          var newPrimaryDNS, newSecondaryDNS, arrDNSValues = [], isPreview = false;
          $('#DNSError').hide();
          newPrimaryDNS = $('#primaryDNS').val();
          newSecondaryDNS = $('#secondaryDNS').val();
          oldPrimaryDNS = $('#primaryDNSOld').val();
          oldSecondaryDNS = $('#secondaryDNSOld').val();

          try {
            if (oldPrimaryDNS !== "" && oldSecondaryDNS !== "") {
              if (newPrimaryDNS !== "" && newSecondaryDNS !== "") {
                if ((newPrimaryDNS !== oldPrimaryDNS) && (newSecondaryDNS !== oldSecondaryDNS)) {
                  //deleting OLD values
                  arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                  arrDNSValues.push({name: "dns", value: oldSecondaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                  // adding NEW values
                  arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                  arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                }
                //1st if
                else if ((newPrimaryDNS !== oldPrimaryDNS) && (newSecondaryDNS === oldSecondaryDNS)) {
                  arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                  arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                }
                else if ((newPrimaryDNS === oldPrimaryDNS) && (newSecondaryDNS !== oldSecondaryDNS)) {
                  arrDNSValues.push({name: "dns", value: oldSecondaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                  arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                  response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                  arrDNSValues = [];
                }
                // ELSE if both values are equal NO command is delivered.
              }
              //2nd if
              else if (newPrimaryDNS === "" && newSecondaryDNS !== "") {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
                arrDNSValues.push({name: "dns", value: oldSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];

                arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else if (newPrimaryDNS !== "" && newSecondaryDNS === "") {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
                arrDNSValues.push({name: "dns", value: oldSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];

                arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
                arrDNSValues.push({name: "dns", value: oldSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
            }
            // 3rd if
            else if (oldPrimaryDNS !== "" && oldSecondaryDNS === "") {

              if (newPrimaryDNS === "" && newSecondaryDNS !== "") {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];

                arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else if (newPrimaryDNS !== "" && newSecondaryDNS === "") {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];

                arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else if (newPrimaryDNS !== "" && newSecondaryDNS !== "") {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];

                arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
                arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else {
                arrDNSValues.push({name: "dns", value: oldPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
            }
            else {
              // pri and sec DNS OLD values are null
              if (newPrimaryDNS === "" && newSecondaryDNS !== "") {
                arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else if (newPrimaryDNS !== "" && newSecondaryDNS === "") {

                arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              else if (newPrimaryDNS !== "" && newSecondaryDNS !== "") {

                arrDNSValues.push({name: "dns", value: newPrimaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
                arrDNSValues.push({name: "dns", value: newSecondaryDNS});
                response = deviceCommunicator.configureCommandsFromTemplate("addDNS.txt", arrDNSValues, isPreview);
                arrDNSValues = [];
              }
              // ELSE if both NEW and OLD values are NULL NO command is delivered.
            }


          } catch (error) {
            $('#DNSErrorMessage').html(error.errorResponse);
            $('#DNSError').show();
            refresh();
            $.unblockUI();
            return false;
          }
          e.preventDefault();
          setTimeout(function() {
            refresh();
            $.unblockUI();
            deviceCommunicator.doWriteMemory();
          }, 1000);
        }


      });
    /**------------------------------------------------------------------------------------------------------------------------**/


    //buttons for user table

    $("#applyChange")
      .button()
      .click(function(e) {
        blockPage("Applying");
        var newHostName, newDomainName, hostDomainUpdated, clockInfo, ntpServer, ntpMaster;
        $('#hostnameError').hide();
        newHostName = $('#hostNameInput').val();
        newDomainName = $('#domainName').val();
        hostDomainUpdated = $('#hostNameForm').formToArray();
        clockInfo= "clock timezone GMT "+ $('#basicTimeZone').val().replace(".", " ");
        ntpServer = "ntp server ";
        ntpMaster = "ntp master";
        if (newHostName != null && newHostName != "") {
          hostDomainUpdated.push({name: "noHost", value: ""});
        } else {
          hostDomainUpdated.push({name: "noHost", value: "no"});
        }
        if (newDomainName != null && newDomainName != "") {
          hostDomainUpdated.push({name: "noDomain", value: ""});
        } else {
          hostDomainUpdated.push({name: "noDomain", value: "no"});
        }
        hostDomainUpdated.push({name: "clockInfo", value:clockInfo});
	
	var ntpServerValueFromPage = $('#ntpServerBasicSettings').val();

	if (ntpIPAddressPeer == ntpServerValueFromPage) {
	  ntpServer = "";
	  if (!$('#ntpEnableBasicSettings').is(':checked') && ntpServerLoadCheck) {
	      ntpServer = "no ntp server " + ntpIPAddressPeer;
	  }
	} else {
	  var ntpipaddpeerRemove = "";
	  if (ntpServerValueFromPage != undefined && ntpServerValueFromPage.trim() != "") {
	    ntpServer = "ntp server " + ntpServerValueFromPage;
	  } else {
	    ntpServer = "";
	  }
	  if (!$('#ntpEnableBasicSettings').is(':checked')) {
	    if (ntpServerLoadCheck) {
	      ntpServer = "no "+ ntpServer;
	    } else {
	      ntpServer = "";  
	    }
	  }
	  if (ntpIPAddressPeer != undefined && ntpIPAddressPeer != "") {
	    ntpipaddpeerRemove = "no ntp server " + ntpIPAddressPeer + "\n";
	  }
	  ntpServer = ntpipaddpeerRemove + ntpServer;
	}
	
        hostDomainUpdated.push({name: "ntpServer", value: ntpServer});       
        if ($('#ntpSyncBasicSettings').is(':checked')) {
          hostDomainUpdated.push({name: "ntpMaster", value:ntpMaster});       
        } else {
          if (ntpSyncLoadCheck) {
            ntpMaster = "no "+ ntpMaster;
          } else {
            ntpMaster = "";
          }
          hostDomainUpdated.push({name: "ntpMaster", value:ntpMaster});
        }
        try {
          response = deviceCommunicator.configureCommandsFromTemplate("hostnameDomainname.txt", hostDomainUpdated, false);
          refresh();
        } catch (error) {
          $('#hostnameErrorMessage').html(error.errorResponse);
          $('#hostnameError').show();
          $.unblockUI();
          return false;
        }
        e.preventDefault();
        setTimeout(function() {
          refresh();
          $.unblockUI();
          deviceCommunicator.doWriteMemory();
        }, 1000);
      });
    $('#hideAll').css('display', 'none');
  }
  return {
    dhcpDnsLoading: dhcpDnsLoading
  };
}());

var natEnabledFlag = false, currentPrimaryWanInterface = "", enableDisableNatFlag = false, currentPrimaryWanInterfaceDesc = "", currentBackupWanInterface = "", currentBackupWanInterfaceDesc = "", loopBackVlan = 0;
function isEmpty(str) {
    return (!str || /^\s*$/.test(str));
}
var iAndC = (function () {
    var interfaceArr = [];
    var lanInterfacesglobe = [];
    lanInterfacesglobe.length = 0;
    var upDownFlag = false, deviceIP = "", urlFlag = false, urlIP = "";
    var subinterfaceFlag = "no";
    var response, slaDetails, WANslaIP = "", arrDesc = [], patt1 = /_/, intDesc = "", shrunCliOutput = "", editableInterfaces = [], dhcpList = [], dhcpmap = [], defarr = [], checkWanDialog = false;
    //var securityLicense = false;
    var globaldialerPrimary = "", globaldialerBackup = "";
    var availableForBVI = [];
    natEnabledFlag = false;
    /***********************To do Internationalization***********************************/
    function loadAndDisplayLanguages() {

        //consoleLogMethodDetailsStart("iAndC.js", "loadAndDisplayLanguages()");
        $("#Access").text($.i18n.prop("Access"));
        $("#AccPo").text($.i18n.prop("AccPo"));
        $("#strApna").html($.i18n.prop("strApna") + ':');
        $("#apna").attr("placeholder", $.i18n.prop("strApna"));
        $("#modemAccounts").text($.i18n.prop("modemAccounts"));
        $('#autoFirmware').text($.i18n.prop("autoFirmware"));
        $('#autoFimwareChangeLabel').text($.i18n.prop("enableAutoFirmware"));
        $('#reloadModemMsgReload').text($.i18n.prop("reloadmodem"));
        $('#modemReloadMsg').text($.i18n.prop("modemReload"));
        $("#strApn").html($.i18n.prop("strApna") + ':');
        $("#apn").attr("placeholder", $.i18n.prop("strApna"));
        $("#UP").text($.i18n.prop("UP"));
        $("#strApnPDPType").html($.i18n.prop("strApnPDPType") + ':');
        $("#strApnAuthentication").html($.i18n.prop("strApnAuthentication") + ':');
        $("#strApnUsername").html($.i18n.prop("username") + ':');
        $("#strApnPassword").html($.i18n.prop("password") + ':');
        $("#modemActivation").text($.i18n.prop("modemActivation"));
        $("#ActMo").text($.i18n.prop("ActMo"));
        $("#OTASPLabel").text($.i18n.prop("OTASPLabel"));
        $("#OMA-DMLabel").text($.i18n.prop("OMA-DMLabel"));
        $("#ManualLabel").text($.i18n.prop("ManualLabel"));
        $("#manualActivationLegend").text($.i18n.prop("manualActivationLegend"));
        $("#strMDN").text($.i18n.prop("strMDN"));
        $("#strMSID").text($.i18n.prop("strMSID"));
        $("#strMSL").text($.i18n.prop("strMSL"));
        $("#wanAlertMessageNano").html($.i18n.prop("wanAlertMessageOne"));
        $("#mdn").attr("placeholder", $.i18n.prop("strMDN"));
        $("#msid").attr("placeholder", $.i18n.prop("strMSID"));
        $("#msl").attr("placeholder", $.i18n.prop("strMSL"));
        $("#mdnNote").text($.i18n.prop("mdnNote"));
        $("#otaspActivationLegend").text($.i18n.prop("otaspActivationLegend"));
        $("#strPhone").text($.i18n.prop("strPhone"));
        $("#otaspPhoneNo").attr("placeholder", $.i18n.prop("strPhone"));
        $("#otaspNote").text($.i18n.prop("otaspNote"));
        $("#WanConfig").text($.i18n.prop("WanConfig"));
        $("#PWANI").text($.i18n.prop("PWANI"));
        $("#BWANI").text($.i18n.prop("BWANI"));
        $(".PWANI").text($.i18n.prop("PWANI"));
        $(".BWANI").text($.i18n.prop("BWANI"));
        $("#primaryWanInterface").text($.i18n.prop("primaryWanInterface"));
        $("#slaCliLegend").text($.i18n.prop("slaCliLegend"));
        $("#slaIP").html($.i18n.prop("ipAddress") + ': ');
        $(".slaConfigTitle").text($.i18n.prop("slaCliLegend"));
        $(".ipAddressTitle").html($.i18n.prop("ipAddress") + ': ');
        $("#wanTitle").text($.i18n.prop("wanTitle"));
        $("#modemTitle").text($.i18n.prop("modemTitle"));
        $("#gsmProfiles").text($.i18n.prop("gsmProfiles"));
        $("#simTitle").text($.i18n.prop("simTitle"));
        $("#aboutModem").text($.i18n.prop("aboutModem"));
        $("#modemMode").text($.i18n.prop("modemMode"));
        $("#modemFirmVersion").text($.i18n.prop("modemFirmVersion"));
        $("#modemSettings").text($.i18n.prop("modemSettings"));
        $("#addFirmware").text($.i18n.prop("addFirmware"));
        $("#carrier").text($.i18n.prop("carrier"));
        $("#technology").text($.i18n.prop("technology"));
        $("#version").text($.i18n.prop("version"));
        $("#action").text($.i18n.prop("action"));
        $("#chatScriptTimeout").html($.i18n.prop("chatScriptTimeout") + ': ');
        $("#chatTimeout").attr("placeholder", $.i18n.prop("chatTimeout"));
        $("#technologyPre").html($.i18n.prop("technologyPre") + ': ');
        $("#aboutSIM").text($.i18n.prop("aboutSIM"));
        $("#activeSIM").html($.i18n.prop("activeSIM") + ': ');
        $("#networkStatus").html($.i18n.prop("networkStatus") + ': ');
        $("#serviceProvider").html($.i18n.prop("serviceProvider") + ': ');
        $("#noSIMsPresent").html($.i18n.prop("noSIMsPresent") + ': ');
        $("#simSettings").text($.i18n.prop("simSettings"));
        $("#selectSIMActiv").html($.i18n.prop("selectSIMActiv") + ': ');
        $("#setDefaultSIM").text($.i18n.prop("setDefaultSIM"));
        $("#activateSim").text($.i18n.prop("activateSim"));
        $("#selectProfile").text($.i18n.prop("selectProfile"));
        $("#simSlot").text($.i18n.prop("simSlot"));
        $("#simTypeTech").text($.i18n.prop("simType"));
        $("#activate").text($.i18n.prop("activate"));
        $("#primary").text($.i18n.prop("primary"));
        $("#simProfileColumn").text($.i18n.prop("profile"));
        $("#addEditDeleteProfiles").html($.i18n.prop("addEditDeleteProfiles") + ': ');
        $("#profileName").text($.i18n.prop("profileNo"));
        $("#profileApn").text($.i18n.prop("profileApn"));
        $("#profileAuth").text($.i18n.prop("profileAuth"));
        $("#profileUsername").text($.i18n.prop("username"));
        $("#profilePassword").text($.i18n.prop("password"));
        $("#profileSlot").text($.i18n.prop("slot"));
        $("#profileAction").text($.i18n.prop("action"));
        $("#wanSettiongs").text($.i18n.prop("wanSettiongs"));
        $("#wanInterfaceRole").html($.i18n.prop("wanInterfaceRole") + ': ');
        $("#NONE").text($.i18n.prop("none"));
        $(".noneStr").text($.i18n.prop("none"));
        $("#MOVETOWAN").text($.i18n.prop("moveToWAN"));
        $(".MOVETOWAN").text($.i18n.prop("moveToWAN"));
        $("#doMakePersistent").text($.i18n.prop("doMakePersistent"));
        $("#cellularNat").text($.i18n.prop("enableNat"));
        $(".yes").text($.i18n.prop("yes"));
        $(".no").text($.i18n.prop("no"));
        $("#slaConfig").text($.i18n.prop("slaConfig"));
        $("#slaWANIntCellular").attr("placeholder", $.i18n.prop("ipAddressTitle"));
        $("#cellularDialog").attr("title", $.i18n.prop("cellularDialog"));
        $("#apnLegend").text($.i18n.prop("editAccesPoint"));
        $("#alert").html($.i18n.prop("alert") + ': ');
        $("#modernFMVerNote").text($.i18n.prop("modernFMVerNote"));
        $("#editController").text($.i18n.prop("editController"));
        $("#mode").html($.i18n.prop("mode") + ':');
        $("#modeStr").html($.i18n.prop("mode") + ':');
        $("#configInterfaceCheckStr").html($.i18n.prop("configInterfaceCheckStr") + ':');
        $("#notEditableStr").text($.i18n.prop("notEditableStr"));
        $("#iAndCStatusStr").text($.i18n.prop("iAndCStatusStr"));
        $("#IPv4AlertStr").text($.i18n.prop("IPv4AlertStr"));
        $("#utmDeleteMessage").text($.i18n.prop("utmDeleteMessage"));
        $("#dslSubInterfaceDialogMessage").text($.i18n.prop("dslSubInterfaceDialogMessage"));
        $("#dialerConfig").text($.i18n.prop("dialerConfig"));
        $("#PerMsg").text($.i18n.prop("PerMsg"));
        $("#yes").text($.i18n.prop("yes"));
        $("#no").text($.i18n.prop("no"));
        $("#addButton").text($.i18n.prop("addButton"));
        $("#createVLAN").text($.i18n.prop("createVLAN"));
        $("#editButton").text($.i18n.prop("editButton"));
        $("#showButton").text($.i18n.prop("showButton"));
        $("#deleteButton").text($.i18n.prop("deleteButton"));
        $("#Intface").text($.i18n.prop("Intface"));
        $("#ipv4_addr").text($.i18n.prop("ipv4_addr"));
        $("#ipv6_addr").text($.i18n.prop("ipv6_addr"));
        $("#admin_status").text($.i18n.prop("admin_status"));
        $("#operational_status").text($.i18n.prop("operational_status"));
        $("#Interfacedesc").text($.i18n.prop("Interfacedesc"));
        //  $("#Interfaceact").text($.i18n.prop("Interfaceact"));
        $("#desc").text($.i18n.prop("desc"));
        $("#PrimarySecondaryIntHeadingInC").text($.i18n.prop("PrimarySecondaryIntHeadingInC"));
        $("#NoInterface").text($.i18n.prop("NoInterface"));
        $("#PWANInt").text($.i18n.prop("PWANInt"));
        $("#BWANInt").text($.i18n.prop("BWANInt"));
        $("#moveWan").text($.i18n.prop("moveWan"));
        $("#connection").text($.i18n.prop("connection"));
        // $("#syncRow").text($.i18n.prop("syncRow"));
        //  $("#encRow").text($.i18n.prop("encRow"));
        $("#PPoE").text($.i18n.prop("PPoE"));
        //$("#encapid").text($.i18n.prop("encapid"));
        //$("#clockRateTitle").text($.i18n.prop("clockRateTitle"));
        $("#description").attr("placeholder", $.i18n.prop("description"));
        $("#encapId").attr("placeholder", $.i18n.prop("encapid"));
        // $("#clockRate").attr("placeholder", $.i18n.prop("clockRate"));
        $("#VPI").text($.i18n.prop("VPI"));
        $("#VCI").text($.i18n.prop("VCI"));
        $("#VLAN").text($.i18n.prop("VLAN"));
        $("#VLANid").html($.i18n.prop("VLANid") + ' <span class="ccpexpCSSReplaceClass748">*</span>:');
        $("#ipv4HeadingInC").text($.i18n.prop("ipv4HeadingInC"));
        $("#MediaType").text($.i18n.prop("MediaType"));
        $("#mdType").text($.i18n.prop("MediaType"));
        $("#ipv4type").html($.i18n.prop("ipv4type") + ' <span class="ccpexpCSSReplaceClass749">*</span>:');
        $("#ipv6type").html($.i18n.prop("ipv6type") + ' <span class="ccpexpCSSReplaceClass750">*</span>:');
        $("#ipv6HeadingInC").text($.i18n.prop("ipv6HeadingInC"));
        $("#authentication").text($.i18n.prop("authentication"));
        $("#ipv6authentication").text('IPv6 ' + $.i18n.prop("authentication"));
        localizeAuthIpv6("");
        localizeAuthIpv6("ipv6");

        $("#iAndCSelectRowStr").text($.i18n.prop("selectRowStr"));
        $("#selectaRow").attr("title", $.i18n.prop("selectaHeading"));
        $("#ConfigIPSSettings").attr("title", $.i18n.prop("configIPSSetting"));
        $("#interfacePageTitle").text($.i18n.prop("interfacePageTitle"));
        $("#Interfaceact").text($.i18n.prop("Interfaceact"));
        $("#syncRow").text($.i18n.prop("syncRow"));
        $("#encRow").text($.i18n.prop("encRow"));
        $("#encapid").text($.i18n.prop("encapid"));
        $("#clockRateTitle").text($.i18n.prop("clockRateTitle"));
        // $("#description").attr("placeholder", $.i18n.prop("description"));
        // $("#encapId").attr("placeholder", $.i18n.prop("encapid"));
        $("#clockRate").attr("placeholder", $.i18n.prop("clockRate"));
        // $("#papChapUsername").attr("placeholder", $.i18n.prop("papChapUsername"));
        // $("#papChapPassword").attr("placeholder", $.i18n.prop("AuthPassword"));
        // $("#confirmPassword").attr("placeholder", $.i18n.prop("ConfirmPswd"));
        $("#popupEditSwitchInterface").text($.i18n.prop("popupEditSwitchInterface"));
        $("#popupEditSwitchDesc").text($.i18n.prop("popupEditSwitchDesc"));
        $("#popupEditSwitchAdminMode").text($.i18n.prop("popupEditSwitchAdminMode"));
        $("#staticAccess").text($.i18n.prop("staticAccess"));
        $("#trunkMode").text($.i18n.prop("trunkMode"));
        $("#popupEditSwitchStaticAccess").text($.i18n.prop("popupEditSwitchStaticAccess"));
        $("#popupEditSwitchTrunkAllowed").text($.i18n.prop("popupEditSwitchTrunkAllowed"));
        $("#trunkVlanLabel").text($.i18n.prop("trunkVlanLabel"));
        $("#popupEditSwitchNativeVLAN").text($.i18n.prop("popupEditSwitchNativeVLAN"));
        $("#popupEditSwitchPortFast").text($.i18n.prop("popupEditSwitchPortFast"));
        $("#enablePortfast").text($.i18n.prop("enableText"));
        $("#disablePortfast").text($.i18n.prop("disableText"));
        $("#popupEditSwitchDuplex").text($.i18n.prop("popupEditSwitchDuplex"));
        $("#halfDuplex").text($.i18n.prop("halfDuplex"));
        $("#fullDuplex").text($.i18n.prop("fullDuplex"));
        $("#autoDuplex").text($.i18n.prop("autoDuplex"));
        $("#popupEditSwitchSpeed").text($.i18n.prop("popupEditSwitchSpeed"));
        $("#autoSpeed").text($.i18n.prop("autoDuplex"));
        $("#switchInterfaceDialog").attr("title", $.i18n.prop("switchInterfaceDialog"));
        $("#interfaceHelp").text("*" + $.i18n.prop("interfaceHelp"));
        $("#zonesTitle").text($.i18n.prop("zonesTitle"));
        $(".ifcedit").attr("title", $.i18n.prop("edit"));
        $(".ifcdelete").attr("title", $.i18n.prop("delete"));
        $("#userselectRow").attr("title", $.i18n.prop("userselectRow"));
        $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));
        $("#staticVlanError").text($.i18n.prop("validateVLAN"));
        $("#trunkNativeVlanError").text($.i18n.prop("validateVLAN"));
        $("#trunkVlanError").text($.i18n.prop("validateTrunkVlanID"));
        $("#synchronous").text($.i18n.prop("synchronous"));
        $("#asynchronous").text($.i18n.prop("asynchronous"));
        $("#dhcpList option:nth-child(1)").text($.i18n.prop("select"));
        $(".wizardMTUSize").text($.i18n.prop("wizardMTUSize"));
        $(".wizardMSSSize").text($.i18n.prop("wizardMSSSize"));
        $("#wizardMtuSize").attr("placeholder", $.i18n.prop("wizardMTUSize"));
        $("#wizardMssSize").attr("placeholder", $.i18n.prop("wizardMSSSize"));
        $(".showAdv").text($.i18n.prop("showAdv"));
        $(".hideAdv").text($.i18n.prop("hideAdv"));
        $("#modemAccount").text($.i18n.prop("modemAccount"));
        $("#accessPointName").text($.i18n.prop("accessPointName"));
        //$("#modemActivation").text($.i18n.prop("modemActivation"));
        $("#ipv6Select option:nth-child(1)").text($.i18n.prop("select"));
        $("#detailTable #details").text($.i18n.prop("property"));
        $("#detailTable #values").text($.i18n.prop("value"));
        $("#controllerStr").text($.i18n.prop("controller"));
        $("#pppChangeAlertMessage").text($.i18n.prop("pppChangeAlertMessage"));
        $("#all").text($.i18n.prop("avcAll"));
        $("#vlanidtrunk").text($.i18n.prop("trunkVlanLabel"));
        //consoleLogMethodDetailsEnd("iAndC.js", "loadAndDisplayLanguages()");
        //code for PPOE IPv6
        $("#ipv6oeLabel").text($.i18n.prop("ipv6oeLabel"));
        $("#ipv6oeOptionsLabel").text($.i18n.prop("ipv6oeOptionsLabel"));
        $("#ipv4and6RoutLabel").text($.i18n.prop("ipv4and6RoutLabel"));
        $("#ipv4Label").text($.i18n.prop("ipv4Label"));
        $("#ipv6Label").text($.i18n.prop("ipv6Label"));
        $("#ipv4and6RadioLabel").text($.i18n.prop("ipv4and6RadioLabel"));
        $("#ipcpdnsTd").text($.i18n.prop("ipcpdnsTdLabel"));
        $("#bridgeOptionLanIntLabel").html($.i18n.prop("bridgeOptionLanIntLabel") + '<span class="ccpexpCSSReplaceClass749">*</span>:');
        $("#bridgeIpAddressLabel").html($.i18n.prop("bridgeIpLabel") + '<span class="ccpexpCSSReplaceClass749">*</span>:');
        $("#bviInterfaceNameLabel").text($.i18n.prop("bviInterfaceNameLabel"));
        $("#typebridge").text($.i18n.prop("ipv6oeBridge"));
        $("#typedhcp").text($.i18n.prop("ipv6oedhcptype"));
        $("#bridgeIpAddress").attr("placeholder", $.i18n.prop("ipAddress"));
        $("#bridgeSubnet").attr("placeholder", $.i18n.prop("StaticSubnetMask"));
        $("#ipv6PrefixName").attr("placeholder", $.i18n.prop("prefixNameProvider"));
	$("#iproutonWanAlertMessage").html($.i18n.prop("iproutonWanAlertMessage"));
    }
    function iAndCLoading() {
        //consoleLogMethodDetailsStart("iAndC.js", "iAndCLoading()");
        loadAndDisplayLanguages();
        var interfaceURL = (window.location.href).split("/");
        urlIP = interfaceURL[2];
        if (includeWildIPaddress(urlIP)) {
            urlFlag = true;
        } else {
            urlFlag = false;
        }
        var platformType = "", wanMode;
        //var showRunnCache;
        platformType = deviceCommunicator.getPlatformType();
        $("#interfaceAccordion").accordion({
            header: 'h3',
            autoHeight: false,
            heightStyle: "content"
        });
        $("#interfaceAccordion").accordion("option", "header", "h3");
        $("#cellularInterfaceAccordion").accordion({
            autoHeight: false,
            header: 'h3',
            heightStyle: "content"
        });
        $("#progress").progressbar();
        $('#error').hide();
        $('#info').hide();
        //Cellular
        $('#backupWanDetails').hide();
        $('#bkpWanDetails').hide();
        $('#otaspActivationDiv').hide();
        $('#manualActivationDiv').hide();
        $('#primaryDiv').hide();
        $('#infoCellular').hide();
        //Access point name
        $("#apna").attr('disabled', true);
        deviceCommunicator.getInterfaceType("", true);
        $("#controllerInterface").hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("editController") + ')').hide();
        //addInteraceToController();
        //$("#DPNRow").hide();
        $("#encapRow").hide();
        refresh();
        if (platformType.indexOf('867VAE') !== -1 || platformType.indexOf('866VAE') !== -1) {
            wanMode = getWanModeFromDevice();
            $('#isWan').click(function () {
                if ($("#isWan:checked").val() === undefined) {
                    disableAllFields();
                } else {
                    enableAllFields();
                    onPppoeChange(false);
                }
            });
        } else {
            $("#interfaceForm :input").attr("disabled", false);
        }
        $('#primaryWan').click(function () {
            $('#backupWanDetails').hide();
        });
        $('#backupWan').click(function () {
            populatePrimaryInterfaceTable();
            if ($('#wanConfigTable').attr("inttype") === "backup") {
                $('#primaryWanInterfaceSelect').val(currentPrimaryWanInterface);
            }
            $('#backupWanDetails').show();
        });
        $("#apnTable").find("tr:gt(2)").hide();
        $('#usernamePwdFromSP').click(function () {
            if ($("#usernamePwdFromSP:checked").val() === undefined) {
                $("#apnTable").find("tr:gt(2)").hide();
                $("#pdpIpv4").prop("checked", true);
                $("#pdpPPP").prop("checked", false);
                $("#pdpPPP").attr("disabled", true);
            } else {
                $("#apnTable").find("tr:gt(2)").show();
                $("#pdpPPP").attr("disabled", false);
                $("#apnCHAP").prop("checked", true);
            }
        });
        $('#accessPointName').click(function () {
            if ($("#accessPointName:checked").val() === undefined) {
                $("#apna").attr('disabled', true);
            } else {
                $("#apna").attr('disabled', false);
            }
        });
        $("#showButton").hide();
        $('#activateModem').click(function () {
            if ($("#activateModem:checked").val() === undefined) {
                $('#modemActivationDetails :input').attr('disabled', true);
            } else {
                var modemType = $('#modemtype').val();
                var modemno = $('#modemno').val();
                $('#modemActivationDetails :input').attr('disabled', false);
                if (modemType === "BSNL" || modemType === "Global" || (modemType === "Sprint" && modemno <= 5727)) {
                    $('#manualActivation').prop("checked", true);
                } else {
                    $('#omadmActivation').prop("checked", true);
                    $('#manualActivationDiv').hide();
                }
            }
        });
        $('#omadmActivation').click(function () {
            $('#otaspActivationDiv').hide();
            $('#manualActivationDiv').hide();
            //$("#cellularInterfaceAccordion").accordion( "resize" );
            // Not supported in jQuery UI 1.9 and above.

            $("#cellularInterfaceAccordion").accordion("refresh");
        });
        $('#otaspActivation').click(function () {
            $('#otaspActivationDiv').show();
            $('#manualActivationDiv').hide();
            //$("#cellularInterfaceAccordion").accordion( "resize" );
            // Not supported in jQuery UI 1.9 and above.
            $("#cellularInterfaceAccordion").accordion("refresh");
        });
        $('#manualActivation').click(function () {
            $('#otaspActivationDiv').hide();
            $('#manualActivationDiv').show();
            //$("#cellularInterfaceAccordion").accordion( "resize" );
// Not supported in jQuery UI 1.9 and above.
            $("#cellularInterfaceAccordion").accordion("refresh");
        });
        $('#pppoe').click(function () {
            enablePPPoE();
        });
        $('input[name=asyncEnc]').change(function () {
            var changedValue = $('input:radio[name=asyncEnc]:checked').val();
            onPppoeChangeForSerial(changedValue);
        });
        $('input[name=syncEnc]').change(function () {
            var changedValue = $('input:radio[name=syncEnc]:checked').val();
            onPppoeChangeForSerial(changedValue);
        });
        $('input[name=syncMode]').change(function ()
        {
            var changedValue = $('input:radio[name=syncMode]:checked').val();
            if (changedValue === "sync") {
                var sysncMode = $('input:radio[name=syncEnc]');
                sysncMode.filter('[value=hdlc]').attr('checked', true);
                onPppoeChangeForSerial('hdlc');
                $('#syncEncTD').show();
                $('#asyncEncTD').hide();
            } else {
                var sysncMode = $('input:radio[name=asyncEnc]');
                sysncMode.filter('[value=slip]').attr('checked', true);
                onPppoeChangeForSerial('slip');
                $('#syncEncTD').hide();
                $('#asyncEncTD').show();
            }
            onPppoeChangeForSerial(changedValue);
        });
        $('#ipv4Select').change(function () {
            $('#ipv4Table tr:not(:first)').remove();
// remove everything from the ipv4Table except the first row (selectbox)
            if ($('#ipv4Select').val() === 'staticip') {
                staticIP();
            } else if ($('#ipv4Select').val() === 'dhcp') {
                dhcp();
            } else if ($('#ipv4Select').val() === 'easyip') {
                $('#ipv4Table').append('<tr id="nat"><td>' + $.i18n.prop("enableNat") + '</td><td><input id="enableNat" name="enableNat" type="checkbox"/></td></tr>');
                if ($('#primaryWanInt').is(':checked') && currentPrimaryWanInterface === "") {
                    $('#enableNat').prop("checked", "true");
                    natEnabledFlag = true;
                } else {
                    if (natEnabledFlag === true) {
                        //code
                        $('#enableNat').prop("checked", "true");
                    }
                    $('#enableNat').removeAttr("disabled");
                }
                if ($('#backupWanInt').is(':checked') && currentPrimaryWanInterface !== "" && currentBackupWanInterface === "" && natEnabledFlag === true) {
                    $('#enableNat').prop("checked", "true");
                    $('#enableNat').attr("disabled", "true");
                } else {
                    $('#enableNat').removeAttr("disabled");
                }
                /*if ($('#primaryWanInt').is(':checked') || $('#backupWanInt').is(':checked')) {
                 $("#enableNat").prop("checked", true);
                 $("#enableNat").attr("disabled", true);
                 }
                 else{
                 $("#enableNat").prop("checked", false);
                 $("#enableNat").removeAttr("disabled");
                 }*/
            } else if ($('#ipv4Select').val() === 'dhcppoolvalues') {
                showDhcpList();
            }
        });
        $('#ipv6Select').change(function () {
            $('#ipv6Table tr:not(:first)').remove();
// remove everything from the ipv4Table except the first row (selectbox)
            if ($('#ipv6Select').val() === 'staticip') {
                ipv6StaticIP();
            } else if ($('#ipv6Select').val() === 'prefixFromProvider') {
                ipv6PrefixFromProvider();
            } else if ($('#ipv6Select').val() === 'autoconfig') {
                ipv6Autoconfig();
            }
        });
        $('#moveToWan').on('click', function () {
            //$('#utmDeleteMessage').html('Do you want to continue?');
            //$('#utmDeleteDialog').dialog("open");
            var intName = $('#moveToWan').attr("interfacename");
            var PrimaryName = $('#moveToWan').attr("primarywanconfigured");
            var backupName = $('#moveToWan').attr("backupwanconfigured");
            var checkConfig = $('#moveToWan').attr("checkflag");
            backupNameFlag = 0;
            /*if($('#backupWanInt').is(':checked')){
             if(PrimaryName =="NoPrimary"){
             if($('#moveToWanZone').is(":checked")){
             backupNameFlag=1;
             }
             }
             }*/
            if (backupNameFlag === 1) {
                //$("#utmDeleteDialog").dialog("open");
                //$("#utmDeleteMessage").html("Primary interface is not configured with WAN zone. First configure the Primary interface to WAN zone and try");
                //    $('#moveToWanZone').attr("checked",false);
                //code
            } else {
                if ($('#moveToWan').is(":checked")) {
                    if (checkConfig === "configured") {
                        //code
                    } else {
                        //$("#wanCellularAlertMessage").html("This interface will be added to WAN zone. Please make sure to configure appropriate Firewall Policy. Also CWS and IPS will be applied to this interface, if they are already configured. Do you want to continue?");
                        $("#wanCellularAlertMessage").html($.i18n.prop("wanAlertMessageOne"));
                        $("#wanCellularAlert").dialog("open");
                        //alert("java");
                    }
                } else {

                    if (checkConfig === "configured") {
                        //code
                        if (intName === PrimaryName) {
                            if (backupName !== "NoBackup") {
                                $("#utmDeleteDialog").dialog("open");
                                $('#moveToWan').attr("checked", true);
                            } else {
                                $("#wanCellularAlertMessage").html($.i18n.prop("wanAlertMessageTwo"));
                                $("#wanCellularAlert").dialog("open");
                            }
                        } else {
                            $("#wanCellularAlertMessage").html($.i18n.prop("wanAlertMessageTwo"));
                            $("#wanCellularAlert").dialog("open");
                            //alert("java");

                        }

                    }
                    $('#enableNatCellularISR').removeAttr('disabled');
                }
            }

            //alert($('#moveToWanZone').is(':checked'));
        });
        $('#moveToWanZone').on('click', function () {
            //$('#utmDeleteMessage').html('Do you want to continue?');
            //$('#utmDeleteDialog').dialog("open");
            var intName = $('#moveToWanZone').attr("interfacename");
            var PrimaryName = $('#moveToWanZone').attr("primarywanconfigured");
            var backupName = $('#moveToWanZone').attr("backupwanconfigured");
            var checkConfig = $('#moveToWanZone').attr("checkflag");
            backupNameFlag = 0;
            if (($('#backupWanInt').is(':checked') && PrimaryName === "NoPrimary") && $('#moveToWanZone').is(":checked")) {
                //   if ($('#moveToWanZone').is(":checked")) {
                backupNameFlag = 1;
                //   }
            }
            if (backupNameFlag === 1) {
                $("#utmDeleteDialog").dialog("open");
                // $("#utmDeleteMessage").html("Primary interface is not configured with WAN zone. First configure the Primary interface to WAN zone and try");
                $("#utmDeleteMessage").html($.i18n.prop("utmDeleteMessageOne"));
                $('#moveToWanZone').attr("checked", false);
                //code
            } else {
                if ($('#moveToWanZone').is(":checked")) {
                    if (checkConfig == "configured") {
                        //code
                    } else {
                        //$("#wanAlertMessage").html("This interface will be added to WAN zone. Please make sure to configure appropriate Firewall Policy. Also CWS and IPS will be applied to this interface, if they are already configured. Do you want to continue?");
                        $("#wanAlertMessage").html($.i18n.prop("wanAlertMessageOne"));
                        $("#wanAlert").dialog("open");
                        //alert("java");
                    }
                } else {

                    if (checkConfig == "configured") {
                        //code
                        if (intName == PrimaryName) {
                            if (backupName != "NoBackup") {
                                $("#utmDeleteDialog").dialog("open");
                                $('#moveToWanZone').attr("checked", true);
                            } else {
                                $("#wanAlertMessage").html($.i18n.prop("wanAlertMessageTwo"));
                                $("#wanAlert").dialog("open");
                            }
                        } else {
                            $("#wanAlertMessage").html($.i18n.prop("wanAlertMessageTwo"));
                            $("#wanAlert").dialog("open");
                            //alert("java");

                        }

                    }
                }
            }

            //alert($('#moveToWanZone').is(':checked'));
        });
        $('#bkpWanDetails').hide();
        //$("input:radio[name='intWanConfig']").change();

        $("#enableNat").live('click', function () {
            var title = $("#interfaceDialog").dialog("option", "title");
            if (!$('#noInt').is(':checked') && title.toLowerCase().indexOf("vlan") === -1) {
                if ($("#enableNat").is(':checked')) {
                    //$("#natAlertMessage").html("NAT will be enabled on both Primary and Backup WAN interfaces. Do you wish to continue?");
                    $("#natAlertMessage").html($.i18n.prop("wanAlertMessageThree"));
                    //$("#enableNat").prop("checked","true");
                } else if (!$("#enableNat").is(':checked')) {
                    // $("#natAlertMessage").html("NAT will be disabled on both Primary and Backup WAN interfaces. Do you wish to continue?");
                    $("#natAlertMessage").html($.i18n.prop("wanAlertMessageFour"));
                    //$("#enableNat").prop("checked","false");
                }
                $("#natAlert").dialog("open");
            }
        });
        $("input:radio[name='wanConfig']").change(function () {

            if ($("#moveToWan").attr("checkflag") == "configured") {
                $("#moveToWan").attr("checked", true);
            } else {
                $("#moveToWan").attr("checked", false);
            }

            if ($('#primaryWan').is(':checked') || $('#backupWan').is(':checked')) {
                $("#moveWanDiv").show();
            } else {
                $("#moveWanDiv").hide();
                $("#backupWanDetails").hide();
            }

            if ($('#noneWan').is(':checked') && $('#wanConfigTable').attr("intType") == "backup") {
                $('#cellularWarning').dialog("open");
            }

        });
        $("input:radio[name='intWanConfig']").change(function () {
	     var primaryOrBackup = $("input[type='radio'][name='intWanConfig']:checked").val();
	    if(primaryOrBackup=="primaryInt"){
		$('#iproutonWanAlert').dialog("open");
            } else {
		 postProcessForPrimaryOrBackupWan();
                }

        });
        $('#primaryWanInt').click(function () {
            if (currentPrimaryWanInterface === "") {
                $('#enableNat').prop("checked", "true");
                //$('#enableNat').attr("disabled","true");
            } else {
                $('#enableNat').removeAttr("disabled");
            }

        });
        $('#backupWanInt').click(function () {
            if (currentPrimaryWanInterface !== "" && currentBackupWanInterface === "" && natEnabledFlag === true) {
                $('#enableNat').prop("checked", "true");
                $('#enableNat').attr("disabled", "true");
            } else {
                $('#enableNat').removeAttr("disabled");
            }

        });
        $('#noInt').click(function () {
            $('#enableNat').removeAttr("disabled");
            enableIpRout();
        });
        //onPppoeChange();
        getPrimaryWanInterface(shrunCliOutput, "moveToWanZone", false);
        loadWanInterfaceSummary();
        //securityLicense = checkSecurityLicense();
        if (licenseCheck === true || iosk9check == "SecurityEnable") {
            var DefaultZone = [];
            if (!zoneCheck) {
                //code
                deviceCommunicator.configureCommandsFromTemplate("DefaultZone.txt", DefaultZone, false);
                zoneCheck = true;
            }
            createAccessListforNAT(licenseCheck, shrunCliOutput);
            $('#ZonesLink').show();
        } else {
            $('#ZonesLink').hide();
        }
        $(".gotoZone").click(function (e) {
            $('ul#bottomnav li#bottomnav-11 a').trigger("click");
            return false;
        });
        var interfaceValidator = $('#interfaceForm').validate({
            errorElement: "div",
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            },
            invalidHandler: function (form, validator) {
                if (validator.numberOfInvalids() > 0) {
                    validator.showErrors();
                    var index = $(":input.error").closest(".errorInterface")
                            .index(".errorInterface");
                    $("#interfaceAccordion").accordion("option", "active", index);
                    //$("#interfaceAccordion").accordion( "option", "header", "h3" );
                }
            },
            ignore: []
        });
        var cellularValidator = $('#cellularInterfaceForm').validate({
            errorElement: "div",
            errorPlacement: function (error, element) {
                error.insertAfter(element.parent());
            },
            invalidHandler: function (form, validator) {
                if (validator.numberOfInvalids() > 0) {
                    validator.showErrors();
                    var index = $(":input.error").closest(".errorCellular")
                            .index(".errorCellular");
                    $("#cellularInterfaceAccordion").accordion("option", "active", index);
                }
            },
            ignore: []
        });
        $("#progressbar").progressbar({disabled: true});
        /*$("#interfaceTable").click(function(){
         var editRow = $('#interfaceTable tr.hilite');
         if (editRow !== undefined || editRow.trim()!="") {
         try{
         var editName = $.trim(editRow.children().get(1).textContent);
         }catch(err){}
         var editInterfaceType = deviceCommunicator.getInterfaceType(editName);
         if (editName.indexOf('DSL') === -1 && editName.indexOf('Cellular') === -1 && editName.indexOf('Loopback') === -1 && editName.indexOf('Serial') === -1 && editName.indexOf('Vlan') === -1 && editInterfaceType !== 1 && editInterfaceType !== 4 && editInterfaceType !== 2 && editInterfaceType !== 539 && editInterfaceType !== 538 && editInterfaceType !== 503 && editInterfaceType !== 504 && editInterfaceType !== 532 && editInterfaceType !== 1012) {
         $("#editButton").addClass("ui-state-disabled");
         $("#editButton").attr("disabled",true);
         $("#notEditable").dialog("open");
         return false;
         }else{
         $("#editButton").removeClass("ui-state-disabled");
         $("#editButton").removeAttr("disabled");
         }
         }

         });*/
        // Called when Enable NAT checkbox is ticked/ unticked. This is mainly for the WAN interfaces.
        $("#natAlert").dialog({
            title: $.i18n.prop("enableNat"),
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $(this).dialog("close");
                        enableDisableNatFlag = true;
                        /*if ($("#enableNat").is(':checked')) {
                         $("#enableNat").prop("checked","true");
                         }else if (!$("#enableNat").is(':checked')) {
                         $("#enableNat").prop("checked","false");
                         } */
                    }}, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {
                $(this).dialog("close");
            }
        });
        $("#pppChangeAlert").dialog({
            title: $.i18n.prop("pppChangeAlert"),
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("yesStr"),
                    click: function () {

                        var editRow = $('#interfaceTable tr.hilite');
                        var interfaceName = $.trim(editRow.children().get(1).textContent);
                        if (interfaceName.indexOf("Serial") === -1) {
                            var iprout = $("input[type='radio'][name='waniptype']:checked").val();
                            if (iprout === "wanipv4" || iprout === "wanipv4and6") {
                                pppoeChecked();
                            }
                        } else {
                            var iprout = $("input[type='radio'][name='waniptype']:checked").val();
                            if (iprout === "wanipv4" || iprout === "wanipv4and6") {

                                serialIpv4Ipv6();
                            }
                        }
                        $('#ipv4Select').change();
                        $('#ipv6Select').change();
                        $(this).dialog("close");
                    }}, {
                    text: $.i18n.prop("noStr"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {
                $(this).dialog("close");
            }
        });
        $("#dslSubInterfaceDialog").dialog({
            autoOpen: false,
            height: 200,
            width: 400,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function (e) {

                        $(this).dialog("close");
                        $("#interfaceDialog").dialog("close");
                    }
                }],
            close: function () {
                $(this).dialog("close");
                $("#interfaceDialog").dialog("close");
            }
        });
        $("#utmDeleteDialog").dialog({
            autoOpen: false,
            height: 200,
            width: 400,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function (e) {

                        $(this).dialog("close");
                    }
                }],
            close: function () {
                $(this).dialog("close");
            }
        });
        $("#iAndCStatus").dialog({
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function (e) {
                        $(this).dialog("close");
                        if (upDownFlag === true) {
                            response = deviceCommunicator.configureCommandsFromTemplate("interfaceShut.txt", interfaceArr, false);
                            interfaceUpDown(response);
                        } else {
                            $("#deleteButton").trigger("click");
                        }
                    }
                }, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {
                $(this).dialog("close");
            }
        });
        /* Displaying alert when management interface is modified*/
        $("#IPv4Alert").dialog({
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                        $("#ipv4Address").val(urlIP);
                    }
                }],
            close: function () {
            }
        });
        //The modal dialog-form for interface table which opens up on click of add button
        $("#interfaceDialog").dialog({
            autoOpen: false,
            height: 480,
            width: 650,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function (e) {
                        //setTimeout(function () {
                        try {
                            editRow = $('#interfaceTable tr.hilite');
                            name = $.trim(editRow.children().get(1).textContent);
                        } catch (error) {
                            name = "";
                        }
                        if (name.indexOf("DSL") != -1) {
                            if ($("#cntrlr").is(':checked')) {

                                editInterface(name);
                                //editController();
                            } else {
                                editController();
                                refresh();
                                $(this).dialog("close");
                            }
                        } else {
                            editInterface(name);
                            //$(this).dialog("close");
                        }
                        e.preventDefault();
                        //},1000);
                    }
                }, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $("#shdslDialog").dialog({
            autoOpen: false,
            height: 250,
            width: 400,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $("#shdslDialog").dialog("close");
                        //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
                        blockPage("Applying");
                    }
                }, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        // For Detail POP-UP





        $("#detailsDialog").dialog({
            autoOpen: false,
            height: 400,
            width: 400,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $("#cellularDialog").dialog({
            autoOpen: false,
            height: 480,
            width: 720,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function (e) {

                        blockPage("Applying");
                        setTimeout(function () {
                            $('#cellularInterfaceError').hide();
// Added to remove that error RED box on first launch of this Dialog box
                            //if ($('#cellularInterfaceForm').valid()) {

                            var lte_apn, gsm_apn, gsm_pdp, ipNat = "", arr = [], arrChat = [], command = "", isPreview = false, gsm_auth, gsm_apnUsername, gsm_apnPassword, otasp, omadm, manual, manual_mdn, manual_msid, manual_msl, otasp_aan, primaryWan, backupWan, modemData = [], modemType, serviceProvider, modemNo, dialerPool = "", group = "", dialer = "", cellular_LineTag, lineTag, interfaceDetails, activationMethod, encapInterface, chatScriptName = "", profileType, re, id;
                            interface1 = $('#interfaceSelected').val();
// hidden variable
                            re = new RegExp("/", "g");
                            id = interface1.replace(re, "");
                            // Method for getting Modem Details
                            modemData = getModemDetails(interface1);
                            modemType = modemData[1];
                            serviceProvider = modemData[2];
                            modemNo = modemData[3];
                            modemNo = parseInt(modemNo, 10);
                            /*******************VALIDATIONS on GUI depending upon Component selected************************/

                            if ($("#backupWan").is(':checked')) {
                                $("#slaIpAddressCellular").rules("add", {"ipv4": true, required: true});
                            } else {
                                $("#slaIpAddressCellular").rules("remove");
                            }

                            if ($("#activateModem").is(':checked')) {
                                if (serviceProvider === "Sprint" && modemNo < 5727) {
                                    $("#mdn").rules("add", {required: true, number: true, minlength: 10, maxlength: 10});
                                    $("#msid").rules("add", {required: true, number: true, minlength: 10, maxlength: 10});
                                    $("#msl").rules("add", {required: true, number: true, minlength: 6, maxlength: 6});
                                    $("#otaspPhoneNo").rules("remove");
                                } else if (serviceProvider === "Sprint" && modemNo >= 5727 || (serviceProvider === "Global") || (serviceProvider === "BSNL")) {
                                    activationMethod = $('input:radio[name=activationMethod]:checked').val();
                                    if (activationMethod === "manual") {
                                        $("#mdn").rules("add", {required: true, number: true, minlength: 10, maxlength: 10});
                                        $("#msid").rules("add", {required: true, number: true, minlength: 10, maxlength: 10});
                                        $("#msl").rules("add", {required: true, number: true, minlength: 6, maxlength: 6});
                                        $("#otaspPhoneNo").rules("remove");
                                    } else if (activationMethod === "omadm") {
                                        $("#otaspPhoneNo").rules("remove");
                                        $("#mdn").rules("remove");
                                        $("#msid").rules("remove");
                                        $("#msl").rules("remove");
                                    }
                                } else if (serviceProvider === "Verizon") {
                                    $("#otaspPhoneNo").rules("add", {required: true, "validOTASPPhoneNo": true});
                                    $("#mdn").rules("remove");
                                    $("#msid").rules("remove");
                                    $("#msl").rules("remove");
                                }
// service provider

                            } else {
                                $("#mdn").rules("remove");
                                $("#msid").rules("remove");
                                $("#msl").rules("remove");
                                $("#otaspPhoneNo").rules("remove");
                            }

                            if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA") {

                                //$("#papChapUsername").rules("add", {required: true,    minlength: 1});
                                $("#apn").rules("add", {"validAPNUserPswd": true, required: true});
                                if ($("#usernamePwdFromSP").is(':checked')) {
                                    $("#apnUsername").rules("add", {"validAPNUserPswd": true, required: true});
                                    $("#apnPassword").rules("add", {"validAPNUserPswd": true, required: true});
                                } else {
                                    $("#apnUsername").rules("remove");
                                    $("#apnPassword").rules("remove");
                                }
                            } else {
                                $("#apn").rules("remove");
                                $("#apnUsername").rules("remove");
                                $("#apnPassword").rules("remove");
                            }

                            if (!$('#cellularInterfaceForm').valid()) {
                                return false;
                            }
                            lte_apn = $('#apna').val();
                            $("#cellularDialog").dialog("close");
                            //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});


                            gsm_apn = $('#apn').val();
                            gsm_pdp = $('input:radio[name=pdp]:checked').val();
                            gsm_auth = $('input:radio[name=auth]:checked').val();
                            if ($("#usernamePwdFromSP:checked").val() !== undefined) {
                                gsm_apnUsername = $('#apnUsername').val();
                                gsm_apnPassword = $('#apnPassword').val();
                            } else {
                                gsm_apnUsername = "user1";
                                gsm_apnPassword = "pass1";
                            }
                            otasp = $('#otaspActivation').val();
                            omadm = $('#omadmActivation').val();
                            manual = $('#manualActivation').val();
                            manual_mdn = $('#mdn').val();
                            manual_msid = $('#msid').val();
                            manual_msl = $('#msl').val();
                            otasp_aan = $('#otaspPhoneNo').val();
                            primaryWan = $('#primaryWan').val();
                            backupWan = $('#backupWan').val();
                            primaryInterface = $('#primaryWanInterfaceSelect option:selected').text();
                            slaIP = $('#slaIpAddressCellular').val();
                            interface1 = $('#interfaceSelected').val();
// hidden variable

                            interfaceDetails = getEditInterfaceDetails(interface1);
                            if (interfaceDetails.ipv4dialer.length > 0) {
                                dialer = interfaceDetails.ipv4dialer.replace(/Dialer/, "");
                            }
                            dialerPool = interfaceDetails.ipv4dialerPoolNumber;
                            group = interfaceDetails.ipv4dialerGroupNumber;
                            if (dialer.length <= 0) {
                                dialer = getDialerTag();
                            }
                            if (dialerPool.length <= 0) {
                                dialerPool = getDialerPoolTag();
                            }
                            if (group.length <= 0) {
                                group = getDialerGroupTag();
                            }

                            var regEx = new RegExp("Cellular", "");
                            srArray = interface1.split(regEx);
                            interfaceNames = "Cellular " + srArray[1];
                            cellular_LineTag = $.trim(srArray[1]);
// Used for static default route creation for a dialer/cellular
                            if (cellular_LineTag.indexOf("/") == -1) {
// fixed flatform , line tag = 3
                                lineTag = 3;
                            } else {
                                if (modemType === "LTE") {
                                    lineTag = cellular_LineTag.substring(0, cellular_LineTag.length - 1) + "0";
                                } else {
                                    lineTag = cellular_LineTag;
                                }
                            }


                            /*************************Value of chatScriptName for HSPA+R7 and LTE**************************/


                            if (modemType === "HSPA+R7") {

                                chatScriptName = "hspa-R7";
                            } else if (modemType === "LTE") {

                                chatScriptName = "lte";
                            }

                            if ($('#enableNatCellularISR').is(':checked')) {
                                ipNat = "ip nat outside";
                            } else {
                                ipNat = "";
                            }


                            try {
                                deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
                                arr.push({name: "primaryInterface", value: primaryInterface}, {name: "ipNat", value: ipNat}, {name: "slaIP", value: slaIP}, {name: "interface", value: interface1}, {name: "dialerPool", value: dialerPool}, {name: "dialerGroupTag", value: group}, {name: "dialer", value: dialer}, {name: "cellular_LineTag", value: cellular_LineTag}, {name: "gsm_apnUsername", value: gsm_apnUsername}, {name: "gsm_apnPassword", value: gsm_apnPassword}, {name: "lineTag", value: lineTag}, {name: "chatScriptName", value: chatScriptName});
                                /****Pushing this CLI through a different template by putting in TRY-CATCH,to handle the uncaught error by DeviceCommunicator.js************/
                                try {
                                    response = deviceCommunicator.configureCommandsFromTemplate("DefaultInterface.txt", arr, isPreview);
                                } catch (error) {
                                    isEmptyBlock = true;
                                }
                                if ($('#backupWan').is(':checked') === true) {
                                    try {
                                        response = deviceCommunicator.configureCommandsFromTemplate("noIpSla.txt", arr, isPreview);
                                    } catch (error) {
                                        isEmptyBlock = true;
                                    }
                                    var tempArr = [];
                                    tempArr.push({name: "natInterface", value: primaryInterface});
                                    var primaryInterfaceDetails = getEditInterfaceDetails(primaryInterface);
                                    if ($('#enableNatCellularISR').is(':checked') && !primaryInterfaceDetails.isIpNatOutside) {
                                        response = deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", tempArr, false);
                                    } else if (!$('#enableNatCellularISR').is(':checked') && primaryInterfaceDetails.isIpNatOutside) {
                                        response = deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", tempArr, false);
                                    }
                                }


                                deleteOldConfigs(interfaceDetails);
                                if ($('#backupWan').is(':checked') === true) {
                                    try {
                                        response = deviceCommunicator.configureCommandsFromTemplate("deletePrimaryIfRoutesAndAcl.txt", arr, isPreview);
                                    } catch (error) {
                                        isEmptyBlock = true;
                                    }
                                }


                                /******************************Configuration CLI's for Interfaces respective of modemType and Service Provider*********/

                                if (modemType === "CDMA") {
// CDMA and activate modem is checked

                                    if ($("#activateModem:checked").val() !== undefined) {
                                        if ((serviceProvider === "Sprint" && modemNo < 5727)) {
                                            command = interfaceNames + " cdma activate manual " + manual_mdn + " " + manual_msid + " " + manual_msl;
                                            response = deviceCommunicator.getExecCmdOutput(command);
                                        } else if ((serviceProvider === "Sprint" && modemNo >= 5727) || (serviceProvider === "BSNL") || (serviceProvider === "Global")) {
                                            activationMethod = $('input:radio[name=activationMethod]:checked').val();
                                            if (activationMethod === "manual") {
                                                command = interfaceNames + " cdma activate manual " + manual_mdn + " " + manual_msid + " " + manual_msl;
                                                response = deviceCommunicator.getExecCmdOutput(command);
                                            } else {
                                                command = interfaceNames + " cdma activate oma-dm device-config";
                                                response = deviceCommunicator.getExecCmdOutput(command);
                                            }
                                        } else if (serviceProvider === "Verizon") {
                                            command = interfaceNames + " cdma activate otasp " + otasp_aan;
                                            response = deviceCommunicator.getExecCmdOutput(command);
                                        }
                                        //alert(response);
                                        //configResponseMsg(response);
                                        setConfigStatus(id, response);
                                    }
                                    /***********Primary/Backup WAN and Persistent or Non-Persistent dialer CLI's *********************************/

                                    if (($('#primaryWan').is(':checked') === true) && ($('#persistent').is(':checked') === true)) {
// Yes, dialer Persistent
                                        response = deviceCommunicator.configureCommandsFromTemplate("CreatePrimaryCellular_DiPer_EVDO.txt", arr, isPreview);
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_EVDO.txt", arrChat, isPreview);
                                    } else if (($('#primaryWan').is(':checked') === true) && ($('#non-persistent').is(':checked') === true)) {
// Primary WAN dialer Non-Persistent
                                        response = deviceCommunicator.configureCommandsFromTemplate("CreatePrimaryCellular_NonDiPer_EVDO.txt", arr, isPreview);
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_EVDO.txt", arrChat, isPreview);
                                    } else if (($('#backupWan').is(':checked') === true) && ($('#persistent').is(':checked') === true)) {
// Yes, dialer Persistent
                                        response = deviceCommunicator.configureCommandsFromTemplate("CreateBackUpCellular_DiPer_EVDO.txt", arr, isPreview);
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_EVDO.txt", arrChat, isPreview);
                                    } else if (($('#backupWan').is(':checked') === true) && ($('#non-persistent').is(':checked') === true)) {
// Yes, dialer Non-Persistent
                                        response = deviceCommunicator.configureCommandsFromTemplate("CreateBackUpCellular_NonDiPer_EVDO.txt", arr, isPreview);
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_EVDO.txt", arrChat, isPreview);
                                    }
                                } else if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA" || modemType === "LTE") {
// GSM
                                    if (modemType === "LTE") {
                                        profileType = "lte";
                                    } else {
                                        profileType = "gsm";
                                    }


//                                    if (modemType === "LTE" && serviceProvider === "ATT") {
//                                        if ($("#accessPointName").is(':checked')) {
//                                            command = interfaceNames + " " + profileType + " profile create 1" + " " + lte_apn;
//                                            response = deviceCommunicator.getExecCmdOutput(command);
//                                            //alert(response);
//                                            setConfigStatus(id, response);
//                                        }
//                                    }
                                    if (modemType === "LTE" && serviceProvider === "Verizon") {
                                        if ($("#accessPointName").is(':checked')) {
                                            command = interfaceNames + " " + profileType + " profile create 3" + " " + lte_apn;
                                            response = deviceCommunicator.getExecCmdOutput(command);
                                            //alert(response);
                                            setConfigStatus(id, response);
                                        }
                                    }else if(modemType === "LTE"){
                                        if ($("#accessPointName").is(':checked')) {
                                            command = interfaceNames + " " + profileType + " profile create 1" + " " + lte_apn;
                                            response = deviceCommunicator.getExecCmdOutput(command);
                                            //alert(response);
                                            setConfigStatus(id, response);
                                        }

                                    }
                                    if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA") {
                                        if ($("#usernamePwdFromSP:checked").val() === undefined) {
                                            command = interfaceNames + " " + profileType + " profile create 1" + " " + gsm_apn;
                                            response = deviceCommunicator.getExecCmdOutput(command);
                                        } else {
                                            try {
                                                command = interfaceNames + " " + profileType + " profile create 1" + " " + gsm_apn + " " + gsm_auth + " " + gsm_apnUsername + " " + gsm_apnPassword + " " + gsm_pdp;
                                                response = deviceCommunicator.getExecCmdOutput(command);
                                            } catch (ex1) {
// if the cli "cellularxx gsm profile create 1 apn username pwd ipv4" fails try "cellularxx gsm profile create 1 apn ipv4 username pwd "
                                                try {
                                                    command = interfaceNames + " " + profileType + " profile create 1" + " " + gsm_apn + " " + gsm_pdp + " " + gsm_auth + " " + gsm_apnUsername + " " + gsm_apnPassword;
                                                    response = deviceCommunicator.getExecCmdOutput(command);
                                                } catch (ex2) {
                                                    command = interfaceNames + " " + profileType + " profile create 1" + " " + gsm_apn + " " + gsm_auth + " " + gsm_apnUsername + " " + gsm_apnPassword;
                                                    response = deviceCommunicator.getExecCmdOutput(command);
                                                }
                                            }
                                        }

                                        //alert(response);
                                        setConfigStatus(id, response);
                                    }
                                    /***********Primary/Backup WAN and Persistent or Non-Persistent dialer  CLI's****************/
                                    if (modemType === "HSPA" || modemType === "GSM") {
                                        if (($('#primaryWan').is(':checked') === true) && ($('#persistent').is(':checked') === true)) {
// Yes, dialer Persistent

                                            response = deviceCommunicator.configureCommandsFromTemplate("CreatePrimaryCellular_DiPer_HSPA.txt", arr, isPreview);
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_HSPA.txt", arrChat, isPreview);
                                            encapInterface = "Dialer" + dialer;
                                            arr.push({name: "encapInterface", value: encapInterface});
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("EncapsulationPPP.txt", arr, isPreview);
                                        } else if (($('#primaryWan').is(':checked') === true) && ($('#non-persistent').is(':checked') === true)) {
// Yes, dialer Non-Persistent
                                            response = deviceCommunicator.configureCommandsFromTemplate("CreatePrimaryCellular_NonDiPer_HSPA.txt", arr, isPreview);
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_HSPA.txt", arrChat, isPreview);
                                            encapInterface = interface1;
                                            arr.push({name: "encapInterface", value: encapInterface});
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("EncapsulationPPP.txt", arr, isPreview);
                                        } else if (($('#backupWan').is(':checked') === true) && ($('#persistent').is(':checked') === true)) {
// Yes, dialer Persistent

                                            response = deviceCommunicator.configureCommandsFromTemplate("CreateBackUpCellular_DiPer_HSPA.txt", arr, isPreview);
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_HSPA.txt", arrChat, isPreview);
                                            encapInterface = "Dialer" + dialer;
                                            arr.push({name: "encapInterface", value: encapInterface});
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("EncapsulationPPP.txt", arr, isPreview);
                                        } else if (($('#backupWan').is(':checked') === true) && ($('#non-persistent').is(':checked') === true)) {
// Yes, dialer Non Persistent

                                            response = deviceCommunicator.configureCommandsFromTemplate("CreateBackUpCellular_NonDiPer_HSPA.txt", arr, isPreview);
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_HSPA.txt", arrChat, isPreview);
                                            encapInterface = interface1;
                                            arr.push({name: "encapInterface", value: encapInterface});
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("EncapsulationPPP.txt", arr, isPreview);
                                        }

                                    } else if (modemType === "HSPA+R7" || modemType === "LTE") {
                                        if (($('#primaryWan').is(':checked') === true) && ($('#persistent').is(':checked') === true)) {
// Yes, dialer Persistent
                                            response = deviceCommunicator.configureCommandsFromTemplate("CreatePrimaryCellular_DiPer_HSPA7.txt", arr, isPreview);
                                        } else if (($('#primaryWan').is(':checked') === true) && ($('#non-persistent').is(':checked') === true)) {
// Yes, dialer Non-Persistent
                                            response = deviceCommunicator.configureCommandsFromTemplate("CreatePrimaryCellular_NonDiPer_HSPA7.txt", arr, isPreview);
                                        } else if (($('#backupWan').is(':checked') === true) && ($('#persistent').is(':checked') === true)) {
// Yes, dialer Persistent
                                            response = deviceCommunicator.configureCommandsFromTemplate("CreateBackUpCellular_DiPer_HSPA7.txt", arr, isPreview);
                                        } else if (($('#backupWan').is(':checked') === true) && ($('#non-persistent').is(':checked') === true)) {
// Yes, dialer Non Persistent
                                            response = deviceCommunicator.configureCommandsFromTemplate("CreateBackUpCellular_NonDiPer_HSPA7.txt", arr, isPreview);
                                        }
                                        if (modemType === "HSPA+R7") {

                                            response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_HSPA7.txt", arrChat, isPreview);
                                        } else if (modemType === "LTE") {

                                            response = response + deviceCommunicator.configureCommandsFromTemplate("ChatScript_LTE.txt", arrChat, isPreview);
                                        }

                                    }
//else IF HSPA+R7 and LTE


                                }
// else IF GSM +HSPA + HSPAR7



                                //check primary or secondary and push description accordingly
                                var des = "";
                                //var tempPrim = currentPrimaryWanInterface, tempBackup = currentBackupWanInterface;
                                if ($('#primaryWan').is(':checked')) {
                                    des = "primary";
                                } else if ($('#backupWan').is(':checked')) {
                                    des = "backup";
                                } else {
                                    des = "none";
                                }

                                setCellularPrimaryBackup(interface1, des, primaryInterface);
                                //move to wan zone
                                /*var interfaceList=[];
                                 if (des=="backup") {
                                 interfaceList.push(primaryInterface);
                                 }
                                 interfaceList.push(interface1);

                                 if ($('#moveToWan').is(':checked') && !$("#noneWan").is(':checked')) {
                                 if ($('#moveToWan').attr("data")=="configured") {
                                 if (interface1==tempPrim && des=="backup" ) {
                                 var tempList=[];
                                 tempList.push(tempPrim);
                                 moveCellularToWanZone(tempList,false);
                                 }else if (interface1==tempBackup && des=="primary" ) {
                                 var tempList=[];
                                 tempList.push(tempPrim);
                                 tempList.push(tempBackup);
                                 moveCellularToWanZone(tempList,false);
                                 }
                                 //if (tempPrim==currentBackupWanInterface || tempBackup==currentPrimaryWanInterface) {
                                 moveCellularToWanZone(interfaceList,true);
                                 //}
                                 }else{
                                 moveCellularToWanZone(interfaceList,true);
                                 }
                                 }else if (!$('#moveToWan').is(':checked') && !$("#noneWan").is(':checked')) {
                                 if ($('#moveToWan').attr("data")=="configured") {
                                 if (interface1==tempPrim && des=="backup" ) {
                                 var tempList=[];
                                 tempList.push(tempPrim);
                                 moveCellularToWanZone(tempList,false);
                                 }else if (interface1==tempBackup && des=="primary" ) {
                                 var tempList=[];
                                 tempList.push(tempPrim);
                                 tempList.push(tempBackup);
                                 moveCellularToWanZone(tempList,false);
                                 }else{
                                 moveCellularToWanZone(interfaceList,false);
                                 }
                                 }

                                 }else if ($("#noneWan").is(':checked')) {
                                 if (interface1==tempPrim && $('#moveToWan').attr("data")=="configured"){
                                 interfaceList.length=0;
                                 interfaceList.push(currentPrimaryWanInterface);
                                 moveCellularToWanZone(interfaceList,false);
                                 }
                                 if (interface1==tempBackup && $('#moveToWan').attr("data")=="configured"){
                                 interfaceList.length=0;
                                 interfaceList.push(tempPrim);
                                 interfaceList.push(tempBackup);
                                 moveCellularToWanZone(interfaceList,false);
                                 }
                                 }*/
                                if (!$('#moveToWan').is(':checked') && !$("#noneWan").is(':checked')) {
                                    modifyConfiguredFeatures("moveToWan", true, false);
                                } else {
                                    modifyConfiguredFeatures("moveToWan", false, false);
                                }
                                var cliConfig = "interface " + interface1 + "\n shut \n no shut";
                                response = deviceCommunicator.getConfigCmdOutput(cliConfig);
                                refresh();
                                $.unblockUI();
                            } catch (error) {
                                $.unblockUI();
                                $("#cellularDialog").dialog("open");
                                $('#cellularInterfaceErrorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
                                $('#cellularInterfaceError').show();
                                return false;
                            }
                            deviceCommunicator.doWriteMemory();
                            e.preventDefault();
                        }, 1000);
                    }
                }, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $("#switchIntAccessMode").live("change", function () {
            switchAccessMode = $("#switchIntAccessMode").val();
            if (switchAccessMode.trim() == "static access") {
                $("#switchDialogOk").button("option", "disabled", false);
                $("#accessVlan").show();
                $("#trunkVlan").hide();
                $("#trunkVlanIDEnable").hide();
                $("#nativeVlan").hide();
            } else {
                $("#switchDialogOk").button("option", "disabled", false);
                if (switchAccessMode.trim() == "trunk") {
                    $("#accessVlan").hide();
                    $("#trunkVlan").show();
                    $("#trunkVlanIDEnable").hide();
                    $("#switchIntTrunkVlan1").prop("checked", true);
                    $("#nativeVlan").show();
                } else {
                    $("#accessVlan").hide();
                    $("#trunkVlan").hide();
                    $("#trunkVlanIDEnable").hide();
                    $("#nativeVlan").hide();
                }
            }
        });
        $("input:radio[name='trunkVlan']").change(function () {
            if ($('#switchIntTrunkVlan1').is(':checked')) {
                $("#trunkVlanIDEnable").hide();
            } else {
                $("#trunkVlanIDEnable").show();
            }
        });
        $("#switchInterfaceDialog").dialog({
            autoOpen: false,
            height: 480,
            width: 700,
            modal: true,
            buttons: [{
                    id: "switchDialogOk",
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $("#switchInterfaceDialog").dialog("close");
                        blockPage("Applying");
                        setTimeout(function () {
                            var configCommand;
                            switchPortName = $("#switchInterfaceName").text();
                            switchAccessMode = $("#switchIntAccessMode").val();
                            description = $("#switchInterfaceDesc").val();
                            portFast = $("#switchIntPortFast").val();
                            switchDuplex = $("#switchIntDuplex").val();
                            switchSpeed = $("#switchIntSpeed").val();
                            accessVlanNo = $("#switchIntAccessVlan").val();
                            nativeVlanValue = $("#switchIntNativeVlan").val();
                            switchtrunkVlanIdVal = $("#switchIntTrunkVlanID").val();
                            if ($('#switchIntTrunkVlan1').is(':checked')) {
                                switchTrunkValue = "all";
                            } else {
                                switchTrunkValue = "1,1002-1005," + switchtrunkVlanIdVal;
                            }
                            checkVlanVlaue = validateVlan(switchtrunkVlanIdVal);
                            try {
                                if (accessVlanNo < 1 || accessVlanNo > 4094 || isNaN(accessVlanNo)) {
                                    $("#staticVlanError").show();
                                    $.unblockUI();
                                    $("#switchInterfaceDialog").dialog("open");
                                } else if (nativeVlanValue < 1 || nativeVlanValue > 4094 || isNaN(nativeVlanValue)) {
                                    $("#trunkNativeVlanError").show();
                                    $.unblockUI();
                                    $("#switchInterfaceDialog").dialog("open");
                                } else if ((switchAccessMode.trim() == "trunk") && (switchTrunkValue != "all") && (switchtrunkVlanIdVal == null || checkVlanVlaue === false)) {
                                    $("#trunkVlanError").show();
                                    $.unblockUI();
                                    $("#switchInterfaceDialog").dialog("open");
                                } else {
                                    $("#staticVlanError").hide();
                                    if (portFast == "Enable") {
                                        portFastCommand = "spanning-tree portfast";
                                    } else {
                                        portFastCommand = "no spanning-tree portfast";
                                    }
                                    description = description.trim();
                                    if (description !== "" && description !== " " && description !== null) {
                                        configCommand = "interface " + switchPortName + "\n description " + description + "\n" + portFastCommand + "\n duplex " + switchDuplex + "\n speed " + switchSpeed;
                                    } else {
                                        configCommand = "interface " + switchPortName + "\n" + portFastCommand + "\n duplex " + switchDuplex + "\n speed " + switchSpeed;
                                    }
                                    if (switchAccessMode.trim() == "trunk") {
                                        configCommand = configCommand + "\n no switchport access vlan";
                                        configCommand = configCommand + "\n switchport mode " + switchAccessMode;
                                        configCommand = configCommand + "\n switchport " + switchAccessMode + " allowed vlan " + switchTrunkValue;
                                        configCommand = configCommand + "\n switchport " + switchAccessMode + " native vlan " + nativeVlanValue;
                                    } else {
                                        if (switchTrunkValue != null) {
                                            configCommand = configCommand + "\n no switchport trunk allowed vlan";
                                            configCommand = configCommand + "\n no switchport trunk native vlan";
                                        }
                                        configCommand = configCommand + "\n switchport mode access \n switchport access vlan " + accessVlanNo;
                                    }
                                    configCommand = configCommand + "\n no shutdown";
                                    response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
                                    refresh();
                                    $.unblockUI();
                                    deviceCommunicator.doWriteMemory();
                                }
                            } catch (error) {
                                $.unblockUI();
                                $("#switchInterfaceDialog").dialog("open");
                                $('#switchPortErrorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
                                $('#switchIntError').show();
                                $('#trunkVlanError').show();
                                return false;
                            }
                        }, 1000);
                    }}, {
                    id: "switchDialogCancel",
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }
            ],
            close: function () {

            }
        });
        $("#switchIntAccessVlan").keyup(function () {
            vlanNo = $("#switchIntAccessVlan").val().trim();
            if (vlanNo < 1 || vlanNo > 4094 || isNaN(vlanNo)) {
                $("#staticVlanError").show();
            } else {
                $("#staticVlanError").hide();
            }
        });
        $("#switchIntNativeVlan").on('keyup', function () {
            vlanNo = $("#switchIntNativeVlan").val().trim();
            if (vlanNo < 1 || vlanNo > 4094 || isNaN(vlanNo)) {
                $("#trunkNativeVlanError").show();
            } else {
                $("#trunkNativeVlanError").hide();
            }
        });
        $("#switchIntTrunkVlanID").on('keyup', function () {
            vlanNo = $("#switchIntTrunkVlanID").val().trim();
            var check = true;
            var ranges = vlanNo.split(",");
            if (ranges == null) {
                check = false;
            }
            for (i = 0; i < ranges.length; i++) {
                var vlanValues = ranges[i].split("-");
                if (vlanValues.length > 1) {

                    var low = Number(vlanValues[0]);
                    var high = Number(vlanValues[1]);
                    //Check that both are integers
                    if (isNaN(low) || isNaN(high) || parseInt(low, 10) != low || parseInt(high, 10) != high) {
                        check = false;
                    }

                    if (low >= high || low < 1 || high > 4094) {
                        check = false;
                    }
                } else {
                    var vlan = Number(vlanValues[0]);
                    // Check if vlan is not an integer
                    if (isNaN(vlan) || parseInt(vlan, 10) != vlan) {
                        check = false;
                    }

                    // Check if the vlan integer is a valid vlan
                    if (vlan < 1 || vlan > 4094) {
                        check = false;
                    }
                }
            }

            if (check) {
                $("#trunkVlanError").hide();
            } else {
                $("#trunkVlanError").show();
            }
        });
        $("#selectaRow").dialog({
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $("#wanAlertDialog").dialog({
            autoOpen: false,
            height: 250,
            width: 350,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("yes"),
                    click: function () {

                        $(this).dialog("close");
                        enableAllFields();
                    }
                }, {
                    text: $.i18n.prop("no"),
                    click: function () {
                        $(this).dialog("close");
                        $("#interfaceDialog").dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $("#wanAlert").dialog({
            autoOpen: false,
            height: 250,
            width: 350,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("yes"),
                    click: function () {
                        if ($('#moveToWanZone').attr("checkflag") == "configured") {
                            $('#moveToWanZone').attr("checked", false);
                        } else {
                            $('#moveToWanZone').attr("checked", true);
                        }
                        $(this).dialog("close");
                    }}, {
                    text: $.i18n.prop("no"),
                    click: function () {
                        if ($('#moveToWanZone').attr("checkflag") == "configured") {
                            $('#moveToWanZone').attr("checked", true);
                        } else {
                            $('#moveToWanZone').attr("checked", false);
                        }
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
	 $("#iproutonWanAlert").dialog({
            autoOpen: false,
            height: 250,
            width: 350,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
			postProcessForPrimaryOrBackupWan();
                        $(this).dialog("close");
                    }}, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $('#noInt').prop("checked", true);
			postProcessForPrimaryOrBackupWan();
                        $(this).dialog("close");
                    }
                }],
            close: function () {
            }
        });
        $("#wanCellularAlert").dialog({
            autoOpen: false,
            height: 250,
            width: 350,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("yes"),
                    click: function () {
                        if ($('#moveToWan').attr("checkflag") == "configured") {
                            $('#moveToWan').attr("checked", false);
                        } else {
                            $('#moveToWan').attr("checked", true);
                        }
                        $(this).dialog("close");
                        $('#enableNatCellularISR').attr('disabled', 'disabled');
                        $('#enableNatCellularISR').attr('checked', 'checked');
                    }}, {
                    text: $.i18n.prop("no"),
                    click: function () {
                        if ($('#moveToWan').attr("checkflag") == "configured") {
                            $('#moveToWan').attr("checked", true);
                        } else {
                            $('#moveToWan').attr("checked", false);
                        }
                        $('#enableNatCellularISR').removeAttr('disabled');
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $('#cellularWarning').dialog({
            autoOpen: false,
            height: 200,
            width: 400,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("yes"),
                    click: function () {
                        $('#noneWan').prop("checked", true);
                        $(this).dialog("close");
                    }}, {
                    text: $.i18n.prop("no"),
                    click: function () {
                        $('#backupWan').prop("checked", true);
                        $('#moveWanDiv').show();
                        $('#backupWanDetails').show();
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });
        $("#modeAlert").dialog({
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        var name = $("#controllerMode").val();
                        if (name.indexOf("vdsl") > -1) {
                            setTimeout(function () {
                                editRow = $('#interfaceTable tr.hilite');
                                title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                                $("#controllerInterface").empty();
                                $('#interfaceTable tbody tr').each(function () {
                                    //alert("java"+$(this).attr("class")+title);

                                    if ($(this).hasClass(title + "Elem") && $(this).find('td:nth-child(2)').text().indexOf("ATM") == -1) {
                                        // if ($(this).find('td:nth-child(2)').text().indexOf("ATM") == -1) {
                                        //code
                                        $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                                        // }
                                        //alert("done");
                                        //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");
                                    }
                                });
                                $("#controllerInterface").change();
                            }, 100);
                        } else {
                            setTimeout(function () {
                                editRow = $('#interfaceTable tr.hilite');
                                title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                                $("#controllerInterface").empty();
                                $('#interfaceTable tbody tr').each(function () {
                                    //alert("java"+$(this).attr("class")+title);

                                    if ($(this).hasClass(title + "Elem") && $(this).find('td:nth-child(2)').text().indexOf("ATM") > -1) {
                                        // if ($(this).find('td:nth-child(2)').text().indexOf("ATM") > -1) {
                                        //code
                                        $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                                        // }
                                        //alert("done");
                                        //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");
                                    }
                                });
                                $("#controllerInterface").change();

                            }, 100);
                        }
                        $(this).dialog('close');
                    }}, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        var editRow, name;
                        editRow = $('#interfaceTable tr.hilite');
                        name = $.trim(editRow.children().get(1).textContent);
                        $("#controllerMode").empty();
                        addOperatingMode(name);
                        $(this).dialog('close');
                    }
                }],
            close: function () {

            }
        });
        $("#notEditable").dialog({
            autoOpen: false,
            height: 200,
            width: 300,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $(this).dialog("close");
                    }
                }],
            close: function () {

            }
        });

        //buttons for interface table
        $("#addButton")
                .button()
                .click(function () {
                    var editRow;
                    //var name, type, interfaceType, platformType, wanMode;
                    $("#isEdit").val(false);
                    $('#ipv4Dialer').html("");
                    $('#ipv6Dialer').html("");
                    editRow = $('#interfaceTable tr.hilite');
                    $('#loopField').val("loopback");
                    $('#isWan').hide();
                    $('#isWanLabel').hide();
                    interfaceValidator.resetForm();
                    loopBackVlan = 1;
                    addOrEditLoopback();
                });
        $("#showButton")
                .button()
                .click(function () {
                    $("#detailTable tbody").empty();
                    $("#isEdit").val(true);
                    var editRow, interface1, modemType = "", Network = "", serviceProvider = "", ModemAcXml, ModemAcCmd, MDNCmd, MDNXml, MSIDCmd, MSIDXml, GSMCmd, GSMXml, GSMNewtork = "", modemData, srArray, interfaceNames, tilte, data = [], j = 0, RadioCmd, RadioXml, Radio, attachedDialer;
                    //var name, wanMode, controllerType = "", interfaceType, type, platformType;
                    $('#isWan').hide();
                    $('#isWanLabel').hide();
                    editRow = $('#interfaceTable tr.hilite');
                    if (editRow.children().get(1)) {
                        interfaceNames = $.trim(editRow.children().get(1).textContent);
                        tilte = "Details of " + interfaceNames;

                        var regEx = new RegExp("Cellular", "");
                        srArray = interfaceNames.split(regEx);
                        interface1 = "Cellular " + srArray[1];
                        // Regexs
                        var reg = new RegExp("[,\\n]");
                        var Regr = new RegExp(" = ", "");
                        var RegrColen = new RegExp(" : ", "");

                        //For Getting Router Hardware Information

                        command = "show " + interface1 + " hardware";
                        var xml = deviceCommunicator.getExecCmdOutput(command);
                        rows = xml.split(reg);

                        // Method for getting Modem Details
                        modemData = getModemDetails(interfaceNames);

                        Network = modemData[0];
                        modemType = modemData[1];
                        serviceProvider = modemData[2];

                        // Code to get Attached Dialer. If present then find it's ip or find interface ip
                        attachedDialer = getAttachedDialer(interfaceNames);
                        var xml, interfaceName, callStatus = "ACTIVE";
                        var ipAddress = "";

                        xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
                        $(xml).find('entry').each(function () {
                            interfaceName = $(this).find('Interface').text();
                            if (attachedDialer == "") {
                                if (interfaceName == interfaceNames) {
                                    ipAddress = $(this).find('IP-Address').text();
                                    return false;
                                }
                            } else {
                                if (interfaceName == attachedDialer) {
                                    ipAddress = $(this).find('IP-Address').text();
                                    return false;
                                }
                            }
                        });
                        if (ipAddress == "") {
                            callStatus = "INACTIVE";
                        }

                        if (modemType === "CDMA")
                        {


                            for (var i = 0; i < rows.length; i++)
                            {
                                if (rows[i].indexOf("Modem Firmware Version") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("Hardware Version") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("Electronic Serial Number (ESN)") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("Preferred Roaming List (PRL) Version") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                }
                            }

                            // For Modem Activation
                            ModemAcCmd = "show " + interface1 + "  all | include  Modem activated";
                            ModemAcXml = deviceCommunicator.getExecCmdOutput(ModemAcCmd);
                            var ModemActive = ModemAcXml.split(Regr);

                            //For MDN
                            MDNCmd = "show " + interface1 + "  all | include  MDN";
                            MDNXml = deviceCommunicator.getExecCmdOutput(MDNCmd);
                            var MDN = MDNXml.split(RegrColen);

                            //For MSID
                            MSIDCmd = "show " + interface1 + "  all | include  MSID";
                            MSIDXml = deviceCommunicator.getExecCmdOutput(MSIDCmd);
                            var MSID = MSIDXml.split(RegrColen);

                        } else if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA" || modemType === "LTE")
                        {
                            GSMCmd = "show " + interface1 + "  Network";
                            GSMXml = deviceCommunicator.getExecCmdOutput(GSMCmd);
                            GSMNewtork = GSMXml.split(reg);

                            RadioCmd = "show " + interface1 + " Radio";
                            RadioXml = deviceCommunicator.getExecCmdOutput(RadioCmd);
                            Radio = RadioXml.split(reg);



                            for (var i = 0; i < rows.length; i++)
                            {
                                if (rows[i].indexOf("Modem Firmware Version") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("Hardware Version") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("International Mobile Subscriber Identity (IMSI)") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("International Mobile Equipment Identity (IMEI)") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("Integrated Circuit Card ID (ICCID)") > -1)
                                {
                                    data[j] = rows[i];
                                    j++;
                                } else if (rows[i].indexOf("IDentity Number (MSISDN)") > -1) {
                                    data[j] = rows[i];
                                    j++;
                                }
                            }
                            for (var z = 0; z < GSMNewtork.length; z++)
                            {
                                if (GSMNewtork[z].indexOf("Current Service Status") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                } else if (GSMNewtork[z].indexOf("Service Error") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                } else if (GSMNewtork[z].indexOf("Packet Service") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                } else if (GSMNewtork[z].indexOf("Network Selection Mode") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                } else if (GSMNewtork[z].indexOf("Mobile Country Code (MCC)") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                } else if (GSMNewtork[z].indexOf("Country") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                } else if (GSMNewtork[z].indexOf("Mobile Network Code (MNC)") > -1)
                                {
                                    data[j] = GSMNewtork[z];
                                    j++;
                                }
                            }
                            for (var y = 0; y < Radio.length; y++)
                            {
                                if (Radio[y].indexOf("Current Band") > -1)
                                {
                                    data[j] = Radio[y];
                                    j++;
                                } else if (Radio[y].indexOf("Current RSSI") > -1)
                                {
                                    data[j] = Radio[y];
                                    j++;
                                }
                            }


                        }


                        //Appending to deatilsDialog Table


                        $('#detailTable tbody').append('<tr><td> ' + $.i18n.prop("iAndCModemType") + ' </td><td>' + Network + " " + modemType + " " + serviceProvider + '</td></tr>');
                        $('#detailTable tbody').append('<tr><td> ' + $.i18n.prop("iAndCCallStatus") + ' </td><td>' + callStatus + '</td></tr>');
                        if (modemType === "CDMA")
                        {
                            for (var j = 0; j < data.length; j++)
                            {
                                var details = data[j].split(Regr);
                                // property for table column property
                                var property = details[0];
                                // Vaules for table column values
                                var values = details[1];
                                $('#detailTable tbody').append('<tr><td>' + property + '</td><td>' + values + '</td></tr>');

                            }
                            $('#detailTable tbody').append('<tr><td>' + ModemActive[0] + '</td><td>' + ModemActive[1] + '</td></tr>');
                            $('#detailTable tbody').append('<tr><td>' + MDN[0] + '</td><td>' + MDN[1] + '</td></tr>');
                            $('#detailTable tbody').append('<tr><td>' + MSID[0] + '</td><td>' + MSID[1] + '</td></tr>');


                        } else if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA" || modemType === "LTE")
                        {
                            for (var j = 0; j < data.length; j++)
                            {
                                if (data[j].indexOf("IDentity Number (MSISDN)") > -1) {
                                    if (data[j].indexOf("=")) {
                                        data[j] = data[j] + " ";
                                    }
                                }
                                var details = data[j].split(Regr);
                                // property for table column property
                                var property = details[0];
                                // Vaules for table column values
                                var values = details[1];
                                $('#detailTable tbody').append('<tr><td>' + property + '</td><td>' + values + '</td></tr>');

                            }

                        }

                        $("#detailTable tr:nth-child(even)").addClass("striped");

                        $("#detailsDialog").dialog("option", "title", tilte);
                        $("#detailsDialog").dialog("open");
                        $("#detailsDialog").height('100%');

                    } else {
                        $("#selectaRow").dialog("open");
                    }

                });
        $(".ifcedit").live('click', function () {
            $this = $(this).closest("tr");
            if ($this.hasClass('read_only')) {
                isEmptyBlock = true;
            } else {
                var ifcChkbox = $this.find('input:checkbox').eq(0);
                $("#interfaceTable tbody tr").removeClass("hilite");
                $this.addClass("hilite");
                $("tbody input:checkbox").prop('checked', false);
                ifcChkbox.prop('checked', true);
                disableButtons($this);
                $("#editButton").trigger("click");
            }
        });


        //Load Nano Dialog
        if (isNano) {
            interfaceAndConnection.loadCellularForNanoDialog();
        }
        $("#editButton")
                .button()
                .click(function () {
                    $('#loopField').val("");
                    $("#isEdit").val(true);
                    loopBackVlan = 0;
                    var editRow, name, interfaceType, platformType, wanMode, interfaceDetails, controllerType = "", modemType = "", Network = "", serviceProvider = "", modemData, modemNo = 0, MDNCmd, MDNXml, MSIDCmd, MSIDXml, srArray, interface1, slaDetails, gsmProfileDetails, lteProfileDetails, modemFwVer, isAPNEditAllwd;
                    //var type, ModemTypexml, ipRouteMetric;
                    $('#ipv4Dialer').html("");
                    $('#ipv6Dialer').html("");
                    editRow = $('#interfaceTable tr.hilite');
                    $('#isWan').hide();
                    $('#isWanLabel').hide();
                    $('#syncTr').hide();
                    $('#encTr').hide();
                    $('#syncTr').hide();
                    $('#pppoeTr').show();
                    $("#cntrlr").hide();
                    $('#clockRateTr').hide();

                    $("#wanipv4").prop("checked", true);
                    $("#bridge").prop("checked", true);
                    $('#ipv6Select').removeAttr("disabled");
                    $('#dhcpClient').removeAttr("disabled");
                    $("#authentication").text($.i18n.prop("authentication"));

                    hideAllIpv6WanOptions();
                    //  enableIpRout();
                    hideAdvance();
                    hideAdvance("ipv6");
                    var checkShdsl = false;
                    var shdslName = "";
                    if (editRow.children().get(1)) {
                        interfaceValidator.resetForm();
                        cellularValidator.resetForm();
                        name = $.trim(editRow.children().get(1).textContent);
                        $('#loopField').val(name);
                        shdslName = name;
                        deviceIP = $.trim(editRow.find('td').eq(2).text());
                        $('#interfaceSelected').val(name);
                        //var tilte = "Details of " + name;
                        /*if(name.indexOf('Loopback') !== -1 || name.indexOf('Vlan') !== -1){
                         $('#PrimarySecondaryIntHeadingInC').parent().hide();
                         }
                         else{
                         $('#PrimarySecondaryIntHeadingInC').parent().show();
                         }*/
                        var editInterfaceType = deviceCommunicator.getInterfaceType(name);
                        if (name.indexOf('DSL') === -1 && name.indexOf('Cellular') === -1 && isSerial(editInterfaceType) === false && name.indexOf('Loopback') === -1 && name.indexOf('Vlan') === -1 && editInterfaceType !== 1 && editInterfaceType !== 4 && editInterfaceType !== 2 && editInterfaceType !== 539 && editInterfaceType !== 538 && editInterfaceType !== 503 && editInterfaceType !== 504 && editInterfaceType !== 532 && editInterfaceType !== 1012 && editInterfaceType !== 6 && editInterfaceType !== 5) {
                            $("#notEditable").dialog("open");
                            return false;
                        } else if (editInterfaceType == 5 || editInterfaceType == 6) {
                            getSwitchPortDetails(name, editInterfaceType);
                        } else if (name.indexOf('DSL') !== -1) {
                            $("#cntrlr").show();
                            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("editController") + ')').show();
                            platformType = deviceCommunicator.getPlatformType();
                            var DeviceType = deviceCommunicator.getDeviceType();
                            if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
                                $("#controllerMode").empty();
                                $("#controllerMode").append('<option id="atm" value="atm">ATM</option>');
                                //addOperatingMode(name);
                            } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
                                $("#controllerMode").empty();
                                $("#controllerMode").append('<option id="efm" value="efm">EFM</option>');
                                addOperatingMode(name);
                            } else if (platformType.indexOf('EA') !== -1) {
                                $("#controllerMode").empty();
                                $("#controllerMode").append('<option id="atm" value="atm">ATM</option>');
                                $("#controllerMode").append('<option id="efm" value="efm">EFM</option>');
                                //addOperatingMode(name);
                            } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
                                $("#controllerMode").empty();
                                $("#controllerMode").append('<option id="auto" value="auto">Auto</option>');
                                //addOperatingMode(name);
                            } else if (DeviceType !== "fixed") {
                                if (name.indexOf('VDSL') !== -1) {
                                    $("#controllerMode").empty();
                                    //$("#controllerMode").append('<option id="auto" value="auto">Auto</option>');
                                    addOperatingMode(name);
                                } else if (name.indexOf('SHDSL') !== -1) {
                                    controllerType = getControllerType(name);
                                    if (controllerType === "EFM") {
                                        $("#controllerMode").empty();
                                        //addOperatingMode(name);
                                        $("#controllerMode").append('<option id="efm" value="efm">EFM</option>');
                                    } else if (controllerType === "EFMATM") {
                                        $("#controllerMode").empty();
                                        //addOperatingMode(name);
                                        $("#controllerMode").append('<option id="atm" value="atm">ATM</option>');
                                        $("#controllerMode").append('<option id="efm" value="efm">EFM</option>');
                                    } else if (controllerType === "auto") {
                                        $("#controllerMode").empty();
                                        //$("#controllerMode").append('<option id="auto" value="auto">AUTO</option>');
                                        $("#controllerMode").append('<option id="auto" value="auto">' + $.i18n.prop("auto") + '</option>');
                                        //$/("#controllerMode").empty();
                                        //addOperatingMode(name);
                                    }
                                }
                            }

                            if (name.indexOf('VDSL') !== -1) {
                                //code
                                checkShdsl = true;
                                var name = $("#controllerMode").val();
                                if (name.indexOf('auto') > -1) {

                                    editRow = $('#interfaceTable tr.hilite');
                                    title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                                    $("#controllerInterface").empty();
                                    $('#interfaceTable tbody tr').each(function () {
                                        //alert("java"+$(this).attr("class")+title);

                                        if ($(this).hasClass(title + "Elem")) {
                                            //if ($(this).find('td:first').text().indexOf("ATM")>-1) {
                                            //code
                                            $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                                            //}
                                            //alert("done");
                                            //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");

                                        }
                                    });
                                    //$("#controllerInterface").change();
                                } else if (name.indexOf("vdsl") > -1) {
                                    editRow = $('#interfaceTable tr.hilite');
                                    title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                                    $("#controllerInterface").empty();
                                    $('#interfaceTable tbody tr').each(function () {
                                        //alert("java"+$(this).attr("class")+title);

                                        if ($(this).hasClass(title + "Elem") && $(this).find('td:nth-child(2)').text().indexOf("ATM") == -1) {
                                            //  if ($(this).find('td:nth-child(2)').text().indexOf("ATM") == -1) {
                                            //code
                                            $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                                            // }
                                            //alert("done");
                                            //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");
                                        }
                                    });

                                } else {
                                    editRow = $('#interfaceTable tr.hilite');
                                    title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                                    $("#controllerInterface").empty();
                                    $('#interfaceTable tbody tr').each(function () {
                                        //alert("java"+$(this).attr("class")+title);

                                        if ($(this).hasClass(title + "Elem") && $(this).find('td:nth-child(2)').text().indexOf("ATM") > -1) {
                                            //  if ($(this).find('td:nth-child(2)').text().indexOf("ATM") > -1) {
                                            //code
                                            $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                                            //   }
                                            //alert("done");
                                            //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");
                                        }
                                    });
                                    // $("#controllerInterface").change();


                                }
                            } else {
                                editRow = $('#interfaceTable tr.hilite');
                                title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                                $("#controllerInterface").empty();
                                $('#interfaceTable tbody tr').each(function () {
                                    //alert("java"+$(this).attr("class")+title);

                                    if ($(this).hasClass(title + "Elem")) {
                                        //if ($(this).find('td:nth-child(2)').text().indexOf("ATM")>-1) {
                                        //code
                                        checkShdsl = true;
                                        $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                                        //}
                                        //alert("done");
                                        //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");
                                    }
                                });

                            }
                            /*editRow = $('#interfaceTable tr.hilite');
                             title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                             $("#controllerInterface").empty();
                             $('#interfaceTable tbody tr').each(function () {
                             //alert("java"+$(this).attr("class")+title);

                             if ($(this).hasClass(title+"Elem")) {
                             //alert("done");
                             $("#controllerInterface").append("<option id="+$(this).find('td:nth-child(2)').text()+">"+$(this).find('td:nth-child(2)').text()+"</option>");
                             }
                             });*/
                            $("#controllerInterface").hide();
                            if ((checkShdsl === false) && (shdslName.indexOf('SHDSL') > -1)) {
                                //code
                                $("#interfaceDialog").dialog("open");
                                $("#CIRow").hide();
                                openInterfaceAccordionCheck("hide", title);
                            } else {
                                if ($("#cntrlr").is(':checked')) {
                                    $("#controllerInterface").show();
                                    name = $("#controllerInterface").val();
                                    //openInterfaceAccordion(name);
                                    $("#CIRow").show();
                                    editInterfaceElse(interfaceType, name, interfaceDetails, platformType, wanMode, 0);
                                    openInterfaceAccordionCheck("show", title);
                                } else {
                                    $("#controllerInterface").hide();
                                    //$("#controllerInterface").show();
                                    name = $("#controllerInterface").val();
                                    $("#CIRow").show();
                                    //openInterfaceAccordion(name);
                                    editInterfaceElse(interfaceType, name, interfaceDetails, platformType, wanMode, 0);
                                    openInterfaceAccordionCheck("hide", title);
                                }

                            }
                            /*$('#shdslForm').resetForm();
                             $('#shdslError').hide();
                             $("#shdslDialog").dialog("open");*/


                        } else if (name.indexOf('Loopback') !== -1) {
                            addOrEditLoopback(true, name);
                        } else if (isSerial(editInterfaceType) === true) {
                            addOrEditSerial(true, name);
                        } else if (name.indexOf('Vlan') !== -1) {
                            showVLANDialogue(true, name.substring(4));
                        } else if (name.indexOf('Cellular') !== -1 && isNano) {
                            interfaceAndConnection.loadCellularForNano(name);
                        } else if (name.indexOf('Cellular') !== -1 && !isNano) {
                            $('#cellularInterfaceError').hide();
                            var regEx = new RegExp("Cellular", "");
                            srArray = name.split(regEx);
                            interface1 = "Cellular " + srArray[1];
                            var RegrColen = new RegExp(" : ", "");
                            modemData = getModemDetails(name);
                            Network = modemData[0];
                            modemType = modemData[1];
                            serviceProvider = modemData[2];
                            modemNo = modemData[3];
                            modemNo = parseInt(modemNo, 10);
                            interfaceDetails = getEditInterfaceDetails(name);
                            $('#modemtype').val(serviceProvider);
// hidden variable
                            $('#modemno').val(modemNo);
                            // hidden variable


                            //checking NAT
                            $('#enableNatCellularISR').removeAttr('disabled');
                            if (interfaceDetails.isIpNatOutside) {
                                $('#enableNatCellularISR').attr('checked', "checked");
                            } else {
                                $('#enableNatCellularISR').removeAttr('checked');
                            }


                            /************************setting in GUI according to the Modem Type************************/
                            if (modemType === "CDMA") {
                                if (serviceProvider === "Verizon") {
                                    $('#manualActivation').hide();
                                    $('#ManualLabel').hide();
                                    $('#manualActivationDiv').hide();
                                    $('#omadmActivation').hide();
                                    $('#OMA-DMLabel').hide();
                                    $('#omadmActivationDiv').hide();
                                    $('#otaspActivation').hide();
                                    // otasp only LABEL
                                    $('#otaspActivationDiv').show();
                                    $('#OTASPLabel').show();
                                    //$("#cellularInterfaceAccordion").accordion( "resize" );
                                    // Not supported in jQuery UI 1.9 and above.
                                    $("#cellularInterfaceAccordion").accordion("refresh");
                                } else if ((serviceProvider === "Sprint" && modemNo >= 5727) || (serviceProvider === "BSNL") || (serviceProvider === "Global")) {
                                    $('#modemActivationDetails :input').attr('disabled', true);
                                    $('#omadmActivation').show();
                                    $('#OMA-DMLabel').show();
                                    $('#manualActivation').show();
                                    $('#ManualLabel').show();
                                    if (serviceProvider === "Sprint") {
                                        $("#omadmActivation").prop("checked", true);
                                        $('#manualActivationDiv').hide();
                                    } else {
                                        $("#manualActivation").prop("checked", true);
                                        $('#manualActivationDiv').show();
                                    }

                                    $('#otaspActivation').hide();
                                    $('#OTASPLabel').hide();
                                    $('#otaspActivationDiv').hide();
                                    //$("#cellularInterfaceAccordion").accordion( "resize" );
                                    // Not supported in jQuery UI 1.9 and above.
                                    $("#cellularInterfaceAccordion").accordion("refresh");
                                    $("#omadmActivation").prop("checked", false);
                                } else if ((serviceProvider === "Sprint" && modemNo < 5727) /*|| (serviceProvider === "Global")*/) {
                                    $('#omadmActivation').hide();
                                    $('#omadmActivationDiv').hide();
                                    $('#OMA-DMLabel').hide();
                                    $('#otaspActivation').hide();
                                    $('#OTASPLabel').hide();
                                    $('#otaspActivationDiv').hide();
                                    $('#manualActivation').hide();
                                    //manual only LABEL
                                    $('#ManualLabel').show();
                                    $('#manualActivationDiv').show();
                                    //$("#cellularInterfaceAccordion").accordion( "resize" );
                                    // Not supported in jQuery UI 1.9 and above.
                                    $("#cellularInterfaceAccordion").accordion("refresh");
                                }

                                $("#cellularDialog").dialog("open");
                                $('#cellularInterfaceForm').resetForm();

                                $("#cellularInterfaceAccordion").accordion("option", "active", 2);
                                $('#modemActivationDetails :input').attr('disabled', true);
                                //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Modem Account)').hide();
                                $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("modemAccounts") + ')').hide();
                                $('#ModemAcc').hide();
                                //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Access Point Name)').hide();
                                $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("accessPointName") + ')').hide();
                                $('#AcessPoint').hide();
                                //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Modem Activation)').show();
                                $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("modemActivation") + ')').show();
                                $('#ModemAct').show();
                                //$("#cellularInterfaceAccordion").accordion( "resize" );
                                // Not supported in jQuery UI 1.9 and above.
                                $("#cellularInterfaceAccordion").accordion("refresh");
                                try {
                                    MDNCmd = "show " + interface1 + "  all | include  MDN";
                                    MDNXml = deviceCommunicator.getExecCmdOutput(MDNCmd);
                                    var MDN = MDNXml.split(RegrColen);
                                    $('#mdn').val(MDN[1]);

                                    MSIDCmd = "show " + interface1 + "  all | include  MSID";
                                    MSIDXml = deviceCommunicator.getExecCmdOutput(MSIDCmd);
                                    var MSID = MSIDXml.split(RegrColen);
                                    $('#msid').val(MSID[1]);
                                } catch (err) {
                                    isEmptyBlock = true;
                                }
                            } else if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA" || modemType === "LTE") {
                                if (modemType === "LTE") {
                                    if (serviceProvider === "ATT" || serviceProvider === "Verizon") {
                                        $('#manualActivation').hide();
                                        $('#ManualLabel').hide();
                                        $('#manualActivationDiv').hide();
                                        $('#omadmActivation').hide();
                                        $('#OMA-DMLabel').hide();
                                        $('#omadmActivationDiv').hide();
                                        $('#otaspActivation').hide();
                                        // otasp only LABEL
                                        $('#otaspActivationDiv').hide();
                                        $('#OTASPLabel').hide();
                                        //$("#cellularInterfaceAccordion").accordion( "resize" );
                                        // Not supported in jQuery UI 1.9 and above.
                                        $("#cellularInterfaceAccordion").accordion("refresh");
                                    }
                                }

                                $("#cellularDialog").dialog("open");
                                $('#cellularInterfaceForm').resetForm();

                                //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Modem Activation)').hide();
                                $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("modemActivation") + ')').hide();
                                $('#ModemAct').hide();
                                //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Access Point Name)').hide();
                                $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("accessPointName") + ')').hide();
                                $('#AcessPoint').hide();
                                //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Modem Account)').show();
                                $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("modemAccount") + ')').show();
                                //$("#cellularInterfaceAccordion").accordion( "resize" );
                                // Not supported in jQuery UI 1.9 and above.
                                $("#cellularInterfaceAccordion").accordion("refresh");
                                $("#usernamePwdFromSP").prop("checked", false);
                                gsmProfileDetails = getGsmDetails(interface1);
                                if (modemType === "LTE") {
                                    $("#cellularInterfaceAccordion").accordion("option", "active", 0);
                                    //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Modem Account)').hide();
                                    $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("modemAccount") + ')').hide();
                                    $('#ModemAcc').hide();
                                    //$("#cellularInterfaceAccordion").find('h3').filter(':contains(Access Point Name)').show();
                                    $("#cellularInterfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("accessPointName") + ')').show();
                                    $('#AcessPoint').show();
                                    $('#wanConfigTable').show();
                                    $("#accessPointName").prop("checked", false);
                                    //$("#cellularInterfaceAccordion").accordion( "resize" );
                                    // Not supported in jQuery UI 1.9 and above.
                                    $("#cellularInterfaceAccordion").accordion("refresh");
                                    lteProfileDetails = getLteDetails(interface1, serviceProvider);
                                    modemFwVer = getModemFwVer(interface1);
                                    isAPNEditAllwd = isApnEditAllowed(modemFwVer);
                                    if (!isAPNEditAllwd) {
                                        $("#accessPointName").attr('disabled', true);
                                        $('#infoCellular').show();
                                    }
                                } else {
                                    $("#cellularInterfaceAccordion").accordion("option", "active", 1);
                                    $('#ModemAcc').show();
                                    //$("#cellularInterfaceAccordion").accordion( "resize" );
                                    // Not supported in jQuery UI 1.9 and above.
                                    $("#cellularInterfaceAccordion").accordion("refresh");
                                }
                                if (modemType === "LTE") {
                                    if (lteProfileDetails.apna.length > 0) {
                                        $("#apna").attr('disabled', true);
                                        $("#apna").val(lteProfileDetails.apna);
                                    }
                                }
                                if (gsmProfileDetails.apn.length > 0) {
                                    $("#apn").val(gsmProfileDetails.apn);
                                }
                                if (gsmProfileDetails.username.length > 0) {
                                    $("#usernamePwdFromSP").prop("checked", true);
                                    $("#apnTable").find("tr:gt(2)").show();
                                    $("#pdpPPP").attr("disabled", false);
                                    $("#pdpIpv4").prop("checked", true);
                                    $("#apnCHAP").prop("checked", true);
                                    // Select IPv4 and CHAP by default. overwrite if values found

                                    if (gsmProfileDetails.pdp === "PPP") {
                                        $("#pdpPPP").prop("checked", true);
                                    }
                                    if (gsmProfileDetails.pdp === "IPv4") {
                                        $("#pdpIpv4").prop("checked", true);
                                    }
                                    if (gsmProfileDetails.authentication === "PAP") {
                                        $("#apnPAP").prop("checked", true);
                                    }
                                    if (gsmProfileDetails.authentication === "CHAP") {
                                        $("#apnCHAP").prop("checked", true);
                                    }
                                    if (gsmProfileDetails.username.length > 0) {
                                        $("#apnUsername").val(gsmProfileDetails.username);
                                    }
                                    if (gsmProfileDetails.password.length > 0) {
                                        $("#apnPassword").val(gsmProfileDetails.password);
                                    }
                                } else {
                                    $("#usernamePwdFromSP").prop("checked", false);
                                    $("#apnTable").find("tr:gt(2)").hide();
                                    $("#pdpIpv4").prop("checked", true);
                                    $("#pdpPPP").prop("checked", false);
                                    $("#pdpPPP").attr("disabled", true);
                                }


                            }
                            $('#backupWanDetails').hide();
                            $("#cellularDialog").dialog("option", "title", "Edit " + name + " Configuration");
                            $("#persistent").prop("checked", true);
                            $("#primaryWan").prop("checked", true);
                            // Default select Primary non persistant. Ovewrite otherwise

                            if (interfaceDetails.ipv4dialer.length > 0) {
                                $("#persistent").prop("checked", true);
                            } else {
                                $("#non-persistent").prop("checked", true);
                            }
                            $('#wanConfigTable').removeAttr("intType");
                            if (interfaceDetails.isPrimary) {
                                $("#primaryWan").prop("checked", true);
                                $('#wanConfigTable').attr("intType", "primary");
                                //setting type to retrieve type in change function
                            }
                            if (interfaceDetails.isBackup) {
                                $("#backupWan").prop("checked", true);
                                populatePrimaryInterfaceTable();
                                slaDetails = getSlaDetails();
                                $('#backupWanDetails').show();
                                if (slaDetails.ipAddress.length > 0) {
                                    $("#slaIpAddressCellular").val(slaDetails.ipAddress);
                                }
                                if (slaDetails.interface1.length > 0) {
                                    var re = new RegExp("/", "g");
                                    var id = slaDetails.interface1.replace(re, "");
                                    $('#primaryWanInterfaceSelect').val(id);
                                }
                                $('#wanConfigTable').attr("intType", "backup");
                            }
                            populateCellularData(interfaceDetails);
                            //$('#cellularWarningMessage').text("Unconfiguring Backup WAN Interface will also unconfigure Primary WAN Interface. Do you want to continue?");
                            $('#cellularWarningMessage').text($.i18n.prop("unconfigBcpWan"));
                            if (!interfaceDetails.isBackup && !interfaceDetails.isPrimary) {
                                $("#noneWan").prop("checked", true);
                                $("#moveWanDiv").hide();
                                $("#cellularMsg").hide();
                                $("#cellularMsg").find('td').empty();
                            }
                            if (currentPrimaryWanInterface != "" && currentPrimaryWanInterface.toLowerCase().indexOf("cellular") < 0 && currentBackupWanInterface.toLowerCase().indexOf("cellular") < 0 && !isNano) {
                                $("#primaryWan").attr("disabled", "disabled");
                                $("#backupWan").attr("disabled", "disabled");
                                $("#noneWan").prop("checked", true);
                                $("#cellularMsg").show();
                                $("#cellularMsg").find('td').append('<em class="fa fa-info-circle"></em> Please unconfigure ' + currentPrimaryWanInterface + ' to set this interface as Primary/Backup.');
                                $("#moveWanDiv").hide();
                            } else {
                                $("#primaryWan").removeAttr("disabled");
                                $("#backupWan").removeAttr("disabled");
                                $("#cellularMsg").hide();
                                $("#cellularMsg").find('td').empty();
                                //$("#noneWan").prop("checked", true);
                            }
                            /*var WanZoneInterfaceArray=configureFirewall.getInterfacesInZoneWAN("WAN");
                             var found=false;
                             $.each(WanZoneInterfaceArray,function(index,value){
                             if (value==name || value.toLowerCase()==interfaceDetails.dialer.toLowerCase()) {
                             found=true;
                             return false;
                             }
                             });
                             if (found) {
                             $('#moveToWan').attr("data","configured");
                             $('#moveToWan').prop("checked",true);
                             }else{
                             $('#moveToWan').prop("checked",false);
                             $('#moveToWan').removeAttr("data");
                             }*/


                            /**********setting the value of MDN, MSID**************************************************/

                            $('#cellularInterfaceError').hide();
                        } else {
                            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("editController") + ')').hide();
                            editInterfaceElse(interfaceType, name, interfaceDetails, platformType, wanMode, 1);
                        }
                    } else {
                        $("#selectaRow").dialog("open");
                    }
                });
        $(".ifcdelete").live('click', function (e) {
            var interfaceName;
            $this = $(this).closest("tr");
            upDownFlag = false;
            var ifcChkbox = $this.find('input:checkbox').eq(0);
            $("#interfaceTable tbody tr").removeClass("hilite");
            $this.addClass("hilite");
            $("tbody input:checkbox").prop('checked', false);
            ifcChkbox.prop('checked', true);
            disableButtons($this);
            try {
                interfaceName = $.trim($('#interfaceTable tr.hilite').children().get(1).textContent);
            } catch (e) {
                isEmptyBlock = true;
            }
            var interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
            if (interfaceType == undefined) {
                interfaceType = deviceCommunicator.getInterfaceType(interfaceName, true);
            }
            if (interfaceType === 1 || interfaceType === 4 || interfaceType === 2 || interfaceType === 539 || interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532 || interfaceType === 1012) {
                if (interfaceName.indexOf(".") <= -1) {
                    //code
                    //$("#iAndCStatusStr").text("Physical interfaces cannot be deleted but proceeding with the operation would set it to default values");
                    $("#iAndCStatusStr").text($.i18n.prop("interfaceAlertMessgTow"));
                    //Physical interfaces cannot be deleted but proceeding with the operation would set it to default values
                } else {
                    //$("#iAndCStatusStr").text("Interface will be deleted. Do you want to continue?");
                    $("#iAndCStatusStr").text($.i18n.prop("interfaceAlertMessgThree"));
                    //Interface will be deleted. Do you want to continue?
                }

            } else {
                //$("#iAndCStatusStr").text("Interface will be deleted. Do you want to continue?");
                $("#iAndCStatusStr").text($.i18n.prop("interfaceAlertMessgThree"));
                //Interface will be deleted. Do you want to continue?
            }
            $("#iAndCStatus").dialog("open");
            //$("#deleteButton").trigger("click");

        });
        $("#deleteButton")
                .button()
                .click(function () {
                    var response, interfaceName, editRow, interfaceDetailsArray = [];
                    //var arr;
                    editRow = $('#interfaceTable tr.hilite');
                    if (editRow.children().get(1)) {
                        blockPage("Applying");
                        setTimeout(function () {
                            try {
                                var arr = [];
                                try {
                                    interfaceName = $.trim(editRow.children().get(1).textContent);
                                } catch (e) {
                                    isEmptyBlock = true;
                                }
                                arr.push({name: "interface", value: interfaceName});
                                if (interfaceName === "Vlan1") {
                                    $.unblockUI();
                                    arr.push({name: "interface", value: interfaceName.replace(/Vlan/, "")});
                                    deleteVlan1dialog('Yes', 'No', $(this), arr);
                                } else if (interfaceName.indexOf("Vlan") !== -1) {
                                    var cliInput = '';
                                    var vlanID = interfaceName.replace(/Vlan/, "");
                                    var associatedPortsForDelete = getAssociatedPorts(false, vlanID);
                                    if (associatedPortsForDelete !== null && associatedPortsForDelete.length > 0) {
                                        for (var i = 0; i < associatedPortsForDelete.length; i++) {
                                            var disassociateVlanArray = [];
                                            var disassociateInterface = associatedPortsForDelete[i];
                                            disassociateVlanArray.push({name: "disassociateInterface", value: disassociateInterface});
                                            disassociateVlanArray.push({name: "vlanID", value: vlanID});
                                            cliInput = cliInput + "\n" + deviceCommunicator.configureCommandsFromTemplate("disassociateVlan.txt", disassociateVlanArray, true);
                                        }
                                    }
                                    arr.push({name: "vlanID", value: vlanID});
                                    cliInput = cliInput + "\n" + deviceCommunicator.configureCommandsFromTemplate("deleteVlan.txt", arr, false);
                                    response = deviceCommunicator.getConfigCmdOutput(cliInput);

                                    if (response.length > 0) {
                                        $('#infoMessage').html(response);
                                        $('#info').show();
                                        $('#info').delay(4000).fadeOut(1000);
                                    }
                                    refresh();
                                    $.unblockUI();
                                    deviceCommunicator.doWriteMemory();
                                } else {
                                    if (interfaceName.indexOf("Cellular") !== -1) {
                                        $.unblockUI();
                                        deleteWarningMsg(interfaceName);
                                    } else {
                                        interfaceDetailsArray = getEditInterfaceDetails(interfaceName);
                                        interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
                                        if (interfaceType == undefined) {
                                            interfaceType = deviceCommunicator.getInterfaceType(interfaceName, true);
                                        }
                                        var arr = [{name: "interface", value: interfaceName}];
                                        //switch port
                                        if (interfaceType === 6 || interfaceType === 5 || interfaceType === 1 || interfaceType === 4 || interfaceType === 2 || interfaceType === 539 || interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532 || interfaceType === 1012) {
                                            //defaultInterface(interfaceName);

                                            try {
                                                var arr = [{name: "interface", value: interfaceName}];
                                                if (interfaceName.indexOf(".") > -1) {
                                                    //code
                                                    response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", arr, false);
                                                } else {
                                                    response = deviceCommunicator.configureCommandsFromTemplate("DefaultInterface.txt", arr, false);
                                                }
                                                if (interfaceDetailsArray.isPppoe) {
                                                    var arrDialer = [];
                                                    arrDialer.push({name: "interface", value: interfaceDetailsArray.ipv4dialer});
                                                    response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", arrDialer, false);
                                                }
                                            } catch (e) {
                                                isEmptyBlock = true;
                                            }
                                            /*}else  if ( interfaceType !== 6 || interfaceType !== 5) {
                                             try {
                                             var arr = [{name :"interface", value: interfaceName}];
                                             response = deviceCommunicator.configureCommandsFromTemplate("DefaultInterface.txt", arr, false);
                                             } catch(e) {
                                             }
                                             */} else {
                                            try {
                                                response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", arr, false);
                                            } catch (e) {
                                                isEmptyBlock = true;
                                            }
                                        }


                                    }
                                    if (interfaceName == currentPrimaryWanInterface) {
                                        currentPrimaryWanInterface = "";
                                        currentPrimaryWanInterfaceDesc = "";
                                        modifyConfiguredFeatures("moveToWanZone", false, false);
                                    }
                                    if (interfaceName == currentBackupWanInterface) {
                                        currentBackupWanInterface = "";
                                        currentBackupWanInterfaceDesc = "";
                                        modifyConfiguredFeatures("moveToWanZone", false, false);
                                    }
                                    if (typeof response !== 'undefined' && response.length > 0 && response.indexOf("undefined") === -1) {
                                        $('#infoMessage').html(response);
                                        $('#info').show();
                                        $('#info').delay(4000).fadeOut(1000);
                                    }
                                }

                                refresh();
                                $.unblockUI();

                            } catch (error) {
                                if (interfaceName == currentPrimaryWanInterface) {
                                    currentPrimaryWanInterface = "";
                                    currentPrimaryWanInterfaceDesc = "";
                                }
                                if (interfaceName == currentBackupWanInterface) {
                                    currentBackupWanInterface = "";
                                    currentBackupWanInterfaceDesc = "";
                                }
                                modifyConfiguredFeatures("moveToWanZone", false, false);
                                refresh();
                                $.unblockUI();
                                $('#errorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
                                $('#error').show();
                                $('#error').delay(4000).fadeOut(1000);
                            }
                        }, 1000);
                    } else {
                        $.unblockUI();
                        $("#selectaRow").dialog("open");
                    }
                });
        //Vlan creation --Suman reddy

        $("#createVLAN")
                .button()
                .click(function () {
                    $('#loopField').val("");
                    $('#ipv4Dialer').html("");
                    $('#ipv6Dialer').html("");
                    interfaceValidator.resetForm();
                    loopBackVlan = 1;
                    showVLANDialogue();
                });
        $("#cntrlr").click(function () {
            var name;
            //var interfaceType, interfaceDetails, platformType, wanMode;
            setTimeout(function () {
                if ($("#cntrlr").is(':checked')) {
                    $("#controllerInterface").show();
                    name = $("#controllerInterface").val();

                    //editInterfaceElse(interfaceType,name,interfaceDetails,platformType,wanMode,0);
                    openInterfaceAccordionCheck("show", name);
                    //$("#refreshDiv").hide();
                } else {
                    editRow = $('#interfaceTable tr.hilite');
                    name = $.trim(editRow.children().get(1).textContent);
                    $("#controllerInterface").hide();
                    openInterfaceAccordion(name);
                    openInterfaceAccordionCheck("hide", name);
                    $("#interfaceAccordion").accordion("option", "activate", 0);
                    //$("#refreshDiv").hide();
                }
            }, 100);

        });
        $("#controllerInterface").change(function () {
            var name, interfaceType, interfaceDetails, platformType, wanMode;
            name = $("#controllerInterface").val();
            //openInterfaceAccordion(name);
            editInterfaceElse(interfaceType, name, interfaceDetails, platformType, wanMode, 0);
            if ($("#cntrlr").is(':checked') === false) {
                //code
                openInterfaceAccordionCheck("hide", title);
            } else {
                openInterfaceAccordionCheck("show", title);
            }
        });
        $("#controllerMode").change(function () {
            var name = $("#controllerMode").val();
            //$("#cntrlr").attr("checked","checked")
            //$("#cntrlr").prop("checked", false);
            if (name.indexOf('auto') > -1) {

                editRow = $('#interfaceTable tr.hilite');
                title = $.trim(editRow.children().get(1).textContent).split(" ")[0];
                $("#controllerInterface").empty();
                $('#interfaceTable tbody tr').each(function () {
                    //alert("java"+$(this).attr("class")+title);

                    if ($(this).hasClass(title + "Elem")) {
                        //if ($(this).find('td:first').text().indexOf("ATM")>-1) {
                        //code
                        $("#controllerInterface").append("<option id=" + $(this).find('td:nth-child(2)').text() + ">" + $(this).find('td:nth-child(2)').text() + "</option>");
                        //}
                        //alert("done");
                        //$("#controllerInterface").append("<option id="+$(this).find('td:first').text()+">"+$(this).find('td:first').text()+"</option>");

                    }
                });
                $("#controllerInterface").change();
            } else {
                // $("#modeAlertMessage").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertMessage").html($.i18n.prop("wanAlertMessageFive"));
                //Please ensure you service provider side configuration needs to align with this. Do you want to continue?
                $("#modeAlert").dialog("open");

            }

        });
        $('#showAdv').click(function () {
            showAdvance();
        });
        $('#hideAdv').click(function () {
            hideAdvance();
        });
        $('#showAdvipv6').click(function () {
            showAdvance("ipv6");
        });
        $('#hideAdvipv6').click(function () {
            hideAdvance('ipv6');
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "iAndCLoading()");
        //code for PPOE IPv6
        $('input[name=waniptype]').on('change', function () {
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
            $("#bridgeIpAddress").rules("remove");
            $("#bridgeSubnet").rules("remove");
            $('#ipv6oeTr').hide();
            $('#bridgeOption').hide();
            $('#bridgeIpAddressTr').hide();
            $('#ipv6oeOptions').hide();
            $('#bridgeOption').hide();
            $('#bridgeIpAddressTr').hide();
            $('#bridgeOptionIpv6Port').hide();


            var iprout = $("input[type='radio'][name='waniptype']:checked").val();
            if (iprout === "wanipv4") {
                $('#ipv6oeTr').show();
                enableIpv6OE();
            } else {
                $("#ipv6oe").prop("checked", false);
                onPppoeChange(false);
            }

        });
        $('#ipv6oe').on('click', function () {

            $('#ipv6oeOptions').hide();
            $('#bridgeOption').hide();
            $('#bridgeIpAddressTr').hide();
            $('#bridgeOptionIpv6Port').hide();
            $('#ipv6Select').removeAttr("disabled");
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
            if ($("#ipv6oe").is(':checked')) {
                enableBridgeAndDhcp();
            } else {
                $("#bridgeIpAddress").rules("remove");
                $("#bridgeSubnet").rules("remove");
                $('#ipv6Select').val("select");
                $('#ipv6Select').change();
            }
        });
        $('input[name=ipv6oetype]').on('change', function () {
            enableBridgeAndDhcp();
        });
        $('#papSelect').change(function () {
            addValidationPAPCHAP("");
        });
        $('#chapSelect').change(function () {
            addValidationPAPCHAP("");
        });
        $('#papSelectipv6').change(function () {
            addValidationPAPCHAP("ipv6");
        });
        $('#chapSelectipv6').change(function () {
            addValidationPAPCHAP("ipv6");
        });
        $('#ipv6oeOptions').hide();
        $('#ipv4and6Rout').show();
        $('#bridgeOption').hide();
    }
    function localizeAuthIpv6(ipv6) {
        $("#Authtype" + ipv6).text($.i18n.prop("Authtype"));
        $("#AuthUserName" + ipv6).text($.i18n.prop("AuthUserName"));
        $("#AuthPassword" + ipv6).text($.i18n.prop("AuthPassword"));
        $("#ConfirmPswd" + ipv6).text($.i18n.prop("ConfirmPswd"));
        $("#papChapUsername" + ipv6).attr("placeholder", $.i18n.prop("papChapUsername"));
        $("#papChapPassword" + ipv6).attr("placeholder", $.i18n.prop("AuthPassword"));
        $("#confirmPassword" + ipv6).attr("placeholder", $.i18n.prop("ConfirmPswd"));
        $("#wizardMtuSize" + ipv6).attr("placeholder", $.i18n.prop("wizardMTUSize"));
        $("#wizardMssSize" + ipv6).attr("placeholder", $.i18n.prop("wizardMSSSize"));
    }
    function addValidationPAPCHAP(ipv6) {
        if ($("#papSelect" + ipv6).is(':checked') || $("#chapSelect" + ipv6).is(':checked')) {
            $("#papChapUsername" + ipv6).removeAttr("disabled");
            $("#papChapPassword" + ipv6).removeAttr("disabled");
            $("#confirmPassword" + ipv6).removeAttr("disabled");
            $("#AuthUserName" + ipv6).html($.i18n.prop("AuthUserName") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#AuthPassword" + ipv6).html($.i18n.prop("AuthPassword") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#ConfirmPswd" + ipv6).html($.i18n.prop("ConfirmPswd") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#papChapUsername" + ipv6).rules("add", {required: true, minlength: 1});
            $("#papChapPassword" + ipv6).rules("add", {required: true, minlength: 1});
            $("#confirmPassword" + ipv6).rules("add", {required: true, minlength: 1, equalTo: $('#papChapPassword' + ipv6)});
        } else {
            $("#papChapUsername" + ipv6).val("");
            $("#papChapPassword" + ipv6).val("");
            $("#confirmPassword" + ipv6).val("");
            $("#papChapUsername" + ipv6).prop("disabled", true);
            $("#papChapPassword" + ipv6).prop("disabled", true);
            $("#confirmPassword" + ipv6).prop("disabled", true);
            $("#AuthUserName" + ipv6).text($.i18n.prop("AuthUserName"));
            $("#AuthPassword" + ipv6).text($.i18n.prop("AuthPassword"));
            $("#ConfirmPswd" + ipv6).text($.i18n.prop("ConfirmPswd"));
            $("#papChapUsername" + ipv6).rules("remove");
            $("#papChapPassword" + ipv6).rules("remove");
            $("#confirmPassword" + ipv6).rules("remove");
        }
    }
//get switch port details

    function getSwitchPortDetails(switchPortName, switchType) {
        //consoleLogMethodDetailsStart("iAndC.js", "getSwitchPortDetails()");
        var accessMode;
        $("#switchIntError").hide();
        $("#trunkVlanError").hide();
        $("#trunkNativeVlanError").hide();
        $("#staticVlanError").hide();
        $('#staticInterfaceForm').resetForm();
        $("#switchInterfaceName").text(switchPortName);
        editRow = $('#interfaceTable tr.hilite');
        $("#switchInterfaceDesc").text($.trim(editRow.children().get(6).textContent));
        if (switchType == 6) {
            if ($("#switchIntSpeed option[value='1000']").length == 0)
            {
                $("#switchIntSpeed").append("<option id='speed1000' value='1000'>1000</option>");
            }
        } else {
            $("#switchIntSpeed").find("option[value='1000']").remove();
        }
        var xml = deviceCommunicator.getExecCmdOutput("show running-config interface " + switchPortName);
        if (xml.indexOf("spanning-tree") !== -1) {
            $("#switchIntPortFast").val("Enable");
        } else {
            $("#switchIntPortFast").val("Disable");
        }
        if (xml.indexOf("duplex") !== -1) {
            xmlDuplex = xml.split("duplex");
            duplexValue = xmlDuplex[1].trim().split(" ");
            duplexValue[0] = duplexValue[0].split("\r\n");
            $("#switchIntDuplex").val(duplexValue[0]);
        } else {
            $("#switchIntDuplex").val("Auto");
        }
        if (xml.indexOf("speed") !== -1) {
            xmlSpeed = xml.split("speed");
            speedValue = xmlSpeed[1].trim().split(" ");
            speedValue[0] = speedValue[0].split("\r\n");
            $("#switchIntSpeed").val(speedValue[0]);
        } else {
            $("#switchIntSpeed").val("Auto");
        }
        xml = deviceCommunicator.getExecCmdOutput("show interfaces " + switchPortName + " switchport");
        switchDetails = xml.split("\r\n");
        for (i = 0; i < switchDetails.length; i++) {
            value = switchDetails[i].split(":");
            if (value[0].trim() == "Administrative Mode") {
                $("#switchIntAccessMode").empty();
                if (value[1].trim() == "static access") {
                    //$("#switchIntAccessMode").append('<option value="static access">static access</option>');
                    $("#switchIntAccessMode").append('<option value="static access">' + $.i18n.prop("staticAccess") + '</option><option value="trunk">' + $.i18n.prop("trunkMode") + '</option>');
                    $("#switchIntAccessMode").val("access");
                    $("#switchDialogOk").button("option", "disabled", false);
                } else {
                    //$("#switchIntAccessMode").append('<option value="'+value[1]+'">'+value[1]+'</option><option value="static access">static access</option>');
                    $("#switchIntAccessMode").append('<option value="' + value[1] + '">' + $.i18n.prop("trunkMode") + '</option><option value="static access">' + $.i18n.prop("staticAccess") + '</option>');
                    $("#switchIntAccessMode").val(value[1]);
                    $("#switchDialogOk").button("option", "disabled", false);
                }
                accessMode = value[1].trim();
            } else if (value[0].trim() == "Access Mode VLAN") {
                vlanValue = value[1].trim().split("(");
                $("#switchIntAccessVlan").val(vlanValue[0]);
            } else if (value[0].trim() == "Trunking Native Mode VLAN") {
                vlanValue = value[1].trim().split("(");
                $("#switchIntNativeVlan").val(vlanValue[0]);
            } else if (value[0].trim() == "Trunking VLANs Enabled") {
                vlanValueID = value[1].trim();
            }
        }
        if (accessMode == "trunk") {
            $("#trunkVlan").show();
            $("#trunkVlanIDEnable").hide();
            if (vlanValueID == "ALL") {
                $("#trunkVlanIDEnable").hide();
                $("#switchIntTrunkVlan1").prop("checked", true);
            } else {
                $("#trunkVlanIDEnable").show();
                $("#switchIntTrunkVlan2").prop("checked", true);
                $("#switchIntTrunkVlanID").val(vlanValueID);
            }
            $("#nativeVlan").show();
            $("#accessVlan").hide();
            $("#switchIntAccessVlan").val("1");
        } else if (accessMode == "static access") {
            $("#accessVlan").show();
            $("#trunkVlan").hide();
            $("#trunkVlanIDEnable").hide();
            $("#nativeVlan").hide();
        } else {
            $("#accessVlan").hide();
            $("#trunkVlan").hide();
            $("#trunkVlanIDEnable").hide();
            $("#nativeVlan").hide();
            $("#switchIntAccessVlan").val("1");
        }
        $("#switchInterfaceDialog").dialog("open");
        //consoleLogMethodDetailsEnd("iAndC.js", "getSwitchPortDetails()");
    }

    function deleteVlan1dialog(button1, button2, element) {
        //consoleLogMethodDetailsStart("iAndC.js", "deleteVlan1dialog()");
        var btns = {};
        //var arr;
        btns[button1] = function () {
            var response, interfaceName, editRow, arr;
            arr = [];
            editRow = $('#interfaceTable tr.hilite');
            if (editRow.children().get(1)) {
                interfaceName = $.trim(editRow.children().get(1).textContent);
                var vlanID = interfaceName.replace(/Vlan/, "");
                arr.push({name: "vlanID", value: vlanID});
                arr.push({name: "interface", value: interfaceName});
            }
            try {
                var cliInput = '';

                var associatedPortsForDelete = getAssociatedPorts(false, vlanID);
                if (associatedPortsForDelete !== null && associatedPortsForDelete.length > 0) {
                    for (var i = 0; i < associatedPortsForDelete.length; i++) {
                        var disassociateVlanArray = [];
                        var disassociateInterface = associatedPortsForDelete[i];
                        disassociateVlanArray.push({name: "disassociateInterface", value: disassociateInterface});
                        disassociateVlanArray.push({name: "vlanID", value: vlanID});
                        cliInput = cliInput + "\n" + deviceCommunicator.configureCommandsFromTemplate("disassociateVlan.txt", disassociateVlanArray, true);
                    }
                }
                cliInput = cliInput + "\n" + deviceCommunicator.configureCommandsFromTemplate("deleteVlan.txt", arr, true);
                response = deviceCommunicator.getConfigCmdOutput(cliInput);
                $(this).dialog("close");
                if (response.length > 0) {
                    $('#infoMessage').html(response);
                    $('#info').show();
                    $('#info').delay(4000).fadeOut(1000);
                }
            } catch (error) {
                $(this).dialog("close");
                if (error.errorResponse.length > 0) {
                    $('#errorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
                    $('#error').show();
                    $('#error').delay(4000).fadeOut(1000);
                }
            }


            refresh();
        };
        btns[button2] = function () {
            // Do nothing
            $(this).dialog("close");
        };
        $("<div><p>You are deleting the interface that CCP Express uses to connect to the router.Once the configuration is delivered, CCP Express will lose connection to the router. Do you want to continue?</p></div>").dialog({
            autoOpen: true,
            title: 'Delete Vlan1',
            modal: true,
            buttons: btns
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "deleteVlan1dialog()");
    }

// Create or Edit VLAN  --Suman

    function createOrEditVlan(arr, vlanID, interfaceName, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "createOrEditVlan()");
        loopBackVlan = 1;
        var outPut = "";
        var AssociatedPortsBeforeEdit,
                associateInterface = "",
                associateVlanArray,
                disassociateInterface = "",
//      title = "",
                disassociateVlanArray,
//      output = "";
                AssociatedPortsBeforeEdit = [];
        AssociatedPortsBeforeEdit = getAssociatedPorts(false, vlanID);
        href = $(location).attr('href');
        arr.push({name: "interfaceName", value: "vlan " + vlanID});
        if (href.indexOf("EndUser") === -1) {
            if (interfaceName !== undefined) {
                interfaceDetails = getEditInterfaceDetails(interfaceName);
                if ((interfaceDetails.ipv4Address.length > 0 && href.indexOf(interfaceDetails.ipv4Address) === -1) || interfaceDetails.ipv4Address.length === 0) {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createVLAN.txt", arr, preview);
                }
            } else {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createVLAN.txt", arr, preview);
            }
            if ($("#enableNat:checked").val() === undefined) {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("noNatInside.txt", arr, preview);
            } else {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("natInside.txt", arr, preview);
            }

            if (interfaceName !== undefined) {
                if (interfaceDetails.ipv4Address === '10.10.10.1' && ($('#ipv4Select').val() !== 'staticip' || ($('#ipv4Select').val() === 'staticip' && $('#ipv4Address').val() !== '10.10.10.1'))) {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("removeAccessList23.txt", arr, preview);
                }
            }

            if ($('#ipv4Select').val() === 'staticip') {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithStaticIP.txt", arr, preview);
            }
            if ($('#ipv4Select').val() === 'dhcppoolvalues') {
                arr.push({name: "ipv4Address", value: $('#ipv4Address').val()});
                arr.push({name: "ipv4Mask", value: $('#ipv4Mask').val()});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithStaticIP.txt", arr, preview);
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("setDefaultRoute.txt", arr, preview);
            }
            if ($("#eui64").is(':checked') === false) {
                arr.push({name: "eui64", value: ""});
            }
            if ($('#ipv6Select').val() !== 'select') {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("enableIpv6UnicastRouting.txt", arr, preview);
            }
            if ($('#ipv6Select').val() === 'staticip') {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIpv6StaticIP.txt", arr, preview);
            }
            if ($('#ipv6Select').val() === 'prefixFromProvider') {
                if ($("#eui64").is(':checked') === false) {
                    arr.push({name: "eui64", value: ""});
                }
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIpv6PrefixFromProvider.txt", arr, preview);
            } else if ($('#ipv6Select').val() === 'autoconfig') {

                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIpv6Autoconfig.txt", arr, preview);
                if ($("#dhcpClient").is(':checked')) {
                    setVlanDetailsToArrayForDhcpClintConfig(arr);
                    outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("interfaceWithIpv6DhcpClient.txt", arr, preview);
                }
                //  outPut=outPut+pushIpv60eDhcp(arr);
            }
        }

        for (var i = 0; i < arr.length; i++) {
            if (arr[i].type === "checkbox") {
                if (arr[i].name !== -1 && arr[i].name === "interfaceType5or6") {
                    associateVlanArray = [];
                    associateInterface = arr[i].value;
                    associateVlanArray.push({name: "associateInterface", value: associateInterface});
                    associateVlanArray.push({name: "vlanID", value: vlanID});
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("associateVlan.txt", associateVlanArray, preview);
                }

            }
        }

        if (AssociatedPortsBeforeEdit !== null && AssociatedPortsBeforeEdit.length > 0) {
            for (var i = 0; i < AssociatedPortsBeforeEdit.length; i++) {
                var unChanged = $("input:checkbox[value='" + AssociatedPortsBeforeEdit[i] + "']").prop("checked");
                if (unChanged === false) {
                    disassociateVlanArray = [];
                    disassociateInterface = AssociatedPortsBeforeEdit[i];
                    disassociateVlanArray.push({name: "disassociateInterface", value: disassociateInterface});
                    disassociateVlanArray.push({name: "vlanID", value: vlanID});
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("disassociateVlan.txt", disassociateVlanArray, preview);
                }
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "createOrEditVlan()");
        return outPut;
    }


// Popup vlan dialogue box
    function showVLANDialogue(isEdit, vlanID) {
        //consoleLogMethodDetailsStart("iAndC.js", "showVLANDialogue()");
        $("#vpi").removeClass("requiredVPI");
        $("#vci").removeClass("requiredVCI");
        $("#vpi").rules("remove");
        $("#vci").rules("remove");
        //$('#vlanTable tr:not(:first)').remove();
        $('#ports').empty();
        var interfaceName,
                interfaceType,
                coloumCount = 0,
                rowcount = 0,
                rowid;
        $("#interfaceDialog").dialog("open");
        //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Connection)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(VLAN)').show();
        //$("#interfaceAccordion").find('h3').filter(':contains(IPv4 Address)').show();
        //$("#interfaceAccordion").find('h3').filter(':contains(IPv6 Address)').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
        $("#interfaceAccordion h3 #authentication").parent().hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
        $('#isWan').hide();
        $('#isWanLabel').hide();
        $("#interfaceAccordion").accordion("option", "active", 3);
        $('#interfaceForm').resetForm();
        $("#vlanID").attr("disabled", false);
        $('#interfaceError').hide();
        $("#progress").hide();
        var xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
        var desablePorts = "";
        if (vlanID === '1') {
            desablePorts = "disabled";
        }
        $(xml).find('entry').each(function () {
            interfaceName = $(this).find('Interface').text();
            interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
            if (interfaceType === 5 || interfaceType === 6) {
                if (rowcount === 0 && coloumCount === 0) {
                    rowid = "associatePortRow" + rowcount;
                    $('#ports').append('<tr id = "' + rowid + '"><td width="100">' + $.i18n.prop("AssociatePort") + '</td></tr>');
                }
                if (coloumCount === 3) {
                    coloumCount = 0;
                    rowcount = rowcount + 1;
                    rowid = "associatePortRow" + rowcount;
                    $('#ports').append('<tr id = "' + rowid + '"></tr>');
                    $('#' + rowid).append('<td></td>');
                }
                $('#' + rowid).append('<td width="160"><input type="checkbox" id="' + interfaceName + '" name="interfaceType5or6" value="' + interfaceName + '"  ' + desablePorts + '  />' + interfaceName + '</td>');
                coloumCount = coloumCount + 1;
            }
        });
        vlanIpv4Ipv6();
        if (isEdit === true) {
            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("EditVlan"));
            var interfaceDetails = getEditInterfaceDetails("Vlan" + vlanID);
            populateVlanData(interfaceDetails, vlanID);
            getAssociatedPorts(true, vlanID);
        } else {
            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("AddVlan"));
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "showVLANDialogue()");
    }
    function setMtuMssValuesInArray(arr, ipv6) {
        //consoleLogMethodDetailsStart("iAndC.js", "setMtuMssValuesInArray()");
        if ($('#showAdv' + ipv6).css('display') === 'none') {
            var mtuSize = $('#wizardMtuSize' + ipv6).val();
            var mssSize = $('#wizardMssSize' + ipv6).val();
            if (isEmpty(ipv6)) {
            arr.push({name: "mtuSize", value: mtuSize});
            arr.push({name: "mssSize", value: mssSize});
        } else {
                arr.push({name: "wizardMtuSizeipv6", value: mtuSize});
                arr.push({name: "wizardMssSizeipv6", value: mssSize});
            }

        } else {
            if (isEmpty(ipv6)) {
            arr.push({name: "mtuSize", value: 1452});
            arr.push({name: "mssSize", value: 1412});
            } else {
                arr.push({name: "wizardMtuSizeipv6", value: 1452});
                arr.push({name: "wizardMssSizeipv6", value: 1412});
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "setMtuMssValuesInArray()");
        return arr;
    }
    function setMTUSizeForInterfaces(preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setMTUSizeForInterfaces()");
        var xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
        var response = "";
        $(xml).find('entry').each(function () {
            var interfaceName = $(this).find('Interface').text(), interfaceType, interArr = [];
            interArr = setMtuMssValuesInArray(interArr);
            interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
            if (interfaceType === 1 || interfaceType === 4 || interfaceName.indexOf('Vlan') !== -1) {
                try {
                    interArr.push({name: "interfaceName", value: interfaceName});
                    response = response + deviceCommunicator.configureCommandsFromTemplate("setMTUSize.txt", interArr, preview);
                } catch (error) {
                    // Do nothing - Case : CLI "ip tcp adjust-mss 1412" not supported under that interface
                }
            }
        });
        if (preview) {
            // alert(response);
            return response;
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "setMTUSizeForInterfaces()");
    }

// Display vlan data

    function populateVlanData(interfaceDetails, vlanID) {
        //consoleLogMethodDetailsStart("iAndC.js", "populateVlanData()");
        $('#ipv4Select').val(interfaceDetails.ipv4Type);
        $('#ipv4Select').change();
        $('#ipv4Address').val(interfaceDetails.ipv4Address);
        $('#ipv4Mask').val(interfaceDetails.ipv4Mask);
        $('#ipv6Select').val(interfaceDetails.ipv6Type);
        $('#ipv6Select').change();
        $('#ipv6Prefix').val(interfaceDetails.ipv6Address);
        $('#ipv6Mask').val(interfaceDetails.ipv6Mask);
        if (interfaceDetails.isEui64) {
            $("#eui64").prop("checked", true);
        } else {
            $("#eui64").prop("checked", false);
        }
        if (interfaceDetails.ipv6DhcpClient) {
            $("#dhcpClient").prop("checked", true);
        }
        if (interfaceDetails.ipv6DhcpClient) {
            $("#dhcpClient").prop("checked", true);
        }
        $("#vlanID").val(vlanID);
        $("#vlanID").attr("disabled", true);
        if ($('#ipv4Select').val() !== 'select') {
            if (interfaceDetails.isIpNatInside) {
                $("#enableNat").prop("checked", true);
            } else {
                $("#enableNat").prop("checked", false);
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "populateVlanData()");
    }

//Get all associated ports to the vlan

    function getAssociatedPorts(selectCheckbox, vlanID) {
        //consoleLogMethodDetailsStart("iAndC.js", "getAssociatedPorts()");
        var xml,
                associatedPortList = [],
                interfaceName,
                associatedVLAN,
                xmlDoc;
        if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
        }
        xml = shRunFormatOutput;

        if (xml.indexOf("Building configuration...") !== -1) {
            xml = xml.substring(25, xml.length);
            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
        }
        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
        regEx = new RegExp("&#x03;", "g");
        xml = xml.replace(regEx, "");
        try {
            xmlDoc = $.parseXML(xml);
        } catch (error) {
            xmlDoc = xml;
        }

        $(xmlDoc).find('interface').each(function () {
            interfaceName = $(this).find('Param:first').text();
            $(this).find('ConfigIf-Configuration').each(function () {
                if ($(this).find('switchport').length === 0) {
                    if (vlanID === '1' && selectCheckbox === true) {
                        $("input:checkbox[value='" + interfaceName + "']").prop("checked", true);
                    }
                } else {
                    $(this).find('switchport').each(function () {
                        $(this).find('access').each(function () {
                            associatedVLAN = $(this).find('VLANIDVLANPortAccessMode').text();
                            if (associatedVLAN === vlanID) {
                                if (selectCheckbox === true) {
                                    $("input:checkbox[value='" + interfaceName + "']").prop("checked", true);
                                } else {
                                    associatedPortList.push(interfaceName);
                                }
                            }
                        });
                    });
                }
            });
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "getAssociatedPorts()");
        return associatedPortList;
    }
    function addOrEditLoopback(isEdit, interfaceName) {
        //consoleLogMethodDetailsStart("iAndC.js", "addOrEditLoopback()");
        var isLoopback = true;
        loopBackVlan = 1;
        $("#vpi").removeClass("requiredVPI");
        $("#vci").removeClass("requiredVCI");
        $("#vlanID").removeClass("required");
        $("#vpi").rules("remove");
        $("#vci").rules("remove");
        $("#vlanID").rules("remove");
        $("#interfaceDialog").dialog("open");
//    $("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').hide();
//    $("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
//    $("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
//    $("#interfaceAccordion").find('h3').filter(':contains(Connection)').hide();
//    $("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();
//    $("#interfaceAccordion").find('h3').filter(':contains(IPv4 Address)').show();
//    $("#interfaceAccordion").find('h3').filter(':contains(IPv6 Address)').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
        $("#interfaceAccordion h3 #authentication").parent().hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
        $("#interfaceAccordion").accordion("option", "active", 5);
        $('#interfaceForm').resetForm();
        $('#interfaceError').hide();
        $("#progress").hide();
        hideAllIpv6WanOptions();
        loopbackIpv4Ipv6();
        if (isEdit) {
            var interfaceDetails = getEditInterfaceDetails(interfaceName);
            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC") + " " + interfaceName + " " + $.i18n.prop("interfaceIandC"));
            var languageLocalization = $.i18n.prop("langwage");
            if (languageLocalization === "ja") {
                $("#interfaceDialog").dialog("option", "title", interfaceName + " " + $.i18n.prop("interfaceIandC") + $.i18n.prop("ofValueJapOnly") + $.i18n.prop("editIandC"));
            }
            populateData(interfaceDetails, isLoopback);
        } else {
            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("AddLoopBackInterface"));
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "addOrEditLoopback()");
    }
    function addOrEditSerial(isEdit, interfaceName) {
        //consoleLogMethodDetailsStart("iAndC.js", "addOrEditSerial()");
        var isLoopback = false;
        $("#vpi").removeClass("requiredVPI");
        $("#vci").removeClass("requiredVCI");
        $("#vlanID").removeClass("required");
        $("#vpi").rules("remove");
        $("#vci").rules("remove");
        $("#vlanID").rules("remove");
        $("#vpiRow").hide();
        $("#vciRow").hide();
        $("#interfaceDialog").dialog("open");
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("editController") + ')').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').show();
        //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
//        $("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
//        $("#interfaceAccordion").find('h3').filter(':contains(Connection)').show();
//        $("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();
//        $("#interfaceAccordion").find('h3').filter(':contains(IPv4 Address)').hide();
//        $("#interfaceAccordion").find('h3').filter(':contains(IPv6 Address)').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
        $("#interfaceAccordion h3 #authentication").parent().hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
        $("#interfaceAccordion").accordion("option", "active", 1);
        $('#interfaceForm').resetForm();
        $('#interfaceError').hide();
        $("#progress").hide();
        //$('#connTable').hide();
        //$('#connSerialTable').show();
        $('#pppoeTr').hide();
        $('#syncTr').show();
        $('#encTr').show();
        $('#asyncEncTD').show();
        $('#asyncEncTD').hide();
        $('#clockRateTr').hide();
        var sysncMode = $('input:radio[name=syncMode]');
        sysncMode.filter('[value=sync]').attr('checked', true);
        var syncEnc = $('input:radio[name=syncEnc]');
        syncEnc.filter('[value=hdlc]').attr('checked', true);
        //$('input:radio[name=syncEnc]').val('HDLC');
        serialIpv4Ipv6();
        if (isEdit) {
            var interfaceDetails = getEditInterfaceDetails(interfaceName);

            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC") + " " + interfaceName + " " + $.i18n.prop("interfaceIandC"));
            var languageLocalization = $.i18n.prop("langwage");
            if (languageLocalization === "ja") {
                $("#interfaceDialog").dialog("option", "title", interfaceName + " " + $.i18n.prop("interfaceIandC") + $.i18n.prop("ofValueJapOnly") + $.i18n.prop("editIandC"));
            }
            populateData(interfaceDetails, isLoopback);
            if (interfaceName.indexOf("Serial") !== -1 && interfaceDetails.isDCE) {
                $('#clockRateTr').show();
            }
        } else {
            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("AddLoopBackInterface"));
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "addOrEditSerial()");
    }

    function configureInterface(arr, preview, interfaceName, interfaceDetails, url, isAccessIP, oldIpv4Address, newIpv4Address) {
        //consoleLogMethodDetailsStart("iAndC.js", "configureInterface()");
        var outPut = "", interfaceType, primaryWanInterface = "", backupWanInterface = "";
        //var primaryWanInt, arrDesc = [], descRows = [], backupWanInt, bkpInterfaceDetails, patt1 = /_/;
        if (interfaceDetails.isPrimary && currentBackupWanInterface !== "" && $('#noInt').is(':checked') === true) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
            $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
            $('#interfaceError').show();
            $.unblockUI();
            $('#backupWanInt').attr('disabled', 'disabled');
            //consoleLogMethodDetailsEnd("iAndC.js", "configureInterface()");
            return false;
        } else {
            if (isAccessIP == undefined) {
                isAccessIP = false;
            }
            if (!isAccessIP && (arr[arr.length - 1]["value"].toString().indexOf("encapsulation") <= -1)) {
                if (interfaceDetails.dot1qKey.length == 0) {
                    if (interfaceName.indexOf("Serial") == -1) {
                        //code
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createInterface.txt", arr, preview);
                    }
                }

            }
            interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
            platformType = deviceCommunicator.getPlatformType();
            if (platformType.indexOf("892F") !== -1 && interfaceType === 4) {
                try {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceMediaType.txt", arr, preview);
                } catch (ex) {
                    isEmptyBlock = true;
                }
            }

            if (($("#description").val().length > 0) && ($('#noInt').is(':checked') === true)) {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arr, preview);
            }
            if (($('#primaryWanInt').is(':checked') === true)) {
                primaryWanInterface = interfaceName;
                interfaceDetails.isPrimary = true;
                outPut = outPut + setPrimaryWanInterface(interfaceName, primaryWanInterface, interfaceDetails, arr, preview);
                //$("#enableNat").prop("checked", true);
                //}
            }
            if ($('#backupWanInt').is(':checked') === true) {
                if (currentPrimaryWanInterface == "" || currentPrimaryWanInterface == null) {
                    //alert("cannot set backup when no primary is set");
                    $("#interfaceDialog").dialog("open");
                    //$('#interfaceErrorMessage').html(" Backup interface cannot be set when no Primary interface is set ");
                    $('#interfaceErrorMessage').html($.i18n.prop("bcpCantSet"));
                    $('#interfaceError').show();
                    $.unblockUI();
                    $('#backupWanInt').attr('disabled', 'disabled');
                    //consoleLogMethodDetailsEnd("iAndC.js", "configureInterface()");
                    return false;
                }
                if (backupWanInterface == currentPrimaryWanInterface) {
                    $("#interfaceDialog").dialog("open");
                    //$('#interfaceErrorMessage').html(backupWanInterface+" is Primary Wan Interface. Please choose another interface as Primary WAN before setting this as backup WAN  ");
                    $('#interfaceErrorMessage').html(backupWanInterface + " " + $.i18n.prop("isPrimaryWan"));
                    $('#interfaceError').show();
                    $.unblockUI();
                    //consoleLogMethodDetailsEnd("iAndC.js", "configureInterface()");
                    return false;
                }
                //$("#enableNat").prop("checked", true);
                //$("#enableNat").attr("disabled", true);
                backupWanInterface = interfaceName;
                interfaceDetails.isBackup = true;
                outPut = outPut + setBackupWanInterface(interfaceName, backupWanInterface, interfaceDetails, arr, preview);
                $('#bkpWanDetails').hide();

            }

            if ($('#noInt').is(':checked') === true) {
                var intDesc = $("#description").val();
                deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
                if (interfaceDetails.isPrimary) {
                    if (currentBackupWanInterface === "") {
                        var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "description", value: intDesc}];
                        intDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
                        if (intDetails.isPppoe || interfaceDetails.isPpp) {
                            var ipv4Dialer = intDetails.ipv4dialer;
                            var ipv6Dialer = intDetails.ipv6dialer;
                            if (intDetails.isPpp) {
                                ipv4Dialer = intDetails.interfaceName;
                                ipv6Dialer = intDetails.interfaceName;
                            }
                            //      var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: intDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                            //      outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
                        } else {
                            arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                            arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                            arrDel.push({name: "iprout", value: intDetails.routIpvType});
                            outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
                        }
                        if (intDesc === undefined || intDesc.trim() === "") {
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
                        } else {
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                        }
                        currentPrimaryWanInterface = "";
                        currentPrimaryWanInterfaceDesc = "";
                    } else {
                        $("#interfaceDialog").dialog("open");
                        //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
                        $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
                        $('#interfaceError').show();
                        $.unblockUI();
                        $('#backupWanInt').attr('disabled', 'disabled');
                        //consoleLogMethodDetailsEnd("iAndC.js", "configureInterface()");
                        return false;
                    }
                } else if (interfaceDetails.isBackup) {
                    slaDetails = getSlaDetails();
                    var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}, {name: "description", value: intDesc}];
                    var pppoeArr = [{name: "interfaceName", value: currentBackupWanInterface}, {name: "dialerTag", value: interfaceDetails.ipv4dialer}];
                    var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                    if (primaryInt.ipv4dialer.length > 0) {
                        pppoeArr.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                        arrDel.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                    } else {
                        pppoeArr.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                        arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                    }
                    if (interfaceDetails.isPppoe || interfaceDetails.isPpp) {
                        var dialer = interfaceDetails.ipv4dialer;
                        if (interfaceDetails.isPpp) {
                            dialer = interfaceName;
                        }
                        pppoeArr.push({name: "slaIP", value: slaDetails.ipAddress});
                        pppoeArr.push({name: "natList", value: "nat-list"});
                        //1    setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, pppoeArr);
                        //    outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview);
                    } else {
                        arrDel.push({name: "natInterface", value: currentBackupWanInterface});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                        arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
                        //arrDel.push({name:"primaryInterface", value:currentPrimaryWanInterface});
                        arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                        arrDel.push({name: "natList", value: "nat-list"});
                        setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, arrDel);
                        outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigs.txt", arrDel, preview);
                    }
                    if (intDesc == undefined || intDesc.trim() == "") {
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
                    } else {
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                    }
                    currentBackupWanInterface = "";
                    currentBackupWanInterfaceDesc = "";
                } else {
                    if (interfaceDetails.isPppoe || interfaceDetails.isPpp) {
                        var isPppoe = $('#pppoe').is(':checked');
                        var isPPP = getPPPConfig();
                        if (isPppoe || isPPP) {
                            isEmptyBlock = true;
                        } else {
                            if (interfaceDetails.isPppoe) {
                                if (interfaceDetails.ipv4dialer.length > 0) {
                                    //was persiatent
                                    var routeInterface = interfaceDetails.ipv4dialer;
                                    var interArray = [];
                                    interArray.push({name: "interface", value: routeInterface});
                                    try {
                                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", interArray, preview);
                                        var arryAtmppopeDelete = [];
                                        arryAtmppopeDelete.push({name: "interfaceName", value: interfaceDetails.interfaceName},
                                                {name: "dialerPoolTag", value: interfaceDetails.ipv4dialerPoolNumber});
                                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate2("deleteEthernetInterfacePppoe.txt", arryAtmppopeDelete, preview);
                                    } catch (excep) {
                                        isEmptyBlock = true;
                                    }
                                } else if (interfaceDetails.isPpp) {
                                    var routeInterface = interfaceDetails.interfaceName;
                                    var interArray = [];
                                    interArray.push({name: "interfaceName", value: routeInterface});
                                    try {
                                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteSerialPPP.txt", interArray, preview);
                                    } catch (excep) {
                                        isEmptyBlock = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if ($('#ipv4Select').val() === 'staticip') {
                if (isAccessIP) {
                    outPut = outPut + modifyConfiguredFeatures("moveToWanZone", false, preview);
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithStaticIP.txt", arr, true);
                    //deviceCommunicator.getConfigCmdOutput(output, true);
                    // Setting AJAX Async Flag to true
                    url = url.replace(oldIpv4Address, newIpv4Address);
                    url = url.replace(/\=(.+)$/i, "=interface");
                    setTimeout(function () {
                        $(location).attr('href', url);
                    }, 2000);
                    //consoleLogMethodDetailsEnd("iAndC.js", "configureInterface()");
                    return outPut;
                } else {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithStaticIP.txt", arr, preview);
                }
            } else if ($('#ipv4Select').val() === 'dhcp') {
                console.log($("#dhcpHostname").val().length + "::::" + $('#ipv4Select').val());
                if ($("#dhcpHostname").val().length > 0) {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithDHCPHostname.txt", arr, preview);
                } else {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithDHCP.txt", arr, preview);
                }
            } else if ($('#ipv4Select').val() == 'easyip') {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIPNego.txt", arr, preview);
            } else if ($('#ipv4Select').val() == 'dhcppoolvalues') {
                arr.push({name: "poolName", value: $('#dhcpList').val()});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate2("interfaceWithDHCPPool.txt", arr, preview);
            }

            if ($('#ipv6Select').val() !== 'select') {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("enableIpv6UnicastRouting.txt", arr, preview);
            }

            if ($('#ipv6Select').val() === 'staticip') {
                if ($("#eui64").is(':checked') === false) {
                    arr.push({name: "eui64", value: ""});
                }
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIpv6StaticIP.txt", arr, preview);
            } else if ($('#ipv6Select').val() === 'autoconfig') {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIpv6Autoconfig.txt", arr, preview);
                if ($("#dhcpClient").is(':checked')) {
                    setVlanDetailsToArrayForDhcpClintConfig(arr);
                    outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("interfaceWithIpv6DhcpClient.txt", arr, preview);
                }
                //outPut=outPut+pushIpv60eDhcp(arr);
            } else if ($('#ipv6Select').val() === 'prefixFromProvider') {
                if ($("#eui64").is(':checked') === false) {
                    arr.push({name: "eui64", value: ""});
                }
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceWithIpv6PrefixFromProvider.txt", arr, preview);
            }
            if ($('#noInt').is(':checked') === true) {
                arr.push({name: "natInterface", value: interfaceName});
                if ($("#enableNat").is(':checked')) {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", arr, preview);
                } else if (!$("#enableNat").is(':checked')) {
                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", arr, preview);
                }
            } else {
                //  if (natEnabledFlag || (!natEnabledFlag && enableDisableNatFlag)) {
                var currentDialerValue = {};
                currentDialerValue["interfaceName"] = interfaceName;
                currentDialerValue["ipv4dialer"] = "";
                currentDialerValue["ipv6dialer"] = "";
                var i = arr.length;
                arr.forEach(function (item) {
                    if (item.name === "wanipv4dialerTag") {
                        currentDialerValue["ipv4dialer"] = "Dialer" + item.name;
                    } else if (item.name === "wanipv6dialerTag") {
                        currentDialerValue["ipv6dialer"] = "Dialer" + item.name;
                }
                });
                outPut = outPut + enableDisableNatNew("enableNat", currentDialerValue, preview);
            }
            // }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "configureInterface()");
        return outPut;
    }

    function configureDialerInterface(interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "configureDialerInterface()");
        var response = "";
        if ($('#ipv4Select').val() === 'staticip') {
            response = response + deviceCommunicator.configureCommandsFrom_Template("dialerStaticIP.txt", arr, preview);
        } else if ($('#ipv4Select').val() === 'dhcp') {
            if ($("#dhcpHostname").val().length > 0) {
                response = response + deviceCommunicator.configureCommandsFrom_Template("dialerDHCPHostname.txt", arr, preview);
            } else {
                response = response + deviceCommunicator.configureCommandsFrom_Template("dialerDHCP.txt", arr, preview);
            }
        } else if ($('#ipv4Select').val() == 'easyip') {
            response = response + deviceCommunicator.configureCommandsFrom_Template("dialerIPNego.txt", arr, preview);
        }

        if ($('#ipv6Select').val() !== 'select') {
            response = response + deviceCommunicator.configureCommandsFrom_Template("enableIpv6UnicastRouting.txt", arr, preview);
        }

        if ($('#ipv6Select').val() === 'staticip') {
            if ($("#eui64").is(':checked') === false) {
                arr.push({name: "eui64", value: ""});
            }
            response = response + deviceCommunicator.configureCommandsFrom_Template("dialerIpv6StaticIP.txt", arr, preview);
        } else if ($('#ipv6Select').val() === 'autoconfig') {
            response = response + deviceCommunicator.configureCommandsFrom_Template("dialerIpv6Autoconfig.txt", arr, preview);
            if ($("#dhcpClient").is(':checked')) {
                setVlanDetailsToArrayForDhcpClintConfig(arr);
                response = response + deviceCommunicator.configureCommandsFrom_Template("dialerIpv6DhcpClient.txt", arr, preview);
            }
            //response=response+pushIpv60eDhcp(arr);
        } else if ($('#ipv6Select').val() === 'prefixFromProvider') {
            if ($("#eui64").is(':checked') === false) {
                arr.push({name: "eui64", value: ""});
            }
            response = response + deviceCommunicator.configureCommandsFrom_Template("dialerIpv6PrefixFromProvider.txt", arr, preview);
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "configureDialerInterface()");
        return response;
    }

    function configureATMInterface(arr, preview, interfaceDetails) {
        //consoleLogMethodDetailsStart("iAndC.js", "configureATMInterface()");
        var response = "", primaryWanInterface = "", backupWanInterface = "";
        //var arrDesc = [], patt1 = /_/, descRows = [];
        atmSubInterfaceTag = arr[arr.length - 1]['value'];
        interfaceName = "ATM" + atmSubInterfaceTag;
        if (interfaceDetails.isPrimary && currentBackupWanInterface != "" && $('#noInt').is(':checked') === true) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
            $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
            $('#interfaceError').show();
            $.unblockUI();
            $('#backupWanInt').attr('disabled', 'disabled');
            return false;
        } else {
            response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterface.txt", arr, preview);
            if ($('#ipv4Select').val() === 'staticip') {
                response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterfaceWithStaticIP.txt", arr, preview);
            } else if ($('#ipv4Select').val() === 'dhcp') {
                if ($("#dhcpHostname").val().length > 0) {
                    response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterfaceWithDHCPHostname.txt", arr, preview);
                } else {
                    response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterfaceWithDHCP.txt", arr, preview);
                }
            }

            if ($('#ipv6Select').val() !== 'select') {
                response = response + deviceCommunicator.configureCommandsFromTemplate("enableIpv6UnicastRouting.txt", arr, preview);
            }

            if ($('#ipv6Select').val() === 'staticip') {
                if ($("#eui64").is(':checked') === false) {
                    arr.push({name: "eui64", value: ""});
                }
                response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterfaceWithIpv6StaticIP.txt", arr, preview);
            } else if ($('#ipv6Select').val() === 'autoconfig') {
                response = response + deviceCommunicator.configureCommandsFrom_Template("createATMInterfaceWithIpv6Autoconfig.txt", arr, preview);
                if ($("#dhcpClient").is(':checked')) {
                    setVlanDetailsToArrayForDhcpClintConfig(arr);
                    response = response + deviceCommunicator.configureCommandsFrom_Template("createATMInterfaceWithIpv6DhcpClient.txt", arr, preview);
                }
                // response=response+pushIpv60eDhcp(arr);
            } else if ($('#ipv6Select').val() === 'prefixFromProvider') {
                if ($("#eui64").is(':checked') === false) {
                    arr.push({name: "eui64", value: ""});
                }
                response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterfaceWithIpv6PrefixFPro.txt", arr, preview);
            }

            /*if ($("#description").val().length > 0) {
             response  = response + deviceCommunicator.configureCommandsFromTemplate("ATMDescription.txt", arr, preview);
             }*/
            if (($("#description").val().length > 0) && ($("#noInt").is(':checked') === true)) {
                response = response + deviceCommunicator.configureCommandsFromTemplate("ATMDescription.txt", arr, preview);
            }

            if (($('#primaryWanInt').is(':checked') === true)) {
                primaryWanInterface = atmSubInterfaceTag;
                interfaceDetails.isPrimary = true;
                response = response + setATMPrimaryWanInterface(interfaceName, primaryWanInterface, interfaceDetails, arr, preview);
                //$("#enableNat").prop("checked", true);

            }
            if ($('#backupWanInt').is(':checked') === true) {
                if (currentPrimaryWanInterface == "" || currentPrimaryWanInterface == null) {
                    //alert("cannot set backup when no primary is set");
                    $("#interfaceDialog").dialog("open");
                    // $('#interfaceErrorMessage').html(" Backup interface cannot be set when no Primary interface is set ");
                    $('#interfaceErrorMessage').html($.i18n.prop("bcpCantSet"));
                    $('#interfaceError').show();
                    $.unblockUI();
                    $('#backupWanInt').attr('disabled', 'disabled');
                    return false;
                }
                if (backupWanInterface == currentPrimaryWanInterface) {
                    $("#interfaceDialog").dialog("open");
                    //$('#interfaceErrorMessage').html(backupWanInterface+" is Primary Wan Interface. Please choose another interface as Primary WAN before setting this as backup WAN  ");
                    $('#interfaceErrorMessage').html(backupWanInterface + " " + $.i18n.prop("isPrimaryWan"));
                    $('#interfaceError').show();
                    $.unblockUI();
                    return false;
                }
                backupWanInterface = atmSubInterfaceTag;
                interfaceDetails.isBackup = true;
                response = response + setATMBackupWanInterface(interfaceName, backupWanInterface, interfaceDetails, arr, preview);
                //$("#enableNat").prop("checked", true);
                $('#bkpWanDetails').hide();
            }
            if ($('#noInt').is(':checked') === true) {
                var intDesc = $("#description").val();
                deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
                if (interfaceDetails.isPrimary) {
                    if (currentBackupWanInterface == "") {
                        var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
                        if (interfaceDetails.isPppoe) {
                            var ipv4Dialer = interfaceDetails.ipv4dialer;
                            var ipv6Dialer = interfaceDetails.ipv6dialer;
                            //      var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: interfaceDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                            //     response = response + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
                        } else {
                            arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                            response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                            arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                            arrDel.push({name: "iprout", value: interfaceDetails.routIpvType});
                            response = deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
                        }
                        if (intDesc == undefined || intDesc.trim() == "") {
                            response = response + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
                        } else {
                            arrDel.push({name: "description", value: intDesc});
                            response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                        }
                        currentPrimaryWanInterface = "";
                        currentPrimaryWanInterfaceDesc = "";
                    } else {
                        $("#interfaceDialog").dialog("open");
                        //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
                        $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
                        $('#interfaceError').show();
                        $.unblockUI();
                        $('#backupWanInt').attr('disabled', 'disabled');
                        return false;
                    }
                } else if (interfaceDetails.isBackup) {
                    slaDetails = getSlaDetails();
                    var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}];
                    var pppoeArr = [{name: "interfaceName", value: currentBackupWanInterface}, {name: "dialerTag", value: interfaceDetails.ipv4dialer}];
                    var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                    if (primaryInt.ipv4dialer.length > 0) {
                        pppoeArr.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                        arrDel.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                    } else {
                        pppoeArr.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                        arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                    }
                    if (interfaceDetails.isPppoe) {
                        pppoeArr.push({name: "slaIP", value: slaDetails.ipAddress});
                        pppoeArr.push({name: "natList", value: "nat-list"});
                        //2           setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, pppoeArr);
                        //           response = response + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview);
                    } else {
                        arrDel.push({name: "natInterface", value: currentBackupWanInterface});
                        response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                        arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
                        //arrDel.push({name:"primaryInterface", value:currentPrimaryWanInterface});
                        arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                        arrDel.push({name: "natList", value: "nat-list"});
                        setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, arrDel);
                        response = response + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigs.txt", arrDel, preview);
                    }
                    if (intDesc == undefined || intDesc.trim() == "") {
                        response = response + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
                    } else {
                        arrDel.push({name: "description", value: intDesc});
                        response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                    }
                    currentBackupWanInterface = "";
                    currentBackupWanInterfaceDesc = "";
                } else {
                    if (interfaceDetails.isPppoe || interfaceDetails.isPpp) {
                        var isPppoe = $('#pppoe').is(':checked');
                        var isPPP = getPPPConfig();
                        if (isPppoe || isPPP) {
                            //  if ($("#pppoe").is(":checked") === true) {
                            //var pppoeArr=[{name:"interfaceName",value:currentPrimaryWanInterface},{name:"dialerTag",value:interfaceDetails.dialer}]
                            //response = response + deviceCommunicator.configureCommandsFromTemplate("deletePrimaryPPPOE.txt", pppoeArr, preview);

                        } else {
                            if (interfaceDetails.isPppoe) {
                                if (interfaceDetails.ipv4dialer.length > 0) {
                                    //was persiatent
                                    var routeInterface = interfaceDetails.ipv4dialer;
                                    var interArray = [];
                                    interArray.push({name: "interface", value: routeInterface});
                                    try {
                                        response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", interArray, preview);
                                        var arryAtmppopeDelete = [];
                                        arryAtmppopeDelete.push({name: "interfaceName", value: interfaceDetails.interfaceName},
                                                {name: "vpi", value: interfaceDetails.vpi},
                                                {name: "vci", value: interfaceDetails.vci},
                                                {name: "dialerPoolTag", value: interfaceDetails.ipv4dialerPoolNumber});
                                        response = deviceCommunicator.configureCommandsFromTemplate2("deleteATMInterfacePppoe.txt", arryAtmppopeDelete, preview);
                                    } catch (excep) {
                                        isEmptyBlock = true;
                                    }
                                }

                            } else if (interfaceDetails.isPpp) {
                                var routeInterface = interfaceDetails.interfaceName;
                                var interArray = [];
                                interArray.push({name: "interfaceName", value: routeInterface});
                                try {
                                    response = deviceCommunicator.configureCommandsFromTemplate("deleteSerialPPP.txt", interArray, preview);
                                } catch (excep) {
                                    isEmptyBlock = true;
                                }
                            }
                        }
                    }

                }
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "configureATMInterface()");
        return response;
    }
    function onPppoeChangeForSerial(encapsulation, isAlert) {
        //consoleLogMethodDetailsStart("iAndC.js", "onPppoeChangeForSerial()");
        if (encapsulation === 'ppp') {

            //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').show();
            $("#interfaceAccordion h3 #authentication").parent().show();
            var iprout = $("input[type='radio'][name='waniptype']:checked").val();
            if (isAlert !== false && (iprout == "wanipv4" || iprout == "wanipv4and6")) {
                // if(isAlert!==false){
                $("#pppChangeAlert").dialog("open");
            }
        } else {
            //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
            $("#interfaceAccordion h3 #authentication").parent().hide();
        }

        //consoleLogMethodDetailsEnd("iAndC.js", "onPppoeChangeForSerial()");
    }
    function hideAllIpv6WanOptions() {
        $('#ipv4and6Rout').hide();
        $("#ipv6oeTr").hide();
        $("#bridgeOption").hide();
        $('#ipv6oeOptions').hide();
        $("#bridgeIpAddressTr").hide();
        $("#ipv6oeOptions").hide();
        $('#bridgeIpAddressTr').hide();
        $('#bridgeOptionIpv6Port').hide();
        $('#ipv6Select').removeAttr("disabled");
        $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
        // $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
    }
    function enableIpRout() {
        $('#ipv4and6Rout').hide();
        $('#ipv6oeTr').hide();
        $('#ipv6oeOptions').hide();
        $('#bridgeOption').hide();
        $('#bridgeIpAddressTr').hide();

        //var primaryOrBackup = $("input[type='radio'][name='intWanConfig']:checked").val();
        //if (primaryOrBackup === "primaryInt" || primaryOrBackup === "backupInt") {
        //   $('#ipv4and6Rout').show();
        enableIpv6OE();
        //}
    }
    function onPppoeChange(isAlert) {
        //consoleLogMethodDetailsStart("iAndC.js", "onPppoeChange()");
        if ($('#pppoe').is(':checked')) {
            pppoeChecked();
            //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').show();
            $("#interfaceAccordion h3 #authentication").parent().show();
            var rout = $("input[type='radio'][name='waniptype']:checked").val();
            var wanType = $("input[type='radio'][name='intWanConfig']:checked").val();
            if (rout === "wanipv4and6" && wanType !== "none") {
                $("#authentication").text('Ipv4 ' + $.i18n.prop("authentication"));
                $("#interfaceAccordion h3 #ipv6authentication").parent().show();
            } else {
                $("#authentication").text($.i18n.prop("authentication"));
                $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
            }
            //     var iprout=$("input[type='radio'][name='waniptype']:checked").val();
            if (isAlert !== false) {
                $("#pppChangeAlert").dialog("open");
            }
        } else {
            pppoeUnchecked();
            $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
            // $("#interfaceAccordion").find('h3').find('#authentication').hide();
            $("#interfaceAccordion h3 #authentication").parent().hide();
        }

        //consoleLogMethodDetailsEnd("iAndC.js", "onPppoeChange()");
    }

    function disableAllFields() {
        //consoleLogMethodDetailsStart("iAndC.js", "disableAllFields()");
        //$("#interfaceForm :input").attr("disabled", true);
        $("#isWan").attr("disabled", false);
        $("#isWan").prop("checked", false);
        //consoleLogMethodDetailsEnd("iAndC.js", "disableAllFields()");
    }

    function enableAllFields() {
        //consoleLogMethodDetailsStart("iAndC.js", "enableAllFields()");
        //$("#interfaceForm :input").attr("disabled", false);
        $("#isWan").prop("checked", true);
        //consoleLogMethodDetailsEnd("iAndC.js", "enableAllFields()");
    }

    function pppoeUnchecked() {
        //consoleLogMethodDetailsStart("iAndC.js", "pppoeUnchecked()");
        var ipv4Value = $('#ipv4Select').val();
        var ipv6Value = $('#ipv6Select').val();
        $("#ipv4Select").empty();
        //$("#ipv4Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv4Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
//    $('#ipv4Select option').each(function() {
//    if ( $(this).val() == 'X' ) {
//        $(this).remove();
//    }
//    });
        $("#ipv4Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv4Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');

        $("#ipv4Select").append('<option id="dhcp" value="dhcp" selected>DHCP IP</option>');

        $("#ipv6Select").empty();
        //$("#ipv6Select").append('<option id="select" value="select" selected>No IP Address</option>');
        //$("#ipv6Select").append('<option id="autoconfig" value="autoconfig">Autoconfig</option>');
        //$("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">Use Prefix From Provider</option>');
        //$("#ipv6Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        $("#ipv6Select").append('<option id="select" value="select" selected>' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv6Select").append('<option id="autoconfig" value="autoconfig">' + $.i18n.prop("autoconfig") + '</option>');
        $("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">' + $.i18n.prop("prefixFromProvider") + '</option>');
        $("#ipv6Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        //consoleLogMethodDetailsEnd("iAndC.js", "pppoeUnchecked()");
        $('#ipv4Select').val(ipv4Value);
        $('#ipv6Select').val(ipv6Value);
        if (ipv4Value === "easyip") {
            $('#ipv4Select').val("select");
            $('#ipv4Select').change();
        }
        if (ipv6Value === "autoconfig") {
            $('#ipv6Select').val("select");
            $('#ipv6Select').change();
        }


    }

    function loopbackIpv4Ipv6() {
        //consoleLogMethodDetailsStart("iAndC.js", "loopbackIpv4Ipv6()");
        $("#ipv4Select").empty();
        //$("#ipv4Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv4Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        //$("#ipv4Select").append('<option id="dhcppoolvalues" value="dhcppoolvalues">Select from DHCP</option>');
        $("#ipv4Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv4Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $("#ipv4Select").append('<option id="dhcppoolvalues" value="dhcppoolvalues">' + $.i18n.prop("dhcppoolvalues") + '</option>');
        $('#ipv4Select').change();

        $("#ipv6Select").empty();
        //$("#ipv6Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv6Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        $("#ipv6Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv6Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $('#ipv6Select').change();
        //consoleLogMethodDetailsEnd("iAndC.js", "loopbackIpv4Ipv6()");
    }

// vlanIpv4Ipv6  crearte drop down for IPv4 and IPv6
    function serialIpv4Ipv6() {
        //consoleLogMethodDetailsStart("iAndC.js", "serialIpv4Ipv6()");
        $("#ipv4Select").empty();
        // $("#ipv4Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv4Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        //$("#ipv4Select").append('<option id="dhcppoolvalues" value="dhcppoolvalues">Select from DHCP</option>');
        //$("#ipv4Select").append('<option id="easyip" value="easyip" selected>Easy IP(IP Negotiated)</option>');
        $("#ipv4Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv4Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $("#ipv4Select").append('<option id="dhcppoolvalues" value="dhcppoolvalues">' + $.i18n.prop("dhcppoolvalues") + '</option>');
        $("#ipv4Select").append('<option id="easyip" value="easyip" selected>' + $.i18n.prop("easyip") + '</option>');



        $('#ipv4Select').change();
        $("#ipv6Select").empty();
        // $("#ipv6Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv6Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        //$("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">Use Prefix From Provider</option>');
        //$("#ipv6Select").append('<option id="autoconfig" value="autoconfig">Autoconfig</option>');
        $("#ipv6Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv6Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">' + $.i18n.prop("prefixFromProvider") + '</option>');
        $("#ipv6Select").append('<option id="autoconfig" value="autoconfig">' + $.i18n.prop("autoconfig") + '</option>');
        $('#ipv6Select').change();
        //consoleLogMethodDetailsEnd("iAndC.js", "serialIpv4Ipv6()");
    }
    function vlanIpv4Ipv6() {
        //consoleLogMethodDetailsStart("iAndC.js", "vlanIpv4Ipv6()");
        $("#ipv4Select").empty();
        //$("#ipv4Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv4Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        //$("#ipv4Select").append('<option id="dhcppoolvalues" value="dhcppoolvalues">Select from DHCP</option>');
        $("#ipv4Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv4Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $("#ipv4Select").append('<option id="dhcppoolvalues" value="dhcppoolvalues">' + $.i18n.prop("dhcppoolvalues") + '</option>');

        $('#ipv4Select').change();

        $("#ipv6Select").empty();
        //$("#ipv6Select").append('<option id="select" value="select">No IP Address</option>');
        //$("#ipv6Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        //$("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">Use Prefix From Provider</option>');
        //$("#ipv6Select").append('<option id="autoconfig" value="autoconfig">Autoconfig</option>');
        $("#ipv6Select").append('<option id="select" value="select">' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv6Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">' + $.i18n.prop("prefixFromProvider") + '</option>');
        $("#ipv6Select").append('<option id="autoconfig" value="autoconfig">' + $.i18n.prop("autoconfig") + '</option>');

        $('#ipv6Select').change();
        //consoleLogMethodDetailsEnd("iAndC.js", "vlanIpv4Ipv6()");
    }

    function pppoeChecked() {
        //consoleLogMethodDetailsStart("iAndC.js", "pppoeChecked()");
        $("#ipv4Select").empty();
        //$("#ipv4Select").append('<option id="select" value="select" selected>No IP Address</option>');
        //$("#ipv4Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        $("#ipv4Select").append('<option id="select" value="select" selected>' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv4Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');

        $("#ipv4Select").append('<option id="dhcp" value="dhcp">DHCP IP</option>');
        //$("#ipv4Select").append('<option id="easyip" value="easyip" selected>Easy IP(IP Negotiated)</option>');
        $("#ipv4Select").append('<option id="easyip" value="easyip" selected>' + $.i18n.prop("easyip") + '</option>');


        $("#ipv6Select").empty();
        //$("#ipv6Select").append('<option id="select" value="select" selected>No IP Address</option>');
        //$("#ipv6Select").append('<option id="autoconfig" value="autoconfig">Autoconfig</option>');
        //$("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">Use Prefix From Provider</option>');
        //$("#ipv6Select").append('<option id="staticip" value="staticip">Static IP Address</option>');
        var autoselect = "";
        var autoselectEmpty = "selected";
        var iprout = $("input[type='radio'][name='waniptype']:checked").val();
        var ipv0eType = $("input[type='radio'][name='ipv6oetype']:checked").val();
        if (iprout === "wanipv4and6" || iprout === "wanipv6") {
            $("#ipv6oe").prop("checked", false);
            ipv0eType = "";
            autoselect = "selected";
            autoselectEmpty = "";
        }
        if (iprout === "wanipv4" && $("#ipv6oe").is(':checked') && ipv0eType === "dhcp") {
            autoselect = "selected";
            autoselectEmpty = "";
            $('#dhcpClient').prop('checked', true);
            $('#dhcpClient').prop('disabled', true);
            $('#ipv6Select').prop('disabled', true);
        }
        $("#ipv6Select").append('<option id="select" value="select" ' + autoselectEmpty + '>' + $.i18n.prop("noIPAddressSelect") + '</option>');
        $("#ipv6Select").append('<option id="autoconfig" value="autoconfig" ' + autoselect + '>' + $.i18n.prop("autoconfig") + '</option>');
        $("#ipv6Select").append('<option id="prefixFromProvider" value="prefixFromProvider">' + $.i18n.prop("prefixFromProvider") + '</option>');
        $("#ipv6Select").append('<option id="staticip" value="staticip">' + $.i18n.prop("StaticIPAddress") + '</option>');
        $('#ipv6Select').change();
        //consoleLogMethodDetailsEnd("iAndC.js", "pppoeChecked()");
    }
    /*checking management interface is modified/not*/
    $("#ipv4Address").live("change", function () {
        ip = $("#ipv4Address").val();
        if (urlFlag === true) {
            if (urlIP == deviceIP && deviceIP != ip) {
                $("#IPv4Alert").dialog("open");
            }
        }
    });

    function staticIP() {
        //consoleLogMethodDetailsStart("iAndC.js", "staticIP()");
        var title = "";
        name = $('#loopField').val();
        if (name.toLowerCase().indexOf('loopback') === 0)
        {
            //$('#loopField').attr('loop',"loop");
        }
        $('#ipv4Table').append('<tr id="ipAddress"><td>' + $.i18n.prop("StaticIPAddress") + ' <span class="colorRed">*</span>:</td><td><input data="ipv4Mask" id="ipv4Address" name="ipv4Address" type="text" class= "requiredipv4 inputnotallowspace" /></td></tr>');
        $('#ipv4Table').append('<tr id="subnetMask"><td>' + $.i18n.prop("StaticSubnetMask") + '<span class="colorRed">*</span>:</td><td><input id="ipv4Mask" name="ipv4Mask" type="text" class= "requiredIPv4SubnetMask validIpSubnet inputnotallowspace"/></td></tr>');
        title = $("#interfaceDialog").dialog("option", "title");

        var addLoopBackMessage = $.i18n.prop("AddLoopBackInterface");

        if (($.trim(title) !== $.trim(addLoopBackMessage)) && (title.indexOf('Loopback') === -1)) {
            //   {

            //if(title.indexOf("Loopback") === -1){
            $('#ipv4Table').append('<tr id="nat"><td>' + $.i18n.prop("enableNat") + '</td><td><input id="enableNat" name="enableNat" type="checkbox"/></td></tr>');
            /*if ($('#primaryWanInt').is(':checked') || $('#backupWanInt').is(':checked')) {
             $("#enableNat").prop("checked", true);
             $("#enableNat").attr("disabled", true);
             }
             else{
             $("#enableNat").prop("checked", false);
             $("#enableNat").removeAttr("disabled");
             }*/
            if ($('#primaryWanInt').is(':checked') && currentPrimaryWanInterface === "") {
                $("#enableNat").prop("checked", true);
                //$("#enableNat").attr("disabled", true);
            } else {
                $("#enableNat").removeAttr("disabled");
            }
            if ($('#backupWanInt').is(':checked') && currentPrimaryWanInterface !== "" && currentBackupWanInterface === "" && natEnabledFlag === true) {
                $("#enableNat").prop("checked", true);
                $("#enableNat").attr("disabled", true);
            } else {
                if (natEnabledFlag === true) {
                    //code
                    $("#enableNat").prop("checked", true);
                    $("#enableNat").removeAttr("disabled");
                } else {
                    $("#enableNat").prop("checked", false);
                    $("#enableNat").removeAttr("disabled");
                }
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "staticIP()");
    }
    function selectFromDhcpList(dhcpmap, defarr) {
        //consoleLogMethodDetailsStart("iAndC.js", "selectFromDhcpList()");
        if ($('#dhcpList').val() !== 'select') {
            var selectedDhcp = $('#dhcpList').val();
            $('#ipv4Table').find("tr:gt(1)").remove();
            //$('#ipv4Table').append('<tr id="ipAddress"><td>' + $.i18n.prop("DHCPListIPAddress") +'</td><td><input id="ipv4Address" name="ipv4Address" type="text" class= "requiredipv4 inputnotallowspace" /></td></tr>');
            $('#ipv4Table').append('<tr id="ipAddress"><td>' + $.i18n.prop("ipAddress") + '</td><td><input id="ipv4Address" name="ipv4Address" data="ipv4Mask" type="text" class="requiredipv4 inputnotallowspace" /></td></tr>');
            $('#ipv4Table').append('<tr id="subnetMask"><td>' + $.i18n.prop("DHCPListSubnetMask") + '</td><td><input id="ipv4Mask" name="ipv4Mask" type="text" class= "requiredIPv4SubnetMask inputnotallowspace validIpSubnet"/></td></tr>');
            var title = $("#interfaceDialog").dialog("option", "title");
            var addLoopBackMessage = $.i18n.prop("AddLoopBackInterface");

            if (($.trim(title) !== $.trim(addLoopBackMessage)) && (title.indexOf('Loopback') === -1))
            {
                $('#ipv4Table').append('<tr id="nat"><td>' + $.i18n.prop("enableNat") + ': </td><td><input id="enableNat" name="enableNat" type="checkbox"/></td></tr>');
            }
            ;

            /*if ($('#primaryWanInt').is(':checked') || $('#backupWanInt').is(':checked')) {
             $("#enableNat").prop("checked", true);
             $("#enableNat").attr("disabled", true);
             }
             else{
             $("#enableNat").prop("checked", false);
             $("#enableNat").removeAttr("disabled");
             }*/
            if ($('#primaryWanInt').is(':checked') && currentPrimaryWanInterface === "") {
                $('#enableNat').prop("checked", "true");
                $('#enableNat').attr("disabled", "true");
            } else {
                $('#enableNat').removeAttr("disabled");
            }
            if ($('#backupWanInt').is(':checked') && currentPrimaryWanInterface !== "" && currentBackupWanInterface === "" && natEnabledFlag === true) {
                $('#enableNat').prop("checked", "true");
                $('#enableNat').attr("disabled", "true");
            } else {
                $('#enableNat').removeAttr("disabled");
            }
            var dhcpCounter = 0;
            while (dhcpCounter < dhcpmap.length) {

                if (dhcpmap[dhcpCounter].name === selectedDhcp) {
                    if (defarr[dhcpCounter].value.length !== 0) {
                        var defarrvalue = $.trim(defarr[dhcpCounter].value);
                        $("#ipv4Address").val(defarrvalue);
                    } else {
                        $("#ipv4Address").val(dhcpmap[dhcpCounter].value.substring(0, (dhcpmap[dhcpCounter].value.length - 1)) + "1");
                    }
                }
                dhcpCounter = dhcpCounter + 1;
            }

            $("#ipv4Mask").val("255.255.255.0");
            $("#ipv4Address").attr("disabled", true);
            $("#ipv4Mask").attr("disabled", true);
        } else {
            $('#ipv4Table').find("tr:gt(1)").remove();
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "selectFromDhcpList()");
    }


    function ipv6StaticIP() {
        //consoleLogMethodDetailsStart("iAndC.js", "ipv6StaticIP()");
        $('#ipv6Table').append('<tr><td>' + $.i18n.prop("IPv6StaticIPPrefix") + ' <span class="ccpexpCSSReplaceClass753">*</span>' +
                ':</td><td><input id="ipv6Prefix" name="ipv6Prefix" type="text" class= "requiredipv6 inputnotallowspace" /></td></tr>');
        $('#ipv6Table').append('<tr><td>' + $.i18n.prop("IPv6StaticIPPrefixMask") + '<span class="ccpexpCSSReplaceClass754">*</span>' +
                ':</td><td><input id="ipv6Mask" name="ipv6Mask" type="text" size="4" class="requiredIPv6PrefixAndPrefixMask inputnotallowspace" /><input type="checkbox" id="eui64" name="eui64" checked value="eui-64"/>EUI-64</td></tr>');
        //consoleLogMethodDetailsEnd("iAndC.js", "ipv6StaticIP()");
    }

    function ipv6PrefixFromProvider() {
        //consoleLogMethodDetailsStart("iAndC.js", "ipv6PrefixFromProvider()");
        $('#ipv6Table').append('<tr><td>' + $.i18n.prop("IPv6ProviderPrefix") + ' <span class="ccpexpCSSReplaceClass755">*</span>:</td>' +
                '<td><input id="ipv6Prefix" name="ipv6Prefix" type="text" class= "requiredipv6 inputnotallowspace" /></td></tr>');
        $('#ipv6Table').append('<tr><td>' + $.i18n.prop("IPv6ProviderPrefixMask") + '<span class="ccpexpCSSReplaceClass756">*</span>:</td>' +
                '<td><input id="ipv6Mask" name="ipv6Mask" type="text" size="4" class="inputnotallowspace"/><input type="checkbox" name="eui64" id="eui64" checked value="eui-64"/>EUI-64</td></tr>');
        //consoleLogMethodDetailsEnd("iAndC.js", "ipv6PrefixFromProvider()");
    }

    function ipv6Autoconfig() {
        //consoleLogMethodDetailsStart("iAndC.js", "ipv6Autoconfig()");
        $('#ipv6Table').append('<tr ><td></td><td><input type="checkbox" id="dhcpClient" name="dhcpClient" value="dhcpClient"/>' + $.i18n.prop("AutoConfigStmt") + '</td></tr>');
        $('#ipv6Table').append('<tr id="ipv6prefixNameTr"><td>' + $.i18n.prop("ipv6prifixname") + '<span class="ccpexpCSSReplaceClass750">*</span>:</td><td><input id="ipv6PrefixName" name="ipv6PrefixName" type="text" class="cpexpCSSReplaceClass384" placeholder="Prefix Name from provider"></td></tr>');
        //consoleLogMethodDetailsEnd("iAndC.js", "ipv6Autoconfig()");
        enableDisablePrefixName();
        $('#dhcpClient').on('click', function () {
            enableDisablePrefixName();
        });
    }

    function enableDisablePrefixName() {
        $('#ipv6PrefixName').rules("remove");
        $('#ipv6prefixNameTr').hide();
        if ($('#dhcpClient').is(':checked')) {
            $('#ipv6prefixNameTr').show();
            $('#ipv6PrefixName').rules("add", {required: true});
        }
    }
    function dhcp() {
        //consoleLogMethodDetailsStart("iAndC.js", "dhcp()");
        $('#ipv4Table').append('<tr><td>' + $.i18n.prop("InCDHCPHostname") + '</td><td><input id="dhcpHostname" name="dhcpHostname" type="text" class="inputnotallowspace" /></td></tr>');
        $('#ipv4Table').append('<tr id="nat"><td>' + $.i18n.prop("enableNat") + ': </td><td><input id="enableNat" name="enableNat" type="checkbox"/></td></tr>');
        //if ($('#primaryWanInt').is(':checked') || $('#backupWanInt').is(':checked')) {
        if ($('#primaryWanInt').is(':checked') && currentPrimaryWanInterface === "") {
            $("#enableNat").prop("checked", true);
            //$("#enableNat").attr("disabled", true);
        } else if (currentPrimaryWanInterface !== "" && currentBackupWanInterface === "" && natEnabledFlag === true) {
            var titleCheck = $("#interfaceDialog").dialog("option", "title").trim().split(" ");
            if (currentPrimaryWanInterface == titleCheck[1]) {
                //code
                $("#enableNat").prop("checked", true);
            } else {
                $("#enableNat").prop("checked", true);
                $("#enableNat").attr("disabled", true);
            }
        } else {
            if (natEnabledFlag === true) {
                //code
                $("#enableNat").prop("checked", true);
                $("#enableNat").removeAttr("disabled");
            } else {
                $("#enableNat").prop("checked", false);
                $("#enableNat").removeAttr("disabled");
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "dhcp()");
    }
    function formDhcpList() {
        //consoleLogMethodDetailsStart("iAndC.js", "formDhcpList()");
        var xml, checkDhcp;
        dhcpList = [];
        dhcpmap = [];
        defarr = [];
        xml = shrunCliOutput;
        if (xml.indexOf("Building configuration...") !== -1) {
            xml = xml.substring(25, xml.length);
            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
        }
        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
        regEx = new RegExp("&#x03;", "g");
        xml = xml.replace(regEx, "");
        try {
            checkDhcp = $.parseXML(xml);
        } catch (error) {
            checkDhcp = xml;
        }
        $(checkDhcp).find('ip').each(function () {
            $(this).find('dhcp').each(function () {
                $(this).find('pool').each(function () {
                    var poolname = $(this).find('PoolName').text(),
                            network = $(this).find('NetworkNumberDottedDecimalNotation').text(),
                            defaultnet = $(this).find('RouterNameIPAddress').text();
                    if (network.length !== 0) {
                        dhcpList.push(poolname);
                        dhcpmap.push({name: poolname, value: network});
                        defarr.push({name: poolname, value: defaultnet});
                    }
                });
            });
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "formDhcpList()");
    }
    function showDhcpList() {
        //consoleLogMethodDetailsStart("iAndC.js", "showDhcpList()");
//    var dhcpmap = [],defarr =[], xml, checkDhcp;
//    xml = shrunCliOutput;//deviceCommunicator.getExecCmdOutput("show running-config | format");
//    if(xml.indexOf("Building configuration...") !== -1){
//        xml = xml.substring(25,xml.length);
//        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
//    }
//    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
//    regEx = new RegExp("&#x03;", "g");
//    xml = xml.replace(regEx, "");
//    checkDhcp = $.parseXML(xml);

        $('#ipv4Table').append('<tr id="dhcpabel"><td>' + $.i18n.prop("DHCPList") + '</td><td><select id="dhcpList" class="requiredDHCPPool" name="dhcpList"/></td></tr>');
        $("#dhcpList").empty();
        //$("#dhcpList").append('<option id="select" value="select">Select</option>');
        $("#dhcpList").append('<option id="select" value="select">' + $.i18n.prop("select") + '</option>');
//    $(checkDhcp).find('ip').each(function () {
//        $(this).find('dhcp').each(function(){
//            $(this).find('pool').each(function(){
//                var poolname = $(this).find('PoolName').text(),
//                    network = $(this).find('NetworkNumberDottedDecimalNotation').text(),
//                    defaultnet = $(this).find('RouterNameIPAddress').text();
//                    if(network.length !== 0) {
//                        $("#dhcpList").append('<option value="'+poolname+'">'+poolname+'</option>');
//                        dhcpmap.push({name: poolname, value: network});
//                        defarr.push({name: poolname, value: defaultnet});
//                    }
//                });
//            });
//        });
        var dhcpSize = dhcpList.length;
        var i = 0;
        for (i = 0; i < dhcpSize; i++) {
            $("#dhcpList").append('<option value="' + dhcpList[i] + '">' + dhcpList[i] + '</option>');
        }
        $('#dhcpList').change(function () {
            selectFromDhcpList(dhcpmap, defarr);
        });
        //$("#dhcpList option:selected").remove();
        //consoleLogMethodDetailsEnd("iAndC.js", "showDhcpList()");
    }
    function setNatValues(intDetails) {
        var outPut = ""
        if (intDetails.ipv4dialer.length > 0) {
            var natArr = [];
            natArr.push({name: "natInterface", value: intDetails.ipv4dialer});
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, true);
        }
//        if (intDetails.ipv6dialer.length > 0) {
//            var natArr = [];
//            natArr.push({name: "natInterface", value: intDetails.ipv6dialer});
//            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, true);
//        }
        if (intDetails.ipv4dialer.length === 0) {
            var natArr = [];
            natArr.push({name: "natInterface", value: intDetails.interfaceName});
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, true);
        }
        return outPut;
    }
    function removeNatValues(intDetails) {
        var outPut = ""
        if (intDetails.ipv4dialer.length > 0) {
            var natArr = [];
            natArr.push({name: "natInterface", value: intDetails.ipv4dialer});
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, true);
        }
//        if (intDetails.ipv6dialer.length > 0) {
//            var natArr = [];
//            natArr.push({name: "natInterface", value: intDetails.ipv6dialer});
//            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, true);
//        }
        if (intDetails.ipv4dialer.length == 0) {
            var natArr = [];
            natArr.push({name: "natInterface", value: intDetails.interfaceName});
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, true);
        }
        return outPut;
    }
    function enableDisableNat(id, prive) {
        //consoleLogMethodDetailsStart("iAndC.js", "enableDisableNat()");
        var outPut = "";
        try {
            var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
            var backupInt = "";
        } catch (e) {
            isEmptyBlock = true;
        }
        if ($("#" + id).is(':checked')) {
            var natArr = [];
            try {
                if (!isEmpty(currentPrimaryWanInterface)) {        //code
                    if (primaryInt.ipv4dialer.length > 0) {
                        natArr.push({name: "natInterface", value: primaryInt.ipv4dialer});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
                    } else {
                        natArr.push({name: "natInterface", value: currentPrimaryWanInterface});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
                    }

                }
                natArr = [];
                if (!isEmpty(currentBackupWanInterface)) {
                    backupInt = getEditInterfaceDetails(currentBackupWanInterface);
                    if (backupInt.ipv4dialer.length > 0) {
                        natArr.push({name: "natInterface", value: backupInt.ipv4dialer});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
                    } else {
                        natArr.push({name: "natInterface", value: currentBackupWanInterface});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
                    }

                }
                natEnabledFlag = true;
            } catch (e) {
                isEmptyBlock = true;
            }
        } else if (!$("#" + id).is(':checked')) {
            var natArr = [];
            try {
                if (!isEmpty(currentPrimaryWanInterface)) {
                    if (primaryInt.ipv4dialer.length > 0) {
                        natArr.push({name: "natInterface", value: primaryInt.ipv4dialer});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
                    } else {
                        natArr.push({name: "natInterface", value: currentPrimaryWanInterface});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
                    }
                    natEnabledFlag = false;
                }
                natArr = [];
                if (!isEmpty(currentBackupWanInterface)) {
                    if (backupInt.ipv4dialer.length > 0) {
                        natArr.push({name: "natInterface", value: backupInt.ipv4dialer});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
                    } else {
                        natArr.push({name: "natInterface", value: currentBackupWanInterface});
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
                    }

                    natEnabledFlag = false;
                }
            } catch (e) {
                isEmptyBlock = true;
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "enableDisableNat()");
        return outPut;
    }

    function enableDisableNatNew(id, currentDialerValue, prive) {
        var outPut = "";
        var isEnableNat = $("#" + id).is(':checked');
        if (isEnableNat) {
            if ($('#primaryWanInt').is(':checked')) {
                outPut = outPut + setNatValues(currentDialerValue);
                if (!isEmpty(currentBackupWanInterface)) {
                var backupInt = getEditInterfaceDetails(currentBackupWanInterface);
                outPut = outPut + setNatValues(backupInt);
                }
            }
            if ($('#backupWanInt').is(':checked')) {
                outPut = outPut + setNatValues(currentDialerValue);
                if (!isEmpty(currentPrimaryWanInterface)) {
                var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                outPut = outPut + setNatValues(primaryInt);
                }
            }
        } else {
            if ($('#primaryWanInt').is(':checked')) {
                outPut = outPut + removeNatValues(currentDialerValue);
                if (!isEmpty(currentBackupWanInterface)) {
                var backupInt = getEditInterfaceDetails(currentBackupWanInterface);
                outPut = outPut + removeNatValues(backupInt);
                }
            }
            if ($('#backupWanInt').is(':checked')) {
                outPut = outPut + removeNatValues(currentDialerValue);
                if (!isEmpty(currentPrimaryWanInterface)) {
                var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                outPut = outPut + removeNatValues(primaryInt);
                }
            }
        }
        if (!prive) {
            outPut = deviceCommunicator.getConfigCmdOutput(outPut);
        }
        return outPut;
//        if ($("#" + id).is(':checked')) {
//            var natArr = [];
//            try {
//                if (!isEmpty(currentPrimaryWanInterface)) {        //code
//                    if (primaryInt.ipv4dialer.length > 0) {
//                        natArr.push({name: "natInterface", value: primaryInt.ipv4dialer});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
//                    } else {
//                        natArr.push({name: "natInterface", value: currentPrimaryWanInterface});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
//                    }
//
//                }
//                natArr = [];
//                if (!isEmpty(currentBackupWanInterface)) {
//                    backupInt = getEditInterfaceDetails(currentBackupWanInterface);
//                    if (backupInt.ipv4dialer.length > 0) {
//                        natArr.push({name: "natInterface", value: backupInt.ipv4dialer});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
//                    } else {
//                        natArr.push({name: "natInterface", value: currentBackupWanInterface});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", natArr, prive);
//                    }
//
//                }
//                natEnabledFlag = true;
//            } catch (e) {
//                isEmptyBlock = true;
//            }
//        } else if (!$("#" + id).is(':checked')) {
//            var natArr = [];
//            try {
//                if (!isEmpty(currentPrimaryWanInterface)) {
//                    if (primaryInt.ipv4dialer.length > 0) {
//                        natArr.push({name: "natInterface", value: primaryInt.ipv4dialer});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
//                    } else {
//                        natArr.push({name: "natInterface", value: currentPrimaryWanInterface});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
//                    }
//                    natEnabledFlag = false;
//                }
//                natArr = [];
//                if (!isEmpty(currentBackupWanInterface)) {
//                    if (backupInt.ipv4dialer.length > 0) {
//                        natArr.push({name: "natInterface", value: backupInt.ipv4dialer});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
//                    } else {
//                        natArr.push({name: "natInterface", value: currentBackupWanInterface});
//                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", natArr, prive);
//                    }
//
//                    natEnabledFlag = false;
//                }
//            } catch (e) {
//                isEmptyBlock = true;
//            }
//        }
        //consoleLogMethodDetailsEnd("iAndC.js", "enableDisableNat()");
        return outPut;
    }
//    function highlight() {
//        //consoleLogMethodDetailsStart("iAndC.js", "highlight()");
//        $('#interfaceTable tbody tr').on('click', (function () {
//            var editRow, name, $tr = $(this).closest("tr");
//            $tr.siblings().removeClass('hilite');
//            $tr.toggleClass('hilite');
//
//            editRow = $('#interfaceTable tr.hilite');
//            if (editRow.length > 0) {
//                name = $.trim(editRow.children().get(1).textContent);
//                if (name.indexOf("Cellular") !== -1) {
//                    $("#showButton").show();
//                } else {
//                    $("#showButton").hide();
//                }
//            } else {
//                $("#showButton").hide();
//            }
//        }));
//        //consoleLogMethodDetailsEnd("iAndC.js", "highlight()");
//    }
    function getBVINo() {
        //consoleLogMethodDetailsStart("iAndC.js", "getDialerTag()");
        var output, lines, highestTag, nextTag, tagArray, i, tag;
        tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include interface BVI");
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('interface BVI') !== -1) {
                tag = lines[i].replace(/interface BVI/, "");
                if (!isNaN(parseInt(tag))) {
                    tagArray.push(tag);
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerTag()");
            return nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerTag()");
            return 1;
        }
    }
    function getDialerTag() {
        //consoleLogMethodDetailsStart("iAndC.js", "getDialerTag()");
        var output, lines, highestTag, nextTag, tagArray, i, tag;
        tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include interface Dialer");
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('interface Dialer') !== -1) {
                tag = lines[i].replace(/interface Dialer/, "");
                if (!isNaN(parseInt(tag))) {
                    tagArray.push(tag);
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerTag()");
            return nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerTag()");
            return 1;
        }
    }
    function getDialerPoolTag() {
        //consoleLogMethodDetailsStart("iAndC.js", "getDialerPoolTag()");
        var output, lines, dialerPoolTag, highestTag, nextTag, tagArray, i;
        tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include dialer pool");
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('dialer pool') !== -1 && lines[i].indexOf('dialer pool-') == -1) {
                dialerPoolTag = lines[i].replace(/dialer pool/, "");
                if ($.inArray(dialerPoolTag, tagArray) === -1) {
                    tagArray.push(dialerPoolTag);
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerPoolTag()");
            return nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerPoolTag()");
            return 1;
        }
    }
    function getDialerGroupTag() {
        //consoleLogMethodDetailsStart("iAndC.js", "getDialerGroupTag()");
        var output, dialerGroupTag, lines, highestTag, nextTag, tagArray, i;
        tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include dialer-group");
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('dialer-group') !== -1) {
                dialerGroupTag = lines[i].replace(/dialer-group/, "");
                if ($.inArray(dialerGroupTag, tagArray) === -1) {
                    tagArray.push(dialerGroupTag);
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerGroupTag()");
            return nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getDialerGroupTag()");
            return 1;
        }
    }
    function getAtmSubInterfaceTag(interfaceName) {
        //consoleLogMethodDetailsStart("iAndC.js", "getAtmSubInterfaceTag()");
        var output, subInterfaceTag, lines, highestTag, nextTag, tagArray, i, re;
        tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include interface " + interfaceName);
        lines = output.split(/\r\n|\r|\n/);
        re = new RegExp("interface\\s" + interfaceName + "\\.(\\S+)\\s.*", "");
        for (i = 0; i < lines.length; i++) {
            if (re.test(lines[i])) {
                subInterfaceTag = lines[i].replace(re, '$1');
                if ($.inArray(subInterfaceTag, tagArray) === -1) {
                    if (!isNaN(parseInt(subInterfaceTag))) {
                        tagArray.push(subInterfaceTag);
                    }
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getAtmSubInterfaceTag()");
            return "." + nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getAtmSubInterfaceTag()");
            return ".1";
        }
    }
    function getLoopbackTag() {
        //consoleLogMethodDetailsStart("iAndC.js", "getLoopbackTag()");
        var output, lines, highestTag, nextTag, tagArray, i, tag;
        tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include Loopback");
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('interface Loopback') !== -1) {
                tag = lines[i].replace(/interface Loopback/, "");
                if (!isNaN(parseInt(tag))) {
                    tagArray.push(tag);
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getLoopbackTag()");
            return nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getLoopbackTag()");
            return 0;
        }
    }

    function sortNumber(a, b) {
        //consoleLogMethodDetailsStart("iAndC.js", "sortNumber()");
        return a - b;
        //consoleLogMethodDetailsEnd("iAndC.js", "sortNumber()");
    }

    function interfaceEnableDisable() {
        //consoleLogMethodDetailsStart("iAndC.js", "interfaceEnableDisable()");
        var interfaceName, currentStatus, response;
        try {
            interfaceArr = [];
            upDownFlag = true;
            interfaceName = $(this).closest('tr').children().get(1).textContent;
            currentStatus = $(this).attr('value');
            interfaceArr.push({name: "interfaceName", value: interfaceName});
            if (currentStatus == "enable") {
                //   $("#iAndCStatusStr").text("Interface will be shutdown. Do you want to continue?");
                $("#iAndCStatusStr").text($.i18n.prop("interfaceAlertMessgOne"));
                //Interface will be shutdown. Do you want to continue?
                $("#iAndCStatus").dialog("open");
            } else {
                if (currentStatus.indexOf('enable') !== -1) {
                    response = deviceCommunicator.configureCommandsFromTemplate("interfaceShut.txt", interfaceArr, false);
                } else {
                    response = deviceCommunicator.configureCommandsFromTemplate("interfaceNoShut.txt", interfaceArr, false);
                }
                interfaceUpDown(response);
            }
        } catch (error) {
            $('#errorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
            $('#error').show();
            $('#error').delay(4000).fadeOut(1000);
        }

        //consoleLogMethodDetailsEnd("iAndC.js", "interfaceEnableDisable()");

    }
    function interfaceUpDown(response) {
        //consoleLogMethodDetailsStart("iAndC.js", "interfaceUpDown()");
        try {
            if (response.length > 0) {
                $('#infoMessage').html(response);
                $('#info').show();
                $('#info').delay(4000).fadeOut(1000);
            }
            refresh();
        } catch (error) {
            $('#errorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
            $('#error').show();
            $('#error').delay(4000).fadeOut(1000);
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "interfaceUpDown()");
    }

    function doNoShut(interfaceName, privew) {
        //consoleLogMethodDetailsStart("iAndC.js", "doNoShut()");
        var arr;
        var outPut = "";
        try {
            arr = [];
            arr.push({name: "interfaceName", value: interfaceName});
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceNoShut.txt", arr, privew);
        } catch (error) {
            isEmptyBlock = true;
        }
        return outPut;
        //consoleLogMethodDetailsEnd("iAndC.js", "doNoShut()");
    }

    /* For moving/removing Cellular to Wan Zone
     flag value true for adding and false for removing
     */
//    function moveCellularToWanZone(interfaceList, flag) {
//        //consoleLogMethodDetailsStart("iAndC.js", "moveCellularToWanZone()");
//        $.each(interfaceList, function (index, value) {
//            var arr = [];
//            arr.push({name: "interface", value: value}, {name: "zone", value: "WAN"});
//            if (flag) {
//                try {
//                    var resp = deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtAdd.txt", arr, false);
//                } catch (e) {
//                    isEmptyBlock = true;
//                }
//            } else {
//                try {
//                    var resp = deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtDelete.txt", arr, false);
//                } catch (e) {
//                    isEmptyBlock = true;
//                }
//            }
//        });
//        //consoleLogMethodDetailsEnd("iAndC.js", "moveCellularToWanZone()");
//    }

    /*For Cellular Setting Primary and backup*/
    function setCellularPrimaryBackup(interfaceName, intType, primaryInterface) {
        //consoleLogMethodDetailsStart("iAndC.js", "setCellularPrimaryBackup()");
        var desArr = [];
        var description = " ";
        //var noChatScript = " ";
        /*if (modemType==="CDMA") {
         noChatScript="no chat-script cdma";
         }
         else if (modemType === "HSPA" || modemType === "GSM") {
         noChatScript="no chat-script gsm";
         }*/
        if (intType == "none" && ((currentPrimaryWanInterface == interfaceName) || (currentBackupWanInterface == interfaceName))) {
            /*if (modemType === "HSPA" || modemType === "GSM" || modemType==="CDMA") {
             try{
             var resp=deviceCommunicator.getConfigCmdOutput(noChatScript);
             }
             catch(e){

             }
             }*/
            if (interfaceName == currentBackupWanInterface) {
                desArr.length = 0;
                desArr.push({name: "interfaceName", value: currentPrimaryWanInterface});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", desArr, false);
            }
            desArr.length = 0;
            desArr.push({name: "interfaceName", value: interfaceName});
            response = deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", desArr, false);
            currentPrimaryWanInterface = "";
            currentBackupWanInterface = "";


        } else {
            if (intType == "primary") {
                if (interfaceName == currentBackupWanInterface) {
                    desArr.length = 0;
                    desArr.push({name: "interfaceName", value: currentPrimaryWanInterface});
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", desArr, false);
                    currentPrimaryWanInterface = "";
                    desArr.length = 0;
                    desArr.push({name: "interfaceName", value: interfaceName});
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", desArr, false);
                    currentBackupWanInterface = "";
                }
                desArr.length = 0;
                description = "PrimaryWANDesc_";
                currentPrimaryWanInterface = interfaceName;
                desArr.push({name: "interfaceName", value: interfaceName});
                desArr.push({name: "description", value: description});
                response = deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", desArr, false);
            } else if (intType == "backup") {
                if (interfaceName == currentPrimaryWanInterface) {
                    desArr.length = 0;
                    desArr.push({name: "interfaceName", value: currentPrimaryWanInterface});
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", desArr, false);
                    currentPrimaryWanInterface = "";
                }
                desArr.length = 0;
                description = "BackupWANDesc_";
                currentBackupWanInterface = interfaceName;
                desArr.push({name: "interfaceName", value: interfaceName});
                desArr.push({name: "description", value: description});
                response = deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", desArr, false);
                desArr.length = 0;
                desArr.push({name: "interfaceName", value: primaryInterface});
                desArr.push({name: "description", value: "PrimaryWANDesc_"});
                response = deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", desArr, false);
                currentPrimaryWanInterface = primaryInterface;
                $("#moveToWan").attr("primarywanconfigured", currentPrimaryWanInterface);

            }

        }
        //consoleLogMethodDetailsEnd("iAndC.js", "setCellularPrimaryBackup()");
    }


    /* This function gets the output in form of XML
     *  after running the command on the device and parses the values to update in the table
     */
    function refresh() {
        //consoleLogMethodDetailsStart("iAndC.js", "refresh()");
        $("#interfaceTable  tbody").empty();
        var xml, controllers, lines, controllerName, i, enableImage, disableImage, xmlDoc, regEx, shipIntBrief;
        enableImage = '<a><div class="utmSprite enable enableDisableImg" value="enable"></div></a>';
        disableImage = '<a><div class="utmSprite disable enableDisableImg" value="disable"></div></a>';

        controllers = deviceCommunicator.getExecCmdOutput("show running-config | include controller");
        lines = controllers.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('controller') !== -1 && lines[i].indexOf('Cellular') == -1 && lines[i].indexOf('DSL') !== -1 && lines[i].indexOf('commands') === -1) {
                controllerName = lines[i].replace(/^controller\s(.\S+)/, '$1');
                $('<tr id="controller"' + 'class="' + controllerName.split(" ")[0].trim() + '"></tr>').html('<td class=cntrlr> <div class="utmSprite blueDown displayInlineBlock verticalAlignMiddle"></div>' + controllerName + '</td><td></td><td></td><td></td><td></td><td></td>').appendTo('#interfaceTable');
            }
        }
        xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
        shipIntBrief = xml;
        $(xml).find('entry').each(function () {
            try {
                var interfaceName = $(this).find('Interface').text(),
                        ipAddress = $(this).find('IP-Address').text(),
                        status = $(this).find('Status').text(),
                        protocol1 = $(this).find('Protocol').text(),
                        re = new RegExp("/", "g"),
                        id = interfaceName.replace(re, ""),
                        statusImage;
                //var interfaceType;
                var protocol = protocol1;
                if (protocol1 == "up" || protocol1 == "Up") {
                    protocol = $.i18n.prop("interfaceUp");
                } else if (protocol1 == "down" || protocol1 == "Down") {
                    protocol = $.i18n.prop("interfaceDown");
                } else {
                    protocol = protocol1;
                }
                var interfaceTag, controllerTag;
                id = id.replace(".", "");
                if (status.indexOf("administratively down") != -1) {
                    statusImage = disableImage;
                } else {
                    statusImage = enableImage;
                }
                //interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
                if (status.indexOf('deleted') === -1) {
                    if ($("#controller").length > 0) {
                        if (interfaceName.indexOf('ATM') !== -1 || (interfaceName.indexOf('Ethernet') !== -1) && interfaceName.indexOf('FastEthernet') === -1 && interfaceName.indexOf('GigabitEthernet') === -1) {
                            $('.cntrlr').each(function () {

                                if (interfaceName.indexOf('ATM') !== -1) {
                                    interfaceTag = interfaceName.replace(/ATM/, "");
                                    if ($(this).text().indexOf('VDSL') !== -1) {
                                        controllerTag = $(this).text().replace(/VDSL/, "").trim();
                                        if (interfaceTag.indexOf(controllerTag) !== -1) {
                                            $("<tr id='" + id + "' class='VDSLElem'" + "></tr>").html('<td> <div class="utmSprite blankSpace displayInlineBlock"></div>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertAfter('.VDSL');
                                        }
                                    } else if ($(this).text().indexOf('ADSL') !== -1) {
                                        controllerTag = $(this).text().replace(/ADSL/, "").trim();
                                        if (interfaceTag.indexOf(controllerTag) !== -1) {
                                            $("<tr id='" + id + "' class='ADSLElem'" + "></tr>").html('<td> <div class="utmSprite blankSpace displayInlineBlock"></div>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertAfter('.ADSL');
                                        }
                                    } else if ($(this).text().indexOf('SHDSL') !== -1) {
                                        controllerTag = $(this).text().replace(/SHDSL/, "").trim();
                                        if (interfaceTag.indexOf(controllerTag) !== -1) {
                                            $("<tr id='" + id + "' class='SHDSLElem'" + "></tr>").html('<td> <div class="utmSprite blankSpace displayInlineBlock"></div>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertAfter('.SHDSL');
                                        }
                                    }
                                } else if (interfaceName.indexOf('Ethernet') !== -1) {
                                    interfaceTag = interfaceName.replace(/Ethernet/, "");
                                    if ($(this).text().indexOf('SHDSL') !== -1) {
                                        controllerTag = $(this).text().replace(/SHDSL/, "").trim();
                                        if (interfaceTag.indexOf(controllerTag) !== -1) {
                                            $("<tr id='" + id + "' class='SHDSLElem'" + "></tr>").html('<td> <div class="utmSprite blankSpace displayInlineBlock"></div>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertAfter('.SHDSL');
                                        }
                                    } else if ($(this).text().indexOf('VDSL') !== -1) {
                                        controllerTag = $(this).text().replace(/VDSL/, "").trim();
                                        if (interfaceTag.indexOf(controllerTag) !== -1) {
                                            $("<tr id='" + id + "' class='VDSLElem'" + "></tr>").html('<td> <div class="utmSprite blankSpace displayInlineBlock"></div>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertAfter('.VDSL');
                                        }
                                    }
                                }
                                //$("<tr id=" + id + "></tr>").html('<td> <div class="utmSprite blankSpace displayInlineBlock"></div>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertAfter('z');

                            });
                        } else {
                            $('<tr id=' + id + '></tr>').html('<td>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').insertBefore('#controller');
                        }

                    } else {
                        if ((interfaceName.indexOf('ATM') !== -1 || (interfaceName.indexOf('Ethernet') !== -1)) && (interfaceName.indexOf('FastEthernet') === -1 && interfaceName.indexOf('GigabitEthernet') === -1)) {
                            $("<tr id=" + id + "></tr>").html('<td>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').appendTo('#interfaceTable');
                        } else {
                            $('<tr id=' + id + '></tr>').html('<td>' + interfaceName + '</td><td>' + ipAddress + '</td><td></td><td>' + statusImage + '</td><td>' + protocol + '</td><td></td>').appendTo('#interfaceTable');
                        }
                    }
                }
                var editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName);
                if (editInterfaceType == undefined) {
                    //code
                    editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName, true);
                }
                if (interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 && interfaceName.indexOf('Serial') === -1 && interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1 && editInterfaceType !== 1 && editInterfaceType !== 4 && editInterfaceType !== 2 && editInterfaceType !== 539 && editInterfaceType !== 538 && editInterfaceType !== 503 && editInterfaceType !== 504 && editInterfaceType !== 532 && editInterfaceType !== 1012 && editInterfaceType !== 6 && editInterfaceType !== 5) {
                    var jqValidId = id;
                    jqValidId = jqValidId.replace(":", "\\:");
                    $('#' + jqValidId).addClass("read_only");
                    $('#' + jqValidId).attr("disabled", true);
                }

            } catch (error) {
                errorLogInConsole(error);
            }
        });

        $('#interfaceTable tbody').find('tr').each(function () {
            $this = $(this);
            $this.detach();
            if ($(this).hasClass('read_only')) {
                $('#readyonlyInterface').append($this);
            } else {
                $('#configInterface').append($this);
            }
        });
        //$('#readyonlyInterface').find('tr:first').before('<tr class="policyhead">'+
        //                                                 '<td colspan="8" class="ccpexpCSSReplaceClass757">Read-Only Interfaces</td></tr>');
        //$('#configInterface').find('tr:first').before('<tr class="policyhead">'+
        //                                              '<td colspan="8" class="ccpexpCSSReplaceClass758">Configurable Interfaces</td></tr>');
        $('#readyonlyInterface').find('tr:first').before('<tr class="policyhead">' +
                '<td colspan="8" class="ccpexpCSSReplaceClass759">' + $.i18n.prop("readOnlyInter") + '</td></tr>');
        $('#configInterface').find('tr:first').before('<tr class="policyhead">' +
                '<td colspan="8" class="ccpexpCSSReplaceClass760">' + $.i18n.prop("configurInter") + '</td></tr>');
        //Configurable Interfaces

        try {
            if (!shRunFormatLatest) {
                shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
                shRunFormatLatest = true;
            }
            xml = shRunFormatOutput;
            shrunCliOutput = xml;
            formDhcpList();
            if (xml.indexOf("Building configuration...") !== -1) {
                xml = xml.substring(25, xml.length);
                xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
            }
            xml = xml.substring(xml.indexOf("<?xml"), xml.length);
            regEx = new RegExp("&#x03;", "g");
            xml = xml.replace(regEx, "");
            try {
                xmlDoc = $.parseXML(xml);
            } catch (error) {
                xmlDoc = xml;
            }

            $(xmlDoc).find('interface').each(function () {
                var interfaceName = $(this).find('Param:first').text();
                var paramfind = "";
                //alert($(this).find('ConfigIf-Configuration'));
                if ($(this).find('ConfigIf-Configuration').length != 0) {
                    //code
                    paramfind = 'ConfigIf-Configuration';
                } else {
                    paramfind = 'ConfigSubif-Configuration';
                }
                $(this).find(paramfind).each(function () {
                    var description = $(this).find('description').text(),
                            re = new RegExp("/", "g"),
                            id = interfaceName.replace(re, ""),
                            allIpv6Address = "", eui64 = "", eui64Val = "";
                    id = id.replace(".", "");
                    //To set primary slot for NANO
                    if (interfaceName.toLowerCase().indexOf("cellular") > -1 && isNano) {
                        if ($(xmlDoc).find('controller').length > 0) {
                            //consoleLog(id);
                            if ($(xmlDoc).find('controller').find('ConfigController-Configuration').find('sim').length > 0) {
                                $('#' + id).attr("primarySim", "1");
                            } else {
                                $('#' + id).attr("primarySim", "0");
                            }
                        }
                    }
                    $(this).find('ipv6').each(function () {
                        ipv6Address = $(this).find('IPv6Prefix').text();
                        eui64 = $(this).find('eui-64');
                        if (eui64.length > 0) {
                            eui64Val = " eui-64";
                        } else {
                            eui64Val = "";
                        }
                        ipv6Address = ipv6Address + eui64Val + "\n";
                        allIpv6Address = allIpv6Address + ipv6Address;
                    });
                    if (id !== "" && id !== null && id !== " ") {
                        var desc = "";
                        if (description.indexOf("WANDesc") != -1) {
                            var descRows = [];

                            descRows = description.split(/_/);
                            if (descRows[1].length > 20) {
                                desc = descRows[1].substring(0, 20);
                                desc = desc + "..,";
                                $('#' + id + ' td:last').text(desc);
                                $('#' + id + ' td:last').attr("title", descRows[1]);
                                $('#' + id + ' td:last').tooltip({
                                    show: {
                                        effect: "slideDown"
                                    },
                                    tooltipClass: "custom-tooltip-styling"
                                });
                            } else {
                                $('#' + id + ' td:last').text(descRows[1]);
                            }
                        } else {
                            if (description.length > 20) {
                                $('#' + id + ' td:last').attr("title", description);
                                desc = description.substring(0, 20);
                                desc = desc + "..,";
                                $('#' + id + ' td:last').text(desc);
                                $('#' + id + ' td:last').tooltip({
                                    show: {
                                        effect: "slideDown"
                                    },
                                    tooltipClass: "custom-tooltip-styling"
                                });
                            } else {
                                $('#' + id + ' td:last').text(description);
                            }
                        }
                        if (allIpv6Address.length > 20) {
                            $('#' + id + ' td:nth-child(3)').attr("title", allIpv6Address);
                            intIPV6Addr = allIpv6Address.substring(0, 20);
                            intIPV6Addr = intIPV6Addr + "..,";
                            $('#' + id + ' td:nth-child(3)').text(intIPV6Addr);
                            $('#' + id + ' td:nth-child(3)').tooltip({
                                show: {
                                    effect: "slideDown"
                                },
                                tooltipClass: "custom-tooltip-styling"
                            });
                        } else {
                            $('#' + id + ' td:nth-child(3)').text(allIpv6Address);
                        }
                    }
                });
                if (interfaceName === currentPrimaryWanInterface || interfaceName === currentBackupWanInterface) {
                    $(this).find('ip').each(function () {
                        $(this).find('nat').each(function () {
                            $(this).find('inside').each(function () {
                                natEnabledFlag = true;
                            });
                            $(this).find('outside').each(function () {
                                natEnabledFlag = true;
                                // alert(natEnabledFlag);
                            });
                        });
                    });
                }
            });
        } catch (error) {
            // do nothing if show runn | format fails
        }
        getPrimaryWanInterface(shrunCliOutput, "moveToWanZone", false);
        loadWanInterfaceSummary();
        //Making the even row in User table striped*/
        $("#interfaceTable tr:nth-child(even)").addClass("striped");
        $('.enableDisableImg').bind('click', interfaceEnableDisable);
        //highlight();
        addTableColumn("interfaceTable", "ifcedit", "ifcdelete");
        $('#interfaceTable tbody input:checkbox').live('click', function () {
            var $this = $(this);
            if ($this.is(":checked")) {
                $('#interfaceTable input:checkbox').removeAttr('checked');
                $this.prop("checked", true);
                $("#interfaceTable tbody tr").removeClass("hilite");
                $this.closest("tr").addClass("hilite");
                if ($this.closest("tr").hasClass('read_only')) {
                    $("#editButton").addClass("ui-state-disabled");
                    $("#editButton").attr("disabled", true);
                } else {
                    $("#editButton").removeClass("ui-state-disabled");
                    $("#editButton").attr("disabled", false);
                }
            } else {
                $this.closest("tr").removeClass("hilite");
                $("#editButton").removeClass("ui-state-disabled");
                $("#editButton").attr("disabled", false);
            }
            disableButtons($this.closest("tr"));
            editRow = $('#interfaceTable tr.hilite');
            if (editRow.length > 0) {
                name = $.trim(editRow.children().get(1).textContent);
                if (name.indexOf("Cellular") !== -1) {
                    $("#showButton").show();
                } else {
                    $("#showButton").hide();
                }
            } else {
                $("#showButton").hide();
            }
        });

        $('#interfaceTable tbody tr').dblclick(function () {
            $this = $(this).closest("tr");
            if ($this.hasClass('read_only')) {
                isEmptyBlock = true;
            } else {
                $('#interfaceTable input:checkbox').removeAttr('checked');
                $this.find('input:checkbox').eq(0).prop("checked", true);
                $("#interfaceTable tbody tr").removeClass("hilite");
                $this.addClass("hilite");
                disableButtons($this);
                $("#editButton").trigger("click");
            }
        });
        $("#addButton").removeClass("ui-state-disabled");
        $("#addButton").attr("disabled", false);
        //$("#createVLAN").removeClass("ui-state-disabled");
        //$("#createVLAN").attr("disabled", false);
        if (isVlanEnable) {
            $("#createVLAN").removeClass("ui-state-disabled");
            $("#createVLAN").attr("disabled", false);
        } else {
            $("#createVLAN").removeClass("ui-state-disabled");
            $("#createVLAN").attr("disabled", true);
        }
        towerRange(shipIntBrief);
        $("#showButton").hide();
        //consoleLogMethodDetailsEnd("iAndC.js", "refresh()");
    }

    function disableButtons($this) {
        //consoleLogMethodDetailsStart("iAndC.js", "disableButtons()");
        if ($this.hasClass("hilite")) {
            $("#addButton").addClass("ui-state-disabled");
            $("#addButton").attr("disabled", true);
            $("#createVLAN").addClass("ui-state-disabled");
            $("#createVLAN").attr("disabled", true);
        } else {
            $("#addButton").removeClass("ui-state-disabled");
            $("#addButton").attr("disabled", false);
            $("#createVLAN").removeClass("ui-state-disabled");
            $("#createVLAN").attr("disabled", false);
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "disableButtons()");
    }

    function getWanModeFromDevice() {
        //consoleLogMethodDetailsStart("iAndC.js", "getWanModeFromDevice()");
        var output, lines, i;
        //var mode, tagArray = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include wan mode");
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('wan mode') !== -1) {
                //consoleLogMethodDetailsEnd("iAndC.js", "getWanModeFromDevice()");
                return $.trim(lines[i].replace(/wan mode/, ""));
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getWanModeFromDevice()");
    }

    function modifyConfiguredFeatures(id, cellularFlag, priview) {
        //consoleLogMethodDetailsStart("iAndC.js", "modifyConfiguredFeatures()");
        var ipSlaRoute = "", ipSlaAddress = "";
        var myCachedObj = {};
        shRunFormatLatest = false;
        if (priview === undefined) {
            priview = false;
        }
        var outPut = "";
        try {
            if (loopBackVlan === 0) {
                //code

                if (licenseCheck === true || iosk9check == "SecurityEnable") {
                    var iproutePushArray = [];
                    //code
                    shrunUpdate();
                    var primaryBackupipArray = [];
                    if (currentPrimaryWanInterface != "") {
                        //code
                        primaryBackupipArray[0] = currentPrimaryWanInterface;
                    }
                    if (currentBackupWanInterface !== "") {
                        //code
                        primaryBackupipArray[1] = currentBackupWanInterface;
                    }
                    var interfaceDetailsip = [];
                    for (var j = 0; j < primaryBackupipArray.length; j++) {
                        interfaceDetailsip = getEditInterfaceDetails(primaryBackupipArray[j]);
                        myCachedObj[primaryBackupipArray[j]] = interfaceDetailsip;
                        if (interfaceDetailsip.isPppoe) {
                            //code
                            if (primaryBackupipArray.length > 1) {
                                //code
                                if (j === 0) {
                                    //code
                                    if (!isEmpty(interfaceDetailsip.ipv4dialer)) {
                                        iproutePushArray.push("ip route 0.0.0.0 0.0.0.0 " + interfaceDetailsip.ipv4dialer.trim() + " track 1");
                                    }
                                    if (!isEmpty(interfaceDetailsip.ipv6dialer)) {
                                        iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.ipv6dialer.trim() + " track 1");
                                    }
                                    /*condition for ip sla route additon*/
                                    if (cellularFlag) {
                                        ipSlaAddress = $('#slaIpAddressCellular').val();
                                    } else if (interfaceDetailsip.interfaceName.trim().toLowerCase().indexOf("cellular") > -1) {
                                        ipSlaAddress = $('#slaWANIntCellular').val();
                                    } else {
                                        ipSlaAddress = $('#WANslaIpAddress').val();
                                    }
                                    if (interfaceDetailsip.isDHCP) {
                                        iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.interfaceName.trim() + " track 1");
                                    }
                                    ipSlaRoute = "ip route " + ipSlaAddress + " 255.255.255.255 " + interfaceDetailsip.ipv4dialer.trim();
                                    /*condition for ip sla route additon*/
                                } else {
                                    if (!isEmpty(interfaceDetailsip.ipv4dialer)) {
                                        iproutePushArray.push("ip route 0.0.0.0 0.0.0.0 " + interfaceDetailsip.ipv4dialer.trim() + " 253");
                                    }
                                    if (!isEmpty(interfaceDetailsip.ipv6dialer)) {
                                        iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.ipv6dialer.trim() + " 253");
                                    }
                                    if (interfaceDetailsip.isDHCP) {
                                        iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.interfaceName.trim() + " 253");
                                    }
                                }

                            } else {
                                if (!isEmpty(interfaceDetailsip.ipv4dialer)) {
                                    iproutePushArray.push("ip route 0.0.0.0 0.0.0.0 " + interfaceDetailsip.ipv4dialer.trim());
                                }
                                if (!isEmpty(interfaceDetailsip.ipv6dialer)) {
                                    iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.ipv6dialer.trim());
                                }
                                if (interfaceDetailsip.isDHCP) {
                                    iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.interfaceName.trim());
                                }
                            }

                        } else {
                            if (primaryBackupipArray.length > 1) {
                                //code
                                if (j === 0) {
                                    //code
                                    if (interfaceDetailsip.routIpvType === "wanipv4" || interfaceDetailsip.routIpvType === "wanipv4and6") {
                                        iproutePushArray.push("ip route 0.0.0.0 0.0.0.0 " + interfaceDetailsip.interfaceName.trim() + " track 1");
                                    }
                                    if (interfaceDetailsip.routIpvType === "wanipv6" || interfaceDetailsip.routIpvType == "wanipv4and6") {
                                        iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.interfaceName.trim() + " track 1");
                                    }
                                    /*condition for ip sla route additon*/
                                    if (cellularFlag) {
                                        ipSlaAddress = $('#slaIpAddressCellular').val();
                                    } else if (interfaceDetailsip.interfaceName.trim().toLowerCase().indexOf("cellular") > -1) {
                                        ipSlaAddress = $('#slaWANIntCellular').val();
                                    } else {
                                        ipSlaAddress = $('#WANslaIpAddress').val();
                                    }
                                    ipSlaRoute = "ip route " + ipSlaAddress + " 255.255.255.255 " + interfaceDetailsip.interfaceName.trim();
                                    /*condition for ip sla route additon*/
                                } else {
                                    if (interfaceDetailsip.routIpvType === "wanipv4" || interfaceDetailsip.routIpvType == "wanipv4and6") {
                                        iproutePushArray.push("ip route 0.0.0.0 0.0.0.0 " + interfaceDetailsip.interfaceName.trim() + " 253");
                                    }
                                    if (interfaceDetailsip.routIpvType === "wanipv6" || interfaceDetailsip.routIpvType == "wanipv4and6") {
                                        iproutePushArray.push("ipv6 route ::/0 " + interfaceDetailsip.interfaceName.trim() + "  253");
                                    }
                                }
                            } else {
                                if (interfaceDetailsip.routIpvType === "wanipv4" || interfaceDetailsip.routIpvType == "wanipv4and6") {
                                    iproutePushArray.push("ip route 0.0.0.0 0.0.0.0 " + interfaceDetailsip.interfaceName.trim());
                                }
                                if (interfaceDetailsip.routIpvType === "wanipv6" || interfaceDetailsip.routIpvType == "wanipv4and6") {
                                    iproutePushArray.push("ipv6 route ::/0  " + interfaceDetailsip.interfaceName.trim());
                                }
                            }
                        }
                    }
                    primaryBackupArray = getPrimaryWanInterface(shrunCliOutput, id, cellularFlag);
                    var interfaceDetails = [], tempintArray = [], temArrayDesc = [], tempIpv6Array = [], cliInput = "", response;
                    for (var j = 0; j < primaryBackupArray.length; j++) {
                        interfaceDetails = getEditInterfaceDetails(primaryBackupArray[j]);
                        temArrayDesc.push(interfaceDetails.description);
                        if (interfaceDetails.ipv4dialer.length > 0) {
                            tempintArray.push(interfaceDetails.ipv4dialer);
                            ///  temArrayDesc.push(interfaceDetails.description);
                        }
                        if (interfaceDetails.ipv6dialer.length > 0) {
                            tempIpv6Array.push(interfaceDetails.ipv6dialer);

                        }
                        if (interfaceDetails.ipv4dialer.length === 0 && interfaceDetails.ipv6dialer.length === 0) {
                            tempintArray.push(primaryBackupArray[j]);
                            // temArrayDesc.push(interfaceDetails.description);
                        }

                    }
                    //primaryBackupArray.length=0;
                    for (var v = 0; v < tempintArray.length; v++) {

                        if (tempintArray[v].toLowerCase().indexOf("dialer") > -1) {
                            cliInput = cliInput + "interface " + tempintArray[v] + "\n"
                            cliInput = cliInput + "desc " + temArrayDesc[v] + "_" + primaryBackupArray[v] + "\n";
                            cliInput = cliInput + "exit \n"
                            if (!priview) {
                                response = deviceCommunicator.getConfigCmdOutput(cliInput);
                            } else {
                                outPut = outPut + cliInput;
                            }
                        }
                        primaryBackupArray[v] = tempintArray[v];
                    }
                    for (var v = 0; v < tempIpv6Array.length; v++) {

                        if (tempIpv6Array[v].toLowerCase().indexOf("dialer") > -1) {
                            cliInput = cliInput + "interface " + tempIpv6Array[v] + "\n"
                            cliInput = cliInput + "desc " + tempIpv6Array[v] + "_" + primaryBackupArray[v] + "\n";
                            cliInput = cliInput + "exit \n"
                            if (!priview) {
                                response = deviceCommunicator.getConfigCmdOutput(cliInput);
                            } else {
                                outPut = outPut + cliInput;
                            }
                        }
                        // primaryBackupArray[v] = tempintArray[v];
                    }

                    var CheckIpArray = [], check = 0;
                    var resp = deviceCommunicator.getExecCmdOutput("show running-config | include route");
                    var iprouteArray = resp.split("\n");
//                    var ipv6Routs = deviceCommunicator.getExecCmdOutput("show running-config | include ipv6 route");
//                    if (!isEmpty(ipv6Routs)) {
//                        var ipv6RoutsArray = ipv6Routs.split("\n");
//                        for (var k = 0; k < ipv6RoutsArray.length; k++) {
//                            iprouteArray.push(ipv6RoutsArray[k]);
//                        }
//                    }
                    for (var l = 0; l < iprouteArray.length; l++) {
                        //code
                        if (((iprouteArray[l].trim().indexOf("ip rout") > -1) || (iprouteArray[l].trim().indexOf("ipv6 rout") > -1)) && ((iprouteArray[l].trim().indexOf("track") > -1) || (iprouteArray[l].trim().toLowerCase().indexOf("dialer") > -1) || (iprouteArray[l].trim().toLowerCase().indexOf("ethernet") > -1) || (iprouteArray[l].trim().toLowerCase().indexOf("atm") > -1) || (iprouteArray[l].trim().toLowerCase().indexOf("serial") > -1))) {
                            //code
                            CheckIpArray[check] = iprouteArray[l].trim().toLowerCase();
                            check = check + 1;
                        }
                    }
                    //pushing ip sla route into array if backup configured
                    if (primaryBackupipArray.length > 1) {
                        iproutePushArray.push(ipSlaRoute);
                    }
                    var delipRouteArray = [];
                    //var addipRouteArray = [];
                    var checkFlag = 0, v = 0;
                    for (var m = 0; m < CheckIpArray.length; m++) {
                        checkFlag = 0;
                        for (var n = 0; n < iproutePushArray.length; n++) {
                            if (CheckIpArray[m].toLowerCase().trim() === iproutePushArray[n].toLowerCase().trim()) {
                                checkFlag = 1;
                            }
                        }
                        if (checkFlag === 1) {
                            //code
                        } else {
                            delipRouteArray[v] = "no " + CheckIpArray[m];
                            v = v + 1;
                        }
                    }
                    var pushcliInput = "";
                    for (var n = 0; n < delipRouteArray.length; n++) {
                        pushcliInput = pushcliInput + delipRouteArray[n] + "\n";
                    }
                    for (var g = 0; g < iproutePushArray.length; g++) {
                        pushcliInput = pushcliInput + iproutePushArray[g] + "\n";
                    }

                    if (!priview) {
                        response = deviceCommunicator.getConfigCmdOutput(pushcliInput);
                    } else {
                        outPut = outPut + pushcliInput;
                    }
                    WanZoneInterfaceArray = [];
                    ipsInterfaceArray = [];
                    temArray = [];
                    var lanInterfaces = configureFirewall.getInterfacesInZone("LAN");
                    lanInterfacesglobe = lanInterfaces;
                    //if (primaryBackupArray.length>0) {
                    //code wanZone Configuration
                    //var interfaceXml, thisInterface, intDescription = "", returnThis = "";
                    var xml, xmlDoc, rawxml;
                    xml = shrunCliOutput;
                    rawxml = xml;
                    if (xml.indexOf("Building configuration...") !== -1) {
                        xml = xml.substring(25, xml.length);
                        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
                    }
                    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
                    var regEx = new RegExp("&#x03;", "g");
                    xml = xml.replace(regEx, "");
                    try {
                        xmlDoc = $.parseXML(xml);
                    } catch (error) {
                        xmlDoc = xml;
                    }
                    xml = xmlDoc;
                    WanZoneInterfaceArray = configureFirewall.getInterfacesInZoneWAN("WAN");


                    var myWanZoneArray = tempintArray;
//                    for (var a = 0; a < tempIpv6Array.length; a++) {
//                        myWanZoneArray.push(tempIpv6Array[a]);
//                    }
                    for (var i = 0; i < myWanZoneArray.length; i++) {
                        flagwanZone = 0;
                        for (j = 0; j < WanZoneInterfaceArray.length; j++)
                        {
                            if (myWanZoneArray[i] === WanZoneInterfaceArray[j]) {
                                //code
                                flagwanZone = 1;
                                break;
                            }
                        }
                        if (flagwanZone === 0) {
                            //code
                            temArray[0] = myWanZoneArray[i];
                            if (!priview) {
                                configureFirewall.addWanZoneInterface(temArray);
                            } else {
                                outPut = outPut + configureFirewall.addWanZoneInterface(temArray, true);
                                ;
                            }
                            temArray.length = 0;
                        } else {
                            isEmptyBlock = true;
                        }
                    }
                    for (j = 0; j < WanZoneInterfaceArray.length; j++)
                    {
                        flagwanZone = 0;
                        for (var i = 0; i < myWanZoneArray.length; i++) {

                            if (myWanZoneArray[i] == WanZoneInterfaceArray[j]) {
                                //code
                                flagwanZone = 1;
                                break;
                            }
                        }
                        if (flagwanZone == 0) {
                            //code
                            temArray[0] = WanZoneInterfaceArray[j];
                            if (!priview) {
                                configureFirewall.deleteWanZoneInterface(temArray);
                            } else {
                                outPut = outPut + configureFirewall.deleteWanZoneInterface(temArray, true);
                            }
                            temArray.length = 0;
                        } else {
                            isEmptyBlock = true;
                        }
                    }
                    //Wan zone configuration end
                    //ips configuration StartsconfigureVpn.checkValuesIkve1(xml)
                    ipsInterfaceArray = WanZoneInterfaceArray;
                    if ($("#" + id).attr("checkFlagIps") == "configuredIps") {
                        for (var i = 0; i < primaryBackupArray.length; i++) {
                            flagIps = 0;
                            for (j = 0; j < ipsInterfaceArray.length; j++)
                            {
                                if (primaryBackupArray[i] === ipsInterfaceArray[j]) {
                                    //code
                                    flagIps = 1;
                                    break;
                                }
                            }
                            if (flagIps == 0) {
                                //code
                                temArray[0] = primaryBackupArray[i];
                                if (!priview) {
                                    configureIPS.addIpsInterface(temArray);
                                } else {
                                    outPut = outPut + configureIPS.addIpsInterface(temArray, true);
                                }
                                temArray.length = 0;
                            } else {
                                isEmptyBlock = true;
                            }
                        }
                        for (j = 0; j < ipsInterfaceArray.length; j++)
                        {
                            flagIps = 0;
                            for (var i = 0; i < primaryBackupArray.length; i++) {

                                if (primaryBackupArray[i] == ipsInterfaceArray[j]) {
                                    //code
                                    flagIps = 1;
                                    break;
                                }
                            }
                            if (flagIps == 0) {
                                //code
                                temArray[0] = ipsInterfaceArray[j];
                                if (!priview) {
                                    configureIPS.deleteIpsInterface(temArray);
                                } else {
                                    outPut = outPut + configureIPS.deleteIpsInterface(temArray, true);
                                }
                                temArray.length = 0;
                            } else {
                                isEmptyBlock = true;
                            }
                        }
                    } else {
                        //nothing
                    }
                    //ips conf end
                    var emptyArr = [];
                    var emptyCws = [];
                    var response = "";

                    cwsInterfaceArray = WanZoneInterfaceArray;
                    valueFlag = configureScanSafe.retrivingValues();
                    flagDmVpn = configureVpn.checkValuesDMVPN(xml);
                    flagvpn1 = configureVpn.checkValuesIkve1(xml);
                    flagvpn2 = configureVpn.checkValuesIkve2(xml);

                    if (valueFlag) {
                        var DefaultCws = [];
                        if (natEnabledFlag === true) {
                            DefaultCws.push({name: "ipNatInside", value: " ip nat inside"});
                        } else {
                            DefaultCws.push({name: "ipNatInside", value: ""});
                        }
                        cliInput = +cliInput + deviceCommunicator.configureCommandsFromTemplate("DefaultCws.txt", DefaultCws, priview);
                        for (var i = 0; i < primaryBackupArray.length; i++) {
                            flagIps = 0;
                            for (j = 0; j < cwsInterfaceArray.length; j++)
                            {
                                if (primaryBackupArray[i] == cwsInterfaceArray[j]) {
                                    //code
                                    flagIps = 1;
                                    break;
                                }
                            }
                            if (flagIps == 0) {
                                //code
                                temArray[0] = primaryBackupArray[i];
                                if (!priview) {
                                    configureScanSafe.addCwsInterface(temArray, flagvpn1, flagvpn2, flagDmVpn);
                                } else {
                                    outPut = outPut + configureScanSafe.addCwsInterface(temArray, flagvpn1, flagvpn2, flagDmVpn, true);
                                }
                                temArray.length = 0;
                            } else {
                                isEmptyBlock = true;
                            }
                        }
                        for (j = 0; j < cwsInterfaceArray.length; j++)
                        {
                            flagIps = 0;
                            for (var i = 0; i < primaryBackupArray.length; i++) {

                                if (primaryBackupArray[i] == cwsInterfaceArray[j]) {
                                    //code
                                    flagIps = 1;
                                    break;
                                }
                            }
                            if (flagIps == 0) {
                                //code
                                if (primaryBackupArray.length == 0) {
                                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteScanSafe.txt", emptyArr, priview);
                                    temArray[0] = cwsInterfaceArray[j];
                                    configureScanSafe.deleteCwsInterface(temArray);
                                    temArray.length = 0;
                                    outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteCwsWhiteListing.txt", emptyCws, priview);
                                } else {
                                    temArray[0] = cwsInterfaceArray[j];
                                    if (!priview) {
                                        configureScanSafe.deleteCwsInterface(temArray);
                                    } else {
                                        outPut = outPut + configureScanSafe.deleteCwsInterface(temArray, true);
                                    }
                                    temArray.length = 0;
                                }

                            } else {
                                isEmptyBlock = true;
                            }
                        }
                    } else {
                        //nothing
                    }
                    // conf end

                    var whiteListArr = [], arr = [];
                    var dmVpnDetails = configureVpn.getDmVpnInterfaceDetails(xml, rawxml);
                    var noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";
                    if (flagDmVpn === true) {
                        if (flagvpn1 === true) {
                            if (primaryBackupArray.length == 0) {
                                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, priview);
                                configureVpn.deleteVpnIkev1InterfaceTunnel(dmVpnDetails.interfaceArray);
                                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, priview);
                            } else {
                                configureVpn.deleteVpnIkev1InterfaceTunnel(dmVpnDetails.interfaceArray);
                                if (dmVpnDetails.interfaceArray.length == 2) {
                                    //code
                                } else {
                                    if (primaryBackupArray.length == 2) {
                                        //code
                                        //var oldPrimaryBackup=[];
                                        //oldPrimaryBackup[0]=primaryBackupArray[0];
                                        primaryBackupArray.length = 1;

                                    }
                                }
                                configureVpn.addDmVpnTunnelInterface(primaryBackupArray, dmVpnDetails.tunnelIp, dmVpnDetails.tunnelMask, dmVpnDetails.transportAddr, dmVpnDetails.tunnelAddr, dmVpnDetails.iprouteArrayprefix, dmVpnDetails.iprouteArrayprefixMask, dmVpnDetails.backupTunnelIP, "ipsec-profile");
                            }
                        } else if (flagvpn2 === true) {
                            if (primaryBackupArray.length == 0) {
                                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, priview);
                                configureVpn.deleteVpnIkev2InterfaceTunnel(dmVpnDetails.interfaceArray);
                                noAuthPolicy = "";

                                arr.push({
                                    name: "noAuthPolicy",
                                    value: noAuthPolicy
                                });
                                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, priview);
                            } else {
                                configureVpn.deleteVpnIkev2InterfaceTunnel(dmVpnDetails.interfaceArray);
                                if (dmVpnDetails.interfaceArray.length == 2) {
                                    //code
                                } else {
                                    if (primaryBackupArray.length == 2) {
                                        //code
                                        //var oldPrimaryBackup=[];
                                        //oldPrimaryBackup[0]=primaryBackupArray[0];
                                        primaryBackupArray.length = 1;

                                    }
                                }
                                //configureVpn.addDmVpnTunnelInterface(primaryBackupArray,dmVpnDetails.iprouteArrayprefix,dmVpnDetails.iprouteArrayprefixMask,configureVpn.getvpnInterfaceTunnel(xml,rawxml).peerAddressArray);
                                configureVpn.addDmVpnTunnelInterface(primaryBackupArray, dmVpnDetails.tunnelIp, dmVpnDetails.tunnelMask, dmVpnDetails.transportAddr, dmVpnDetails.tunnelAddr, dmVpnDetails.iprouteArrayprefix, dmVpnDetails.iprouteArrayprefixMask, dmVpnDetails.backupTunnelIP, "test_profile");
                            }
                        }
                    } else if (flagvpn1 === true) {
                        var vpnIkev1Details = configureVpn.getvpnInterfaceTunnel(xml, rawxml);

                        if (primaryBackupArray.length == 0) {
                            //code
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, priview);
                            configureVpn.deleteVpnIkev1InterfaceTunnel(vpnIkev1Details.interfaceArray);
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, priview);
                        } else {
                            configureVpn.deleteVpnIkev1InterfaceTunnel(vpnIkev1Details.interfaceArray);

                            if (vpnIkev1Details.interfaceArray.length == 2) {
                                //code
                            } else {
                                if (primaryBackupArray.length == 2) {
                                    //code
                                    //var oldPrimaryBackup=[];
                                    //oldPrimaryBackup[0]=primaryBackupArray[0];
                                    primaryBackupArray.length = 1;

                                }
                            }

                            configureVpn.addVpnIkev1InterfaceTunnel(primaryBackupArray, vpnIkev1Details.iprouteArrayprefix, vpnIkev1Details.iprouteArrayprefixMask, vpnIkev1Details.peerAddressArray, vpnIkev1Details.siteToSiteTunnelIp, vpnIkev1Details.siteToSiteTunnelMask, vpnIkev1Details.siteToSiteBackupTunnelIp);

                        }

                    } else if (flagvpn2 === true) {
                        var vpnIkev2Details = configureVpn.getvpnInterfaceTunnel(xml, rawxml);
                        if (primaryBackupArray.length == 0) {
                            //code
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, priview);
                            configureVpn.deleteVpnIkev2InterfaceTunnel(vpnIkev2Details.interfaceArray);
                            arr.push({
                                name: "noAuthPolicy",
                                value: noAuthPolicy
                            });
                            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, priview);
                        } else {
                            configureVpn.deleteVpnIkev2InterfaceTunnel(vpnIkev2Details.interfaceArray);
                            if (vpnIkev2Details.interfaceArray.length == 2) {
                                //code
                            } else {
                                if (primaryBackupArray.length == 2) {
                                    //code
                                    //var oldPrimaryBackup=[];
                                    //oldPrimaryBackup[0]=primaryBackupArray[0];
                                    primaryBackupArray.length = 1;

                                }
                            }
                            configureVpn.addVpnIkev2InterfaceTunnel(primaryBackupArray, vpnIkev2Details.iprouteArrayprefix, vpnIkev2Details.iprouteArrayprefixMask, vpnIkev2Details.peerAddressArray, vpnIkev2Details.siteToSiteTunnelIp, vpnIkev2Details.siteToSiteTunnelMask, vpnIkev2Details.siteToSiteBackupTunnelIp);

                        }

                    } else {
                        isEmptyBlock = true;
                    }
                    //}



                    //else{

                    //nothing
                    //}
                    var lanArr = [];
                    if (interfaceDetailsip.length > 0) {
                    lanArr.push({name: "interface", value: interfaceDetailsip.interfaceName.trim()});
                    if (natEnabledFlag === true) {
                        lanArr.push({name: "ipNatInside", value: "ip nat inside"});
                    } else {
                        lanArr.push({name: "ipNatInside", value: ""});
                    }
                    if (lanInterfaces.length > 0) {
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("configNetFlow.txt", lanArr, priview) + "\n";
                    } else {
                        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deConfigNetFlow.txt", lanArr, priview) + "\n";
                        }
                    }
                    if (primaryBackupArray.length == 0) {
                        shrunUpdate();
                        outPut = outPut + createAccessListforNAT(licenseCheck, shrunCliOutput, priview);
                    }
                }
            }
        } catch (e) {
            errorLogInConsole(e.message);
            //alert(e.message);
            //$('#confIPSErrorMessage').html(e.errorResponse);
            //$('#confIPSError').show();
        }
        if (!priview) {
            deviceCommunicator.getConfigCmdOutput(outPut);
        }
        return outPut;
        //consoleLogMethodDetailsEnd("iAndC.js", "modifyConfiguredFeatures()");
    }
    function readRoutMap(xmlDoc, interfaceName, ipv4DialerName, ipv6DialerName) {
        var isIpv4Rout = false;
        var isIpv6Rout = false;
        var finaalResult = "wanipv4";
        $(xmlDoc).find('ip').each(function () {
            $(this).find('route').each(function () {
                $(this).find('Param').each(function () {
                    var intName = $(this).text();
                    if (intName === interfaceName || intName === ipv4DialerName) {
                        isIpv4Rout = true;
                        finaalResult = "wanipv4";
                    }
                });
            });
        });
        $(xmlDoc).find('ipv6').each(function () {
            $(this).find('route').each(function () {
                $(this).find('Param').each(function () {
                    var intName = $(this).text();
                    // var re = new RegExp("::/0", 'g');
                    intName = intName.replace("::/0", '');
                    intName = intName.trim();
                    //   if (intName === interfaceName || intName === ipv6DialerName) {
                    if (!isEmpty(ipv6DialerName) && intName === ipv6DialerName) {
                        isIpv6Rout = true;
                        finaalResult = "wanipv6";
                    } else if (intName === interfaceName) {
                        finaalResult = "wanipv4andipv6oe";
                    }
                });
            });
        });
        if (isIpv4Rout && isIpv6Rout) {
            finaalResult = "wanipv4and6";
        }
        return finaalResult;
    }
    function readIpv4Ipv6andNat(interfaceXml, interfaceDetails) {
        var isIpv6 = false;
        if ($(interfaceXml).find('pap').length > 0) {
            interfaceDetails.isPap = true;
        }
        if ($(interfaceXml).find('chap').length > 0) {
            interfaceDetails.isChap = true;
        }
        var papchapUserName = "";
        var papchapPassword = "";
        papchapUserName = $(interfaceXml).find('OutboundPAPUserName').text();
        papchapPassword = $(interfaceXml).find('OutboundPAPPassword').text();
        if (papchapUserName.length < 1) {
            papchapUserName = $(interfaceXml).find('AlternateCHAPHostName').text();
            papchapPassword = $(interfaceXml).find('DefaultPPPAuthenticationPassword').text();
        }
        if (papchapUserName.length > 0) {
            interfaceDetails.papChapUsername = papchapUserName;
            interfaceDetails.papChapPassword = papchapPassword;
        }
        if ($(interfaceXml).find('ipcp dns request').length > 0) {
            interfaceDetails.isIpcpDns = true;
        }
        $(interfaceXml).find('ipv6').each(function () {
            isIpv6 = true;
            ipv6Address = $(this).find('IPv6Prefix').text();
            if ($(this).find('autoconfig').length) {
                interfaceDetails.ipv6Type = "autoconfig";
                return false;
            } else if (ipv6Address.length > 0) {
                interfaceDetails.ipv6Type = "staticip";
            }
            if ($(this).find('GeneralPrefixName').text().length > 0) {
                interfaceDetails.ipv6Type = "prefixFromProvider";
            }
            if (ipv6Address.length > 0) {
                if (ipv6Address.indexOf("/") != -1) {
                    interfaceDetails.ipv6Address = ipv6Address.substring(0, ipv6Address.indexOf("/"));
                    interfaceDetails.ipv6Mask = ipv6Address.substring(ipv6Address.indexOf("/") + 1, ipv6Address.length);
                } else {
                    interfaceDetails.ipv6Address = ipv6Address;
                }
                eui64 = $(this).find('eui-64');
                if (eui64.length > 0) {
                    interfaceDetails.isEui64 = true;
                }
                return false;
            }
        });
        if (interfaceDetails.ipv6Type === "autoconfig") {
            $(interfaceXml).find('ipv6').each(function () {
                if ($(this).find('dhcp').length > 0) {
                    var prefixName = $(this).find('PrefixNameTruncatedTo200Characters').text();
                    if (!isEmpty(prefixName)) {
                        // if ($(this).find('PrefixName').text() === 'prefix-from-provider' || $(this).text() === 'prefix-from-provider') {
                        interfaceDetails.ipv6DhcpClient = true;
                        interfaceDetails.ipv6DhcpPrefixName = prefixName;
                        return false;
                    }
                }
                $(this).find('mtu').each(function () {
                    interfaceDetails.ipv6mtu = $(this).find('MTUBytes').text();
                });
                $(this).find('tcp').each(function () {
                    interfaceDetails.ipv6adjustMss = $(this).find('MaxSegmentSizeBytes').text();
                });
            });
        }
        $(interfaceXml).find('ip').each(function () {
            $(this).find('address').each(function () {
                interfaceDetails.ipv4Address = $(this).find('IPAddress').text();
                interfaceDetails.ipv4Mask = $(this).find('IPSubnetMask').text();
                if (interfaceDetails.ipv4Address.length > 0) {
                    interfaceDetails.ipv4Type = "staticip";
                } else if ($(this).find('dhcp').length > 0) {
                    interfaceDetails.ipv4Type = "dhcp";
                    interfaceDetails.ipv4DhcpHostname = $(this).find('HostNameString').text();
                } else if ($(this).find('negotiated').length > 0) {
                    interfaceDetails.ipv4Type = "easyip";
                } else if ($(this).find('pool').length > 0) {
                    interfaceDetails.ipv4Type = "dhcppoolvalues";
                    interfaceDetails.poolName = $(this).find('PoolName').text();
                }
            });
            $(this).find('nat').each(function () {
                $(this).find('inside').each(function () {
                    interfaceDetails.isIpNatInside = true;
                });
                $(this).find('outside').each(function () {
                    interfaceDetails.isIpNatOutside = true;
                });
            });
            $(this).find('mtu').each(function () {
                interfaceDetails.mtu = $(this).find('MTUBytes').text();
            });
            $(this).find('tcp').each(function () {
                var outPut = deviceCommunicator.getExecCmdOutput("show running-config | section " + $(interfaceXml).find('Param:first').text());
                var spOutPut = outPut.split(/\r\n|\r|\n/);
                var spSize = spOutPut.length;
                var i = 0;
                for (i = 0; i < spSize; i++) {
                    var outPutArr = spOutPut[i];
                    var adjMssStr = "adjust-mss";
                    var adjMssIndex = outPutArr.indexOf(adjMssStr);
                    if (adjMssIndex !== -1) {
                        //consoleLog(outPutArr.substr(adjMssIndex + adjMssStr.length, outPutArr.length));
                        var adjMss = parseInt(outPutArr.substr(adjMssIndex + adjMssStr.length, outPutArr.length));
                        interfaceDetails.adjustMss = adjMss;
                    }
                }
            });
        });
        return isIpv6;
    }

    function readBviInterface(shrun, interName, bviNo, interfaceDetails) {
        var bviInterface = "";
        if (!interfaceDetails.isBVI) {
            return;
        }
        var BVI = "BVI" + bviNo;
        BVI = BVI.trim();
        var cama = "";

        $(shrun).find('interface').each(function () {

            var thisInterface = this;
            var interfaceName = $(thisInterface).find('Param:first').text();
            if (interfaceName === BVI) {
                interfaceDetails.bviipv4Address = $(thisInterface).find('IPAddress').text();
                interfaceDetails.bviipv4Mask = $(thisInterface).find('IPSubnetMask').text();

                setDialerValuesFromShRun(shrun, thisInterface, interfaceDetails);
            } else {
                var i = 0;
                $(thisInterface).find('bridge-group').each(function () {
                    var currentBviNo = $(this).find('AssignInterfaceToBridgeGroup').text();
                    currentBviNo = currentBviNo.trim();
                    if (currentBviNo === bviNo && interName !== interfaceName) {
                        if (i !== 1) {
                            bviInterface = bviInterface + cama + interfaceName;
                            cama = ",";
                        } else {
                            interfaceDetails.ipv6BviInterface = interfaceName;
                        }
                    }
                    i++;
                });
            }

        });

        if (bviInterface.length > 0) {
            interfaceDetails.bviInterfaces = bviInterface;
        }
    }
    function setDialerValuesFromShRun(xmlDoc, interfaceXml, interfaceDetails) {
        var isIpv4Dialer = false;
        var isIpv6Dialer = false;
        var isIpv4Chap = false;
        var isIpv4Pap = false;
        var isIpcpDns = false;
        var ipv4Username = "";
        var ipv4Passwprd = "";
        $(interfaceXml).find('DialerPoolNumber').each(function () {
            var dialerNo = $(this).text();
            if (dialerNo.length > 0) {
                $(xmlDoc).find('interface').each(function () {
                    var interName = "";
                    interName = $(this).find('Param:first').text();
                    if ($(this).find('DialerPoolNumber').text() === dialerNo && interName.indexOf("Dialer") !== -1) {

                        interfaceDetails.isPppoe = true;
                        var isIpv6Dialer = readIpv4Ipv6andNat(this, interfaceDetails);
                        //  readVlanInterface(xmlDoc, interfaceDetails);
                        if (isIpv6Dialer) {
                            interfaceDetails.ipv6dialer = interName;
                            interfaceDetails.ipv6dialerGroupNumber = $(this).find('DialerListNumber').text();
                            interfaceDetails.ipv6dialerPoolNumber = interfaceDetails.ipv6dialerGroupNumber;
                            interfaceDetails.isIpv6Chap = interfaceDetails.isChap;
                            interfaceDetails.isIpv6Pap = interfaceDetails.isPap;
                            interfaceDetails.ipv6PapChapUsername = interfaceDetails.papChapUsername;
                            interfaceDetails.ipv6PapChapPassword = interfaceDetails.papChapPassword;
                            interfaceDetails.isIpv6IpcpDns = interfaceDetails.isIpcpDns;
                            interfaceDetails.isChap = false;
                            interfaceDetails.isPap = false;
                            interfaceDetails.papChapUsername = "";
                            interfaceDetails.papChapPassword = "";
                            //isIpv4Dialer = true;
                        } else {
                            interfaceDetails.ipv4dialer = interName;
                            interfaceDetails.ipv4dialerGroupNumber = $(this).find('DialerListNumber').text();
                            interfaceDetails.ipv4dialerPoolNumber = interfaceDetails.ipv4dialerGroupNumber;
                            isIpv4Chap = interfaceDetails.isChap;
                            isIpv4Pap = interfaceDetails.isPap;
                            ipv4Username = interfaceDetails.papChapUsername;
                            ipv4Passwprd = interfaceDetails.papChapPassword;
                            isIpcpDns = interfaceDetails.isIpcpDns;
                            isIpv4Dialer = true;
                        }

                        //interfaceXml = this;


                    }
                });
            }
        });
        interfaceDetails.isChap = isIpv4Chap;
        interfaceDetails.isPap = isIpv4Pap;
        interfaceDetails.papChapUsername = ipv4Username;
        interfaceDetails.papChapPassword = ipv4Passwprd;
        interfaceDetails.isIpcpDns = isIpcpDns;
        if ((!isIpv4Dialer || !isIpv6Dialer) && !interfaceDetails.isBVI) {
            readIpv4Ipv6andNat(interfaceXml, interfaceDetails);
            //   readVlanInterface(xmlDoc, interfaceDetails);
            var intName = interfaceDetails.interfaceName;
            if (interfaceDetails.isPppoe && intName.indexOf("Serial") !== -1) {
                interfaceDetails.isPppoe = false;
                interfaceDetails.isPpp = true;
            }
        }
    }
    function getConfigurableBVIInterfaces(interfaceDetails) {
        var xmlDoc = shRunFormat();
        var interfaceArray = [];
        var bviNo = interfaceDetails.bvino;
        $(xmlDoc).find('interface').each(function () {
            var interfaceName = $(this).find('Param:first').text();
            if (!isEmpty(interfaceName)) {
                var intNo = deviceCommunicator.getInterfaceType(interfaceName);
                // if (intNo !== 5 && intNo !== 6 && interfaceName.indexOf("BVI") === -1 && interfaceName.indexOf("Embedded-Service-Engine") === -1 && interfaceName.indexOf("Virtual") === -1 && interfaceName.indexOf("Loopback") === -1 && interfaceName.indexOf("NVI") === -1 && interfaceName.indexOf("Tunnel") === -1 && interfaceName.indexOf("Dialer") === -1 && interfaceName.indexOf("Cellular") === -1) {
                if (intNo !== 5 && intNo !== 6 && (interfaceName.indexOf("GigabitEthernet") !== -1 || interfaceName.indexOf("Vlan") !== -1)) {
                    var isBvi = false;
                    var isNat = false;
                    $(this).find('bridge-group').each(function () {
                        var currentBviNo = $(this).find('AssignInterfaceToBridgeGroup').text();
                        currentBviNo = currentBviNo.trim();
                        if (interfaceDetails.isBVI && bviNo === currentBviNo) {
                            isBvi = false;
                        } else {
                            isBvi = true;
                        }

                    });
                    $(this).find('ip').each(function () {
                        $(this).find('nat').each(function () {
                            $(this).find('outside').each(function () {
                                isNat = true;
                            });

                        });
                    });
                    if (!isBvi && !isNat) {
                        interfaceArray.push(interfaceName);
                    }
                }
            }
        });
        return interfaceArray;

    }
    function shRunFormat() {
        if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
        }
        xml = shRunFormatOutput;
        //xml = shRunFormatOutput;
        var finalXML;
        if (xml.indexOf("Building configuration...") !== -1) {
            xml = xml.substring(25, xml.length);
            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
        }
        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
        regEx = new RegExp("&#x03;", "g");
        xml = xml.replace(regEx, "");
        try {
            finalXML = $.parseXML(xml);
        } catch (error) {
            finalXML = xml;
        }
        return finalXML;
    }
    function getDHCPInterfaces() {
        var xmlDoc = shRunFormat();
        var dhcpInterface = {};
        $(xmlDoc).find('interface').each(function () {
            var interfaceName = $(this).find('Param:first').text();
            if (!isEmpty(interfaceName)) {
                $(this).find('ipv6').each(function () {
                    if ($(this).find('dhcp').length > 0) {
                        var prefixName = $(this).find('PrefixNameTruncatedTo200Characters').text();
                        if (!isEmpty(prefixName)) {
                            dhcpInterface[interfaceName] = prefixName;
                        }
                    }
                });
            }
        });
        return dhcpInterface;
    }
    function checkAndRemoveIpv6AutoConfig(interfaceDetails) {
        var outPut = ""
        if (!$("#dhcpClient").is(':checked') && interfaceDetails.ipv6DhcpClient) {
            var dhcpInterface = getDHCPInterfaces();
            var prifix = dhcpInterface[interfaceDetails.interfaceName];
            var interfaceList = deviceCommunicator.getInterfaceTypeMap();
            $.each(interfaceList, function (key, val) {
                if (key.indexOf("Vlan") !== -1) {
                    outPut = outPut + "interface " + key + " \n";
                    outPut = outPut + " no ipv6 address " + prifix + " ::100:0:0:0:1/64 \n";
                    if (Object.keys(dhcpInterface).length === 1) {
                        outPut = outPut + " no ipv6 enable \n";
                        outPut = outPut + " no ipv6 nd other-config-flag \n";
                        outPut = outPut + " no ipv6 dhcp server STATELESS \n";
                    }
                    outPut = outPut + " exit \n";
                }
            });
            if (Object.keys(dhcpInterface).length === 1) {
                outPut = outPut + " no ipv6 dhcp Pool STATELESS" + " \n";
            }
        }
        return outPut;
    }
    function getEditInterfaceDetails(interface1) {
        //consoleLogMethodDetailsStart("iAndC.js", "getEditInterfaceDetails()");
        //var lines, i, mode, routeInterface;
        var xml, xmlDoc, parentInterface, interfaceDetails = {
            interfaceName: "",
            isPppoe: false,
            isPpp: false,
            syncMode: "NA",
            encapsulation: "NA",
            clockRate: "NA",
            isDCE: false,
            mtu: "",
            adjustMss: "",
            ipv6mtu: "",
            ipv6adjustMss: "",
            description: "",
            vpi: "",
            vci: "",
            routIpvType: "",
            ipv4dialer: "",
            ipv4dialerPoolNumber: "",
            ipv4dialerGroupNumber: "",
            dialer: "",
            dialerPoolNumber: "",
            dialerGroupNumber: "",
            ipv6dialer: "",
            ipv6dialerPoolNumber: "",
            ipv6dialerGroupNumber: "",
            ipv4Type: "",
            ipv4Address: "",
            ipv4Mask: "",
            ipv4DhcpHostname: "",
            poolName: "",
            ipv6Type: "",
            ipv6Address: "",
            ipv6Mask: "",
            ipv6DhcpClient: false,
            ipv6DhcpPrefixName: "",
            isEui64: false,
            isPap: false,
            isChap: false,
            papChapUsername: "",
            papChapPassword: "",
            isIpv6Pap: false,
            isIpv6Chap: false,
            ipv6PapChapUsername: "",
            ipv6PapChapPassword: "",
            mediaType: "",
            isIpNatInside: false,
            isIpNatOuside: false,
            isPrimary: false,
            isBackup: false,
            ipsAddStatus: false,
            hasCWS: false,
            zone: "",
            dot1qKey: "",
            hasLanZone: false,
            isIpcpDns: false,
            isIpv6IpcpDns: false,
            isBVI: false,
            bvino: "",
            bviipv4Address: "",
            bviipv4Mask: "",
            bviInterfaces: "",
            ipv6BviInterface: "",
            avilableBviInterfaces: "",
            isDHCP: false
        };


        xmlDoc = shRunFormat();

        $(xmlDoc).find('interface').each(function () {
            var vpiVci, interfaceName, interfaceXml;
            interfaceName = $(this).find('Param:first').text();
            if (interfaceName === interface1) {
                interfaceDetails.interfaceName = interfaceName;
                parentInterface = this;
                interfaceXml = this;
                //physicalLayerXML = $(interfaceXml).find('physical-layer');
                var isAsys = $(interfaceXml).find('physical-layer async').length;
                if (isAsys > 0) {
                    $(interfaceXml).find('physical-layer').children().each(function () {
                        interfaceDetails.syncMode = (this).nodeName;
                    });
                } else {
                    interfaceDetails.syncMode = "sync";
                }
                var isClock = $(interfaceXml).find('clock rate').length;
                if (isClock > 0) {
                    $(interfaceXml).find('clock rate').children().each(function () {
                        interfaceDetails.clockRate = $(this).text();
                    });
                }
                vpiVci = $(interfaceXml).find('EnterVPIVCIValueSlashRequired').text();
                interfaceDetails.description = $(interfaceXml).find('description').text();
                if ($(interfaceXml).find('media-type').length > 0) {
                    if ($(interfaceXml).find('rj45').length > 0) {
                        interfaceDetails.mediaType = "rj45";
                    } else if ($(interfaceXml).find('sfp').length > 0) {
                        interfaceDetails.mediaType = "sfp";
                    }
                }
                if ($(interfaceXml).find('encapsulation').length > 0) {
                    $(interfaceXml).find('encapsulation').children().each(function () {
                        interfaceDetails.encapsulation = (this).nodeName;
                    });
                    if (interfaceDetails.encapsulation.length > 0) {
                        interfaceDetails.isPppoe = true;
                    }
                }
                if (vpiVci.length > 0) {
                    if (vpiVci.indexOf("/") != -1) {
                        interfaceDetails.vpi = vpiVci.substring(0, vpiVci.indexOf("/"));
                        interfaceDetails.vci = vpiVci.substring(vpiVci.indexOf("/") + 1, vpiVci.length);
                    }
                }
                //interfaceDetails.dialerPoolNumber = $(interfaceXml).find('DialerPoolNumber').text();
                //interfaceDetails.dialerGroupNumber = $(this).find('DialerListNumber').text();
                interfaceDetails.dot1qKey = $(interfaceXml).find('IEEEVLANID').text();
                //  var NoGroup = 0;
                $(interfaceXml).find('bridge-group').each(function () {
                    var bviNo = $(this).find('AssignInterfaceToBridgeGroup').text();
                    bviNo = bviNo.trim();
                    if (bviNo.length > 0) {
                        //    NoGroup = NoGroup + 1;
                        interfaceDetails.bvino = bviNo;
                        interfaceDetails.isBVI = true;
                        //     if (NoGroup === 2) {
                        //interfaceDetails.isBVI = true;
                        //interfaceDetails.isPppoe = true;
                        //         interfaceDetails.ipv6BviInterface = interfaceName;

                        //     }
                        if (interfaceDetails.isBVI && (interfaceDetails.description.indexOf("PrimaryWANDesc") !== -1 || interfaceDetails.description.indexOf("BackupWANDesc") !== -1)) {
                            interfaceDetails.isPppoe = true;
                            readBviInterface(xmlDoc, interfaceName, interfaceDetails.bvino, interfaceDetails);
                        } else {
                            interfaceDetails.isBVI = false;
                        }


                    }
                });
                readBviInterface(xmlDoc, interfaceName, interfaceDetails.bvino, interfaceDetails);
                if (!interfaceDetails.isBVI) {
                    setDialerValuesFromShRun(xmlDoc, interfaceXml, interfaceDetails);
                }

                $(parentInterface).find('ConfigIf-Configuration').each(function () {
                    $(this).find('ip').each(function () {
                        $(this).find('ips').each(function () {
                            if ($(this).find('NameDefinedIPSRule').html() == "IOS-IPS") {
                                interfaceDetails.ipsAddStatus = true;
                            }
                        });
                    });
                    $(this).find('zone-member').each(function () {
                        $(this).find('security').each(function () {
                            $(this).find('wAN').each(function () {
                                interfaceDetails.zone = "WAN";
                            });
                            $(this).find('lAN').each(function () {
                                interfaceDetails.zone = "LAN";
                            });
                            $(this).find('vPN').each(function () {
                                interfaceDetails.zone = "VPN";
                            });
                            $(this).find('dMZ').each(function () {
                                interfaceDetails.zone = "DMZ";
                            });
                        });
                    });
                });
                $(parentInterface).find('content-scan').find('out').each(function () {
                    interfaceDetails.hasCWS = true;
                });
                $(parentInterface).find('cws').find('out').each(function () {
                    interfaceDetails.hasCWS = true;
                });


                return false;
            }
        });
//    if (interfaceDetails.dialer.length > 0) {
//      routeInterface = interfaceDetails.dialer;
//    } else {
//      routeInterface = interface1;
//    }
        //Commented as we are pushing description for cellular too
        /*if(interface.indexOf("Cellular") !== -1){
         $(xmlDoc).find('ip route').each(function () {
         if($(this).find('Param').text() === routeInterface){
         if($(this).find('DistanceMetricRoute').length > 0){
         if($(this).find('DistanceMetricRoute').text() == 253){
         interfaceDetails.isBackup = true;
         } else {
         interfaceDetails.isPrimary = true;
         }
         } else {
         interfaceDetails.isPrimary = true;
         }
         }
         });

         }*/
        interfaceDetails.routIpvType = "wanipv4";
        if (interfaceDetails.description.indexOf("PrimaryWANDesc") !== -1) {
            interfaceDetails.isPrimary = true;
            //$("#primaryWanInt").prop("checked",true);
            currentPrimaryWanInterface = interfaceDetails.interfaceName;
            var result = readRoutMap(xmlDoc, interfaceDetails.interfaceName, interfaceDetails.ipv4dialer, interfaceDetails.ipv6dialer);
            if (result === "wanipv4andipv6oe") {
                interfaceDetails.routIpvType = "wanipv4";
                interfaceDetails.isDHCP = true;
            } else {
            interfaceDetails.routIpvType = result;
            }
        } else if (interfaceDetails.description.indexOf("BackupWANDesc") !== -1) {
            interfaceDetails.isBackup = true;
            currentBackupWanInterface = interfaceDetails.interfaceName;
            var result = readRoutMap(xmlDoc, interfaceDetails.interfaceName, interfaceDetails.ipv4dialer, interfaceDetails.ipv6dialer);
            if (result === "wanipv4andipv6oe") {
                interfaceDetails.routIpvType = "wanipv4";
                interfaceDetails.isDHCP = true;
            } else {
            interfaceDetails.routIpvType = result;
            }
        }
        if (interface1.indexOf('Serial') !== -1) {
            var serialControlerOutPut = deviceCommunicator.getExecCmdOutput("show controllers " + interface1);
            var indexOfNoSerial = serialControlerOutPut.indexOf("No serial");

            var indexOfDCE = serialControlerOutPut.indexOf("DCE");
            if (indexOfNoSerial === -1 && indexOfDCE !== -1) {
                interfaceDetails.isDCE = true;
            }
        }
        for (var loopLan = 0; loopLan < lanInterfacesglobe.length; loopLan++) {
            if (lanInterfacesglobe[loopLan] != "") {
                //code
                if (lanInterfacesglobe[loopLan].trim() == interfaceDetails.interfaceName) {
                    interfaceDetails.hasLanZone = true;
                }

            }
        }
        interfaceDetails.dialer = interfaceDetails.ipv4dialer;
        interfaceDetails.dialerPoolNumber = interfaceDetails.ipv4dialerPoolNumber;
        interfaceDetails.dialerGroupNumber = interfaceDetails.ipv4dialerGroupNumber;
        //consoleLogMethodDetailsEnd("iAndC.js", "getEditInterfaceDetails()");
        console.log(interfaceDetails);
        return interfaceDetails;
    }
    function updateEigrp(xml) {
        //consoleLogMethodDetailsStart("iAndC.js", "updateEigrp()");
        var tunnelIp, tunnelMask, backupTunnelIP = "", autonomousKey;
        var arr = [], response;
        var wildCardMask = "", networkval;
        var networkIp = "";
        var networkArr = [], eigrpArr = [];
        var eigrp = "";
        var bflag = false;
        $(xml).find('Interface').each(function () {
            var intfc = $(this).text().split("\n")[0];
            if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {

                $(this).find('ip').each(function () {
                    tunnelIp = $(this).find('IPAddress').text();
                    tunnelMask = $(this).find('IPSubnetMask').text();
                    return false;
                });
            } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
                $(this).find('ip').each(function () {
                    backupTunnelIP = $(this).find('IPAddress').text();
                    return false;
                });
            }
        });
        networkArr[0] = configureFirewall.getNetworkAddress(tunnelIp, tunnelMask);
        $(xml).find('router').each(function () {
            $(this).find('eigrp').each(function () {
                $(this).find('AutonomousSystem').each(function () {
                    eigrp = $(this).text();
                });
                $(this).find('ConfigRouter-Configuration').each(function () {
                    $(this).find('network').each(function () {
                        $(this).find('NetworkNumber').each(function () {
                            if ($(this).find('EIGRPWildCardBits').text()) {
                                isEmptyBlock = true;
                            } else {
                                networkval = $(this).text();
                                if (networkArr[0] == networkval) {
                                    bflag = true;
                                }
                                //else {
                                //}
                                //bflag = false;
                                //i++;
                            }
                        });
                    });
                    if (bflag) {
                        autonomousKey = eigrp;
                    }
                });
            });
        });

        if (bflag) {
            var lanZoneArr = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets").split("\n"), networkLanZone = "";
            //var ipsec_profile = "";
            eigrpArr = [{name: "autonomousVal", value: autonomousKey}];
            deviceCommunicator.configureCommandsFromTemplate("deleteEigrp.txt", eigrpArr, false);
            tunnelNetworkIp = configureFirewall.getNetworkAddress(tunnelIp, tunnelMask);
            var tunnelWildMask = configureVpn.getWildCardMask(tunnelMask);
            for (var i = 1; i < lanZoneArr.length; i++) {
                if (lanZoneArr[i].indexOf("any") != -1) {
                    networkLanZone = "";
                    //return false;
                } else {
                    networkIp = lanZoneArr[i].split(" ")[1];
                    if (networkIp.indexOf("host") != -1) {
                        wildCardMask = configureVpn.getWildCardMask("255.255.255.255");
                        networkIp = lanZoneArr[i].split(" ")[2];
                    } else {
                        wildCardMask = configureVpn.getWildCardMask(lanZoneArr[i].split(" ")[2]);
                    }
                    networkLanZone = networkLanZone + "\n" + "network " + networkIp.trim() + " " + wildCardMask.trim();
                }
            }
            arr.push({
                name: "autonomousId",
                value: autonomousKey
            }, {
                name: "tunnelNetworkIp",
                value: tunnelNetworkIp
            }, {
                name: "tunnelWildMask",
                value: tunnelWildMask
            }, {
                name: "networkLanZone",
                value: networkLanZone
            });
            response = deviceCommunicator.configureCommandsFromTemplate("createEigrp.txt", arr, false);

            arr.length = 0;
            if (backupTunnelIP != "") {
                //code

                tunnelNetworkIp = configureFirewall.getNetworkAddress(backupTunnelIP, tunnelMask);
                arr.push({
                    name: "autonomousId",
                    value: autonomousKey
                }, {
                    name: "tunnelNetworkIp",
                    value: tunnelNetworkIp
                }, {
                    name: "tunnelWildMask",
                    value: tunnelWildMask
                }, {
                    name: "networkLanZone",
                    value: networkLanZone
                });
                response = deviceCommunicator.configureCommandsFromTemplate("createEigrp.txt", arr, false);

                arr.length = 0;
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "updateEigrp()");
    }
    function updateLanSubnetObj(interfaceDetails, lanobjList) {
        try {
            //consoleLogMethodDetailsStart("iAndC.js", "updateLanSubnetObj()");
            var outValue = [], xmlLan = [];
            var deleteobjGroupIdRoute = "", xmlObjectGroup = [], rowsobjecGroup = [];
            var reg = new RegExp("[,\\n]");
            //var RegrColen = new RegExp(": ", "");
            var networkAddress = "";
            cliInput = "interface " + interfaceDetails.interfaceName + "\n" + "zone-member security LAN";
            response = deviceCommunicator.getConfigCmdOutput(cliInput);
            cliInput = "";
            if (lanobjList.length <= 0) {
                xmlObjectGroup.length = 0;
                rowsobjecGroup.length = 0;
                deleteobjGroupIdRoute = "";
                xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets");
                rowsobjecGroup = xmlObjectGroup.split(reg);
                for (var j = 0; j < rowsobjecGroup.length; j++) {
                    if ((rowsobjecGroup[j].indexOf("Network object group local_lan_subnets") <= -1)) {
                        if ((rowsobjecGroup[j].trim().length > 0)) {
                            deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
                        }
                    }
                }
                //code
            } else {
                xmlObjectGroup.length = 0;
                rowsobjecGroup.length = 0;
                deleteobjGroupIdRoute = "";
                xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets");
                rowsobjecGroup = xmlObjectGroup.split(reg);
                for (j = 0; j < rowsobjecGroup.length; j++) {
                    if ((rowsobjecGroup[j].indexOf("Network object group local_lan_subnets") <= -1)) {
                        if ((rowsobjecGroup[j].trim().length > 0)) {
                            deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
                        }
                    }
                }
                for (var i = 0; i < lanobjList.length; i++) {
                    xmlLan.length = 0;
                    //rows.length=0;
                    xmlLan = deviceCommunicator.getExecCmdOutput("show running-config interface " + lanobjList[i]);
                    rows = xmlLan.split(reg);
                    for (var j = 0; j < rows.length; j++) {
                        if ((rows[j].indexOf("no ip address") <= -1)) {
                            if ((rows[j].indexOf("no ip address") <= -1)) {
                                outValue.length = 0;
                                outValue = rows[j].trim().split(" ");
                                if (validateIpv4Address(outValue[2])) {
                                    //code
                                    networkAddress = networkAddress + "\n" + configureFirewall.getNetworkAddress(outValue[2].trim(), outValue[3].trim()) + " " + outValue[3].trim();
                                }

                            }
                        }
                    }
                }
            }
            var lanobjGroupCli = "object-group network local_lan_subnets";
            if (networkAddress == "") {
                //code
                networkAddress = "any";
            }
            cliInput = cliInput + "\n" + lanobjGroupCli + "\n" + deleteobjGroupIdRoute + "\n" + networkAddress;
            response = deviceCommunicator.getConfigCmdOutput(cliInput);
            updateEigrp(shrunCliOutput);
            //consoleLogMethodDetailsEnd("iAndC.js", "updateLanSubnetObj()");
        } catch (e) {
            isEmptyBlock = true;
        }
    }

    function getAttachedDialer(interface1) {
        //consoleLogMethodDetailsStart("iAndC.js", "getAttachedDialer()");
        var xml, xmlDoc, dialer = "";

        if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
        }
        xml = shRunFormatOutput;

        if (xml.indexOf("Building configuration...") !== -1) {
            xml = xml.substring(25, xml.length);
            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
        }
        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
        regEx = new RegExp("&#x03;", "g");
        xml = xml.replace(regEx, "");
        try {
            xmlDoc = $.parseXML(xml);
        } catch (error) {
            xmlDoc = xml;
        }
        $(xmlDoc).find('interface').each(function () {
            var interfaceName, interfaceXml, dialerPoolNumber;
            interfaceName = $(this).find('Param:first').text();
            interfaceXml = this;
            if (interfaceName === interface1) {
                dialerPoolNumber = $(interfaceXml).find('DialerPoolNumber').text();
                if (dialerPoolNumber.length > 0) {
                    $(xmlDoc).find('interface').each(function () {
                        var dialerName = "";
                        dialerName = $(this).find('Param:first').text();
                        if ($(this).find('DialerPoolNumber').text() === dialerPoolNumber && dialerName.indexOf("Dialer") !== -1) {
                            dialer = dialerName;
                            interfaceXml = this;
                            return false;
                        }
                    });
                }
                return false;
            }
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "getAttachedDialer()");
        return dialer;
    }
    function populateWanRoutFields(ipRout) {
        //$('#ipv4and6Rout').show();
        $("#authentication").text($.i18n.prop("authentication"));
        if (ipRout === "wanipv4") {
            enableIpv6OE();
            $("#wanipv4").attr('checked', true);
        } else if (ipRout === "wanipv6") {
            $("#wanipv6").attr('checked', true);
            $('#ipv4and6Rout').show();
        } else if (ipRout === "wanipv4and6") {
            $("#wanipv4and6").attr('checked', true);
            // $('#interfaceAccordion h3 #ipv6authentication').parent().show();
            $('#ipv4and6Rout').show();
            $("#authentication").text('IPv4 ' + $.i18n.prop("authentication"));
            $("#interfaceAccordion h3 #ipv6authentication").parent().show();
        }
    }
    ;
    function populateData(interfaceDetails, isLoopback) {
        //consoleLogMethodDetailsStart("iAndC.js", "populateData()");
        $("#wanipv4").attr('checked', true);
        var descRows = [], patt1 = /_/, descVal;
        if (interfaceDetails.isPppoe) {
            $("#pppoe").prop("checked", true);
            //  $('#ipv6oeTr').show();
        } else {
            $("#pppoe").prop("checked", false);
            //  $('#ipv6oeTr').hide();
        }

        var interfaceName = interfaceDetails.interfaceName;
        if (interfaceName.indexOf("Serial") !== -1) {

            var sysncMode = interfaceDetails.syncMode;
            var sysncModeDoc = $('input:radio[name=syncMode]');
            sysncModeDoc.filter('[value=' + interfaceDetails.syncMode + ']').attr('checked', true);
            if (sysncMode === 'sync') {
                $('#syncEncTD').show();
                $('#asyncEncTD').hide();
                var syncEnc = $('input:radio[name=syncEnc]');
                var enc = interfaceDetails.encapsulation;
                if (enc === 'NA') {
                    enc = 'hdlc';
                }
                syncEnc.filter('[value=' + enc + ']').attr('checked', true);
                $('#clockRate').val(interfaceDetails.clockRate);
                onPppoeChangeForSerial(interfaceDetails.encapsulation, false);
            } else {
                $('#syncEncTD').hide();
                $('#asyncEncTD').show();
                var syncEnc = $('input:radio[name=asyncEnc]');
                var enc = interfaceDetails.encapsulation;
                if (enc === 'NA') {
                    enc = 'slip';
                }
                syncEnc.filter('[value=' + enc + ']').attr('checked', true);
                $('#clockRate').val(interfaceDetails.clockRate);
                onPppoeChangeForSerial(interfaceDetails.encapsulation, false);
            }
        } else if (!isLoopback) {
            onPppoeChange(false);
        }
        if (interfaceDetails.description.indexOf("WANDesc") != -1) {
            descRows = interfaceDetails.description.split(patt1);
            descVal = descRows[1];
            $('#description').val(descVal);
        } else {
            $('#description').val(interfaceDetails.description);
        }

        $('#vpi').val(interfaceDetails.vpi);
        $('#vci').val(interfaceDetails.vci);
        $('#ipv4Select').val(interfaceDetails.ipv4Type);
        $('#ipv4Select').change();
        $('#ipv4Address').val(interfaceDetails.ipv4Address);
        $('#ipv4Mask').val(interfaceDetails.ipv4Mask);
        if (interfaceDetails.ipv4Type === 'dhcppoolvalues') {
            $('#dhcpList').val(interfaceDetails.poolName);
            $('#dhcpList').change();
        }
        $('#ipv6Select').val(interfaceDetails.ipv6Type);
        $('#ipv6Select').change();
        $('#ipv6Prefix').val(interfaceDetails.ipv6Address);
        $('#ipv6Mask').val(interfaceDetails.ipv6Mask);
        $('#dhcpHostname').val(interfaceDetails.ipv4DhcpHostname);
        $('#encapId').val(interfaceDetails.dot1qKey);
        $('#wizardMtuSize').val(interfaceDetails.mtu);
        $('#wizardMssSize').val(interfaceDetails.adjustMss);
        $('#wizardMtuSizeipv6').val(interfaceDetails.ipv6mtu);
        $('#wizardMssSizeipv6').val(interfaceDetails.ipv6adjustMss);
        if (interfaceDetails.isEui64) {
            $("#eui64").prop("checked", true);
        } else {
            $("#eui64").prop("checked", false);
        }
        if (interfaceDetails.ipv6DhcpClient) {
            $("#dhcpClient").prop("checked", true);
            enableDisablePrefixName();
            $('#ipv6PrefixName').val(interfaceDetails.ipv6DhcpPrefixName);
        }
        if (interfaceDetails.isPap) {
            $('#papSelect').prop("checked", true);
        }
        if (interfaceDetails.isChap) {
            $('#chapSelect').prop("checked", true);
        }
        if (interfaceDetails.isIpv6Pap) {
            $('#papSelectipv6').prop("checked", true);
        }
        if (interfaceDetails.isIpv6Chap) {
            $('#chapSelectipv6').prop("checked", true);
        }
        if (interfaceDetails.isIpcpDns) {
            $('#ipcpdns').prop("checked", true);
        } else {
            $('#ipcpdns').prop("checked", false);
        }
        if (interfaceDetails.isIpv6IpcpDns) {
            $('#ipcpdnsipv6').prop("checked", true);
        } else {
            $('#ipcpdnsipv6').prop("checked", false);
        }
        if (interfaceDetails.isPap || interfaceDetails.isChap) {
            $('#papChapUsername').val(interfaceDetails.papChapUsername);
            $('#papChapPassword').val(interfaceDetails.papChapPassword);
            $('#confirmPassword').val(interfaceDetails.papChapPassword);
            $("#AuthUserName").html($.i18n.prop("AuthUserName") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#AuthPassword").html($.i18n.prop("AuthPassword") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#ConfirmPswd").html($.i18n.prop("ConfirmPswd") + '<span class="ccpexpCSSReplaceClass750">*</span>');
        }
        if (interfaceDetails.isIpv6Pap || interfaceDetails.isIpv6Chap) {
            $('#papChapUsernameipv6').val(interfaceDetails.ipv6PapChapUsername);
            $('#papChapPasswordipv6').val(interfaceDetails.ipv6PapChapPassword);
            $('#confirmPasswordipv6').val(interfaceDetails.ipv6PapChapPassword);
            $("#AuthUserName").html($.i18n.prop("AuthUserName") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#AuthPassword").html($.i18n.prop("AuthPassword") + '<span class="ccpexpCSSReplaceClass750">*</span>');
            $("#ConfirmPswd").html($.i18n.prop("ConfirmPswd") + '<span class="ccpexpCSSReplaceClass750">*</span>');
        }
        addValidationPAPCHAP("");
        addValidationPAPCHAP("ipv6");
        if (interfaceDetails.ipv4dialer.length > 0) {
            $('#ipv4Dialer').html("(" + interfaceDetails.ipv4dialer + ")");
        }
        if (interfaceDetails.ipv6dialer.length > 0) {
            $('#ipv6Dialer').html("(" + interfaceDetails.ipv6dialer + ")");
        }
        if (interfaceDetails.mediaType.length > 1) {
            $('#mediaTypeSelect').val(interfaceDetails.mediaType);
        }
        if (!isLoopback && ($('#ipv4Select').val() !== 'select')) {
            if (interfaceDetails.isIpNatOutside) {
                $("#enableNat").prop("checked", true);
            } else {
                $("#enableNat").prop("checked", false);
            }
        }

        if (!isLoopback && ($('#dhcpList').val() !== 'select')) {
            if (interfaceDetails.isIpNatOutside) {
                $("#enableNat").prop("checked", true);
            } else {
                $("#enableNat").prop("checked", false);
            }
        }
        var isCurrentPrimaryEmpty = isEmpty(currentPrimaryWanInterface);
        var isCurrentBackupEmpty = isEmpty(currentBackupWanInterface);
        if (isCurrentPrimaryEmpty && isCurrentBackupEmpty) {
            $("#PWANInfo").hide();
            $("#BWANInfo").hide();
            $("#bkpWanDetails").hide();
            $('#noInt').removeAttr('disabled');
            $('#primaryWanInt').removeAttr('disabled');
            $('#backupWanInt').attr('disabled', 'disabled');
            $('#noInt').prop("checked", true);
        }
        // when no interface is set as Primary/ on a fresh box - enabled = None, Primary on all WAN interfaces.
        if (!isEmpty(currentPrimaryWanInterface)) {
            if (interfaceDetails.isPrimary) {
                $("#PWANInfo").hide();
                $("#BWANInfo").hide();
                //alert(" Current Primary - "+currentPrimaryWanInterface +" this Interface "+interfaceDetails.isPrimary);
                $("#primaryWanInt").prop("checked", true);
                $("#bkpWanDetails").hide();
                if (!isEmpty(currentBackupWanInterface)) {
                    $('#noInt').attr('disabled', 'disabled');
                } else {
                $('#noInt').removeAttr('disabled');
                }
                $("#primaryWanInt").removeAttr('disabled');
                $('#backupWanInt').attr('disabled', 'disabled');
                //$('#enableNat').attr("checked","true");
                //$('#enableNat').attr("disabled","true");
                populateWanRoutFields(interfaceDetails.routIpvType);
            } else if (interfaceDetails.isBackup) {
                // $("#PWANInfo").html(currentPrimaryWanInterface+" is the Primary WAN interface");
                $("#PWANInfo").html(currentPrimaryWanInterface + " " + $.i18n.prop("isprimaryWANInterface"));
                $("#backupWanInt").prop("checked", true);
                $("#noInt").removeAttr('disabled');
                $("#primaryWanInt").attr('disabled', 'disabled');
                $('#backupWanInt').removeAttr('disabled');
                $("#bkpWanDetails").show();
                slaDetails = getSlaDetails();
                if (slaDetails.ipAddress.length > 0) {
                    $("#WANslaIpAddress").val(slaDetails.ipAddress);
                }
                if (slaDetails.interface1.length > 0) {
                    var re = new RegExp("/", "g");
                    var id = slaDetails.interface1.replace(re, "");
                    //$('#primaryWanIntfcSelect').val(id);
                }
                slaIP = slaDetails.ipAddress;
                if (slaIP == "") {
                    slaIP = "8.8.8.8";
                }
                //$('#enableNat').attr("checked","true");
                //$('#enableNat').attr("disabled","true");
                populateWanRoutFields(interfaceDetails.routIpvType);
            } else if ((interfaceDetails.isPrimary === false) && (interfaceDetails.isBackup === false)) {
                //$("#PWANInfo").html(currentPrimaryWanInterface+" is the Primary WAN interface");
                $("#PWANInfo").html(currentPrimaryWanInterface + " " + $.i18n.prop("isprimaryWANInterface"));
                $("#PWANInfo").show();
                $('#noInt').prop("checked", true);
                $('#primaryWanInt').attr('disabled', 'disabled');
                $('#backupWanInt').removeAttr('disabled');
                $("#bkpWanDetails").hide();
                var isCurrentBackWann = isEmpty(currentBackupWanInterface);
                if (!(isCurrentBackWann)) {
                    // || (currentBackupWanInterface!="") || (currentBackupWanInterface!==null) || (currentBackupWanInterface!==undefined)) {
                    $("#BWANInfo").html(currentBackupWanInterface + " is the Backup WAN interface");
                    $("#BWANInfo").show();
                    $('#primaryWanInt').attr('disabled', 'disabled');
                    $('#backupWanInt').attr('disabled', 'disabled');
                }


            }
            // if cellular configured
            if ((currentPrimaryWanInterface.toLowerCase().indexOf('cellular') > -1 || currentPrimaryWanInterface.toLowerCase().indexOf('cellular') > -1) && !isNano) {
                $("#PWANInfo").html($.i18n.prop("cellularAsBackupValidation"));
                //"Please unconfigure Cellular as Primary/Backup to set this interface as Primary/Backup");
                $("#PWANInfo").html($.i18n.prop("unconfigCellular"));
                $("#PWANInfo").show();
                $("#BWANInfo").hide();
                $('#noInt').prop("checked", true);
                $('#backupWanInt').attr('disabled', 'disabled');
                $('#primaryWanInt').attr('disabled', 'disabled');
            }
        }
        /*if(interfaceDetails.isPrimary){
         $("#PWANInfo").hide();
         $("#BWANInfo").hide();
         $("#bkpWanDetails").hide();
         alert(" Current Primary - "+currentPrimaryWanInterface +" this Interface "+interfaceDetails.isPrimary);
         $("#primaryWanInt").prop("checked", true);
         $("#bkpWanDetails").hide();
         $("#primaryWanInt").attr('enabled','enabled');
         $('#backupWanInt').attr('disabled','disabled');
         if (currentBackupWanInterface == "") {
         $('#noInt').attr('disabled','disabled');
         }
         else{
         $('#noInt').attr('enabled','enabled');
         }
         }
         if(interfaceDetails.isBackup){
         $("#PWANInfo").html(currentPrimaryWanInterface+" is the Primary WAN interface");
         $("#backupWanInt").prop("checked", true);
         $("#noInt").attr('enabled','enabled');
         if (currentPrimaryWanInterface == ""){
         $("#primaryWanInt").attr('enabled','enabled');
         }else{
         $("#primaryWanInt").attr('disabled','disabled');
         }
         $("#bkpWanDetails").show();
         slaDetails = getSlaDetails();
         if(slaDetails.ipAddress.length > 0){
         $("#slaIpAddress").val(slaDetails.ipAddress);
         }
         if(slaDetails.interface.length > 0){
         var re = new RegExp("/", "g");
         var id = slaDetails.interface.replace(re, "");
         //$('#primaryWanIntfcSelect').val(id);
         }
         slaIP = slaDetails.ipAddress;
         if (slaIP=="") {
         slaIP = "74.125.39.99";
         }
         }
         if((!interfaceDetails.isPrimary) && (!interfaceDetails.isBackup) && (currentPrimaryWanInterface!="")){
         $('#noInt').attr('enabled','enabled');
         $('#noInt').prop("checked", true);
         if (currentBackupWanInterface == "") {
         $('#backupWanInt').attr('enabled','enabled');
         }
         else{
         $('#backupWanInt').attr('disabled','disabled');
         }
         }*/

        if (licenseCheck === true || iosk9check == "SecurityEnable") {
            //code

            var checkZoneconfig = [];
            var checkFlagMoveToZone = 0;
            checkZoneconfig.length = 0;
            checkZoneconfig = configureFirewall.getInterfacesInZone("WAN");
            $('#moveToWanZone').attr("primarywanconfigured", "NoPrimary");
            $('#moveToWanZone').attr("backupwanconfigured", "NoBackup");
            for (i = 0; i < checkZoneconfig.length; i++) {
                if ((interfaceDetails.interfaceName === checkZoneconfig[i])) {
                    checkFlagMoveToZone = 1;
                } else if (interfaceDetails.ipv4dialer === checkZoneconfig[i] || interfaceDetails.ipv6dialer === checkZoneconfig[i]) {
                    checkFlagMoveToZone = 1;
                }
                if (interfaceDetails.isPrimary) {
                    if (currentPrimaryWanInterface === checkZoneconfig[i]) {
                        $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
                    } else if (interfaceDetails.ipv4dialer === checkZoneconfig[i] || interfaceDetails.ipv6dialer === checkZoneconfig[i]) {
                        $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
                    }
                    if (currentBackupWanInterface !== "") {
                        var backupWan = getEditInterfaceDetails(currentBackupWanInterface);
                        if (currentBackupWanInterface === checkZoneconfig[i]) {
                            $('#moveToWanZone').attr("backupwanconfigured", currentBackupWanInterface);
                        } else if (backupWan.ipv4dialer === checkZoneconfig[i] || backupWan.ipv6dialer === checkZoneconfig[i]) {
                            $('#moveToWanZone').attr("backupwanconfigured", currentBackupWanInterface);
                        }
                    }

                } else if (interfaceDetails.isBackup) {
                    if (currentBackupWanInterface === checkZoneconfig[i]) {
                        $('#moveToWanZone').attr("backupwanconfigured", currentBackupWanInterface);
                    } else if (interfaceDetails.ipv4dialer === checkZoneconfig[i] || interfaceDetails.ipv6dialer === checkZoneconfig[i]) {
                        $('#moveToWanZone').attr("backupwanconfigured", currentBackupWanInterface);
                }
                    if (currentPrimaryWanInterface !== "") {
                        var primaryWan = getEditInterfaceDetails(currentPrimaryWanInterface);
                        if (currentPrimaryWanInterface === checkZoneconfig[i]) {
                    $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);

                        } else if (primaryWan.ipv4dialer === checkZoneconfig[i] || primaryWan.ipv6dialer === checkZoneconfig[i]) {
                            $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
                        }
                    }
                } else {
                    if (currentPrimaryWanInterface !== "") {
                        var primaryWan = getEditInterfaceDetails(currentPrimaryWanInterface);
                        if (currentPrimaryWanInterface === checkZoneconfig[i]) {
                    $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
                        } else if (primaryWan.ipv4dialer === checkZoneconfig[i] || primaryWan.ipv6dialer === checkZoneconfig[i]) {
                            $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
                        }
                    }
                }
//                var currentPrimaryWanIpv4Dialer = "";
//                var currentPrimaryWanIpv6Dialer = "";
//                if (currentPrimaryWanInterface === interfaceDetails.interfaceName) {
//                    currentPrimaryWanIpv4Dialer = interfaceDetails.ipv4dialer;
//                    currentPrimaryWanIpv6Dialer = interfaceDetails.ipv6dialer;
//                }
//                if (currentPrimaryWanInterface === checkZoneconfig[i]) {
//                    $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
//                } else if (currentPrimaryWanIpv4Dialer === checkZoneconfig[i] || currentPrimaryWanIpv6Dialer === checkZoneconfig[i]) {
//                    //code
//                    //if(interfaceDetails.dialer==checkZoneconfig[i]){
//                    $('#moveToWanZone').attr("primarywanconfigured", currentPrimaryWanInterface);
//                    //}
//                }
//                var currentBackupWanIpv4Dialer = "";
//                var currentBackupWanIpv6Dialer = "";
//                if (currentBackupWanInterface === interfaceDetails.interfaceName) {
//                    currentBackupWanIpv4Dialer = interfaceDetails.ipv4dialer;
//                    currentBackupWanIpv6Dialer = interfaceDetails.ipv6dialer;
//                }
//                if (currentBackupWanInterface == checkZoneconfig[i]) {
//                    $('#moveToWanZone').attr("backupwanconfigured", currentBackupWanInterface);
//                } else if (currentBackupWanIpv4Dialer === checkZoneconfig[i] || currentBackupWanIpv6Dialer === checkZoneconfig[i]) {
//                    //code
//                    //if(interfaceDetails.dialer==checkZoneconfig[i]){
//                    $('#moveToWanZone').attr("primarywanconfigured", currentBackupWanInterface);
//                    //}
                    //}
            }
            if (checkFlagMoveToZone == 1) {
                $("#moveToWanZone").attr("checked", true);
                $("#moveToWanZone").attr("checkFlag", "configured");
            } else {
                $("#moveToWanZone").attr("checked", false);
                $("#moveToWanZone").attr("checkFlag", "notconfigured");
            }

            $("#moveToWanZone").attr("interfacename", interfaceDetails.interfaceName);
            if (($("#moveToWanZone").attr("interfacename") == (currentPrimaryWanInterface)) || ($("#moveToWanZone").attr("interfacename") == currentBackupWanInterface)) {
                //code
                if (licenseCheck === true || iosk9check == "SecurityEnable") {
                    //code
                    $("#moveToWandiv").show();
                } else {
                    $("#moveToWandiv").hide();
                }

            } else {
                $("#moveToWandiv").hide();
            }
            var ipsflagArray = [];
            ipsflagArray = configureIPS.ipsInterfaceDetails();
            if (ipsflagArray.length > 0)
            {
                $("#moveToWanZone").attr("checkFlagIps", "configuredIps");
            } else {
                $("#moveToWanZone").attr("checkFlagIps", "notconfiguredIps");
            }

        } else {
            $("#moveToWanZone").hide();
            $("#moveToWandiv").hide();
        }
        $("#bridgeIpAddress").rules("remove");
        $("#bridgeSubnet").rules("remove");
        //   enableIpv6OE();
        if (!isEmpty(interfaceDetails.bvino)) {
            $('#bviInterfaceNameTr').show();
            $('#BVIInfo').show();
            var myBvi = $.i18n.prop('BVIInfo')
            myBvi = myBvi.replace('$bvino$', interfaceDetails.bvino);
            $('#BVIInfo').text(myBvi);
        } else {
            $('#BVIInfo').hide();
            $('#bviInterfaceNameTr').hide();
        }
        availableForBVI = getConfigurableBVIInterfaces(interfaceDetails);
        if (interfaceDetails.isBVI) {
            $("#ipv6oe").prop("checked", true);
            $("#bridge").prop("checked", true);
            var bviInterface = interfaceDetails.bviInterfaces;
            //bviInterface.split(",");
            var selectedBvi = {};
            _.each(bviInterface.split(","), function (intName) {
                selectedBvi[intName] = true;
            });
            enableIpv6OE(selectedBvi);
            $('#bridgeIpAddress').val(interfaceDetails.bviipv4Address);
            $('#bridgeSubnet').val(interfaceDetails.bviipv4Mask);
            $('#ipv6PortList').val(interfaceDetails.ipv6BviInterface);
        } else if (interfaceDetails.isDHCP) {
            $("#ipv6oe").prop("checked", true);
            $("#dhcp").prop("checked", true);
            enableIpv6OE(selectedBvi);
        }
//        if (interfaceDetails.dhcpInterfaces.length > 0) {
//            $("#ipv6oe").prop("checked", true);
//            $("#dhcp").prop("checked", true);
//            var dhcpInterface = interfaceDetails.dhcpInterfaces;
//            //bviInterface.split(",");
//            var selectedhcp = {};
//            _.each(dhcpInterface.split(","), function (intName) {
//                selectedhcp[intName] = true;
//            });
//            enableIpv6OE(selectedhcp);
//        }
        //consoleLogMethodDetailsEnd("iAndC.js", "populateData()");
    }


    function populateCellularData(interfaceDetails) {
        //consoleLogMethodDetailsStart("iAndC.js", "populateCellularData()");
        var checkZoneconfig = [];
        var checkFlagMoveToZone = 0;
        checkZoneconfig.length = 0;
        try {
            checkZoneconfig = configureFirewall.getInterfacesInZone("WAN");
        } catch (error) {
            errorLogInConsole('No Security enabled');
        }
        $('#moveToWan').attr("primarywanconfigured", "NoPrimary");
        $('#moveToWan').attr("backupwanconfigured", "NoBackup");
        for (i = 0; i < checkZoneconfig.length; i++) {
            if ((interfaceDetails.interfaceName == checkZoneconfig[i])) {
                checkFlagMoveToZone = 1;
            } else if (interfaceDetails.ipv4dialer == checkZoneconfig[i]) {
                checkFlagMoveToZone = 1;
            }
            if (currentPrimaryWanInterface == checkZoneconfig[i]) {
                $('#moveToWan').attr("primarywanconfigured", currentPrimaryWanInterface);

            } else if (getEditInterfaceDetails(currentPrimaryWanInterface).ipv4dialer == checkZoneconfig[i]) {
                //code
                //if(interfaceDetails.dialer==checkZoneconfig[i]){
                $('#moveToWan').attr("primarywanconfigured", currentPrimaryWanInterface);
                //}
            }
            if (currentBackupWanInterface == checkZoneconfig[i]) {
                $('#moveToWan').attr("backupwanconfigured", currentBackupWanInterface);
            } else if (getEditInterfaceDetails(currentBackupWanInterface).ipv4dialer == checkZoneconfig[i]) {
                //code
                //if(interfaceDetails.dialer==checkZoneconfig[i]){
                $('#moveToWan').attr("primarywanconfigured", currentBackupWanInterface);
                //}
            }
        }
        if (checkFlagMoveToZone == 1) {
            $("#moveToWan").attr("checked", true);
            $("#moveToWan").attr("checkFlag", "configured");
        } else {
            $("#moveToWan").attr("checked", false);
            $("#moveToWan").attr("checkFlag", "notconfigured");
        }

        $("#moveToWan").attr("interfacename", interfaceDetails.interfaceName);
        if (($("#moveToWan").attr("interfacename") == (currentPrimaryWanInterface)) || ($("#moveToWan").attr("interfacename") == currentBackupWanInterface)) {
            //code
            if (licenseCheck) {
                //code
                $("#moveWanDiv").show();
            } else {
                $("#moveWanDiv").hide();
            }

        } else {
            $("#moveWanDiv").hide();
        }
        var ipsflagArray = [];
        ipsflagArray = configureIPS.ipsInterfaceDetails();
        if (ipsflagArray.length > 0)
        {
            $("#moveToWan").attr("checkFlagIps", "configuredIps");
        } else {
            $("#moveToWan").attr("checkFlagIps", "notconfiguredIps");
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "populateCellularData()");
    }

    function shrunUpdate() {
        //consoleLogMethodDetailsStart("iAndC.js", "shrunUpdate()");
        //code var xml, xmlDoc, interfaceXml, thisInterface, intDescription= "", returnThis = "",arrPB=[];
        var xml;
        //var xmlDoc;
        if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
        }
        xml = shRunFormatOutput;

        shrunCliOutput = xml;
        //consoleLogMethodDetailsEnd("iAndC.js", "shrunUpdate()");
    }

    function getPrimaryWanInterface(xmlOut, id, cellularFlag) {
        //consoleLogMethodDetailsStart("iAndC.js", "getPrimaryWanInterface()");
        var xml, xmlDoc, interfaceXml, thisInterface, intDescription = "", arrPB = [];
        xml = xmlOut;
        //var returnThis = "";
        globaldialerPrimary = "";
        globaldialerBackup = "";
        var isPppoecheckPrimary = false, isPppoecheckBackup = false;
        var dialerPoolNumbercheck = "", dialerGroupNumbercheck = "";
        //var isPppoecheck = false;
        if (xml.indexOf("Building configuration...") !== -1) {
            xml = xml.substring(25, xml.length);
            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
        }
        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
        var regEx = new RegExp("&#x03;", "g");
        xml = xml.replace(regEx, "");
        try {
            xmlDoc = $.parseXML(xml);
        } catch (error) {
            xmlDoc = xml;
        }
        $(xmlDoc).find('interface').each(function () {
            thisInterface = $(this).find('Param:first').text();
            interfaceXml = this;
            //alert("Interface- "+this);
            intDescription = $(interfaceXml).find('description').text();
            //if(thisInterface.indexOf("Cellular") == -1){
            if (intDescription.indexOf("PrimaryWANDesc") !== -1) {
                if (thisInterface.toLowerCase().indexOf("dialer") > -1) {
                    //code
                    globaldialerPrimary = thisInterface;
                    //dot1qKey = $(interfaceXml).find('IEEEVLANID').text();

                } else {

                    dialerPoolNumbercheck = $(interfaceXml).find('DialerPoolNumber').text();
                    dialerGroupNumbercheck = $(this).find('DialerListNumber').text();
                    if (dialerPoolNumbercheck.length > 0) {
                        $(xmlDoc).find('interface').each(function () {
                            var interName = "";
                            interName = $(this).find('Param:first').text();
                            if ($(this).find('DialerPoolNumber').text() === dialerPoolNumbercheck && interName.indexOf("Dialer") !== -1) {
                                //interfaceDetails.ipv4dialer = interName;
                                //interfaceDetails.dialerGroupNumber =  $(this).find('DialerListNumber').text();
                                isPppoecheckPrimary = true;
                                //interfaceXml = this;
                                return false;
                            }
                        });
                    }
                    currentPrimaryWanInterface = thisInterface;
                    currentPrimaryWanInterfaceDesc = intDescription;
                }
                //arrPB.push(thisInterface);
            }
            if (intDescription.indexOf("BackupWANDesc") != -1) {
                if (thisInterface.toLowerCase().indexOf("dialer") > -1) {
                    //code
                    globaldialerBackup = thisInterface;
                } else {
                    dialerPoolNumbercheck = $(interfaceXml).find('DialerPoolNumber').text();
                    dialerGroupNumbercheck = $(this).find('DialerListNumber').text();
                    if (dialerPoolNumbercheck.length > 0) {
                        $(xmlDoc).find('interface').each(function () {
                            var interName = "";
                            interName = $(this).find('Param:first').text();
                            if ($(this).find('DialerPoolNumber').text() === dialerPoolNumbercheck && interName.indexOf("Dialer") !== -1) {
                                //interfaceDetails.dialer = interName;
                                //interfaceDetails.dialerGroupNumber =  $(this).find('DialerListNumber').text();
                                isPppoecheckBackup = true;
                                //interfaceXml = this;
                                return false;
                            }
                        });

                    }

                    currentBackupWanInterface = thisInterface;
                    currentBackupWanInterfaceDesc = intDescription;
                    //arrPB.push(thisInterface);
                }
            }
            //}
        });
        $(interfaceXml).find('ip').each(function () {
            $(this).find('nat').each(function () {
                $(this).find('inside').each(function () {
                    natEnabledFlag = true;
                });
                $(this).find('outside').each(function () {
                    natEnabledFlag = true;
                });
            });
        });
        if (!isPppoecheckPrimary) {
            //code
            globaldialerPrimary = "";
        }
        if (!isPppoecheckBackup) {
            //code
            globaldialerBackup = "";
        }
        if (currentPrimaryWanInterface != "") {
            //code
            arrPB.push(currentPrimaryWanInterface);
        }
        if (currentBackupWanInterface != "") {
            //code
            arrPB.push(currentBackupWanInterface);
        }
        var intnameprop = "";
        intnameprop = $("#" + id).attr("interfacename");
        if (intnameprop == undefined) {
            //code
            intnameprop = "";
        }
        var primaryWanconfig = $("#" + id).attr("primarywanconfigured");
        var backupWanconfig = $("#" + id).attr("backupwanconfigured");
        for (var i = 0; i < arrPB.length; i++) {
            if (arrPB[i].toString().trim().indexOf(".") > -1) {
                if (arrPB[i].toString().trim().indexOf(intnameprop.toString()) !== -1) {
                    //alert(intnameprop.indexOf(arrPB[i]));
                    if ($("#" + id).is(":checked")) {
                        //code
                    } else {
                        if (!cellularFlag) {
                            arrPB = arrPB.slice(0, i);
                        } else {
                            arrPB.length = 0;
                        }
                    }
                } else {
                    if ((primaryWanconfig === arrPB[i].toString().trim()) || (backupWanconfig === arrPB[i].toString().trim())) {
                        //code
                    } else {
                        arrPB = arrPB.slice(0, i);
                    }
                }

            } else {
                if (arrPB[i].toString().trim() === intnameprop.toString()) {
                    //alert(intnameprop.indexOf(arrPB[i]));
                    if ($("#" + id).is(":checked")) {
                        //code
                    } else {
                        if (!cellularFlag) {
                            arrPB = arrPB.slice(0, i);
                        } else {
                            arrPB.length = 0;
                        }
                    }
                } else {
                    if ((primaryWanconfig === arrPB[i].toString().trim()) || (backupWanconfig === arrPB[i].toString().trim())) {
                        //code
                    } else {
                        arrPB = arrPB.slice(0, i);
                    }

                }
            }

        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getPrimaryWanInterface()");
        return arrPB;

    }

//Checks if Primary and Backup WAN interfaces are configured and states the WAN interface names if configured.
    function loadWanInterfaceSummary() {
        //consoleLogMethodDetailsStart("iAndC.js", "loadWanInterfaceSummary()");
        if (currentPrimaryWanInterface !== "") {
            $("#primaryPort").css("background", "#26c977");
            if (globaldialerPrimary != "") {
                //code
                // $("#primaryStat").text("Primary WAN: "+currentPrimaryWanInterface+"("+globaldialerPrimary+")");
                $("#primaryStat").text($.i18n.prop("primaryWAN") + ": " + currentPrimaryWanInterface + "(" + globaldialerPrimary + ")");
            } else {
                //$("#primaryStat").text("Primary WAN: "+currentPrimaryWanInterface);
                $("#primaryStat").text($.i18n.prop("primaryWAN") + currentPrimaryWanInterface);
            }

        } else {
            $("#primaryPort").css("background", "#95a39c");
            //$("#primaryStat").text("Primary WAN: Not Configured");
            $("#primaryStat").text($.i18n.prop("primaryWAN") + $.i18n.prop("noConfig"));
            //"Primary WAN: Not Configured"
        }
        if (currentBackupWanInterface !== "") {
            $("#backupPort").css("background", "#26c977");
            if (globaldialerBackup != "") {
                //code
                //  $("#backupStat").text("Backup WAN: "+currentBackupWanInterface+"("+globaldialerBackup+")");
                $("#backupStat").text($.i18n.prop("backupWAN") + ": " + currentBackupWanInterface + "(" + globaldialerBackup + ")");
            } else {

                //$("#backupStat").text("Backup WAN: "+currentBackupWanInterface);
                $("#backupStat").text($.i18n.prop("backupWAN") + ": " + currentBackupWanInterface);
            }
        } else {
            $("#backupPort").css("background", "#95a39c");
            //$("#backupStat").text("Backup WAN: Not Configured");
            $("#backupStat").text($.i18n.prop("backupWAN") + $.i18n.prop("noConfig"));
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "loadWanInterfaceSummary()");
    }
//    function getEditSupportedInterfaces() {
//        //consoleLogMethodDetailsStart("iAndC.js", "getEditSupportedInterfaces()");
//        var xml, regEx, xmlDoc;
//        //var interfaceName, interfaceType;
//        if (!shRunFormatLatest) {
//            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
//            shRunFormatLatest = true;
//        }
//        xml = shRunFormatOutput;
//
//        if (xml.indexOf("Building configuration...") !== -1) {
//            xml = xml.substring(25, xml.length);
//            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
//        }
//        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
//        regEx = new RegExp("&#x03;", "g");
//        xml = xml.replace(regEx, "");
//        try {
//            xmlDoc = $.parseXML(xml);
//        } catch (error) {
//            xmlDoc = xml;
//        }
//        editableInterfaces = [];
//        $(xmlDoc).find('interface').each(function () {
//            var interfaceName;
//            //var vpiVci, interfaceXml;
//            interfaceName = $(this).find('Param:first').text();
//            try {
//                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName);
//            } catch (e) {
//                isEmptyBlock = true;
//            }
//            if (editInterfaceType === 1 || editInterfaceType === 4 || editInterfaceType === 2 || editInterfaceType === 539 || editInterfaceType === 538 || editInterfaceType === 503 || editInterfaceType === 504 || editInterfaceType === 532 || editInterfaceType === 1012) {
//                if ($.inArray(" " + interfaceName, editableInterfaces) === -1) {
//                    editableInterfaces.push(" " + interfaceName);
//                }
//            }
//        });
//        editableInterfaces.push(" Cellular");
//        editableInterfaces.push(" DSL");
//        editableInterfaces.push(" Loopback");
//        editableInterfaces.push(" Serial");
//        editableInterfaces.push(" VLAN");
//        //$('#SupportedInterfaces').html(" Edit Supported Interfaces: "+editableInterfaces);
//        $('#SupportedInterfaces').html($.i18n.prop("editSupportedInterface") + ": " + editableInterfaces);
//        //consoleLogMethodDetailsEnd("iAndC.js", "getEditSupportedInterfaces()");
//    }
    function setPrimaryWanInterface(interfaceName, primaryWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setPrimaryWanInterface()");
        arrDesc = [];
        var output = "";
        intDesc = "PrimaryWANDesc_" + $("#description").val();
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        if ((currentPrimaryWanInterface !== "") && (primaryWanInterface !== currentPrimaryWanInterface)) {
            var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
            var intDescSplit = currentPrimaryWanInterfaceDesc.split("_")[1];
            intDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
            if (intDetails.isPppoe) {
                var ipv4Dialer = intDetails.ipv4dialer;
                var ipv6Dialer = intDetails.ipv6dialer;
                if (intDetails.isPpp) {
                    ipv4Dialer = intDetails.interfaceName;
                    ipv6Dialer = intDetails.interfaceName;
                }
                //     var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: intDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                //     output = output + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
            } else {
                arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "iprout", value: intDetails.routIpvType});
                output = output + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
            }
            if (intDescSplit == "" || intDescSplit == undefined) {
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
            }
        }
        var iprout = $("input[type='radio'][name='waniptype']:checked").val();
        arrDesc.push({name: "interfaceName", value: interfaceName}, {name: "description", value: intDesc});
        arrDesc.push({name: "iprout", value: iprout});
        if (!isEmpty(currentBackupWanInterface)) {
            var backupDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
            arrDesc.push({name: "isBackupExist", value: true});
            setPrimaryAndSecondryInterfaceValuesToArray(undefined, backupDetails, arrDesc);
        } else {
            arrDesc.push({name: "isBackupExist", value: false});
        }
        
        var isPppoe = $('#pppoe').is(':checked');
        if (!isPppoe) {
            arrDesc.push({name: "ipv4DialerOrInterface", value: interfaceName});
            arrDesc.push({name: "ipv6DialerOrInterface", value: interfaceName});
        }
        output = output + deviceCommunicator.configureCommandsFrom_Template("CreatePrimaryWanInterface.txt", arrDesc, preview);

        currentPrimaryWanInterface = interfaceName;
        currentPrimaryWanInterfaceDesc = intDesc;
        descRows = intDesc.split(patt1);
        $("#description").val(descRows[1]);
        interfaceDetails.description = $("#description").val();
        //consoleLogMethodDetailsEnd("iAndC.js", "setPrimaryWanInterface()");
        return output;
    }

    function setPrimaryWanInterfacewithPPPoE(interfaceName, primaryWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setPrimaryWanInterfacewithPPPoE()");
        arrDesc = [];
        var output = "";
        intDesc = "PrimaryWANDesc_" + $("#description").val();
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        if ((currentPrimaryWanInterface != "") && (primaryWanInterface != currentPrimaryWanInterface)) {
            var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
            var intDescSplit = currentPrimaryWanInterfaceDesc.split("_")[1];
            intDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
            if (intDetails.isPppoe) {
                var ipv4Dialer = intDetails.ipv4dialer;
                var ipv6Dialer = intDetails.ipv6dialer;
                if (intDetails.isPpp) {
                    ipv4Dialer = intDetails.interfaceName;
                    ipv6Dialer = intDetails.interfaceName;
                }
                //     var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: intDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                //     output = output + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview) + "\n";
            } else {
                arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview) + "\n";
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "iprout", value: intDetails.routIpvType});
                output = output + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview) + "\n";
            }
            if (intDescSplit == "" || intDescSplit == undefined) {
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview) + "\n";
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview) + "\n";
            }
            //arrDel.push({name:"primaryInterface",value:"Dialer"+dialerTag});
            //response = deviceCommunicator.configureCommandsFromTemplate("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
        }

        arr.push({name: "interfaceName", value: primaryWanInterface});
        if (!isEmpty(currentBackupWanInterface)) {
            var backupDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
            arr.push({name: "isBackupExist", value: true});
            setPrimaryAndSecondryInterfaceValuesToArray(undefined, backupDetails, arr);
        } else {
            arr.push({name: "isBackupExist", value: false});
        }
        if (interfaceName.indexOf("Serial") === -1) {
            console.log(JSON.stringify(arr));
            output = output + deviceCommunicator.configureCommandsFrom_Template("CreatePrimaryWanInterfacewithPPPoE.txt", arr, preview) + "\n";
        } else {
            output = output + deviceCommunicator.configureCommandsFrom_Template("CreatePrimWanIntwithPPPoENoDialer.txt", arr, preview) + "\n";
        }
        arrDesc.push({name: "interfaceName", value: primaryWanInterface}, {name: "description", value: intDesc});
        output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDesc, preview) + "\n";


        currentPrimaryWanInterface = interfaceName;
        currentPrimaryWanInterfaceDesc = intDesc;
        descRows = intDesc.split("_");
        $("#description").val(descRows[1]);
        interfaceDetails.description = $("#description").val();
        //consoleLogMethodDetailsEnd("iAndC.js", "setPrimaryWanInterfacewithPPPoE()");
        return output;

    }
    function setPrimaryAndSecondryInterfaceValuesToArray(primaryInterfaceDetails, secondaryInterfaceDetails, array) {
        if (primaryInterfaceDetails !== undefined) {
            array.push({name: "isPrimaryDHCP", value: primaryInterfaceDetails.isDHCP});
            array.push({name: "primaryRout", value: primaryInterfaceDetails.routIpvType});
            array.push({name: "primaryInterface", value: primaryInterfaceDetails.interfaceName});
            var primaryipv4OrDialer = primaryInterfaceDetails.interfaceName;
            var primaryiv6OrDialer = primaryInterfaceDetails.interfaceName;
            if (primaryInterfaceDetails.routIpvType === "wanipv4and6" && primaryInterfaceDetails.isPppoe) {
                primaryipv4OrDialer = primaryInterfaceDetails.ipv4dialer;
                primaryiv6OrDialer = primaryInterfaceDetails.ipv6dialer;
            } else if (primaryInterfaceDetails.routIpvType === "wanipv4" && primaryInterfaceDetails.isPppoe) {
                primaryipv4OrDialer = primaryInterfaceDetails.ipv4dialer;
            } else if (primaryInterfaceDetails.routIpvType === "wanipv6" && primaryInterfaceDetails.isPppoe) {
                primaryiv6OrDialer = primaryInterfaceDetails.ipv6dialer;
            }
            array.push({name: "primaryipv4Dialer", value: primaryipv4OrDialer});
            array.push({name: "primaryipv6Dialer", value: primaryiv6OrDialer});
        }
        if (secondaryInterfaceDetails !== undefined) {
            array.push({name: "isBackupDHCP", value: secondaryInterfaceDetails.isDHCP});
            array.push({name: "backupRout", value: secondaryInterfaceDetails.routIpvType});
            array.push({name: "backupInterface", value: secondaryInterfaceDetails.interfaceName});
            var secondaryipv4OrDialer = secondaryInterfaceDetails.interfaceName;
            var secondaryiv6OrDialer = secondaryInterfaceDetails.interfaceName;
            if (secondaryInterfaceDetails.routIpvType === "wanipv4and6" && secondaryInterfaceDetails.isPppoe) {
                secondaryipv4OrDialer = secondaryInterfaceDetails.ipv4dialer;
                secondaryiv6OrDialer = secondaryInterfaceDetails.ipv6dialer;
            } else if (secondaryInterfaceDetails.routIpvType === "wanipv4" && secondaryInterfaceDetails.isPppoe) {
                secondaryipv4OrDialer = secondaryInterfaceDetails.ipv4dialer;
            } else if (secondaryInterfaceDetails.routIpvType === "wanipv6" && secondaryInterfaceDetails.isPppoe) {
                secondaryiv6OrDialer = secondaryInterfaceDetails.ipv6dialer;
            }
            var slaDetails = getSlaDetails();
            array.push({name: "backupipsla", value: slaDetails.ipAddress});
            array.push({name: "backupipv4Dialer", value: secondaryipv4OrDialer});
            array.push({name: "backupipv6Dialer", value: secondaryiv6OrDialer});
        }

    }
    function setBackupWanInterface(interfaceName, backupWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setBackupWanInterface()");
        var output = "";
        arrDesc = [];
        intDesc = "BackupWANDesc_" + $("#description").val();
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        WANslaIP = $('#WANslaIpAddress').val();
        if (WANslaIP == "") {
            WANslaIP = "8.8.8.8";
        }
        slaDetails = getSlaDetails();
        if (slaDetails.interface1.length != 0) {
            arr.push({name: "slaIP", value: slaDetails.ipAddress});
            output = output + deviceCommunicator.configureCommandsFromTemplate("noIpSla.txt", arrDesc, preview);
        }
        var backupInt = interfaceDetails;//getEditInterfaceDetails(currentBackupWanInterface);
        var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
        if ((currentBackupWanInterface != "") && (currentBackupWanInterface != backupWanInterface)) {
            var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}];
            var intDescSplit = currentBackupWanInterfaceDesc.split("_")[1];

            //   if (intDetails.isPppoe) {
            var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}];
            pppoeArr.push({name: "slaIP", value: slaDetails.ipAddress});
            //3    setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, backupInt, pppoeArr);
            //    output = output + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview);
            //  }
//      else {
//        arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
//        arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
//        arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
//        output = output + deviceCommunicator.configureCommandsFromTemplate("deleteBackupInterfaceConfigs.txt", arrDel, preview);
//      }
            if (intDescSplit == "" || intDescSplit == undefined) {
                output = output + deviceCommunicator.configureCommandsFrom_Template("deleteDescription.txt", arr, preview);
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arr, preview);
            }
        }
        //var resp = deviceCommunicator.getExecCmdOutput("show running-config | include ip route");

        arrDesc.push({name: "interfaceName", value: backupWanInterface}, {name: "description", value: intDesc});
        output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDesc, preview);
//    arrDesc.push({name: "interface", value: backupWanInterface});
//    if (primaryInt.dialer.length > 0) {
//      arrDesc.push({name: "primaryInterface", value: primaryInt.dialer});
//      arr.push({name: "primaryRouteInterface", value: primaryInt.dialer});
//      arr.push({name: "routeParam", value: primaryInt.dialer});
//    } else {
//      arrDesc.push({name: "primaryInterface", value: currentPrimaryWanInterface});
//      arr.push({name: "primaryRouteInterface", value: currentPrimaryWanInterface});
//      arr.push({name: "routeParam", value: currentPrimaryWanInterface});
//
//    }
        //  var iprout = $("input[type='radio'][name='waniptype']:checked").val();
        arr.push({name: "slaIP", value: WANslaIP});
        setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, arr);
        output = output + deviceCommunicator.configureCommandsFrom_Template("CreateBackupWanInterface.txt", arr, preview);
        /*if ((resp.indexOf("track 1") === -1) && (resp.indexOf(primaryInt.dialer)!== -1 || resp.indexOf(currentPrimaryWanInterface)!== -1)) {
         response = response + deviceCommunicator.configureCommandsFromTemplate("deleteRedundantRoute.txt", arr, preview);
         }*/
        currentBackupWanInterface = interfaceName;
        currentBackupWanInterfaceDesc = intDesc;
        descRows = intDesc.split(patt1);
        $("#description").val(descRows[1]);
        // so that user can only see the user given desc and not the "WANDesc" prefix tags
        interfaceDetails.description = $("#description").val();
        return output;
        //consoleLogMethodDetailsEnd("iAndC.js", "setBackupWanInterface()");
    }

    function setBackupWanInterfacewithPPPoE(interfaceName, backupWanInterface, interfaceDetails, arr, preview) {
        return setBackupWanInterface(interfaceName, backupWanInterface, interfaceDetails, arr, preview);
    }


    function setATMPrimaryWanInterface(interfaceName, primaryWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setATMPrimaryWanInterface()");
        arrDesc = [];
        var outPut = "";
        intDesc = "PrimaryWANDesc_" + $("#description").val();
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        if ((currentPrimaryWanInterface != "") && (currentPrimaryWanInterface != interfaceName)) {
            var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
            var intDescSplit = currentPrimaryWanInterfaceDesc.split("_")[1];
            intDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
            if (intDetails.isPppoe) {
                var ipv4Dialer = intDetails.ipv4dialer;
                var ipv6Dialer = intDetails.ipv6dialer;
                //     var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: intDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                //     outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
            } else {
                arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "iprout", value: intDetails.routIpvType});
                outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
            }
            if (intDescSplit == "" || intDescSplit == undefined) {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
            }
        }
        arrDesc.push({name: "interfaceName", value: "ATM" + primaryWanInterface});
        arrDesc.push({name: "atmSubInterfaceTag", value: primaryWanInterface}, {name: "description", value: intDesc});
        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("CreateATMPrimaryWanInterface.txt", arrDesc, preview);
        /*var resp = deviceCommunicator.getExecCmdOutput("show running-config | include ip route");
         if ((resp.indexOf("track 1") !== -1) && (resp.indexOf(interfaceName)!== -1 || resp.indexOf(currentPrimaryWanInterface)!== -1)) {
         var routeArr =[{name : "primaryRouteInterface", value:interfaceName},{name : "routeParam", value : interfaceName+ " track 1 "}];
         response = response + deviceCommunicator.configureCommandsFromTemplate("deleteRedundantRoute.txt", routeArr, preview);
         }*/
        currentPrimaryWanInterface = interfaceName;
        currentPrimaryWanInterfaceDesc = intDesc;
        descRows = intDesc.split(patt1);
        $("#description").val(descRows[1]);
        interfaceDetails.description = $("#description").val();
        return outPut;
        //consoleLogMethodDetailsEnd("iAndC.js", "setATMPrimaryWanInterface()");
    }

    function setATMPrimaryWanInterfacewithPPPoE(interfaceName, primaryWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setATMPrimaryWanInterfacewithPPPoE()");
        arrDesc = [];
        intDesc = "PrimaryWANDesc_" + $("#description").val();
        var outPut = "";
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        if ((currentPrimaryWanInterface != "") && (currentPrimaryWanInterface != interfaceName)) {
            var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
            var intDescSplit = currentPrimaryWanInterfaceDesc.split("_")[1];
            intDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
            if (intDetails.isPppoe) {
                var ipv4Dialer = intDetails.ipv4dialer;
                var ipv6Dialer = intDetails.ipv6dialer;
                //     var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: intDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                //    outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
            } else {
                arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "iprout", value: intDetails.routIpvType});
                outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
            }
            if (intDescSplit == "" || intDescSplit == undefined) {
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
            }
        }
        arrDesc.push({name: "atmSubInterfaceTag", value: primaryWanInterface}, {name: "description", value: intDesc});
        outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("ATMDescription.txt", arrDesc, preview);
        arr.push({name: "interfaceName", value: "ATM" + primaryWanInterface});
        outPut = outPut + deviceCommunicator.configureCommandsFrom_Template("CreateATMPrimaryWanInterfacewithPPPoE.txt", arr, preview);
        /*var resp = deviceCommunicator.getExecCmdOutput("show running-config | include ip route");
         if ((resp.indexOf("track 1") !== -1) && (resp.indexOf(interfaceName)!== -1 || resp.indexOf(currentPrimaryWanInterface)!== -1)) {
         var routeArr =[{name : "primaryRouteInterface", value:interfaceName},{name : "routeParam", value : interfaceName+ " track 1 "}];
         response = response + deviceCommunicator.configureCommandsFromTemplate("deleteRedundantRoute.txt", routeArr, preview);
         }*/
        currentPrimaryWanInterface = "ATM" + primaryWanInterface;
        descRows = intDesc.split(patt1);
        $("#description").val(descRows[1]);
        interfaceDetails.description = $("#description").val();
        //consoleLogMethodDetailsEnd("iAndC.js", "setATMPrimaryWanInterfacewithPPPoE()");
        return outPut;
    }
    function setATMBackupWanInterface(interfaceName, backupWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setATMBackupWanInterface()");
        arrDesc = [];
        var output = "";
        intDesc = "BackupWANDesc_" + $("#description").val();
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        WANslaIP = $('#WANslaIpAddress').val();
        if (WANslaIP == "") {
            WANslaIP = "8.8.8.8";
        }
        slaDetails = getSlaDetails();
        if (slaDetails.interface1.length != 0) {//length!=0){
            arr.push({name: "slaIP", value: slaDetails.ipAddress});
            output = output + deviceCommunicator.configureCommandsFromTemplate("noIpSla.txt", arr, preview);
        }
        if ((currentBackupWanInterface != "") && (currentBackupWanInterface !== interfaceName)) {
            var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}];
            var intDescSplit = currentBackupWanInterface.split("_")[1];
            intDetails = getEditInterfaceDetails(currentBackupWanInterface);
            if (intDetails.isPppoe) {
                var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "dialerTag", value: intDetails.ipv4dialer}];
                //4   setPrimaryAndSecondryInterfaceValuesToArray(interfaceDetails, intDetails, pppoeArr);
                //   output = output + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview);
            } else {
                arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                setPrimaryAndSecondryInterfaceValuesToArray(interfaceDetails, intDetails, pppoeArr);
                output = output + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigs.txt", arrDel, preview);

            }
            if (intDescSplit == "" || intDescSplit == undefined) {
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
            }
        }
        //var resp = deviceCommunicator.getExecCmdOutput("show running-config | include ip route");
        var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
        arrDesc.push({name: "atmSubInterfaceTag", value: backupWanInterface}, {name: "description", value: intDesc});
        output = output + deviceCommunicator.configureCommandsFromTemplate("ATMDescription.txt", arrDesc, preview);
        arr.push({name: "interface", value: "ATM" + backupWanInterface});
        if (primaryInt.ipv4dialer.length > 0) {
            arr.push({name: "primaryRouteInterface", value: primaryInt.ipv4dialer});
            arr.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
            arr.push({name: "routeParam", value: primaryInt.ipv4dialer});
        } else {
            arr.push({name: "primaryRouteInterface", value: currentPrimaryWanInterface});
            arr.push({name: "primaryInterface", value: currentPrimaryWanInterface});
            arr.push({name: "routeParam", value: currentPrimaryWanInterface});
        }
        arr.push({name: "slaIP", value: WANslaIP});
        output = output + deviceCommunicator.configureCommandsFromTemplate("CreateATMBackupWanInterface.txt", arr, preview);
        /* if ((resp.indexOf("track 1") === -1) && (resp.indexOf(primaryInt.dialer)!== -1 || resp.indexOf(currentPrimaryWanInterface)!== -1)) {
         response = response + deviceCommunicator.configureCommandsFromTemplate("deleteRedundantRoute.txt", arr, preview);
         }*/
        currentBackupWanInterface = interfaceName;
        currentBackupWanInterfaceDesc = intDesc;
        descRows = intDesc.split(patt1);
        $("#description").val(descRows[1]);
        interfaceDetails.description = $("#description").val();
        return output;

        //consoleLogMethodDetailsEnd("iAndC.js", "setATMBackupWanInterface()");
    }

    function setATMBackupWanInterfacewithPPPoE(interfaceName, backupWanInterface, interfaceDetails, arr, preview) {
        //consoleLogMethodDetailsStart("iAndC.js", "setATMBackupWanInterfacewithPPPoE()");
        var output = "";
        arrDesc = [];
        intDesc = "BackupWANDesc_" + $("#description").val();
        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
        WANslaIP = $('#WANslaIpAddress').val();
        if (WANslaIP == "") {
            WANslaIP = "8.8.8.8";
        }
        slaDetails = getSlaDetails();
        if (slaDetails.interface1.length != 0) {
            arr.push({name: "slaIP", value: slaDetails.ipAddress});
            output = output + deviceCommunicator.configureCommandsFromTemplate("noIpSla.txt", arrDesc, preview);
        }
        if ((currentBackupWanInterface != "") && (currentBackupWanInterface != interfaceName)) {
            var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}];
            var intDescSplit = currentBackupWanInterfaceDesc.split("_")[1];
            //   intDetails = getEditInterfaceDetails(currentBackupWanInterface);
            if (intDetails.isPppoe) {
                arrDel.push({name: "dialerTag", value: intDetails.ipv4dialer});
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                // 5   setPrimaryAndSecondryInterfaceValuesToArray(interfaceDetails, backupWanInterface, arrDel);
                //    output = output + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", arrDel, preview);
            } else {
                arrDel.push({name: "natInterface", value: currentBackupWanInterface});
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                setPrimaryAndSecondryInterfaceValuesToArray(interfaceDetails, backupWanInterface, arrDel);
                output = output + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigs.txt", arrDel, preview);

            }
            if (intDescSplit == "" || intDescSplit == undefined) {
                output = output + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
            } else {
                arrDel.push({name: "description", value: intDescSplit});
                output = output + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
            }
        }
        //var resp = deviceCommunicator.getExecCmdOutput("show running-config | include ip route");
        var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
        arrDesc.push({name: "atmSubInterfaceTag", value: backupWanInterface}, {name: "description", value: intDesc});
        output = output + deviceCommunicator.configureCommandsFromTemplate("ATMDescription.txt", arrDesc, preview);
        arr.push({name: "interface", value: "ATM" + backupWanInterface});
        arr.push({name: "interfaceName", value: "ATM" + backupWanInterface});
        if (primaryInt.ipv4dialer.length > 0) {
            arr.push({name: "primaryRouteInterface", value: primaryInt.ipv4dialer});
            arr.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
            arr.push({name: "routeParam", value: primaryInt.ipv4dialer});
        } else {
            arr.push({name: "primaryRouteInterface", value: currentPrimaryWanInterface});
            arr.push({name: "primaryInterface", value: currentPrimaryWanInterface});
            arr.push({name: "routeParam", value: currentPrimaryWanInterface});
        }
        arr.push({name: "slaIP", value: WANslaIP});
        //  arr.push({name: "interfaceName", value: "ATM" + backupWanInterface});
        output = output + deviceCommunicator.configureCommandsFromTemplate("CreateATMBackupWanInterfacewithPPPoE.txt", arr, preview);
        /* if ((resp.indexOf("track 1") === -1) && (resp.indexOf(primaryInt.dialer)!== -1 || resp.indexOf(currentPrimaryWanInterface)!== -1)) {
         response = response + deviceCommunicator.configureCommandsFromTemplate("deleteRedundantRoute.txt", arr, preview);
         }*/
        currentBackupWanInterface = "ATM" + backupWanInterface;
        currentBackupWanInterfaceDesc = intDesc;
        descRows = intDesc.split(patt1);
        $("#description").val(descRows[1]);
        interfaceDetails.description = $("#description").val();
        //consoleLogMethodDetailsEnd("iAndC.js", "setATMBackupWanInterfacewithPPPoE()");
        return output;
    }

    function createAccessListforNAT(securityLicense, xmlOut, privew) {
        //consoleLogMethodDetailsStart("iAndC.js", "createAccessListforNAT()");
        var outPut = "";
        var lanInterfaces = [],
//      vpnInterfaces,
                objArr = [],
                aclArr = [],
                xml = "",
                xmlDoc,
//      lanObjGrp = "obj",
//      vpnObjGrp = "obj",
                flagvpn1 = false,
                flagvpn2 = false, cwsFlag = false;
        var deleteobjGroupIdRoute = "", xmlObjectGroup = [], rowsobjecGroup = [];
        //var networkAddress = "";
        var reg = new RegExp("[,\\n]");
        //var rows = [], xmlLan = [];
        var cliInput = "";
        //var outValue=[];
        xml = xmlOut;
        if (xml.indexOf("Building configuration...") !== -1) {
            xml = xml.substring(25, xml.length);
            xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
        }
        xml = xml.substring(xml.indexOf("<?xml"), xml.length);
        regEx = new RegExp("&#x03;", "g");
        xml = xml.replace(regEx, "");
        try {
            xmlDoc = $.parseXML(xml);
        } catch (error) {
            xmlDoc = xml;
        }
        if (securityLicense === true || iosk9check == "SecurityEnable") {
            lanInterfaces = configureFirewall.getInterfacesInZone("LAN");
            lanInterfacesglobe = lanInterfaces;
            flagvpn1 = configureVpn.checkValuesIkve1(xml);
            flagvpn2 = configureVpn.checkValuesIkve2(xml);
            cwsFlag = configureScanSafe.retrivingValues();
        }
        try {
            objArr.push({name: "objGroupName", value: "local_lan_subnets"});
            if (lanInterfaces.length <= 0) {
                objArr.push({name: "value", value: "any"});
            } else {
                objArr.push({name: "value", value: ""});
            }
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("CreateNatObjectGroup.txt", objArr, privew) + "\n";
            objArr = [];
            objArr.push({name: "objGroupName", value: "vpn_remote_subnets"});
            if (!flagvpn1 && !flagvpn2) {
                objArr.push({name: "value", value: "any"});
            } else {
                objArr.push({name: "value", value: ""});
            }
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("CreateNatObjectGroup.txt", objArr, privew) + "\n";
            objArr = [];
            objArr.push({name: "objGroupName", value: "local_cws_net"});
            objArr.push({name: "value", value: ""});
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("CreateNatObjectGroup.txt", objArr, privew) + "\n";

            xmlObjectGroup.length = 0;
            rowsobjecGroup.length = 0;
            deleteobjGroupIdRoute = "";
            xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show access-lists nat-list");
            rowsobjecGroup = xmlObjectGroup.split(reg);
            for (j = 0; j < rowsobjecGroup.length; j++) {
                if ((rowsobjecGroup[j].indexOf("Extended") <= -1)) {
                    if ((rowsobjecGroup[j].trim().length > 0)) {
                        deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
                    }
                }
            }
            cliInput = "ip access-list extended nat-list" + "\n" + deleteobjGroupIdRoute;
            outPut = outPut + cliInput;
            // response = deviceCommunicator.getConfigCmdOutput(cliInput);
            if (cwsFlag) {
                //code
                aclArr = [];
                aclArr.push({name: "permitLanAnyCli", value: "permit ip object-group local_cws_net any"});
                aclArr.push({name: "denyCli", value: ""});
                aclArr.push({name: "denyAnyCli", value: ""});
                outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("CreateACLforNAT.txt", aclArr, privew);
            }
            if (lanInterfaces.length <= 0) {
                // No LAN configured
                aclArr = [];
                aclArr.push({name: "permitLanAnyCli", value: "permit ip object-group local_lan_subnets any"});
                aclArr.push({name: "denyCli", value: ""});
                aclArr.push({name: "denyAnyCli", value: ""});
            } else if (lanInterfaces.length > 0 && !(flagvpn1 || flagvpn2)) {
                // LAN interfaces configured
                aclArr = [];
                aclArr.push({name: "permitLanAnyCli", value: " permit ip object-group local_lan_subnets any"});
                aclArr.push({name: "denyCli", value: ""});
                aclArr.push({name: "denyAnyCli", value: "deny ip any any"});
            } else if (lanInterfaces.length > 0 && (flagvpn1 || flagvpn2)) {
                // LAN interfaces and VPN configured
                aclArr = [];
                aclArr.push({name: "permitLanAnyCli", value: "deny ip object-group local_lan_subnets object-group vpn_remote_subnets"});
                aclArr.push({name: "denyCli", value: "permit ip object-group local_lan_subnets any"});
                aclArr.push({name: "denyAnyCli", value: "deny ip any any"});
            }
            outPut = outPut + deviceCommunicator.configureCommandsFromTemplate("CreateACLforNAT.txt", aclArr, privew);
        } catch (e) {
            errorLogInConsole(e.message());
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "createAccessListforNAT()");
        return outPut;
    }


    function getControllerType(name) {
        //consoleLogMethodDetailsStart("iAndC.js", "getControllerType()");
        var output, lines, i;
        output = deviceCommunicator.getExecCmdOutput("show controllers " + name);
        lines = output.split(/\r\n|\r|\n/);
        for (i = 0; i < lines.length; i++) {
            if (lines[i].indexOf('EHWIC-4SHDSL-EA') !== -1) {
                //consoleLogMethodDetailsEnd("iAndC.js", "getControllerType()");
                return "EFMATM";
            } else if (lines[i].indexOf('HWIC-4SHDSL-E') !== -1) {
                //consoleLogMethodDetailsEnd("iAndC.js", "getControllerType()");
                return "EFM";
            } else if (lines[i].indexOf('HWIC-2SHDSL') !== -1) {
                //consoleLogMethodDetailsEnd("iAndC.js", "getControllerType()");
                return "auto";
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getControllerType()");
    }

    function populatePrimaryInterfaceTable() {
        //consoleLogMethodDetailsStart("iAndC.js", "populatePrimaryInterfaceTable()");
        var xml;
        $("#primaryWanInterfaceSelect").empty();
        xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
        $(xml).find('entry').each(function () {
            var interfaceName = $(this).find('Interface').text(),
                    //ipAddress = $(this).find('IP-Address').text(),
                    re = new RegExp("/", "g"),
                    id = interfaceName.replace(re, ""),
                    status = $(this).find('Status').text();
            if (status.indexOf('deleted') === -1 && interfaceName.indexOf("Service") === -1 && interfaceName.indexOf("Embed") === -1 && interfaceName.indexOf("Wlan") === -1) {
                try {
                    var interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
                    var selectedInterface = $('#interfaceSelected').val();
                    if (interfaceType !== 5 && interfaceType !== 6 && selectedInterface !== interfaceName) {
                        $("#primaryWanInterfaceSelect").append('<option id="' + id + '" value="' + id + '">' + interfaceName + '</option>');
                    }
                } catch (error) {
                    $("#primaryWanInterfaceSelect").append('<option id="' + id + '" value="' + id + '">' + interfaceName + '</option>');
                }
            }
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "populatePrimaryInterfaceTable()");
    }

    function getModemDetails(interfaceNames)
    {
        //consoleLogMethodDetailsStart("iAndC.js", "getModemDetails()");
        var srArray, interface1, ModemTypeCommand, ServiceProviderCommand, ModemTypexml, modemType = "", Network = "", ServiceTypexml, ServiceProviderSlot, serviceProvider = "", modemData, modemNo = 0;
        //var command, xml, rows;
        var regEx = new RegExp("Cellular", "");
        var RegMC = new RegExp("MC", "");
        srArray = interfaceNames.split(regEx);
        interface1 = "Cellular " + srArray[1];
        ModemTypeCommand = "show controllers " + interface1 + " | include Sierra Wireless";
        ServiceProviderCommand = "show interface " + interface1 + " | include Hardware";

        // For Finding Model Type
        ModemTypexml = deviceCommunicator.getExecCmdOutput(ModemTypeCommand);

        // For Finding Service Provider
        ServiceProviderSlot = deviceCommunicator.getProductFRUNumberOfSlot(srArray[1], true);
        if(ServiceProviderSlot===undefined){
            ServiceProviderSlot="";
        }
        ServiceTypexml = deviceCommunicator.getExecCmdOutput(ServiceProviderCommand);

        if (ModemTypexml.indexOf("MC") > -1) {
            modemNo = ModemTypexml.split(RegMC);
            modemNo = modemNo[1].split(" ");
        }

        if (ModemTypexml.indexOf("CDMA") > -1) {
            modemType = "CDMA";
        } else if (ModemTypexml.indexOf("HSPA+R7") > -1) {
            modemType = "HSPA+R7";
        } else if (ModemTypexml.indexOf("HSPA") > -1 || ModemTypexml.indexOf("UMTS") > -1) {
            modemType = "HSPA";
        }
        if (ServiceTypexml.indexOf("LTE") > -1) {
            modemType = "LTE";
        }

        if (modemType === "CDMA") {
            serviceProvider = "Global";
            if (ServiceProviderSlot.indexOf("-V") > -1 || ServiceTypexml.indexOf("VZ") > -1) {
                serviceProvider = "Verizon";
            } else if (ServiceProviderSlot.indexOf("-S") > -1 || ServiceTypexml.indexOf("SP") > -1) {
                serviceProvider = "Sprint";
            } else if (ServiceProviderSlot.indexOf("-B") > -1) {
                serviceProvider = "BSNL";
            } else if (ServiceTypexml.indexOf("Global") > -1) {
                serviceProvider = "Global";
            }
        } else if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA")
        {
            if (ServiceTypexml.indexOf("Global") > -1) {
                serviceProvider = "Global";
            }
        }

        if (ServiceProviderSlot.indexOf("3G") > -1) {
            Network = "3G";
        } else if (ServiceProviderSlot.indexOf("4G") > -1) {
            Network = "4G";
            if (ServiceProviderSlot.indexOf("4G") > -1 && ServiceProviderSlot.indexOf("-V") > -1) {
                serviceProvider = "Verizon";
            } else if (ServiceProviderSlot.indexOf("4G") > -1 && ServiceProviderSlot.indexOf("-A") > -1) {
                serviceProvider = "ATT";
            }
        }

        modemData = [Network, modemType, serviceProvider, modemNo[0]];
        //consoleLogMethodDetailsEnd("iAndC.js", "getModemDetails()");
        return modemData;
    }

    function getSlaDetails() {
        //consoleLogMethodDetailsStart("iAndC.js", "getSlaDetails()");
        var shrunCmd, shrunXml, shrun, details = [],
                slaDetails = {
                    ipAddress: "",
                    interface1: ""
                };
        shrunCmd = "show running-config | section ip sla 1";
        shrunXml = deviceCommunicator.getExecCmdOutput(shrunCmd);

        if ((shrunXml.indexOf("icmp-echo")) > -1) {
            shrun = shrunXml.split("icmp-echo");
            if (shrun.length >= 2) {
                details = shrun[1].split(" ");
            }
        }
        if (details.length >= 4) {
            slaDetails.ipAddress = details[1];
            slaDetails.interface1 = details[3];
        }
        if ((slaDetails.ipAddress == "") || (slaDetails.ipAddress == undefined)) {
            slaDetails.ipAddress = "8.8.8.8";
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getSlaDetails()");
        return slaDetails;
    }

    function getGsmDetails(interface1) {
        //consoleLogMethodDetailsStart("iAndC.js", "getGsmDetails()");
        var gsmCmd, gsmXml, reg, gsmData = [],
                gsmDetails = {
                    pdp: "",
                    apn: "",
                    authentication: "",
                    username: "",
                    password: ""
                };
        reg = new RegExp("[,/\r\n|\r|\n/]");

        gsmCmd = "show " + interface1 + " Profile 1";
        gsmXml = deviceCommunicator.getExecCmdOutput(gsmCmd);
        gsmData = gsmXml.split(reg);
        var Regre = new RegExp("[=:]");
        for (var i = 0; i < gsmData.length; i++) {
            if (gsmData[i].indexOf("PDP Type") > -1) {
                gsmd = gsmData[i].split(Regre);
                if (gsmd.length >= 2) {
                    gsmDetails.pdp = $.trim(gsmd[1]);
                }
            }
            if (gsmData[i].indexOf("Access Point Name (APN)") > -1) {
                gsmd = gsmData[i].split(Regre);
                if (gsmd.length >= 2) {
                    gsmDetails.apn = $.trim(gsmd[1]);
                }
            }
            if (gsmData[i].indexOf("Authentication") > -1) {
                gsmd = gsmData[i].split(Regre);
                if (gsmd.length >= 2) {
                    gsmDetails.authentication = $.trim(gsmd[1]);
                }
            }
            if (gsmData[i].indexOf("Username") > -1) {
                gsmd = gsmData[i].split(Regre);
                if (gsmd.length >= 2) {
                    gsmDetails.username = $.trim(gsmd[1]);
                }
            }
            if (gsmData[i].indexOf("Password") > -1) {
                gsmd = gsmData[i].split(Regre);
                if (gsmd.length >= 2) {
                    gsmDetails.password = $.trim(gsmd[1]);
                }
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getGsmDetails()");
        return gsmDetails;
    }
    /**
     Returns the highest tag to create new Ethernet sub interface in case of VDSL controller
     */
    function getEthernetSubInterfaceTag(interfaceName) {
        //consoleLogMethodDetailsStart("iAndC.js", "getEthernetSubInterfaceTag()");
        var output, subInterfaceTag, lines, highestTag, nextTag, tagArray, i, re, temparray = [];
        tagArray = [];
        //var temparray1 = [];
        output = deviceCommunicator.getExecCmdOutput("show running-config | include interface " + interfaceName) + " test";

        lines = output.split(/\r\n|\r|\n/);

        for (l = 0; l < lines.length; l++) {
            temparray[l] = lines[l];
        }
        //temparray=lines;
        lines.length = 0;
        var j = 0;
        for (k = 0; k < temparray.length; k++) {
            if (temparray[k].indexOf("list nat-list interface") > -1) {
                isEmptyBlock = true;
            } else {
                lines[j] = temparray[k];
                j = j + 1;
            }
        }
        if (lines[lines.length - 1].indexOf("test") <= -1) {
            //code
            lines[lines.length - 1] = lines[lines.length - 1] + " test";
        }

        re = new RegExp("interface\\s" + interfaceName + "\\.(\\S+)\\s.*", "");
        for (i = 0; i < lines.length; i++) {
            if (re.test(lines[i])) {
                subInterfaceTag = lines[i].replace(re, '$1');
                if ($.inArray(subInterfaceTag, tagArray) === -1) {
                    if (!isNaN(parseInt(subInterfaceTag))) {
                        tagArray.push(subInterfaceTag);
                    }
                }
            }
        }
        if (tagArray.length > 0) {
            tagArray.sort(sortNumber);
            highestTag = parseInt(tagArray[tagArray.length - 1], 10);
            nextTag = highestTag + 1;
            //consoleLogMethodDetailsEnd("iAndC.js", "getEthernetSubInterfaceTag()");
            return "." + nextTag;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "getEthernetSubInterfaceTag()");
            return ".1";
        }
    }
    function getLteDetails(interface1, serviceProvider) {
        //consoleLogMethodDetailsStart("iAndC.js", "getLteDetails()");
        var lteCmd, lteXml, reg, lteData = [],
                lteDetails = {
                    apna: ""
                };
        reg = new RegExp("[,/\r\n|\r|\n/]");
        if (serviceProvider === "Verizon") {
            lteCmd = "show " + interface1 + " Profile 3";
        }else{
       // if (serviceProvider === "ATT") {
            lteCmd = "show " + interface1 + " Profile 1";
        }
        lteXml = deviceCommunicator.getExecCmdOutput(lteCmd);
        lteData = lteXml.split(reg);
        var Regre = new RegExp("[=:]");
        for (var i = 0; i < lteData.length; i++) {
            if (lteData[i].indexOf("Access Point Name (APN)") > -1) {
                lted = lteData[i].split(Regre);
                if (lted.length >= 2) {
                    lteDetails.apna = $.trim(lted[1]);
                }
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getLteDetails()");
        return lteDetails;
    }


    function getModemFwVer(interface1) {
        //consoleLogMethodDetailsStart("iAndC.js", "getModemFwVer()");
        var modemFwVerCmd, modemFwVerXml, modemFwData = [], modemFwVerStr, modemFwToken;
        modemFwVerCmd = "show " + interface1 + " hardware | include Modem Firmware Version";
        modemFwVerXml = deviceCommunicator.getExecCmdOutput(modemFwVerCmd);
        var reg = new RegExp(" = ");
        modemFwData = modemFwVerXml.split(reg);
        modemFwVerStr = modemFwData[1];
        var regex = new RegExp("_");
        modemFwToken = modemFwVerStr.split(regex);
        modemFwVer = modemFwToken[1];
        //consoleLogMethodDetailsEnd("iAndC.js", "getModemFwVer()");
        return modemFwVer;

    }

    function isApnEditAllowed(modemFwVer) {
        //consoleLogMethodDetailsStart("iAndC.js", "isApnEditAllowed()");
        var modemFwVerToken = [];
        var temp = modemFwVer;
        var regex = new RegExp("\\.", "g");
        modemFwVerToken = temp.split(regex);
        if (modemFwVerToken[0] >= 03 && modemFwVerToken[1] >= 05) {
            //consoleLogMethodDetailsEnd("iAndC.js", "isApnEditAllowed()");
            return 1;
        } else {
            //consoleLogMethodDetailsEnd("iAndC.js", "isApnEditAllowed()");
            return 0;
        }
    }


    function deleteOldConfigs(interfaceDetails) {
        //consoleLogMethodDetailsStart("iAndC.js", "deleteOldConfigs()");
        var arr = [], routeInterface, response, slaDetails, isPreview = false, interArray = [];
        try {
            // ($('#persistent').is(':checked') === true)
            if ((($('#backupWan').is(':checked') === true) && interfaceDetails.isPrimary) || ($('#primaryWan').is(':checked') === true && interfaceDetails.isPrimary) || ($('#noneWan').is(':checked') === true && interfaceDetails.isPrimary)) {
                // change from primary to backup
                if (interfaceDetails.ipvdialer.length > 0) {
                    //was persiatent
                    routeInterface = interfaceDetails.ipv4dialer;
                } else if (interfaceDetails.ipv4dialer.length == 0) {
                    // was non persistent
                    routeInterface = interfaceDetails.interfaceName;
                }
                arr.push({name: "routeInterface", value: routeInterface});
                response = deviceCommunicator.configureCommandsFromTemplate("deletePrimaryRoutes.txt", arr, isPreview);
            } else if ((($('#primaryWan').is(':checked') === true) && interfaceDetails.isBackup) || ($('#backupWan').is(':checked') === true && interfaceDetails.isBackup) || ($('#noneWan').is(':checked') === true && interfaceDetails.isBackup)) {
                // change from backup to primary
                if (interfaceDetails.ipv4dialer.length > 0) {
                    //was persiatent
                    routeInterface = interfaceDetails.ipv4dialer;
                } else if (interfaceDetails.ipv4dialer.length == 0) {
                    // was non persistent
                    routeInterface = interfaceDetails.interfaceName;
                }
                arr.push({name: "routeInterface", value: routeInterface});
                slaDetails = getSlaDetails();
                arr.push({name: "primaryInterface", value: slaDetails.interface1});
                arr.push({name: "slaIP", value: slaDetails.ipAddress});
                try {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteBackupInterfaceConfigs.txt", arr, isPreview);
                } catch (e2) {
                    isEmptyBlock = true;
                }
            }
            if (interfaceDetails.ipv4dialer.length > 0) {
                //was persiatent
                routeInterface = interfaceDetails.ipv4dialer;
                interArray.push({name: "interface", value: routeInterface});
                try {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", interArray, isPreview);
                } catch (excep) {
                    isEmptyBlock = true;
                }
            }
            if (isPreview) {
                consoleLog(response);
            }
        } catch (exception) {
            //alert(exception);
            //Hide the response
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "deleteOldConfigs()");
    }

    function deleteDialerConfigs(interfaceName, interfaceDetails) {
        //consoleLogMethodDetailsStart("iAndC.js", "deleteDialerConfigs()");
        var arr = [], routeInterface, response, slaDetails, isPreview = false, interArray = [], dialerGroupNumber, srArray, cellular_LineTag;
        try {

            if (interfaceDetails.isPrimary) {
                if (interfaceDetails.ipv4dialer.length > 0) {
                    //was persiatent
                    routeInterface = interfaceDetails.ipv4dialer;
                } else if (interfaceDetails.ipv4dialer.length == 0) {
                    // was non persistent
                    routeInterface = interfaceDetails.interfaceName;
                }
                arr.push({name: "routeInterface", value: routeInterface});
                response = deviceCommunicator.configureCommandsFromTemplate("deletePrimaryRoutes.txt", arr, isPreview);
            } else if (interfaceDetails.isBackup) {
                if (interfaceDetails.ipv4dialer.length > 0) {
                    //was persiatent
                    routeInterface = interfaceDetails.ipv4dialer;
                } else if (interfaceDetails.ipv4dialer.length == 0) {
                    // was non persistent
                    routeInterface = interfaceDetails.interfaceName;
                }
                arr.push({name: "routeInterface", value: routeInterface});
                slaDetails = getSlaDetails();
                arr.push({name: "primaryInterface", value: slaDetails.interface1});
                arr.push({name: "slaIP", value: slaDetails.ipAddress});
                response = deviceCommunicator.configureCommandsFromTemplate("deleteBackupInterfaceConfigs.txt", arr, isPreview);
            }

            if (interfaceDetails.ipv4dialer.length > 0) {
                //was persiatent
                routeInterface = interfaceDetails.ipv4dialer;
                interArray.push({name: "interface", value: routeInterface});
                try {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", interArray, isPreview);
                } catch (excep) {
                    isEmptyBlock = true;
                }
            }
            if (interfaceDetails.ipv4dialerGroupNumber.length > 0) {
                dialerGroupNumber = interfaceDetails.ipv4dialerGroupNumber;
                interArray.push({name: "dialerGroupTag", value: dialerGroupNumber});
                try {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteDialerList.txt", interArray, isPreview);
                } catch (excep) {
                    isEmptyBlock = true;
                }
            }
            var regEx = new RegExp("Cellular", "");
            srArray = interfaceName.split(regEx);
            cellular_LineTag = srArray[1];
            if (cellular_LineTag.indexOf("/") == -1) {
                // fixed flatform , line tag = 3
                lineTag = 3;
            } else {
                lineTag = cellular_LineTag;
            }
            interArray.push({name: "lineTag", value: lineTag});
            try {
                response = deviceCommunicator.configureCommandsFromTemplate("deleteScriptFromLine.txt", interArray, isPreview);
            } catch (excep) {
                isEmptyBlock = true;
            }
            if (isPreview) {
                consoleLog(response);
            }
        } catch (exception) {
            //alert(exception);
            //Hide the response
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "deleteDialerConfigs()");
    }

    /************************To store the config status of a router in a COOKIE********************************/


    function getConfigStatus(c_name)
    {
        //consoleLogMethodDetailsStart("iAndC.js", "getConfigStatus()");
        if (document.cookie.length > 0)
        {
            c_start = document.cookie.indexOf(c_name + "=");

            if (c_start != -1)
            {
                c_start = c_start + c_name.length + 1;
                c_end = document.cookie.indexOf(";", c_start);
                if (c_end == -1) {
                    c_end = document.cookie.length;
                }
                //consoleLogMethodDetailsEnd("iAndC.js", "getConfigStatus()");
                return unescape(document.cookie.substring(c_start, c_end));
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getConfigStatus()");
        return "";
    }

    function setConfigStatus(c_name, value)
    {
        //consoleLogMethodDetailsStart("iAndC.js", "setConfigStatus()");
        document.cookie = c_name + "=" + escape(value);
        //consoleLogMethodDetailsEnd("iAndC.js", "setConfigStatus()");
    }

    /***************************************************************************************************************/

    function getModemStatus(interfaceNames) {
        //consoleLogMethodDetailsStart("iAndC.js", "getModemStatus()");
        var interfaceResult, regr, modemAcCmd, modemAcXml, modemActive, modem;

        regr = new RegExp(" = ", "");
        interfaceResult = getCellularInterfaceNameWithSpace(interfaceNames);
        try {
            modemAcCmd = "show " + interfaceResult.interface1 + "  all | include  Modem activated";
            modemAcXml = deviceCommunicator.getExecCmdOutput(modemAcCmd);
            modemActive = modemAcXml.split(regr);
            modem = $.trim(modemActive[1]);
        } catch (exception) {
            isEmptyBlock = true;
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getModemStatus()");
        return modem;
    }

    function getSimStatus(interfaceNames, modemType)
    {
        //consoleLogMethodDetailsStart("iAndC.js", "getSimStatus()");
        var interfaceResult, regr, simCmd, simXml, simStatus, sim;

        interfaceResult = getCellularInterfaceNameWithSpace(interfaceNames);
        regr = new RegExp(" = ", "");
        if (interfaceResult.ModemPlatform === "any" || modemType === "LTE")
        {
            simCmd = "show " + interfaceResult.interface1 + "  all | include  SIM Status";
            simXml = deviceCommunicator.getExecCmdOutput(simCmd);
            simStatus = simXml.split(regr);
        } else if (interfaceResult.ModemPlatform === "800Series")
        {
            simCmd = "show " + interfaceResult.interface1 + "  all | include Active SIM";
            simXml = deviceCommunicator.getExecCmdOutput(simCmd);
            simStatus = simXml.split(regr);
        }
        sim = simStatus[1];
        //consoleLogMethodDetailsEnd("iAndC.js", "getSimStatus()");
        return sim;
    }

    function towerRange(xmlOut) {
        //consoleLogMethodDetailsStart("iAndC.js", "towerRange()");
        var xml;
        xml = xmlOut;
        function getRssiValue() {
            //consoleLogMethodDetailsStart("iAndC.js", "getRssiValue()");
            $(xml).find('entry').each(function () {
                var interfaceName = $(this).find('Interface').text(),
                        //ipAddress = $(this).find('IP-Address').text(),
                        re = new RegExp("/", "g"),
                        id = interfaceName.replace(re, ""),
                        protocol1 = $(this).find('Protocol').text(),
                        status = $(this).find('Status').text(),
                        command, intvallines = [], rssiString, rssi;
                //var cellularTag;
                var protocol = protocol1;
                if (protocol1 == "up" || protocol1 == "Up") {
                    protocol = $.i18n.prop("interfaceUp");
                } else if (protocol1 == "down" || protocol1 == "Down") {
                    protocol = $.i18n.prop("interfaceDown");
                } else {
                    protocol = protocol1;
                }

                try {
                    if (status.indexOf('deleted') === -1) {
                        if (interfaceName.indexOf('Cellular') !== -1) {
                            var interfaceResult = getCellularInterfaceNameWithSpace(interfaceName);
                            command = "show " + interfaceResult.interface1 + " radio | include Current RSSI";
                            intvalxml = deviceCommunicator.getExecCmdOutput(command);



                            var modemResult = getModemDetails(interfaceName);
                            var modemType = modemResult[1];
                            var sim = getSimStatus(interfaceName, modemType);
                            intvallines = intvalxml.split(/\r\n|\r|\n/);
                            if (intvallines.length > 1 && intvallines[1].indexOf("RSSI = ") != -1) {
                                rssiString = intvallines[1];
                            } else if (intvallines.length == 1 && intvallines[0].indexOf("RSSI = ") != -1) {
                                rssiString = intvallines[0];
                            }
                            if (isNano) {
                                rssi = intvalxml.trim().split("=")[1].trim().split(/\s+/)[0];

                            } else {
                                rssi = rssiString.substring(rssiString.indexOf("RSSI") + 6, rssiString.indexOf("dBm"));
                            }

                            if (!isNaN(parseInt(rssi))) {
                                protocol = $('#' + id + ' td:nth-child(5)').text();
                                if (rssi <= -100) {
                                    $('#' + id + ' td:nth-child(5)').empty();
                                    $('#' + id + ' td:nth-child(5)').append(protocol + " " + '<div class="utmSprite Signal1 displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass761" align="right"  ></div>');
                                } else if (rssi >= -99 && rssi <= -90) {
                                    $('#' + id + ' td:nth-child(5)').empty();
                                    $('#' + id + ' td:nth-child(5)').append(protocol + " " + '<div class="utmSprite Signal2 displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass762" align="right"  ></div>');
                                } else if (rssi >= -89 && rssi <= -70) {
                                    $('#' + id + ' td:nth-child(5)').empty();
                                    $('#' + id + ' td:nth-child(5)').append(protocol + " " + '<div class="utmSprite Signal3 displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass763" align="right"  ></div>');
                                } else if (rssi >= -69) {
                                    $('#' + id + ' td:nth-child(5)').empty();
                                    $('#' + id + ' td:nth-child(5)').append(protocol + " " + '<div class="utmSprite Signal4 displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass764" align="right"  ></div>');
                                } else {
                                    $('#' + id + ' td:nth-child(5)').empty();
                                    $('#' + id + ' td:nth-child(5)').append(protocol + " " + '<div class="utmSprite NoSignal displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass765" align="right"  ></div>');
                                }

                                if (modemType === "GSM" || modemType === "HSPA+R7" || modemType === "HSPA" || modemType === "LTE") {
                                    if (sim === "Removed" || sim === "NONE" || sim === "Not inserted" || sim === "General failure") {
                                        $('#' + id + ' td:nth-child(5)').append(" " + '<div class="utmSprite NoSIM displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass766" title="No SIM" ></div>');

                                    } else {
                                        $('#' + id + ' td:nth-child(5)').append(" " + '<div class="utmSprite SIM displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass767" title="SIM Present" ></div>');
                                    }
                                } else if (modemType === "CDMA") {
                                    var ModemStatus = getModemStatus(interfaceName);
                                    var ConfigStatus = getConfigStatus(id);
                                    if (ModemStatus === "NO") {
                                        ConfigStatus = $.i18n.prop("iAndCModemNot") + " \n " + ConfigStatus;
                                        $('#' + id + ' td:nth-child(5)').append(" " + '<div class="utmSprite NotActivate displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass768" onmouseover="' + ConfigStatus + '" title="' + ConfigStatus + '" ></div>');


                                    } else if (ModemStatus === "YES") {
                                        ConfigStatus = $.i18n.prop("iAndCModemActiv") + " \n " + ConfigStatus;
                                        $('#' + id + ' td:nth-child(5)').append(" " + '<div class="utmSprite Activate displayInlineBlock verticalAlignMiddle ccpexpCSSReplaceClass769" onmouseover="' + ConfigStatus + '"  title="' + ConfigStatus + '" ></div>');

                                    }
                                }

                            }
                        }
                    }
                } catch (error) {
                    isEmptyBlock = true;
                }
            });
            //consoleLogMethodDetailsEnd("iAndC.js", "getRssiValue()");
        }
        //refreshRange = setInterval(getRssiValue , 10000);
        getRssiValue();
        //consoleLogMethodDetailsEnd("iAndC.js", "towerRange()");
    }

    function getCellularInterfaceNameWithSpace(interfaceName) {
        //consoleLogMethodDetailsStart("iAndC.js", "getCellularInterfaceNameWithSpace()");
        var regEx, srarray,
                interfaceResult = {
                    interface1: "",
                    ModemPlatform: ""};

        regEx = new RegExp("Cellular", "");
        srarray = interfaceName.split(regEx);
        interfaceResult.interface1 = "Cellular " + srarray[1];
        if (interfaceResult.interface1.indexOf("/") > -1) {
            interfaceResult.ModemPlatform = "any";
        } else {
            interfaceResult.ModemPlatform = "800Series";
        }

        //consoleLogMethodDetailsEnd("iAndC.js", "getCellularInterfaceNameWithSpace()");
        return interfaceResult;
    }

    /********************************************Alert BOX to show  RESPONSE*****************************************************/
    /*
     function configResponseMsg(response) {
     $('<div><p>'+response+'</p></div>').dialog({
     autoOpen: true,
     title:'Activation Status',
     height: 200,
     width: 450,
     modal: true,
     buttons: {
     "Ok": function () {
     $(this).dialog("close");
     }
     }

     });
     }*/

//    function defaultInterface(interfaceName) {
//
//        //consoleLogMethodDetailsStart("iAndC.js", "defaultInterface()");
//        $('<div>' + $.i18n.prop("iAndCPhysicalintf") + '</div>').dialog({
//            title: $.i18n.prop("iAndCdeleteIntf"),
//            buttons: [{
//                    text: $.i18n.prop("ok"),
//                    click: function () {
//                        $(this).dialog("close");
//                        //$.blockUI({blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
//                        blockPage("Applying");
//                        var arr = [{name: "interface", value: interfaceName}];
//                        try {
//                            response = deviceCommunicator.configureCommandsFromTemplate("DefaultInterface.txt", arr, false);
//                        } catch (e) {
//                            isEmptyBlock = true;
//                        }
//                        refresh();
//                        $.unblockUI();
//                    }}, {
//                    text: $.i18n.prop("cancel"),
//                    click: function () {
//                        $(this).dialog("close");
//                        deleteCellular(interfaceName, false);
//                    }
//                }],
//            close: function () {
//                $(this).dialog("close");
//            }
//        });
//        //consoleLogMethodDetailsEnd("iAndC.js", "defaultInterface()");
//    }
    function deleteCellular(interfaceName, flag) {
        //consoleLogMethodDetailsStart("iAndC.js", "deleteCellular()");
        var arr = [], response, intDetails = [];
        intDetails = getEditInterfaceDetails(interfaceName);
        try {
            arr.push({name: "interface", value: interfaceName});
            try {
                response = deviceCommunicator.configureCommandsFromTemplate("DefaultInterface.txt", arr, false);
            } catch (error) {
                isEmptyBlock = true;
            }
            response = deviceCommunicator.configureCommandsFromTemplate("deleteInterface.txt", arr, false);
            if (response.length > 0) {
                $('#infoMessage').html(response);
                $('#info').show();
                $('#info').delay(4000).fadeOut(1000);
            }
            if (flag) {
                deleteDialerConfigs(interfaceName, intDetails);
            }
            if (intDetails.isPrimary) {
                currentPrimaryWanInterface = "";
            }
            if (intDetails.isBackup) {
                currentBackupWanInterface = "";
            }
            refresh();
        } catch (error) {
            if (flag) {
                deleteDialerConfigs(interfaceName, intDetails);
            }
            if (intDetails.isPrimary) {
                currentPrimaryWanInterface = "";
            }
            if (intDetails.isBackup) {
                currentBackupWanInterface = "";
            }
            refresh();
            $('#errorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
            $('#error').show();
            $('#error').delay(4000).fadeOut(1000);
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "deleteCellular()");
    }

    /*************************************************************************************************************************/

    function deleteWarningMsg(interfaceName) {
        //consoleLogMethodDetailsStart("iAndC.js", "deleteWarningMsg()");
        $('<div><p> Do you want to remove all the associated configurations to this interface?</p></div>').dialog({
            autoOpen: true,
            title: $.i18n.prop("doyouwanttoremove"),
            height: 200,
            width: 450,
            modal: true,
            buttons: [{
                    text: $.i18n.prop("ok"),
                    click: function () {
                        $(this).dialog("close");
                        blockPage("Applying");
                        setTimeout(function () {

                            deleteCellular(interfaceName, true);
                            $.unblockUI();
                        }, 1000);

                    }}, {
                    text: $.i18n.prop("cancel"),
                    click: function () {
                        $(this).dialog("close");
                        deleteCellular(interfaceName, false);
                    }
                }],
            close: function () {
            }
        });
        //consoleLogMethodDetailsEnd("iAndC.js", "deleteWarningMsg()");
    }
    /************************************************
     This function adds active interfaces in the selection box when someone tries to edit
     VDSL controller.
     ***********************************************************/
//    function addInteraceToController() {
//        //consoleLogMethodDetailsStart("iAndC.js", "addInteraceToController()");
//        $('#CIRow').show();
//        var xml;
//        xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
//        $(xml).find('entry').each(function () {
//            var interfaceName = $(this).find('Interface').text(),
//                    status = $(this).find('Status').text();
//            if (status.indexOf('deleted') === -1) {
//                if (interfaceName.indexOf('ATM') !== -1 || (interfaceName.indexOf('Ethernet') !== -1) && interfaceName.indexOf('FastEthernet') === -1 && interfaceName.indexOf('GigabitEthernet') === -1) {
//                    $("#controllerInterface").append("<option id=" + interfaceName + ">" + interfaceName + "</option>");
//                }
//            }
//        });
//        //consoleLogMethodDetailsEnd("iAndC.js", "addInteraceToController()");
//    }
    /**
     This function adds operating mode to the controller VDSL in the Edit Dialog
     */
    function addOperatingMode(name) {
        //consoleLogMethodDetailsStart("iAndC.js", "addOperatingMode()");
        var arr = [], response, mode;
        try {
            arr.push({
                name: "controller",
                value: name
            });
            response = deviceCommunicator.configureCommandsFromTemplate2("cntrlrOperatingMode.txt", arr, false);
        } catch (error) {
            response = error.errorResponse;
            arr = response.split("\n");
            for (var i = 0; i < arr.length; i++) {
                mode = arr[i].toString().trim().split(" ")[0];
                $("#controllerMode").append("<option id=" + mode + " value=" + mode + ">" + mode + "</option>");
            }
            arr.length = 0;
            var check = 0;
            response = deviceCommunicator.getExecCmdOutput("show controllers " + name);
            arr = response.split("\n");
            for (var i = 0; i < arr.length; i++) {
                mode = arr[i].toString().trim();
                if (mode.indexOf("DSL Config Mode") != -1) {
                    mode = mode.split(" ")[3].toLowerCase();
                    $("#" + mode).attr('selected', 'selected');
                    check = 1;
                }
            }
            if (check == 1) {
                //code
            } else {
                $("#" + "auto").attr('selected', 'selected');
            }
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "addOperatingMode()");
    }
    /**
     This function shows only the controller section in the interface accordion.
     */
    function openInterfaceAccordion(name) {
        //consoleLogMethodDetailsStart("iAndC.js", "openInterfaceAccordion()");
        //$("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC")+ " " + name + " " + $.i18n.prop("ControllerLegend"));
        //$("#interfaceDialog").dialog("open");
        $("#interfaceAccordion").accordion("refresh");
        //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(IPv4 address)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(IPv6 address)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Connection)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();
        //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').hide();
        $("#interfaceAccordion h3 #authentication").parent().hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
        $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();

        $("#interfaceAccordion").accordion("option", "active", 0);
        $('#interfaceForm').resetForm();
        $('#interfaceError').hide();
        $("#progress").hide();
        //consoleLogMethodDetailsEnd("iAndC.js", "openInterfaceAccordion()");
    }

    function openInterfaceAccordionCheck(status, name) {
        //consoleLogMethodDetailsStart("iAndC.js", "openInterfaceAccordionCheck()");
        $("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC") + " " + name + " " + $.i18n.prop("ControllerLegend"));
        //$("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC")+ " " + name + " " + $.i18n.prop("ControllerLegend"));
        var languageLocalization = $.i18n.prop("langwage");
        if (languageLocalization === "ja") {
            $("#interfaceDialog").dialog("option", "title", name + " " + $.i18n.prop("ControllerLegend") + $.i18n.prop("ofValueJapOnly") + $.i18n.prop("editIandC"));
        }


        if (status == "hide") {
            //code

            $("#interfaceAccordion").accordion("refresh");
            //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(IPv4 address)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(IPv6 address)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(Connection)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').hide();
            $("#interfaceAccordion h3 #authentication").parent().hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();

            $("#interfaceAccordion").accordion("option", "active", 0);
            //$('#interfaceForm').resetForm();
            $('#interfaceError').hide();
            $("#progress").hide();
        } else {
            //$("#interfaceDialog").dialog("open");
            $("#interfaceAccordion").accordion("refresh");
            //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(IPv4 address)').show();
            //$("#interfaceAccordion").find('h3').filter(':contains(IPv6 address)').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();

            if ($('#pppoe').is(':checked')) {
                //code
                //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').show();
                $("#interfaceAccordion h3 #authentication").parent().show();
            } else {
                // $("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();
                $("#interfaceAccordion h3 #authentication").parent().hide();
            }

            //$("#interfaceAccordion").find('h3').filter(':contains(Connection)').show();
            //$("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();
            //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').show();

            $("#interfaceAccordion").accordion("option", "active", 0);
            //$('#interfaceForm').resetForm();
            $('#interfaceError').hide();
            $("#progress").hide();
        }
        $("#interfaceDialog").dialog("open");
        if (checkWanDialog === true) {
            //code
            $("#wanAlertDialog").dialog("open");
        } else {
            isEmptyBlock = true;
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "openInterfaceAccordionCheck()");
    }

    /**
     While editing interface If we have not selected any controller then This function comes in action
     */
    function editInterfaceElse(interfaceType, name, interfaceDetails, platformType, wanMode, index) {
        //consoleLogMethodDetailsStart("iAndC.js", "editInterfaceElse()");
        var DslsubInterfaceFlag = false;
        subinterfaceFlag = "no";
        checkWanDialog = false;
        interfaceType = deviceCommunicator.getInterfaceType(name);
        $("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC") + " " + name + " " + $.i18n.prop("interfaceIandC"));
        var languageLocalization = $.i18n.prop("langwage");
        if (languageLocalization === "ja") {
            $("#interfaceDialog").dialog("option", "title", name + " " + $.i18n.prop("interfaceIandC") + $.i18n.prop("ofValueJapOnly") + $.i18n.prop("editIandC"));
        }

        var title = $("#interfaceDialog").dialog("option", "title");

        if (interfaceType == undefined) {
            interfaceType = deviceCommunicator.getInterfaceType(name, true);
        }
        if (interfaceType !== 1 && interfaceType !== 4 && interfaceType !== 2 && interfaceType !== 539 && interfaceType !== 538 && interfaceType !== 503 && interfaceType !== 504 && interfaceType !== 532 && interfaceType !== 1012) {
            //$("#notSupportedDialog").dialog("open");
            //consoleLogMethodDetailsEnd("iAndC.js", "editInterfaceElse()");
            return false;
        }
        editRowName = $('#interfaceTable tr.hilite');
        controllerName = $.trim(editRowName.children().get(1).textContent);
        interfaceDetails = getEditInterfaceDetails(name);
        $('#encapRow').hide();
        if (interfaceType === 1 || interfaceType === 4) {
            platformType = deviceCommunicator.getPlatformType();
            $('#vciRow').hide();
            $('#vpiRow').hide();
            $("#vpi").removeClass("requiredVPI");
            $("#vci").removeClass("requiredVCI");
            $("#vlanID").removeClass("required");
            $("#vpi").rules("remove");
            $("#vci").rules("remove");
            $("#vlanID").rules("remove");
            if (controllerName.indexOf("DSL") > -1) {
                isEmptyBlock = true;
            } else {
                $("#interfaceDialog").dialog("open");
            }
            $("#interfaceAccordion").accordion("refresh");
            if (platformType.indexOf("892F") !== -1 && interfaceType === 4) {
                //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').show();
            } else {
                //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
            }
            //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').hide();





            if (title.indexOf("DSL") > -1) {
                //code
            } else {
                //$("#interfaceAccordion").find('h3').filter(':contains(Connection)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();
                //$("#interfaceAccordion").find('h3').filter(':contains(IPv4 address)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(IPv6 address)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').show();

                $("#interfaceAccordion").accordion("option", "active", 1);
                $('#interfaceForm').resetForm();
                $('#interfaceError').hide();
                $("#progress").hide();
            }
            if (platformType.indexOf('867VAE') !== -1 || platformType.indexOf('866VAE') !== -1) {
                wanMode = getWanModeFromDevice();
                //$('#isWan').show();
                //$('#isWanLabel').show();
                if (wanMode.indexOf('dsl') != -1) {
                    if (interfaceType === 2 || interfaceType === 539 || interfaceType === 1012) {
                        enableAllFields();
                    } else {
                        //$("#wanAlertDialog").dialog("open");
                        checkWanDialog = true;
                        //$('#wanmodedslethernetmessage').html("DSL is configured as WAN Interface. Do you want to continue?");
                        $('#wanmodedslethernetmessage').html($.i18n.prop("dslConfig"));
                        //$('#interfaceError').show();
                        //disableAllFields();
                    }
                } else if (wanMode.indexOf('ethernet') != -1) {
                    if (interfaceType === 2 || interfaceType === 539 || interfaceType === 1012) {
                        if ($("#cntrlr").is(':checked') || $('#cntrlr').is(':hidden')) {
                            //$("#wanAlertDialog").dialog("open");
                            checkWanDialog = true;
                            //$('#wanmodedslethernetmessage').html("Ethernet is configured as WAN Interface. Do you want to continue?");
                            $('#wanmodedslethernetmessage').html($.i18n.prop("ethernetConfig"));
                        }
                    } else {
                        enableAllFields();
                    }
                }
            }
            if (interfaceDetails.isPrimary) {
                $("#primaryWanInt").prop("checked", true);
            }
            if (interfaceDetails.isBackup) {
                $("#backupWanInt").prop("checked", true);
                slaDetails = getSlaDetails();
                if (slaDetails.ipAddress == "") {
                    slaDetails.ipAddress = "8.8.8.8";
                }
            }
            $("#interfaceDialog").dialog("option", "title", $.i18n.prop("editIandC") + " " + name + " " + $.i18n.prop("interfaceIandC"));
            var languageLocalization1 = $.i18n.prop("langwage");
            if (languageLocalization1 === "ja") {
                $("#interfaceDialog").dialog("option", "title", name + " " + $.i18n.prop("interfaceIandC") + $.i18n.prop("ofValueJapOnly") + $.i18n.prop("editIandC"));
            }

            populateData(interfaceDetails);
        } else if (interfaceType === 2 || interfaceType === 539 || interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532 || interfaceType === 1012) {
            // ATM/ Ethernet interface
            if (interfaceType === 2 || interfaceType === 539 || interfaceType === 1012) {
                var arrValues = [];
                var inc = 0;
                arrValues.length = 0;
                $('#interfaceTable tbody tr').each(function () {
                    if ($(this).find('td:nth-child(2)').text().indexOf(name) != -1) {
                        //$(this).find()
                        arrValues[inc] = $(this).find('td:nth-child(2)').text();
                        inc = inc + 1;
                    }
                });
                var getname = "", getDetails = [];
                if (name.indexOf(".") > -1) {
                    subinterfaceFlag = "yes";
                } else {
                    if (arrValues.length >= 2) {
                        //code
                        for (i = 0; i < arrValues.length; i++) {
                            if (arrValues[i].indexOf(".") > -1) {
                                //code
                                getname = arrValues[i];
                                getDetails = getEditInterfaceDetails(getname.trim());
                                if (getDetails.dot1qKey) {
                                    //alert("not possible");
                                    DslsubInterfaceFlag = true;
                                    break;
                                }
                            }


                        }
                        //alert("not possible");
                    } else {
                        subinterfaceFlag = "no";
                    }
                }
                $('#vciRow').hide();
                $('#vpiRow').hide();
                $("#vpi").removeClass("requiredVPI");
                $("#vci").removeClass("requiredVCI");
                $("#vpi").rules("remove");
                $("#vci").rules("remove");

                /* $('#DPNRow').show();
                 $('#dpn').addClass("requiredDPN")
                 $('#dpn').rules("add",{required: true}); */
                $('#encapRow').show();
                $('#encapId').addClass("requiredVlanRange");
                $('#encapId').rules("add", {required: true});
            } else {
                $('#vciRow').show();
                $('#vpiRow').show();
                $("#vpi").addClass("requiredVPI");
                $("#vci").addClass("requiredVCI");
                $("#vpi").rules("add", {required: true});
                $("#vci").rules("add", {required: true});
                /* $('#DPNRow').hide();
                 $('#dpn').removeClass("requiredDPN")
                 $('#dpn').rules("remove"); */
                $('#encapRow').hide();
                $('#encapId').removeClass("requiredVlanRange");
                $('#encapId').rules("remove");
            }
            if (controllerName.indexOf("DSL") > -1) {
                isEmptyBlock = true;
            } else {
                $("#interfaceDialog").dialog("open");
            }

            $("#interfaceAccordion").accordion("refresh");
            if (title.indexOf("DSL") > -1) {
                //code
            } else {
                //$("#interfaceAccordion").find('h3').filter(':contains(Media Type)').hide();
                //$("#interfaceAccordion").find('h3').filter(':contains(IPv4 address)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(IPv6 address)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(Primary Secondary Interface)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(Authentication)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("authentication") + ')').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(Connection)').show();
                //$("#interfaceAccordion").find('h3').filter(':contains(VLAN)').hide();

                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("PrimarySecondaryIntHeadingInC") + ')').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
                $("#interfaceAccordion h3 #authentication").parent().show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("connection") + ')').show();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("MediaType") + ')').hide();
                $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("VLAN") + ')').hide();


                $("#interfaceAccordion").accordion("option", "active", index);
                //$('#interfaceForm').resetForm();
                $('#interfaceError').hide();
                $("#progress").hide();
            }
            platformType = deviceCommunicator.getPlatformType();
            if (platformType.indexOf('867VAE') !== -1 || platformType.indexOf('866VAE') !== -1) {
                // wan mode cli only available in 867VAE and 866VAE
                wanMode = getWanModeFromDevice();
                //$('#isWan').show();
                //$('#isWanLabel').show();
                if (wanMode.indexOf('dsl') != -1) {
                    if (interfaceType === 2 || interfaceType === 539 || interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532 || interfaceType === 1012) {
                        enableAllFields();
                    } else {
                        //disableAllFields();
                        //$("#wanAlertDialog").dialog("open");
                        checkWanDialog = true;
                        //$('#wanmodedslethernetmessage').html("DSL is configured as WAN Interface.Do you want to continue?");
                        $('#wanmodedslethernetmessage').html($.i18n.prop("dslConfig"));
                    }
                } else if (wanMode.indexOf('ethernet') != -1) {
                    if (interfaceType === 2 || interfaceType === 539 || interfaceType === 1012) {
                        //disableAllFields();
                        if ($("#cntrlr").is(':checked') || $('#cntrlr').is(':hidden')) {
                            //$("#wanAlertDialog").dialog("open");
                            checkWanDialog = true;
                            //$('#wanmodedslethernetmessage').html("Ethernet is configured as WAN Interface.Do you want to continue?");
                            $('#wanmodedslethernetmessage').html($.i18n.prop("ethernetConfig"));
                        }
                    } else {
                        enableAllFields();
                    }
                }
            }

            populateData(interfaceDetails);
        }
        if (checkWanDialog === true) {
            //code
            $("#wanAlertDialog").dialog("open");
        } else {
            isEmptyBlock = true;
        }
        if (DslsubInterfaceFlag === true) {
            $("#dslSubInterfaceDialog").dialog("open");
        } else {
            isEmptyBlock = true;
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "editInterfaceElse()");
        if (interfaceDetails.hasLanZone) {
            updateLanSubnetObj(interfaceDetails, lanInterfacesglobe);
        }
    }
    /**
     Edits controller
     */
    function editController() {
        //consoleLogMethodDetailsStart("iAndC.js", "editController()");
        //setTimeout(function () {
        var arr, response, controllerName, editRow, preview, platformType, controllerMode, controllerType, deviceType;
        preview = false;
        arr = $('#shdslForm').formToArray();
        try {
            editRow = $('#interfaceTable tr.hilite');
            controllerName = $.trim(editRow.children().get(1).textContent);
            arr.push({name: "controllerName", value: controllerName});
            controllerMode = $('#controllerMode').val();
            arr.push({name: "controllerMode", value: controllerMode});
            platformType = deviceCommunicator.getPlatformType();
            if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
                response = deviceCommunicator.configureCommandsFromTemplate("shdslATM.txt", arr, preview);
            } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
                response = deviceCommunicator.configureCommandsFromTemplate("shdslEFM.txt", arr, preview);
            } else if (platformType.indexOf('EA') !== -1) {
                try {
                    deviceCommunicator.configureCommandsFromTemplate("noDslGroup0.txt", arr, preview);
                } catch (ex) {
                    isEmptyBlock = true;
                }
                response = deviceCommunicator.configureCommandsFromTemplate("shdslMMEFMATM.txt", arr, preview);
            } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
                controllerMode = $('#controllerMode').val();
                arr.push({name: "controllerMode", value: controllerMode});
                response = deviceCommunicator.configureCommandsFromTemplate("MMDsl.txt", arr, preview);
            } else if (deviceType !== "fixed") {
                if (controllerName.indexOf('VDSL') !== -1) {
                    controllerMode = $('#controllerMode').val();
                    arr.push({name: "controllerMode", value: controllerMode});
                    response = deviceCommunicator.configureCommandsFromTemplate("MMDsl.txt", arr, preview);
                } else if (controllerName.indexOf('SHDSL') !== -1) {
                    controllerType = getControllerType(controllerName);
                    controllerMode = $('#controllerMode').val();
                    if (controllerType === "EFM") {
                        response = deviceCommunicator.configureCommandsFromTemplate("shdslEFM.txt", arr, preview);
                    } else if (controllerType === "EFMATM") {
                        try {
                            deviceCommunicator.configureCommandsFromTemplate("noDslGroup0.txt", arr, preview);
                        } catch (ex) {
                            isEmptyBlock = true;
                        }
                        response = deviceCommunicator.configureCommandsFromTemplate("shdslMMEFMATM.txt", arr, preview);
                    } else if (controllerType === "auto") {
                        response = deviceCommunicator.configureCommandsFromTemplate("shdslAUTO.txt", arr, preview);
                    }
                }
            }
            /*if (platformType.indexOf('867VAE') !== -1 ){
             var cliWanDsl="wan mode dsl";
             deviceCommunicator.getConfigCmdOutput(cliWanDsl);
             }*/
            //$("#interfaceDialog").dialog("close");
            //$.unblockUI();
            //deviceCommunicator.doWriteMemory();
        } catch (error) {
            $("#interfaceDialog").dialog("open");
            $('#interfaceErrorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
            $('#interfaceError').show();
            $.unblockUI();
        }//},1000);
        //consoleLogMethodDetailsEnd("iAndC.js", "editController()");
    }
    /**
     This function was created to reduce code duplicacy as editing of controller is merged with Interface accordion.
     */

    function validateVlan(value) {
        var ranges = value.split(",");
        for (i = 0; i < ranges.length; i++) {
            var vlanValues = ranges[i].split("-");
            if (vlanValues.length > 1) {

                var low = Number(vlanValues[0]);
                var high = Number(vlanValues[1]);

                //Check that both are integers
                if (isNaN(low) || isNaN(high) || parseInt(low, 10) != low || parseInt(high, 10) != high) {
                    return false;
                }

                if (low >= high || low < 1 || high > 4094) {
                    return false;
                }
            } else {
                var vlan = Number(vlanValues[0]);

                // Check if vlan is not an integer
                if (isNaN(vlan) || parseInt(vlan, 10) != vlan) {
                    return false;
                }

                // Check if the vlan integer is a valid vlan
                if (vlan < 1 || vlan > 4094) {
                    return false
                }
            }
        }
        return true;
    }
    ;
    function setDialerValues(interfaceDetails, currentDialerValue, arr) {
        var iprout = $("input[type='radio'][name='waniptype']:checked").val();
        // var existingIprout = interfaceDetails.routIpvType;
        if (iprout === undefined || iprout === "" || iprout === null) {
            iprout = "wanipv4";
        }
        currentDialerValue['interfaceName'] = interfaceDetails.interfaceName;
        arr.push({name: "iprout", value: iprout});
            var isDilerGot = false;
            var dialerTag = "", dialerPoolTag = "", dialerGroupTag = "";
        if (!isEmpty(interfaceDetails.ipv4dialer) && (iprout === "wanipv4" || iprout === "wanipv4and6")) {
                arr.push({name: "wanipv4dialerTag", value: interfaceDetails.ipv4dialerPoolNumber});
                arr.push({name: "wanipv4dialerPoolTag", value: interfaceDetails.ipv4dialerPoolNumber});
                arr.push({name: "wanipv4dialerGroupTag", value: interfaceDetails.ipv4dialerGroupNumber});
                arr.push({name: "ipv4DialerOrInterface", value: interfaceDetails.ipv4dialer});
            arr.push({name: "PN", value: interfaceDetails.ipv4dialerPoolNumber});
                currentDialerValue['ipv4dialer'] = interfaceDetails.ipv4dialer;
            currentDialerValue['wanipv4dialerTag'] = interfaceDetails.ipv4dialerPoolNumber;
        } else if ((iprout === "wanipv4" || iprout === "wanipv4and6") && isEmpty(interfaceDetails.ipv4dialer)) {
                dialerTag = getDialerTag();
                dialerPoolTag = getDialerPoolTag();
                dialerGroupTag = getDialerGroupTag();
                isDilerGot = true;
                arr.push({name: "wanipv4dialerTag", value: dialerTag});
                arr.push({name: "wanipv4dialerPoolTag", value: dialerPoolTag});
                arr.push({name: "wanipv4dialerGroupTag", value: dialerGroupTag});
                arr.push({name: "ipv4DialerOrInterface", value: "Dialer" + dialerTag});
            currentDialerValue['wanipv4dialerTag'] = dialerTag;
            arr.push({name: "PN", value: dialerTag});
                currentDialerValue['ipv4dialer'] = "Dialer" + dialerTag;
            }
        if (!isEmpty(interfaceDetails.ipv6dialer) && (iprout === "wanipv6" || iprout === "wanipv4and6")) {
                arr.push({name: "wanipv6dialerTag", value: interfaceDetails.ipv6dialerPoolNumber});
                arr.push({name: "wanipv6dialerPoolTag", value: interfaceDetails.ipv6dialerPoolNumber});
                arr.push({name: "wanipv6dialerGroupTag", value: interfaceDetails.ipv6dialerPoolNumber});
                arr.push({name: "ipv6DialerOrInterface", value: interfaceDetails.ipv6dialer});
                currentDialerValue['ipv6dialer'] = interfaceDetails.ipv6dialer;
        } else if ((iprout === "wanipv6" || iprout === "wanipv4and6") && isEmpty(interfaceDetails.ipv6dialer)) {
                if (!isDilerGot) {
                    dialerTag = getDialerTag();
                    dialerPoolTag = getDialerPoolTag();
                    dialerGroupTag = getDialerGroupTag();
                } else {
                    dialerTag = dialerTag + 1;
                    dialerPoolTag = dialerPoolTag + 1;
                    dialerGroupTag = dialerGroupTag + 1;
                }
                arr.push({name: "wanipv6dialerTag", value: dialerTag});
                arr.push({name: "wanipv6dialerPoolTag", value: dialerPoolTag});
                arr.push({name: "wanipv6dialerGroupTag", value: dialerGroupTag});
                arr.push({name: "ipv6DialerOrInterface", value: "Dialer" + dialerTag});
                currentDialerValue['ipv6dialer'] = "Dialer" + dialerTag;
            }


    }

    function editInterface(argname) {
        //consoleLogMethodDetailsStart("iAndC.js", "editInterface()");
        // populateIpv6oE(argname);//  return;
        var arr, response, interfaceName, editRow, dialerTag = "", atmSubInterfaceTag, loopbackTag, preview = true, interfaceType, wanModeArray = [], interfaceDetails, href, isAccessIP, oldIpv4Address, newIpv4Address, title, primaryWanInterface = "", backupWanInterface = "", iflag = false;
        var currentDialerValue = {};
        //var dialerPoolTag = "", descRows = [], primaryWanInt, backupWanInt, arrDesc = [], patt1 = /_/, dialerGroupTag = "", encapId = "";
        $('#interfaceError').hide();
        if ($("#papSelect").is(':checked') || $("#chapSelect").is(':checked')) {
            $("#papChapUsername").rules("add", {required: true, minlength: 1});
            $("#papChapPassword").rules("add", {required: true, minlength: 1});
            $("#confirmPassword").rules("add", {required: true, minlength: 1, equalTo: $('#papChapPassword')});
        } else {
            $("#papChapUsername").rules("remove");
            $("#papChapPassword").rules("remove");
            $("#confirmPassword").rules("remove");
        }
        var ipv6oetype = $("input[type='radio'][name='ipv6oetype']:checked").val();
        var isIpv6Oe = $('#ipv6oe').is(':checked');
        if (!isIpv6Oe) {
            ipv6oetype = "";
        }
        if (isIpv6Oe && ipv6oetype === "bridge") {
            $("#bridgeIpAddress").rules("add", {"ipv4": true, required: true});
            $("#bridgeSubnet").rules("add", {"ipv4": true, required: true});
        } else {
            $("#bridgeIpAddress").rules("remove");
            $("#bridgeSubnet").rules("remove");
        }

        if ($("#encapId").val().length > 0) {
            isEmptyBlock = true;
        } else {
            if (subinterfaceFlag === "yes") {
                //code
            } else {
                $('#encapId').removeClass("requiredVlanRange");
                $('#encapId').rules("remove");
            }
        }
        title = $("#interfaceDialog").dialog("option", "title");
        href = $(location).attr('href');
        //if (title.indexOf("VLAN") !== -1) {
        //  $("#vlanID").rules("add", {required: true, range: [1, 4094]});
        //} else {
        //  $("#vlanID").rules("remove");
        //}

        if (title.indexOf("VLAN") !== -1) {
            $("#vlanID").rules("add", {required: false, "validVLANID1To4094": true});
        } else {
            $("#vlanID").rules("remove");
        }

        if (!$('#interfaceForm').valid()) {
            return false;
        }
        $("#interfaceDialog").dialog("close");
        //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
        blockPage("Applying");
        if ($('#noInt').is(':checked') && $('#ipv4Select').val() === 'select' && $('#ipv6Select').val() === 'select' && href.indexOf("EndUser") === -1) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html("Provide IPv4 or IPv6 Address.");
            $('#interfaceErrorMessage').html($.i18n.prop('provideIPvError'));
            $('#interfaceError').show();
            $.unblockUI();
            return false;
        }
        var iprout = $("input[type='radio'][name='waniptype']:checked").val();
        var wanType = $("input[type='radio'][name='intWanConfig']:checked").val();
        if (wanType === "none" && iprout === "wanipv4" && $('#ipv4Select').val() === 'select' && href.indexOf("EndUser") === -1) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html("Provide IPv4 or IPv6 Address.");
            $('#interfaceErrorMessage').html($.i18n.prop('provideIPv4Error'));
            $('#interfaceError').show();
            $.unblockUI();
            return false;
        }
        if (wanType !== "none" && iprout === "wanipv4" && $('#ipv4Select').val() === 'select' && href.indexOf("EndUser") === -1) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html("Provide IPv4 or IPv6 Address.");
            $('#interfaceErrorMessage').html($.i18n.prop('provideIPv4Error'));
            $('#interfaceError').show();
            $.unblockUI();
            return false;
        }
        if (wanType !== "none" && iprout === "wanipv6" && $('#ipv6Select').val() === 'select' && href.indexOf("EndUser") === -1) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html("Provide IPv4 or IPv6 Address.");
            $('#interfaceErrorMessage').html($.i18n.prop('provideIPv6Error'));
            $('#interfaceError').show();
            $.unblockUI();
            return false;
        }

        if ((wanType !== "none") && iprout === "wanipv4and6" && ($('#ipv4Select').val() === 'select' || $('#ipv6Select').val() === 'select') && href.indexOf("EndUser") === -1) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html("Provide IPv4 or IPv6 Address.");
            $('#interfaceErrorMessage').html($.i18n.prop('provideIPv4and6Error'));
            $('#interfaceError').show();
            $.unblockUI();
            return false;
        }
        //var ipv6oetype = $("input[type='radio'][name='ipv6oetype']:checked").val();
        // console.log("iprout::" + iprout + ":::" + $('#ipv6oe').is(':checked') + ":::" + isVanSelected);
        if (iprout === "wanipv4" && $('#ipv6oe').is(':checked') && ipv6oetype === "bridge") {
        var isVanSelected = false;
        $('#lanPortList input:checked').each(function () {
            isVanSelected = true;
            });
            if (!isVanSelected) {
            $("#interfaceDialog").dialog("open");
            //$('#interfaceErrorMessage').html("Provide IPv4 or IPv6 Address.");
            $('#interfaceErrorMessage').html($.i18n.prop('selectAtlestOneLanInt'));
            $('#interfaceError').show();
            $.unblockUI();
            return false;
            }
        }
        $("#progress").progressbar("option", "value", 0);
        //$("#progress").show();
        preview = true;
        response = "";
        arr = $('#interfaceForm').formToArray();
        setTimeout(function () {
            try {
                var iprout = $("input[type='radio'][name='waniptype']:checked").val();

                if (iprout === undefined || iprout === "" || iprout === null) {
                    iprout = "wanipv4";
                }
                arr.push({name: "iprout", value: iprout});
                editRow = $('#interfaceTable tr.hilite');
                if (argname.indexOf("DSL") > -1) {
                    conditrue = true;
                } else {
                    conditrue = editRow.children().get(1);
                }
                if (conditrue && title.indexOf($.i18n.prop("edit")) !== -1) {
                    if (argname.indexOf("DSL") > -1) {
                        interfaceName = $("#controllerInterface").val();
                    } else {
                        interfaceName = $.trim(editRow.children().get(1).textContent);
                    }

                    interfaceType = deviceCommunicator.getInterfaceType(interfaceName);

                    if (isSerial(interfaceType) === true || interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532 || interfaceType === 2 || interfaceType === 539 || interfaceType === 1012 || interfaceType === 1 || interfaceType === 4) {
                        if ($("#isWan").is(':checked')) {
                            if (interfaceType === 1 || interfaceType === 4) {
                                wanModeArray.push({name: "wanMode", value: "ethernet"});
                            } else {
                                wanModeArray.push({name: "wanMode", value: "dsl"});
                            }
                            response = response + deviceCommunicator.configureCommandsFromTemplate("wanMode.txt", wanModeArray, preview) + "\n";
                        }
                        interfaceDetails = getEditInterfaceDetails(interfaceName);
                        if (!isEmpty(interfaceDetails.ipv6DhcpPrefixName)) {
                            arr.push({name: "oldipv6PrefixName", value: interfaceDetails.ipv6DhcpPrefixName});
                        } else {
                            arr.push({name: "oldipv6PrefixName", value: ""});
                        }
                        setDhcpIntValues(arr, interfaceDetails);
                        if (interfaceDetails.isPppoe) {
                            if (interfaceDetails.isPrimary) {
                                var ipv4Dialer = interfaceDetails.ipv4dialer;
                                var ipv6Dialer = interfaceDetails.ipv6dialer;
                                var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: interfaceDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                                response = response + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
                            } else if (interfaceDetails.isBackup) {
                                var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                                var pppoeArr = [{name: "interfaceName", value: currentBackupWanInterface}];
                                pppoeArr.push({name: "slaIP", value: slaDetails.ipAddress});
                                pppoeArr.push({name: "natList", value: "nat-list"});
                                setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, pppoeArr);
                                response = response + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview) + "\n";
                        }


                            var removeDHCP = [{name: "interfaceName", value: interfaceDetails.interfaceName}, {name: "isDHCP", value: false}];

                            setDhcpIntValues(removeDHCP, interfaceDetails);
                            setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, removeDHCP);
                            if (interfaceDetails.isPrimary && !isEmpty(currentBackupWanInterface)) {
                                removeDHCP.push({name: "isBackupExist", value: true});
                            } else {
                                removeDHCP.push({name: "isBackupExist", value: false});
                            }
                            response = response + deviceCommunicator.configureCommandsFrom_Template2("ipv6oeusingdhcp.txt", removeDHCP, true);
                            if (!isEmpty(interfaceDetails.ipv4dialer)) {
                                response = response + "interface " + interfaceDetails.ipv4dialer + "\n";
                                response = response + "shutdown \n";
                                response = response + "exit \n";
                                response = response + "default interface " + interfaceDetails.ipv4dialer + "\n";
                                response = response + "no interface " + interfaceDetails.ipv4dialer + "\n";
                                response = response + "no dialer-list " + interfaceDetails.ipv4dialerPoolNumber + " protocol ip permit \n";
                            }
                            if (!isEmpty(interfaceDetails.ipv6dialer)) {
                                response = response + "interface " + interfaceDetails.ipv6dialer + "\n";
                                response = response + "shutdown \n";
                                response = response + "exit \n";
                                response = response + "default interface " + interfaceDetails.ipv6dialer + "\n";
                                response = response + "no interface " + interfaceDetails.ipv6dialer + "\n";
                                response = response + "no dialer-list " + interfaceDetails.ipv6dialerPoolNumber + " protocol ipv6 permit \n";
                            }
                            response = response + "default interface " + interfaceDetails.interfaceName + "\n";
                            var isPppoe = $('#pppoe').is(':checked');
                            if (!isPppoe) {
                                response = response + pushIpv60eBridge(arr, interfaceDetails);
                            }
                        }
                        response = response + checkAndRemoveIpv6AutoConfig(interfaceDetails);
                        if (interfaceDetails.ipv4Address === '10.10.10.1' && ($('#ipv4Select').val() !== 'staticip' || ($('#ipv4Select').val() === 'staticip' && $('#ipv4Address').val() !== '10.10.10.1'))) {
                            response = response + deviceCommunicator.configureCommandsFromTemplate("removeAccessList23.txt", arr, preview) + "\n";
                        }
                        if ($('#ipv4Select').val() === 'staticip' &&
                                interfaceDetails.ipv4Address.length > 6 && href.indexOf(interfaceDetails.ipv4Address) !== -1) {
                            isAccessIP = true;
                            oldIpv4Address = interfaceDetails.ipv4Address;
                            newIpv4Address = $('#ipv4Address').val();
                            arr.push({name: "interfaceName", value: interfaceName});
                            var isPppoe = $('#pppoe').is(':checked');
                            if (isPppoe) {
                                setDialerValues(interfaceDetails, currentDialerValue, arr);
                                setMtuMssValuesInArray(arr, "");
                                setMtuMssValuesInArray(arr, "ipv6");
                            } else {
                                arr.push({name: "ipv4DialerOrInterface", value: interfaceName});
                                arr.push({name: "ipv6DialerOrInterface", value: interfaceName});
                            }
                            response = response + configureInterface(arr, preview, interfaceName, interfaceDetails, href, isAccessIP, oldIpv4Address, newIpv4Address);
                            try {
                                console.log(response);
                                deviceCommunicator.getConfigCmdOutput(response);

                            } catch (e) {
                                errorLogInConsole("ModifyConfig Error -" + error.errorResponse + "   Command: " + error.errorCmd);
                            }
                            refresh();
                            return response;

                        }

                        var isPppoe = $('#pppoe').is(':checked');
                        var isPPP = false;
                        if (interfaceName.indexOf("Serial") !== -1) {
                            isPPP = getPPPConfig();
                        }
                        currentDialerValue['interfaceName'] = interfaceName;
                        currentDialerValue['ipv4dialer'] = "";
                        currentDialerValue['ipv6dialer'] = "";
                        if (isPppoe || isPPP) {
                            var delDialerFlag = false;
                            if (isPppoe) {
                                setDialerValues(interfaceDetails, currentDialerValue, arr);
                                setMtuMssValuesInArray(arr, "");
                                setMtuMssValuesInArray(arr, "ipv6");
                                if (interfaceType === 539 || interfaceType === 2) {
                                    response = response + deviceCommunicator.configureCommandsFrom_Template2("createDialerEthernet.txt", arr, preview) + "\n";
                                    iflag = true;
                                } else {
                                    response = response + deviceCommunicator.configureCommandsFrom_Template("createDialer.txt", arr, preview) + "\n";
                                }

                            } else if (isPPP) {
                                //arr.push({name: "natInterface", value: interfaceName});

                                arr.push({name: "interfaceName", value: interfaceName});
                                var iprout = $("input[type='radio'][name='waniptype']:checked").val();
                                arr.push({name: "iprout", value: iprout});
                                arr.push({name: "ipv4DialerOrInterface", value: interfaceDetails.interfaceName});
                                arr.push({name: "ipv6DialerOrInterface", value: interfaceDetails.interfaceName});
                                response = response + deviceCommunicator.configureCommandsFromTemplate("createInterface.txt", arr, preview);
                                setMtuMssValuesInArray(arr);
                            }
                            arr.push({name: "natInterface", value: interfaceName});
                            if ($('#noInt').is(':checked') === true) {
                                if ($("#enableNat").is(':checked')) {
                                    response = response + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", arr, preview) + "\n";
                                } else if (!$("#enableNat").is(':checked')) {
                                    response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", arr, preview) + "\n";
                                }
                            } else {
                                //  if (natEnabledFlag || (!natEnabledFlag && enableDisableNatFlag)) {
                                    //enableDisableNat();
//                                    if ($("#enableNat").is(':checked')) {
//                                        response = response + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", arr, preview) + "\n";
//                                    } else if (!$("#enableNat").is(':checked')) {
//                                        response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", arr, preview) + "\n";
//                                    }
                                response = response + enableDisableNatNew("enableNat", currentDialerValue, preview);


                                //   }
                            }

                            if (interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532) {
                                if ($("#isEdit").val() === "true") {
                                    atmSubInterfaceTag = interfaceDetails.interfaceName.replace(/ATM/, "");
                                    response = response + doNoShut(interfaceName, preview);
                                } else {
                                    atmSubInterfaceTag = interfaceName.replace('ATM', '') + getAtmSubInterfaceTag(interfaceName);
                                }
                                if (atmSubInterfaceTag.indexOf(".") === -1) {
                                    atmSubInterfaceTag = interfaceName.replace('ATM', '') + getAtmSubInterfaceTag(interfaceName);
                                }
                                //$("#progress").progressbar("option", "value", 20);
                                if (interfaceDetails.isPrimary && currentBackupWanInterface != "" && $('#noInt').is(':checked') === true) {
                                    $("#interfaceDialog").dialog("open");
                                    //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
                                    $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
                                    $('#interfaceError').show();
                                    $.unblockUI();
                                    $('#backupWanInt').attr('disabled', 'disabled');
                                    return false;
                                } else {
                                    arr.push({name: "atmSubInterfaceTag", value: atmSubInterfaceTag});
                                    response = response + deviceCommunicator.configureCommandsFromTemplate("createATMInterface.txt", arr, preview) + "\n";
                                    var ipv6oetype = $("input[type='radio'][name='ipv6oetype']:checked").val();
                                    var isIpv6Oe = $('#ipv6oe').is(':checked');
                                    if (!isIpv6Oe) {
                                        ipv6oetype = "";
                                    }
                                    if (ipv6oetype !== "bridge") {
                                        response = response + deviceCommunicator.configureCommandsFrom_Template("createATMInterfacePppoe.txt", arr, preview) + "\n";
                                    }
                                    if (($("#description").val().length > 0) && ($("#noInt").is(':checked') === true)) {
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("ATMDescription.txt", arr, preview) + "\n";
                                    }
                                    if (($('#primaryWanInt').is(':checked') === true)) {
                                        primaryWanInterface = atmSubInterfaceTag;
                                        interfaceDetails.isPrimary = true;
                                        response = response + setATMPrimaryWanInterfacewithPPPoE(interfaceName, primaryWanInterface, interfaceDetails, arr, preview);
                                        //$("#enableNat").prop("checked", true);
                                    }
                                    if ($('#backupWanInt').is(':checked') === true) {

                                        if (currentPrimaryWanInterface == "" || currentPrimaryWanInterface == null) {
                                            $("#interfaceDialog").dialog("open");
                                            // $('#interfaceErrorMessage').html(" Backup interface cannot be set when no Primary interface is set ");
                                            $('#interfaceErrorMessage').html($.i18n.prop("bcpCantSet"));
                                            $('#interfaceError').show();
                                            $.unblockUI();
                                            $('#backupWanInt').attr('disabled', 'disabled');
                                            return false;
                                        }
                                        if (backupWanInterface == currentPrimaryWanInterface) {
                                            $("#interfaceDialog").dialog("open");
                                            //$('#interfaceErrorMessage').html(backupWanInterface+" is Primary Wan Interface. Please choose another interface as Primary WAN before setting this as backup WAN  ");
                                            $('#interfaceErrorMessage').html(backupWanInterface + " " + $.i18n.prop("isPrimaryWan"));
                                            $('#interfaceError').show();
                                            $.unblockUI();
                                            return false;
                                        }
                                        backupWanInterface = atmSubInterfaceTag;
                                        interfaceDetails.isBackup = true;
                                        response = response + setATMBackupWanInterfacewithPPPoE(interfaceName, backupWanInterface, interfaceDetails, arr, preview);
                                        $('#bkpWanDetails').hide();
                                    }
                                    if ($('#noInt').is(':checked') === true) {
                                        var intDesc = $("#description").val();
                                        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
                                        if (interfaceDetails.isPrimary) {
                                            if (currentBackupWanInterface == "") {
                                                var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
                                                if (interfaceDetails.isPppoe) {
                                                    delDialerFlag = true;
                                                    //  var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: interfaceDetails.routIpvType}, {name: "ipv4dialer", value: interfaceDetails.ipv4dialer}, {name: "ipv6dialer", value: interfaceDetails.ipv6dialer}];
                                                    // response = response + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview) + "\n";
                                                    $("#papSelect").prop("checked", false);
                                                    $("#chapSelect").prop("checked", false);
                                                } else {
                                                    arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                                                    response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview) + "\n";
                                                    arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                                                    arrDel.push({name: "iprout", value: interfaceDetails.routIpvType});
                                                    response = deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview) + "\n";
                                                }
                                                if (intDesc == "" || intDesc == undefined) {
                                                    response = response + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview) + "\n";
                                                } else {
                                                    arrDel.push({name: "description", value: intDesc});
                                                    response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview) + "\n";
                                                }
                                                currentPrimaryWanInterface = "";
                                                currentPrimaryWanInterfaceDesc = "";
                                            } else {
                                                $("#interfaceDialog").dialog("open");
                                                //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
                                                $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
                                                $('#interfaceError').show();
                                                $.unblockUI();
                                                $('#backupWanInt').attr('disabled', 'disabled');
                                                return false;
                                            }
                                        }
                                        if (interfaceDetails.isBackup) {
                                            var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}];
                                            var pppoeArr = [{name: "interfaceName", value: currentBackupWanInterface}, {name: "dialerTag", value: interfaceDetails.ipv4dialer}];
                                            var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                                            if (primaryInt.ipv4dialer.length > 0) {
                                                pppoeArr.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                                                arrDel.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                                            } else {
                                                pppoeArr.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                                                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                                            }
                                            if (interfaceDetails.isPppoe) {
                                                delDialerFlag = true;
                                                pppoeArr.push({name: "slaIP", value: slaDetails.ipAddress});
                                                pppoeArr.push({name: "natList", value: "nat-list"});
                                                // 6setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, pppoeArr);
                                                //response = response + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview) + "\n";
                                                $("#papSelect").prop("checked", false);
                                                $("#chapSelect").prop("checked", false);
                                            } else {
                                                arrDel.push({name: "natInterface", value: currentBackupWanInterface});
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview) + "\n";
                                                arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
                                                //arrDel.push({name:"primaryInterface", value:currentPrimaryWanInterface});
                                                arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                                                arrDel.push({name: "natList", value: "nat-list"});
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("deleteBackupInterfaceConfigs.txt", arrDel, preview) + "\n";
                                            }
                                            if (intDesc == "" || intDesc == undefined) {
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview) + "\n";
                                            } else {
                                                arrDel.push({name: "description", value: intDesc});
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                                            }
                                            currentBackupWanInterface = "";
                                            currentBackupWanInterfaceDesc = "";
                                        }
                                    }
                                }
                            } else if (interfaceType === 1 || interfaceType === 2 || interfaceType === 4 || isSerial(interfaceType) === true || interfaceType === 539 || interfaceType === 1012) {
                                if (interfaceType === 2 || interfaceType === 539) {
                                    if ($("#isEdit").val() === "true") {
                                        ethernetSubTag = interfaceDetails.interfaceName.replace(/Ethernet/, "");
                                        doNoShut(interfaceName);
                                    } else {
                                        ethernetSubTag = interfaceName.replace('Ethernet', '') + getEthernetSubInterfaceTag(interfaceName);
                                    }
                                    if (ethernetSubTag.indexOf(".") === -1) {
                                        ethernetSubTag = interfaceName.replace('Ethernet', '') + getEthernetSubInterfaceTag(interfaceName);
                                    }
                                }

                                if (interfaceDetails.isPrimary && currentBackupWanInterface != "" && $('#noInt').is(':checked') === true) {
                                    $("#interfaceDialog").dialog("open");
                                    //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
                                    $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
                                    $('#interfaceError').show();
                                    $.unblockUI();
                                    $('#backupWanInt').attr('disabled', 'disabled');
                                    return false;
                                } else {
                                    var arr1 = [];
                                    var encapId = "";
                                    var encapkeyString = "";
                                    var mainEthernet = "";
                                    var arrMain = [];
                                    if (iflag) {
                                        encapId = $("#encapId").val();
                                        if (encapId.length == 0) {
                                            //code
                                            arr.push({name: "ethernetCli", value: "no shutdown"});
                                            arr.push({name: "interfaceName", value: interfaceName}, {name: "encapsulation", value: encapkeyString});
                                        } else {

                                            encapkeyString = "encapsulation dot1q " + encapId;
                                            arr.push({name: "ethernetCli", value: "no ip address" + "\n" + "no shutdown"});
                                            mainEthernet = interfaceName;
                                            if (interfaceDetails.ipv4dialer.length > 0) {
                                                //code
                                                arrMain.push({name: "interfaceName", value: mainEthernet}, {
                                                    name: "dialerPoolTag", value: interfaceDetails.ipv4dialerPoolNumber});
                                                response = response + deviceCommunicator.configureCommandsFromTemplate2("deleteEthernetInterfacePppoe.txt", arrMain, preview);
                                            }
                                            interfaceName = "Ethernet" + ethernetSubTag;
                                            arr.push({name: "interfaceName", value: interfaceName}, {name: "encapsulation", value: encapkeyString});
                                        }
                                        response = response + deviceCommunicator.configureCommandsFromTemplate2("createSubEthernet.txt", arr, preview);
                                        arr1.push({
                                            name: "ethernetCli",
                                            value: ""
                                        }, {
                                            name: "encapsulation",
                                            value: encapkeyString
                                        }, {
                                            name: "interfaceName",
                                            value: interfaceName
                                        }, {
                                            name: "PN",
                                            value: currentDialerValue['wanipv4dialerTag']
                                        }, {
                                            name: "description",
                                            value: $("#description").val()
                                        });
                                        response = response + deviceCommunicator.configureCommandsFromTemplate2("createSubEthernet.txt", arr1, preview);
                                    } else {
                                        arr.push({name: "interfaceName", value: interfaceName});
                                        if (interfaceDetails.ipv4Address.length > 6 && href.indexOf(interfaceDetails.ipv4Address) !== -1) {
                                            isAccessIP = true;
                                        }
                                        if (!isAccessIP && interfaceDetails.ipv4dialer.length === 0 && interfaceName.indexOf("Serial") === -1) {
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("createInterface.txt", arr, preview);
                                        }
                                        var ipv6oetype = $("input[type='radio'][name='ipv6oetype']:checked").val();
                                        var isIpv6Oe = $('#ipv6oe').is(':checked');
                                        if (!isIpv6Oe) {
                                            ipv6oetype = "";
                                        }
                                        if (isPppoe && ipv6oetype !== "bridge") {
                                            response = response + deviceCommunicator.configureCommandsFrom_Template("interfacePppoe.txt", arr, preview);
                                        }

                                    }
                                    /*if ($("#description").val().length > 0) {
                                     response  = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arr, preview);
                                     }*/
                                    if (($("#description").val().length > 0) && ($('#noInt').is(':checked') === true)) {
                                        if (iflag) {
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arr1, preview);
                                        } else {
                                            response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arr, preview);
                                        }
                                    }
                                    if (($('#primaryWanInt').is(':checked') === true)) {
                                        primaryWanInterface = interfaceName;
                                        interfaceDetails.isPrimary = true;
                                        response = response + setPrimaryWanInterfacewithPPPoE(interfaceName, primaryWanInterface, interfaceDetails, arr, preview);
                                        response = response + pushIpv60eBridge(arr, interfaceDetails);

                                        //$("#enableNat").prop("checked", true);
                                    }
                                    if ($('#backupWanInt').is(':checked') === true) {
                                        if (currentPrimaryWanInterface == "" || currentPrimaryWanInterface == null) {
                                            $("#interfaceDialog").dialog("open");
                                            //$('#interfaceErrorMessage').html(" Backup interface cannot be set when no Primary interface is set ");
                                            $('#interfaceErrorMessage').html($.i18n.prop("bcpCantSet"));
                                            $('#interfaceError').show();
                                            $.unblockUI();
                                            $('#backupWanInt').attr('disabled', 'disabled');
                                            return false;
                                        }
                                        if (backupWanInterface == currentPrimaryWanInterface) {
                                            $("#interfaceDialog").dialog("open");
                                            //$('#interfaceErrorMessage').html(backupWanInterface+" is Primary Wan Interface. Please choose another interface as Primary WAN before setting this as backup WAN  ");
                                            $('#interfaceErrorMessage').html(backupWanInterface + " " + $.i18n.prop("isPrimaryWan"));
                                            $('#interfaceError').show();
                                            $.unblockUI();
                                            return false;
                                        }
                                        // this code is just for safety in case of any executional glitch, to prevent same interface from being set as Primary & backup
                                        backupWanInterface = interfaceName;
                                        interfaceDetails.isBackup = true;
                                        response = response + setBackupWanInterfacewithPPPoE(interfaceName, backupWanInterface, interfaceDetails, arr, preview);
                                        response = response + pushIpv60eBridge(arr, interfaceDetails);
                                        $('#bkpWanDetails').hide();
                                    }
                                    if ($('#noInt').is(':checked') === true) {
                                        var intDesc = $("#description").val();
                                        deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
                                        if (interfaceDetails.isPrimary) {
                                            if (currentBackupWanInterface == "") {
                                                var arrDel = [{name: "interfaceName", value: currentPrimaryWanInterface}];
                                                var intDetails = getEditInterfaceDetails(currentPrimaryWanInterface);
                                                if (interfaceDetails.isPppoe) {
                                                    delDialerFlag = true;
                                                    var ipv4Dialer = intDetails.ipv4dialer;
                                                    var ipv6Dialer = intDetails.ipv6dialer;
                                                    if (intDetails.isPpp) {
                                                        ipv4Dialer = intDetails.interfaceName;
                                                        ipv6Dialer = intDetails.interfaceName;
                                                    }
                                                    //     var pppoeArr = [{name: "interfaceName", value: currentPrimaryWanInterface}, {name: "iprout", value: intDetails.routIpvType}, {name: "ipv4dialer", value: ipv4Dialer}, {name: "ipv6dialer", value: ipv6Dialer}];
                                                    //    response = response + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryPPPOE.txt", pppoeArr, preview);
                                                    $("#papSelect").prop("checked", false);
                                                    $("#chapSelect").prop("checked", false);
                                                } else {
                                                    arrDel.push({name: "natInterface", value: currentPrimaryWanInterface});
                                                    response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                                                    arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                                                    arrDel.push({name: "iprout", value: intDetails.routIpvType});
                                                    response = response + deviceCommunicator.configureCommandsFrom_Template("deletePrimaryIfRoutesAndAcl.txt", arrDel, preview);
                                                }
                                                if (intDesc == "" || intDesc == undefined) {
                                                    response = response + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
                                                } else {
                                                    arrDel.push({name: "description", value: intDesc});
                                                    response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                                                }
                                                currentPrimaryWanInterface = "";
                                                currentPrimaryWanInterfaceDesc = "";
                                            } else {
                                                $("#interfaceDialog").dialog("open");
                                                //$('#interfaceErrorMessage').html(" Backup interface exists. Primary interface cannot be deleted. Un-configure backup interface and try again. ");
                                                $('#interfaceErrorMessage').html($.i18n.prop("bcpInterfaceExists"));
                                                $('#interfaceError').show();
                                                $.unblockUI();
                                                $('#backupWanInt').attr('disabled', 'disabled');
                                                return false;
                                            }
                                        }
                                        if (interfaceDetails.isBackup) {
                                            var arrDel = [{name: "interfaceName", value: currentBackupWanInterface}];
                                            var pppoeArr = [{name: "interfaceName", value: currentBackupWanInterface}, {name: "dialerTag", value: interfaceDetails.ipv4dialer}];
                                            var primaryInt = getEditInterfaceDetails(currentPrimaryWanInterface);
                                            if (primaryInt.ipv4dialer.length > 0) {
                                                pppoeArr.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                                                arrDel.push({name: "primaryInterface", value: primaryInt.ipv4dialer});
                                            } else {
                                                pppoeArr.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                                                arrDel.push({name: "primaryInterface", value: currentPrimaryWanInterface});
                                            }
                                            if (interfaceDetails.isPppoe || interfaceDetails.isPpp) {
                                                if (!$('#pppoe').is(':checked')) {
                                                delDialerFlag = true;
                                                    $("#papSelect").prop("checked", false);
                                                    $("#chapSelect").prop("checked", false);
                                                }
                                                var interfaceDialer = interfaceDetails.ipv4dialer;
                                                if (interfaceDetails.isPpp) {
                                                    interfaceDialer = interfaceDetails.interfaceName;
                                                }
                                                //pppoeArr.push({name:"primaryInterface", value:currentPrimaryWanInterface});
                                                pppoeArr.push({name: "slaIP", value: slaDetails.ipAddress});
                                                pppoeArr.push({name: "natList", value: "nat-list"});
                                                //7   setPrimaryAndSecondryInterfaceValuesToArray(primaryInt, interfaceDetails, pppoeArr);
                                                //  response = response + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigsPPPOE.txt", pppoeArr, preview);
                                            } else {
                                                arrDel.push({name: "natInterface", value: currentBackupWanInterface});
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNat.txt", arrDel, preview);
                                                arrDel.push({name: "routeInterface", value: currentBackupWanInterface});
                                                //arrDel.push({name:"primaryInterface", value:currentPrimaryWanInterface});
                                                arrDel.push({name: "slaIP", value: slaDetails.ipAddress});
                                                arrDel.push({name: "natList", value: "nat-list"});
                                                response = response + deviceCommunicator.configureCommandsFrom_Template("deleteBackupInterfaceConfigs.txt", arrDel, preview);
                                            }
                                            if (intDesc == "" || intDesc == undefined) {
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", arrDel, preview);
                                            } else {
                                                arrDel.push({name: "description", value: intDesc});
                                                response = response + deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", arrDel, preview);
                                            }
                                            currentBackupWanInterface = "";
                                            currentBackupWanInterfaceDesc = "";
                                        }
                                        response = response + pushIpv60eBridge(arr, interfaceDetails);
                                    }

                                }
                            }

                            var ppoeInterface = "Dialer" + currentDialerValue['wanipv4dialerTag'];
                            if (isPppoe) {
                                arr.push({name: "isPPP", value: false});
                                if (delDialerFlag === false) {
                                    ppoeInterface = "Dialer" + dialerTag;
                                    arr.push({name: "ppoeInterface", value: ppoeInterface});

                                    //var iprout=$("input[type='radio'][name='waniptype']:checked").val();
                                    response = response + configureDialerInterface(interfaceDetails, arr, preview);
                                }
                            } else if (isPPP) {
                                ppoeInterface = interfaceName;
                                arr.push({name: "isPPP", value: true});
                                arr.push({name: "ppoeInterface", value: ppoeInterface});
                                arr.push({name: "interfaceName", value: interfaceName});
                                setPPPConfigProp(arr);
                                //    interfaceDetails=getEditInterfaceDetails(interfaceName);

                                // response = response + deviceCommunicator.configureCommandsFromTemplate("createInterface.txt", arr, preview);
                                setMtuMssValuesInArray(arr);
                                response = response + deviceCommunicator.configureCommandsFrom_Template2("createSerialPPP.txt", arr, preview);
                                if (interfaceDetails.isDCE && interfaceName.indexOf("Serial") !== -1) {
                                    var clockRate = $('#clockRate').val();
                                    arr.push({name: "clockRate", value: clockRate});
                                    response = response + deviceCommunicator.configureCommandsFromTemplate2("createClockRate.txt", arr, preview);
                                }
                                response = response + configureDialerInterface(interfaceDetails, arr, preview);
                            }
                            //To avoid complexity with Ipv4 Authentication and Ipv6 Authentication i merged pap.txt and chap.txt in to papchap.txt 
                            if ($("#papSelect").is(':checked') || $("#chapSelect").is(':checked') || $("#papSelectipv6").is(':checked') || $("#chapSelectipv6").is(':checked')) {
                                if (!$("#papSelect").is(':checked')) {
                                    arr.push({name: "papSelect", value: "off"});
                                }
                                if (!$("#chapSelect").is(':checked')) {
                                    arr.push({name: "chapSelect", value: "off"});
                                }
                                if (!$("#papSelectipv6").is(':checked')) {
                                    arr.push({name: "papSelectipv6", value: "off"});
                                }
                                if (!$("#chapSelectipv6").is(':checked')) {
                                    arr.push({name: "chapSelectipv6", value: "off"});
                                }
                                if (!$("#ipcpdns").is(':checked')) {
                                    arr.push({name: "ipcpdns", value: "off"});
                                }
                                if (!$("#ipcpdnsipv6").is(':checked')) {
                                    arr.push({name: "ipcpdnsipv6", value: "off"});
                                }
                                response = response + deviceCommunicator.configureCommandsFrom_Template("papchap.txt", arr, preview);
                            }
//                            if (($("#papSelect").is(':checked') && $("#chapSelect").is(':checked')) || ($("#papSelectipv6").is(':checked') && $("#chapSelectipv6").is(':checked'))) {
//                                response = response + deviceCommunicator.configureCommandsFrom_Template("papchap.txt", arr, preview);
//                            } else if ($("#papSelect").is(':checked') || $("#papSelectipv6").is(':checked')) {
//                                response = response + deviceCommunicator.configureCommandsFrom_Template("pap.txt", arr, preview);
//                            } else if ($("#chapSelect").is(':checked') || $("#chapSelectipv6").is(':checked')) {
//                                response = response + deviceCommunicator.configureCommandsFrom_Template("chap.txt", arr, preview);
//                            }
                            if ($('#ipv4Select').val() !== 'select') {
                                response = response + setMTUSizeForInterfaces(preview);
                            }
                            $("#progress").progressbar("option", "value", 100);
                        } else {
                            arr.push({name: "ipv4DialerOrInterface", value: interfaceDetails.interfaceName});
                            arr.push({name: "ipv6DialerOrInterface", value: interfaceDetails.interfaceName});
                            if (interfaceType === 538 || interfaceType === 503 || interfaceType === 504 || interfaceType === 532) {
                                if ($("#isEdit").val() === "true") {
                                    interfaceDetails = getEditInterfaceDetails(interfaceName);
                                    atmSubInterfaceTag = interfaceDetails.interfaceName.replace(/ATM/, "");
                                    doNoShut(interfaceName);
                                } else {
                                    atmSubInterfaceTag = interfaceName.replace('ATM', '') + getAtmSubInterfaceTag(interfaceName);
                                }
                                if (atmSubInterfaceTag.indexOf(".") === -1) {
                                    atmSubInterfaceTag = interfaceName.replace('ATM', '') + getAtmSubInterfaceTag(interfaceName);
                                }
                                //$("#progress").progressbar("option", "value", 20);
                                arr.push({name: "atmSubInterfaceTag", value: atmSubInterfaceTag});
                                response = response + configureATMInterface(arr, preview, interfaceDetails);

                                if ($('#noInt').is(':checked') === true) {
                                    arr.push({name: "natInterface", value: interfaceName});
                                    if ($("#enableNat").is(':checked')) {
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", arr, preview);
                                    } else if (!$("#enableNat").is(':checked')) {
                                        response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", arr, preview);
                                    }
                                } else {
                                    // if (natEnabledFlag || (!natEnabledFlag && enableDisableNatFlag)) {
//                                        arr.push({name: "natInterface", value: interfaceName});
//                                        if ($("#enableNat").is(':checked')) {
//                                            response = response + deviceCommunicator.configureCommandsFromTemplate("createNatOutside.txt", arr, preview);
//                                        } else if (!$("#enableNat").is(':checked')) {
//                                            response = response + deviceCommunicator.configureCommandsFromTemplate("deleteNatOutside.txt", arr, preview);
//                                        }
                                    response = response + enableDisableNatNew("enableNat", currentDialerValue, preview);
                                    //  }
                                }
                            } else if (interfaceType === 1 || interfaceType === 2 || interfaceType === 4 || (isSerial(interfaceType) === true) || interfaceType === 539 || interfaceType === 1012) {
                                if (interfaceType === 2 || interfaceType === 539) {
                                    if ($("#isEdit").val() === "true") {
                                        ethernetSubTag = interfaceDetails.interfaceName.replace(/Ethernet/, "");
                                        doNoShut(interfaceName);
                                    } else {
                                        ethernetSubTag = interfaceName.replace('Ethernet', '') + getEthernetSubInterfaceTag(interfaceName);
                                    }
                                    if (ethernetSubTag.indexOf(".") === -1) {
                                        var encapId = "";
                                        var encapkeyString = "";
                                        encapId = $("#encapId").val();
                                        ethernetSubTag = interfaceName.replace('Ethernet', '') + getEthernetSubInterfaceTag(interfaceName);
                                        if (encapId.length == 0) {
                                            //code
                                            arr.push({name: "ethernetCli", value: "no ip address" + "\n" + "no shutdown"});
                                            arr.push({name: "interfaceName", value: interfaceName}, {name: "encapsulation", value: encapkeyString});
                                        } else {

                                            encapkeyString = "encapsulation dot1q " + encapId;
                                            arr.push({name: "ethernetCli", value: "no ip address" + "\n" + "no shutdown"});
                                            interfaceName = "Ethernet" + ethernetSubTag;
                                            arr.push({name: "interfaceName", value: interfaceName}, {name: "encapsulation", value: encapkeyString});
                                        }
                                        //encapId = $("#encapId").val();
                                        //arr.push({name:"ethernetCli", value: "no ip address" + "\n" + "no shutdown"});
                                        //interfaceName="Ethernet"+ethernetSubTag;
                                        //arr.push({name: "interfaceName", value: interfaceName},{name:"encapsulation", value: encapkeyString});
                                        response = response + deviceCommunicator.configureCommandsFromTemplate2("createSubEthernetWithoutPPPoE.txt", arr, preview);
                                        var arr1 = [];
                                        arr1.push({
                                            name: "ethernetCli",
                                            value: ""
                                        }, {
                                            name: "encapsulation",
                                            value: encapkeyString
                                        }, {
                                            name: "interfaceName",
                                            value: interfaceName
                                        });
                                        response = response + deviceCommunicator.configureCommandsFromTemplate2("createSubEthernetWithoutPPPoE.txt", arr1, preview);
                                        response = response + configureInterface(arr, preview, interfaceName, interfaceDetails);
                                    } else {

                                        arr.push({name: "interfaceName", value: interfaceName});
                                        response = response + configureInterface(arr, preview, interfaceName, interfaceDetails);

                                    }
                                } else {

                                    arr.push({name: "interfaceName", value: interfaceName});
                                    //response = response + configureInterface(arr, preview, interfaceName, interfaceDetails);
                                    response = response + deviceCommunicator.configureCommandsFromTemplate("createInterface.txt", arr, preview);
                                    if (interfaceName.indexOf("Serial") !== -1) {
                                        arr.push({name: "interfaceName", value: interfaceName});
                                        setPPPConfigProp(arr);
                                        setMtuMssValuesInArray(arr);
                                        response = response + deviceCommunicator.configureCommandsFrom_Template2("createSerialPPP.txt", arr, preview);
                                        if (interfaceDetails.isDCE) {
                                            var clockRate = $('#clockRate').val();
                                            arr.push({name: "clockRate", value: clockRate});
                                            response = response + deviceCommunicator.configureCommandsFromTemplate2("createClockRate.txt", arr, preview);
                                        }
                                    }
                                    response = response + configureInterface(arr, preview, interfaceName, interfaceDetails);
                                }
                            }
                        }
                    } else if ($('#vlanID').val() != null && $('#vlanID').val() != "") {
                        arr.push({name: "vlanID", value: interfaceName.substring(4)});
                        response = response + createOrEditVlan(arr, interfaceName.substring(4), interfaceName, preview);

                    } else {
                        if ($("#isWan").is(':checked')) {
                            wanModeArray.push({name: "wanMode", value: "ethernet"});
                            response = response + deviceCommunicator.configureCommandsFromTemplate("wanMode.txt", wanModeArray, preview);
                        }
                        interfaceDetails = getEditInterfaceDetails(interfaceName);
                        if (interfaceDetails.ipv4Address === '10.10.10.1' && ($('#ipv4Select').val() !== 'staticip' || ($('#ipv4Select').val() === 'staticip' && $('#ipv4Address').val() !== '10.10.10.1'))) {
                            response = response + deviceCommunicator.configureCommandsFromTemplate("removeAccessList23.txt", arr, preview);
                        }
                        if ($('#ipv4Select').val() === 'staticip') {
                            if (interfaceDetails.ipv4Address.length > 6 && href.indexOf(interfaceDetails.ipv4Address) !== -1) {
                                isAccessIP = true;
                                oldIpv4Address = interfaceDetails.ipv4Address;
                                newIpv4Address = $('#ipv4Address').val();
                                arr.push({name: "interfaceName", value: interfaceName});
                                response = response + configureInterface(arr, preview, interfaceName, interfaceDetails, href, isAccessIP, oldIpv4Address, newIpv4Address);
                                return response;
                            }
                        }
                        arr.push({name: "interfaceName", value: interfaceName});
                        response = response + configureInterface(arr, preview, interfaceName, interfaceDetails);
                    }
                } else if ($('#vlanID').val() != null && $('#vlanID').val() != "") {
                    response = response + createOrEditVlan(arr, $('#vlanID').val(), undefined, preview);
                } else {
                    // create loop Back
                    if ($("#isEdit").val() === "true") {
                        loopbackTag = interfaceName.replace(/Loopback/, "");
                    } else {
                        loopbackTag = getLoopbackTag();
                    }
                    arr.push({name: "loopbackTag", value: loopbackTag});
                    response = deviceCommunicator.configureCommandsFromTemplate("createLoopback.txt", arr, preview);
                    if ($('#ipv4Select').val() === 'staticip') {
                        response = response + deviceCommunicator.configureCommandsFromTemplate("loopbackStaticIP.txt", arr, preview);
                    }
                    if ($("#eui64").is(':checked') === false) {
                        arr.push({name: "eui64", value: ""});
                    }
                    if ($('#ipv6Select').val() !== 'select') {
                        response = response + deviceCommunicator.configureCommandsFromTemplate("enableIpv6UnicastRouting.txt", arr, preview);
                    }
                    if ($('#ipv6Select').val() === 'staticip') {
                        response = response + deviceCommunicator.configureCommandsFromTemplate("loopbackIpv6StaticIP.txt", arr, preview);
                    } else if ($('#ipv4Select').val() == 'dhcppoolvalues') {
                        arr.push({name: "interfaceName", value: "Loopback" + loopbackTag});
                        arr.push({name: "poolName", value: $('#dhcpList').val()});
                        response = response + deviceCommunicator.configureCommandsFromTemplate2("interfaceWithDHCPPool.txt", arr, preview);
                    }
                }

                $("#progress").hide();
                //getPrimaryWanInterface();
                try {
                    console.log(response);
                    deviceCommunicator.getConfigCmdOutput(response);

                    // if (preview) {
                } catch (e) {
                    errorLogInConsole("ModifyConfig Error -" + error.errorResponse + "   Command: " + error.errorCmd);
                }
                try {

                    var outPut = modifyConfiguredFeatures("moveToWanZone", false, preview);
                    console.log(outPut);
                    deviceCommunicator.getConfigCmdOutput(outPut);
                    // }
                } catch (e) {
                    errorLogInConsole("ModifyConfig Error -" + error.errorResponse + "   Command: " + error.errorCmd);
                }
                if ($("#cntrlr").is(':checked')) {
                    editController();
                }
                if (interfaceDetails != undefined && interfaceDetails.hasLanZone) {
                    updateLanSubnetObj(interfaceDetails, lanInterfacesglobe);
                }
                refresh();
                $.unblockUI();
                // deviceCommunicator.doWriteMemory();
            } catch (error) {
                console.log(error.message);
                // to refresh and reflect the changes that successfully went through
                refresh();
                $("#progress").hide();
                $("#interfaceDialog").dialog("open");
                $('#interfaceErrorMessage').html(error.errorResponse + "   Command: " + error.errorCmd);
                $('#interfaceError').show();
                $.unblockUI();
            }
        }, 1000);
        //consoleLogMethodDetailsEnd("iAndC.js", "editInterface()");
    }
    function getPPPConfig() {
        //consoleLogMethodDetailsStart("iAndC.js", "getPPPConfig()");
        var isPPP = false;
        try {
            var changedValue = $('input:radio[name=syncMode]:checked').val();
            var encMode = '';
            if (changedValue === "sync") {
                encMode = $('input:radio[name=syncEnc]:checked').val();
            } else {
                encMode = $('input:radio[name=asyncEnc]:checked').val();
            }
            if (encMode === 'ppp') {
                isPPP = true;
            }
        } catch (error) {
            isEmptyBlock = true;
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "getPPPConfig()");
        return isPPP;
    }
    function setPPPConfigProp(array) {
        //consoleLogMethodDetailsStart("iAndC.js", "setPPPConfigProp()");
        try {
            var changedValue = $('input:radio[name=syncMode]:checked').val();
            array.push({name: "syncMode", value: changedValue});
            var encMode = '';
            if (changedValue === "sync") {
                encMode = $('input:radio[name=syncEnc]:checked').val();
                array.push({name: "encMode", value: encMode});
            } else {
                encMode = $('input:radio[name=asyncEnc]:checked').val();
                array.push({name: "encMode", value: encMode});
            }
        } catch (error) {
            isEmptyBlock = true;
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "setPPPConfigProp()");
    }
    function showAdvance(ipv6) {
        //consoleLogMethodDetailsStart("iAndC.js", "showAdvance()");
        if (ipv6 === undefined) {
            ipv6 = "";
        }
        $('#showAdv' + ipv6).hide();
        $('#hideAdv' + ipv6).show();
        $('#wizardMTUSizeTr' + ipv6).show();
        $('#wizardMSSSizeTr' + ipv6).show();
        addValidationMtuAndMss(ipv6);
        //consoleLogMethodDetailsEnd("iAndC.js", "showAdvance()");
    }
    function hideAdvance(ipv6) {
        if (ipv6 === undefined) {
            ipv6 = "";
        }
        //consoleLogMethodDetailsStart("iAndC.js", "hideAdvance()");
        $('#wizardMTUSize' + ipv6).html($.i18n.prop("wizardMTUSize") + '<span class="ccpexpCSSReplaceClass750">*</span>');
        $('#wizardMSSSize' + ipv6).html($.i18n.prop("wizardMSSSize") + '<span class="ccpexpCSSReplaceClass750">*</span>');
        $('#showAdv' + ipv6).show();
        $('#hideAdv' + ipv6).hide();
        $('#wizardMTUSizeTr' + ipv6).hide();
        $('#wizardMSSSizeTr' + ipv6).hide();
        addValidationMtuAndMss(ipv6);
        //consoleLogMethodDetailsEnd("iAndC.js", "hideAdvance()");
    }
    function enableIpv6OESubOptions(selectedBvi) {
        if ($("#ipv6oe").is(':checked')) {
            $('#ipv6oeOptions').show();
            enableBridgeAndDhcp(selectedBvi);
        } else {
            $('#ipv6oeOptions').hide();
            $('#bridgeIpAddressTr').hide();
            $("#bridgeIpAddress").rules("remove");
            $("#bridgeSubnet").rules("remove");
        }
    }
    function enableIpv6OE(selectedBvi) {
        $('#ipv4and6Rout').hide();
        $('#ipv6oeTr').hide();
        $('#ipv6oeOptions').hide();
        $('#bridgeOption').hide();
        $('#bridgeIpAddressTr').hide();
        $('#bridgeOptionIpv6Port').hide();
        $('#bridgeOptionIpv6Port').hide();
        $('#ipv6Select').removeAttr("disabled");
        $("#interfaceAccordion h3 #ipv6authentication").parent().show();
        //  $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
        var editRow = $('#interfaceTable tr.hilite');
        var interfaceName = $.trim(editRow.children().get(1).textContent);
        $("#wanipv4").attr('checked', true);
        if (interfaceName.indexOf("GigabitEthernet") === -1) {
            $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
            return;
        }
        var isPppoe = $('#pppoe').is(':checked');
        var primaryBack = $("input[type='radio'][name='intWanConfig']:checked").val();
        if (isPppoe && primaryBack !== "none") {
            $('#ipv4and6Rout').show();
            var iprout = $("input[type='radio'][name='waniptype']:checked").val();
            if (iprout === 'wanipv4') {
                $('#ipv6oeTr').show();
                // $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
                $("#authentication").text($.i18n.prop("authentication"));
                $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
                enableIpv6OESubOptions(selectedBvi);
            }

        } else {
            $("#wanipv4").attr('checked', true);
            $("#ipv6oe").attr('checked', false);
            $("#interfaceAccordion h3 #ipv6authentication").parent().hide();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
            $("#authentication").text($.i18n.prop("authentication"));
        }

    }
    function enablePPPoE() {
        var editRow = $('#interfaceTable tr.hilite');
        var interfaceName = $.trim(editRow.children().get(1).textContent);
        if (interfaceName.indexOf("Serial") === -1) {
            onPppoeChange();
            enableIpv6OE();
        } else {
            onPppoeChangeForSerial();
        }

    }
    function addValidationMtuAndMss(ipv6) {
        if (ipv6 === undefined) {
            ipv6 = "";
        }
        //consoleLogMethodDetailsStart("iAndC.js", "addValidationMtuAndMss()");
        try {
            if ($('#showAdv' + ipv6).css('display') === 'none') {
                $("#wizardMtuSize" + ipv6).rules("add", {required: true, minlength: 1, min: 68, max: 1500});
                $("#wizardMssSize" + ipv6).rules("add", {required: true, minlength: 1, min: 500, max: 1460});
            } else {
                $("#wizardMtuSize" + ipv6).rules("remove");
                $("#wizardMssSize" + ipv6).rules("remove");
            }
        } catch (error) {
            errorLogInConsole(error);
        }
        //consoleLogMethodDetailsEnd("iAndC.js", "addValidationMtuAndMss()");
    }
    function isSerial(interfaceType) {
        var serial = false;
        if (interfaceType === 501 || interfaceType === 502 || interfaceType === 507 || interfaceType === 508 || interfaceType === 515) {
            serial = true;
        }
        return serial;
    }
    ;
    function enableBridgeAndDhcp(existingBviInt) {
        if (existingBviInt === undefined) {
            existingBviInt = {};
        }
        //  var interfaceTypeMap = deviceCommunicator.getInterfaceTypeMap(false);
        var iprout = $("input[type='radio'][name='ipv6oetype']:checked").val();
        var isOneVlan = false;
        var isOneIpv6 = false;
        _.each(availableForBVI, function (intName) {
            if (intName.indexOf("Vlan") !== -1) {
                isOneVlan = true;
            } else {
                isOneIpv6 = true;
            }
        });
        if (!isOneVlan || !isOneIpv6) {
            iprout = "dhcp";
            $("#dhcp").prop("checked", true);
            $("#bridge").prop("checked", false);
            $("#bridge").attr("disabled", true);
        }
        if (iprout === 'bridge') {
            $('#ipv6Table tr:not(:first)').remove();
            $("#bridgeIpAddress").rules("add", {"ipv4": true, required: true});
            $("#bridgeSubnet").rules("add", {"ipv4": true, required: true});
            $('#ipv6Select').val('select')
            var editRow = $('#interfaceTable tr.hilite');
            var interfaceName = $.trim(editRow.children().get(1).textContent);
            $("#bridgeIpAddressTr").show();
            $('#ipv6oeOptions').show();
            $('#bridgeOptionIpv6Port').show();
            $("#bridgeOptionIpv6PortLabel").html($.i18n.prop("bridgeOptionIpv6IntLabel") + '<span class="ccpexpCSSReplaceClass749">*</span>:');
            $("#bridgeOptionLanIntLabel").html($.i18n.prop("bridgeOptionLanIntLabel") + '<span class="ccpexpCSSReplaceClass749">*</span>:');
            $('#bridgeOption').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').hide();
            var i = 0;
            $("#lanPortList").empty();
            $("#ipv6PortList").empty();
            // var avlInt = getConfigurableBVIInterfaces();
            // var avlIntArray = avlInnt.split(",");

            _.each(availableForBVI, function (intName) {
                // .each(avlIntArray, function (key, val) {
                if (intName !== interfaceName && intName !== currentPrimaryWanInterface && intName !== currentBackupWanInterface) {
                    if (i === 0) {
                        $("#lanPortList").append("<div style='margin-right: 2px'>");
                    }
                    var checked = "";
                    if (existingBviInt[intName]) {
                        checked = "checked";
                    }

                    if (intName.indexOf("Vlan") === -1) {
                        $("#ipv6PortList").append("<option value='" + intName + "'>" + intName + "</option>");
                    } else {
                        $("#lanPortList").append("<input id='" + intName + "' type='checkbox' value=" + intName + " " + checked + "/><span>" + intName + "</span>");
                        i++;
                    }
                    if (i === 3) {
                        $("#lanPortList").append("</div>");
                        i = 0;
                    }

                }
            });
            $('#ipv6Select').removeAttr("disabled");
            $('#dhcpClient').removeAttr("disabled");
        } else {
            $("#bridgeIpAddress").rules("remove");
            $("#bridgeSubnet").rules("remove");
            $("#bridgeIpAddressTr").hide();
            $('#bridgeOptionIpv6Port').hide();
            $('#bridgeOption').hide();
            $("#bridgeOptionLanIntLabel").html($.i18n.prop("VLANIntLabel") + '<span class="ccpexpCSSReplaceClass749">*</span>:');
            // $('#bridgeOption').show();
            $('#ipv6oeOptions').show();
            $("#interfaceAccordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
            $("#lanPortList").empty();
//            var i = 0;
//            var isVlan = false;
//            $.each(interfaceTypeMap, function (key, val) {
//                if (key.indexOf("Vlan") !== -1) {
//                    if (i === 0) {
//                        $("#lanPortList").append("<div style='margin-right: 2px'>");
//                    }
//                    var checked = "";
//                    if (existingBviInt[key]) {
//                        checked = "checked";
//                    }
//                    $("#lanPortList").append("<input id='" + key + "' type='checkbox' value=" + key + " " + checked + " /><span>" + key + "</span>");
//                    i++;
//                    if (i === 3) {
//                        $("#lanPortList").append("</div>");
//                        i = 0;
//                    }
//                    isVlan = true;
//                }
//            });
//            if (!isVlan) {
//                $('#bridgeOption').hide();
//            } else {
//                $('#bridgeOption').show();
//            }
            var autoconfig = $('#ipv6Select').val();
            if (autoconfig !== "autoconfig") {
            $('#ipv6Select').val("autoconfig");
            ipv6Autoconfig();
            }
            $('#dhcpClient').prop('checked', true);
            $('#ipv6Select').prop('disabled', true);
            enableDisablePrefixName();
            //  $('#dhcpClient').prop('disabled', true);
        }
    }
    function setDhcpIntValues(arr, interfaceDetails) {
        if (interfaceDetails.isDHCP) {
            arr.push({name: "removeDhcp", value: true});
            if (interfaceDetails.isPrimary) {
                arr.push({name: "oldWan", value: "primaryInt"});
            } else if (interfaceDetails.isBackup) {
                arr.push({name: "oldWan", value: "backupInt"});
            }
        } else {
            arr.push({name: "removeDhcp", value: false});
        }
    }
    function pushIpv60eDhcp(arr, interfaceDetails) {
        //var output = "";
        var isDHCP = false;
        if ($('#ipv6oe').is(':checked')) {
            var ipv6oetype = $("input[type='radio'][name='ipv6oetype']:checked").val();
            if (ipv6oetype === "dhcp") {

                isDHCP = true;
                setVlanDetailsToArrayForDhcpClintConfig(arr);
//                $('#lanPortList input:checked').each(function () {
//                    var name = $(this).val();
//                    if (index === -1) {
//                        if (name === dhcpInterfaces) {
//                            dhcpInterfaces = "";
//                        } else {
//                            selectedVlan = selectedVlan + cama + name;
//                            cama = ",";
//                        }
//                    } else {
//                        var lastIndex = dhcpInterfaces.indexOf(name + ",");
//                        var firstIndex = dhcpInterfaces.indexOf("," + name);
//                        if (lastIndex === -1 && firstIndex === -1) {
//                            selectedVlan = selectedVlan + cama + name;
//                            cama = ",";
//                        } else if (lastIndex !== -1) {
//                            dhcpInterfaces.replace(name + ",", "");
//                        } else if (firstIndex !== -1) {
//                            dhcpInterfaces.replace("," + name, "")
//                        }
//                    }
//
//                });
                        }
                    }
        return isDHCP;
    }
    function setVlanDetailsToArrayForDhcpClintConfig(arr) {
        var selectedVlan = "";
        var cama = "";
        var interfaceList = deviceCommunicator.getInterfaceTypeMap();
        $.each(interfaceList, function (key, val) {
            if (key.indexOf("Vlan") !== -1) {
                selectedVlan = selectedVlan + cama + key;
                cama = ",";
            }
                });
        arr.push({name: "nodhcpVlns", value: ""});
                arr.push({name: "dhcpVlns", value: selectedVlan});

    }
    function setBridgeNo(arr, interfaceDetails) {
        var bviNo = interfaceDetails.bvino;
        if (bviNo.length > 0 && bviNo !== 0) {
            arr.push({name: "bvino", value: bviNo});

        } else {
            var rBviNo = getBVINo();
            arr.push({name: "bvino", value: rBviNo});
        }

    }
    function pushIpv60eBridge(arr, interfaceDetails) {
        console.log(JSON.stringify(arr));
        var output = "";
        var bviNo = interfaceDetails.bvino;
        if (bviNo.length > 0 || bviNo !== 0) {
            arr.push({name: "nobvino", value: bviNo});
            arr.push({name: "oldIpv6Interface", value: interfaceDetails.ipv6BviInterface});
            arr.push({name: "oldBVIInterface", value: interfaceDetails.bviInterfaces});
        }
        var isBVI = false;
        var isDHCP = false;
        if ($('#ipv6oe').is(':checked')) {
            var ipv6oetype = $("input[type='radio'][name='ipv6oetype']:checked").val();
            if (ipv6oetype === "bridge") {
                isBVI = true;
                var editRow = $('#interfaceTable tr.hilite');
                var interfaceName = $.trim(editRow.children().get(1).textContent);
                var selectedVlan = "";
                var cama = "";
                // var bviInterfaces = interfaceDetails.bviInterfaces;
                //var index = bviInterfaces.indexOf(",");
                $('#lanPortList input:checked').each(function () {
                    var name = $(this).val();
                    selectedVlan = selectedVlan + cama + name;
                    cama = ",";
                });
                var ipv6Interface = $('#ipv6PortList').val();
                arr.push({name: "bridgingInterfaces", value: selectedVlan});
                arr.push({name: "bviIpv6Interface", value: ipv6Interface});
                //arr.push({name: "removeBridgingInterfaces", value: bviInterfaces});
                arr.push({name: "interfaceName", value: interfaceName});
                setBridgeNo(arr, interfaceDetails);
                arr.push({name: "nodhcpVlns", value: ""});
                arr.push({name: "dhcpVlns", value: ""});
            } else {
                isDHCP = pushIpv60eDhcp(arr, interfaceDetails);
            }

        } else {
            arr.push({name: "nodhcpVlns", value: ""});
            arr.push({name: "dhcpVlns", value: ""});
        }
//        if (!isDHCP && interfaceDetails.dhcpInterfaces.length > 0) {
//            arr.push({name: "nodhcpVlns", value: interfaceDetails.dhcpInterfaces});
//        } else {
//            arr.push({name: "nodhcpVlns", value: ""});
//        }
        arr.push({name: "isBVI", value: isBVI});
        arr.push({name: "isDHCP", value: isDHCP});
        output = output + deviceCommunicator.configureCommandsFrom_Template2("ipv6oeusingbridge.txt", arr, true);
        output = output + deviceCommunicator.configureCommandsFrom_Template2("ipv6oeusingdhcp.txt", arr, true);
        return output;
    }
    function postProcessForPrimaryOrBackupWan(){
	    enableIpRout();
            if ($("#moveToWanZone").attr("checkFlag") == "configured") {
                if (licenseCheck === true || iosk9check == "SecurityEnable") {
                    //code
                    $("#moveToWanZone").attr("checked", true);
                }
            } else {
                $("#moveToWanZone").attr("checked", false);
            }
            if ($('#backupWanInt').is(':checked')) {
                $('#bkpWanDetails').show();
                //$('#enableNat').attr("checked","true");
                //$('#enableNat').attr("disabled","true");
                if (licenseCheck === true || iosk9check == "SecurityEnable") {
                    $("#moveToWandiv").show();
                }
            } else if ($('#primaryWanInt').is(':checked')) {
                //$('#enableNat').attr("checked","true");
                //$('#enableNat').attr("disabled","true");
                $('#bkpWanDetails').hide();
                if (licenseCheck === true || iosk9check == "SecurityEnable") {
                    $("#moveToWandiv").show();
                }
            } else {
                //$('#enableNat').removeAttr("checked");
                //$('#enableNat').removeAttr("disabled");
                $('#bkpWanDetails').hide();
                if (licenseCheck === true || iosk9check == "SecurityEnable") {
                    $("#moveToWandiv").hide();
                    $("#moveToWanZone").attr("checked", false);
                }
                //$('#moveToWanZone').attr("checked",false);
            }
    }
    return {
        iAndCLoading: iAndCLoading,
        createAccessListforNAT: createAccessListforNAT,
        showVLANDialogue: showVLANDialogue,
        getEditInterfaceDetails: getEditInterfaceDetails,
        currentPrimaryWanInterface: currentPrimaryWanInterface,
        currentBackupWanInterface: currentBackupWanInterface,
        setCellularPrimaryBackup: setCellularPrimaryBackup,
        modifyConfiguredFeatures: modifyConfiguredFeatures,
        getEthernetSubInterfaceTag: getEthernetSubInterfaceTag,
        getAtmSubInterfaceTag: getAtmSubInterfaceTag,
        getModemDetails: getModemDetails,
        getDialerTag: getDialerTag,
        getDialerPoolTag: getDialerPoolTag,
        getDialerGroupTag: getDialerGroupTag,
        deleteDialerConfigs: deleteDialerConfigs,
        enableDisableNat: enableDisableNat,
        getSlaDetails: getSlaDetails,
        refresh: refresh,
        updateEigrp: updateEigrp

    };
}());


var hardwareInfo, updateFlag = true, interfaceDetails, cellularInterfaceName, profileList = [], profileInterval, firmwareList = [], simList = [], tempInterfaceName, updateFirmware = true, updateChatScript = true, chatTimeout = "", counterModem = 0;
;
var interfaceAndConnection = (function() {
  //var cancelFlagFirmware=false,activateSimFlag=false;
  var idCellular, checkScriptFlag = false;
  function loadCellularForNano(interfaceName) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "loadCellularForNano()");
    //To add space between cellular and slot no
    var regEx = new RegExp("Cellular", "");
    var srArray = interfaceName.split(regEx);
    cellularInterfaceName = "Cellular " + srArray[1];
    re = new RegExp("/", "g");
    idCellular = interfaceName.replace(re, "");
    //setSimNetwork(id);
    tempInterfaceName = interfaceName;
    enableDisableNatFlag = false;

   // $("#cellularNanoDialog").dialog({title: "Edit " + interfaceName + " Configuration"});
    $("#cellularNanoDialog").dialog("option", "title", $.i18n.prop("editIandC") + " " + interfaceName + " " + $.i18n.prop("csConfig"));
    var languageLocalization = $.i18n.prop("langwage");
    if (languageLocalization === "ja") {
      $("#cellularNanoDialog").dialog("option", "title", interfaceName + " " + $.i18n.prop("csConfig") + $.i18n.prop("ofValueJapOnly") + $.i18n.prop("editIandC") );
    }



    $('#cellular-tabs').tabs({active: 0});
    simList = getSimInfo(cellularInterfaceName);
    if (updateFlag) {
      getCellularInfo(cellularInterfaceName);
    }
    if (updateFirmware) {
      firmwareList = getAvailableFirmware(cellularInterfaceName);
      populateFirmwareTable(cellularInterfaceName, firmwareList);
      updateFirmware = true;
    }
    populateTechnologyList();

    //simList=getSimInfo(cellularInterfaceName);
    setSimInfo(idCellular);
    setCellularDialogDetails();
    //setting info for modem tab
    setModemInfo();
    interfaceDetails = iAndC.getEditInterfaceDetails(interfaceName);
    populateCellularNanoData(interfaceDetails);
    initializeWAN(interfaceDetails);
    $(".custom-alert-close").click();
    $("#cellularNanoDialog").dialog("open");
    $("#reloadModemMsg").hide();
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "loadCellularForNano()");
  }

  function activateSelectedFirmware(id, cellularInterfaceName) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "activateSelectedFirmware()");
    //var shutCmd = "interface " + cellularInterfaceName + "\n shutdown";
    var noShutCmd = "interface " + cellularInterfaceName + "\n no shutdown";
    var cmd = "";
    deviceCommunicator.getConfigCmdOutput(cmd);
    cmd = cellularInterfaceName + " microcode activate " + id;
    var response;
    try {
      response = deviceCommunicator.getExecCmdOutput(cmd);
      deviceCommunicator.getConfigCmdOutput(noShutCmd);
      ////consoleLog(cmd);
    }
    catch (e) {
      errorLogInConsole(e);
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "activateSelectedFirmware()");
    return response;
  }

  /*function setSimNetwork(id){
   var imgPath=$('#'+id+' td:nth-child(5)').attr("data");
   $("#networkSim").empty();
   $("#networkSim").append('<img src="'+imgPath+'" class="ccpexpCSSReplaceClass770">');
   }*/
  function initializeWAN(interfaceDetails) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "initializeWAN()");
    $("#moveWanDivCellular").hide();
    $('#slaHolder').hide();
    /*if (currentPrimaryWanInterface!="") {
     $("#primWANIntCellular").attr("disabled", "disabled");
     $("#backWANIntCellular").attr("disabled", "disabled");
     $("#noneWan").prop("checked", true);
     //$("#cellularMsg").show();
     //$("#cellularMsg").find('td').append('<em class="fa fa-info-circle"></em> Please unconfigure '+currentPrimaryWanInterface+' to set this interface as Primary/Backup.');
     $("#moveWanDivCellular").hide();
     }else{
     $("#primWANIntCellular").removeAttr("disabled");
     $("#backWANIntCellular").removeAttr("disabled");
     //$("#cellularMsg").hide();
     //$("#cellularMsg").find('td').empty();
     //$("#noneWan").prop("checked", true);
     }*/

    $('#enableNatCellular').unbind("click").click(function() {
      if ($('#primWANIntCellular').is(':checked') || $('#backWANIntCellular').is(':checked')) {
        if ($('#enableNatCellular').is(':checked')) {
          $("#natAlertMessage").html($.i18n.prop("wanAlertMessageThree"));
        } else {
          $("#natAlertMessage").html($.i18n.prop("wanAlertMessageFour"));
        }
        $("#natAlert").dialog("open");
      }
    });
    $("input:radio[name='wanTypeConfig']").unbind('change').change(function() {
      if ($("#moveToWanNano").attr("checkFlag") == "configured") {
        if (licenseCheck === true || iosk9check == "SecurityEnable") {
          $("#moveToWanNano").attr("checked", true);
        }
      } else {
        $("#moveToWanNano").attr("checked", false);
      }
      if ($('#backWANIntCellular').is(':checked')) {
        $('#slaHolder').show();
        $("#moveWanDivCellular").show();
        if ($('#backWANIntCellular').is(':checked') && currentPrimaryWanInterface !== "" && currentBackupWanInterface === "") {
          if (natEnabledFlag) {
            $('#enableNatCellular').prop("checked", "true");
            $('#enableNatCellular').attr("disabled", "true");
          }
        }
      } else if ($('#primWANIntCellular').is(':checked')) {
        //$('#enableNat').attr("checked","true");
        //$('#enableNat').attr("disabled","true");
        $('#slaHolder').hide();
        $('#enableNatCellular').removeAttr("disabled");
        if (licenseCheck === true || iosk9check == "SecurityEnable"){
          $("#moveWanDivCellular").show();
        }
      }
      else {
        $('#slaHolder').hide();
        $('#enableNatCellular').removeAttr("disabled");
        if (licenseCheck === true || iosk9check == "SecurityEnable") {
          $("#moveWanDivCellular").hide();
          $("#moveToWanNano").attr("checked", false);
        }

      }
    });
    $('#moveToWanNano').unbind('change').change(function() {
      if ($(this).is(':checked')) {
        $("#wanAlertNano").dialog("open");
      } else {
        $('#enableNatCellular').removeAttr("disabled");
      }
    });
    $('#primWANIntCellular').removeAttr("disabled");
    $('#backWANIntCellular').removeAttr("disabled");
    $('#noneWANIntCellular').removeAttr("disabled");
    if (interfaceDetails.isPrimary) {
      $('#primWANIntCellular').click();
      $('#backWANIntCellular').attr("disabled", "disabled");
      if (currentBackupWanInterface != "") {
        $('#noneWANIntCellular').attr("disabled", "disabled");
      }
    } else if (interfaceDetails.isBackup) {
      $('#backWANIntCellular').click();
      $('#primWANIntCellular').attr("disabled", "disabled");
      /*if (interfaceDetails.isIpNatOutside) {
       $('#enableNatCellular').prop("disabled","true");
       }else{
       $('#enableNatCellular').removeAttr("disabled");
       }*/
    } else {
      if (currentPrimaryWanInterface == "" && currentBackupWanInterface == "") {
        $('#backWANIntCellular').attr("disabled", "disabled");
      }
      else if (currentPrimaryWanInterface !== "") {
        $('#primWANIntCellular').attr("disabled", "disabled");
      }
      else if (currentBackupWanInterface !== "") {
        $('#primWANIntCellular').attr("disabled", "disabled");
        $('#backWANIntCellular').attr("disabled", "disabled");
      }
      $('#noneWANIntCellular').click();
    }
    $("input:radio[name='wanTypeConfig']").change();
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "initializeWAN()");

  }

  function populateCellularNanoData(interfaceDetails) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "populateCellularNanoData()");
    var checkZoneconfig = [];
    var checkFlagMoveToZone = 0;
    checkZoneconfig.length = 0;
    try {
      checkZoneconfig = configureFirewall.getInterfacesInZone("WAN");
    }
    catch (e) {
        isEmptyBlock = true;
    }
    if (interfaceDetails.isIpNatOutside) {
      $('#enableNatCellular').prop('checked', true);
    } else {
      $('#enableNatCellular').prop('checked', false);
    }
    $('#moveToWanNano').attr("primarywanconfigured", "NoPrimary");
    $('#moveToWanNano').attr("backupwanconfigured", "NoBackup");
    if (interfaceDetails.ipv4dialer.length > 0) {
      $('#persistYes').prop("checked", true);
    } else {
      $('#persistNo').prop("checked", true);
    }
    for (i = 0; i < checkZoneconfig.length; i++) {
      if (interfaceDetails.interfaceName == checkZoneconfig[i]) {
        checkFlagMoveToZone = 1;
      } else if (interfaceDetails.ipv4dialer == checkZoneconfig[i]) {
        checkFlagMoveToZone = 1;
      }
      if (currentPrimaryWanInterface == checkZoneconfig[i]) {
        $('#moveToWanNano').attr("primarywanconfigured", currentPrimaryWanInterface);

      } else if (iAndC.getEditInterfaceDetails(currentPrimaryWanInterface).ipv4dialer == checkZoneconfig[i]) {
        //code
        //if(interfaceDetails.dialer==checkZoneconfig[i]){
        $('#moveToWanNano').attr("primarywanconfigured", currentPrimaryWanInterface);
        //}
      }
      if (currentBackupWanInterface == checkZoneconfig[i]) {
        $('#moveToWanNano').attr("backupwanconfigured", currentBackupWanInterface);
      } else if (iAndC.getEditInterfaceDetails(currentBackupWanInterface).ipv4dialer == checkZoneconfig[i]) {
        //code
        //if(interfaceDetails.dialer==checkZoneconfig[i]){
        $('#moveToWanZone').attr("primarywanconfigured", currentBackupWanInterface);
        //}
      }
    }
    if (checkFlagMoveToZone == 1) {
      $("#moveToWanNano").attr("checked", true);
      $("#moveToWanNano").attr("checkFlag", "configured");
    } else {
      $("#moveToWanNano").attr("checked", false);
      $("#moveToWanNano").attr("checkFlag", "notconfigured");
    }

    $("#moveToWanNano").attr("interfacename", interfaceDetails.interfaceName);
    if (($("#moveToWanNano").attr("interfacename") == (currentPrimaryWanInterface)) || ($("#moveToWanNano").attr("interfacename") == currentBackupWanInterface)) {
      //code
      if (licenseCheck || iosk9check == "SecurityEnable") {
        //code
        $("#moveWanDivCellular").show();
      } else {
        $("#moveWanDivCellular").hide();
      }

    } else {
      $("#moveWanDivCellular").hide();
    }
    var ipsflagArray = [];
    ipsflagArray = configureIPS.ipsInterfaceDetails();
    if (ipsflagArray.length > 0)
    {
      $("#moveToWanNano").attr("checkFlagIps", "configuredIps");
    }
    else {
      $("#moveToWanNano").attr("checkFlagIps", "notconfiguredIps");
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "populateCellularNanoData()");
  }

  function setCellularDialogDetails() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "setCellularDialogDetails()");
    $('#firmwareTable tbody').find('tr').each(function() {
      if ($(this).find('td').last().text() == "ACTIVE") {
        $(this).find("input:radio[name='firmwareSelector']").click();
      }
    });
    $('#chatTimeout').val("");
    if (updateChatScript || chatTimeout == "") {
      chatTimeout = getChatScriptTimeout();
      updateChatScript = false;
    }
    $('#chatTimeout').val(chatTimeout);
    $('#chatTimeout').attr('data', chatTimeout);
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "setCellularDialogDetails()");
  }

  function getChatScriptTimeout() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "getChatScriptTimeout()");
    var cmd = "show running-config | include chat-script multimode", timeout = "";
    var response = deviceCommunicator.getExecCmdOutput(cmd);
    if (response.trim() != "") {
      var arr = response.trim().split(/\s+/);
      timeout = arr[arr.length - 2];
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "getChatScriptTimeout()");
    return timeout.replace(/'/g, "");
  }

  function populateFirmwareTable(cellularInterfaceName, firmwareList) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "populateFirmwareTable()");
    $('#firmwareTable tbody').empty();
    $.each(firmwareList, function(index, value) {
      //$('#firmwareTable tbody').append('<tr><td><div><input id="radioF'+value.id+'" type="radio" name="firmwareSelector" value="'+value.id+'" class="custom-firmware-radio">'+
      //                                 '<label class="ccpexpCSSReplaceClass771" for="radioF'+value.id+'"><span>'+
      //                                 '<span class="customFirmwareRadio"></span></span></label></div></td><td>'+value.id+
      //                                 '</td><td>'+value.carrier+'</td><td>'+value.technology+'</td><td>'+value.version+'</td><td>'+value.status+'</td>');
      $('#firmwareTable tbody').append('<tr><td>' + value.carrier + '</td><td>' + value.technology + '</td><td>' + value.version + '</td><td class="activeState" data="' + value.id + '"></td>');
      if (value.status == "ACTIVE") {
        $('#firmwareTable').find('.activeState:last').append('<div class="activeFirmware">Active</div>');
        if (value.technology == "CDMA") {
          hideProfileOptions(false);
          $('#firmwareTable').attr("data", "cdma");
        } else {
          $('#firmwareTable').attr("data", "gsm");
          hideProfileOptions(true);
        }
      } else {
        $('#firmwareTable').find('.activeState:last').append('<div class="selectFirmware">Activate</div>');
        $('#firmwareTable').find('.selectFirmware:last').unbind("click").click(function() {
          var firmwareName = $(this).parent().siblings().first().text();
          // $('#firmwareAlertMessage').text("Are you sure you want to activate "+firmwareName+" firmware?");
          $('#firmwareAlertMessage').text($.i18n.prop("sureToActivate") + " " + firmwareName + " " + $.i18n.prop("firmware"));
          $('.activeState').each(function() {
            if ($(this).hasClass("selected")) {
              $(this).removeClass("selected");
            }
          });
          $(this).parent().addClass("selected");
          $("#firmwareAlert").dialog("open");
          /*if (!cancelFlagFirmware) { //to avoid div click call on cancel click
           var divB=$(this).find('div');
           if(divB.length>0){
           if (divB.hasClass('selectFirmware')) {
           $('.activeState').each(function(){
           if ($(this).find('div').hasClass('selectedFirmware')) {
           $(this).find('div').removeClass('selectedFirmware');
           $(this).find('div').addClass('selectFirmware');
           $(this).find('div').text('Activate');
           $(this).find('div').find('.cancelFirmware').remove();
           }

           });
           divB.removeClass('selectFirmware');
           divB.addClass('selectedFirmware');
           divB.text("Selected for activation");
           divB.append('<span class="cancelFirmware">x</span>');
           $(".cancelFirmware").unbind("click").click(function(){
           $(this).parent().removeClass('selectedFirmware');
           $(this).parent().addClass('selectFirmware');
           $(this).parent().text("Activate");
           $(this).parent().find('.cancelFirmware').remove();
           cancelFlagFirmware=true;
           });
           }
           }
           }else{
           cancelFlagFirmware=false;
           }*/
        });
      }

    });
    /*
     $("input:radio[name='firmwareSelector']").change(function () {
     $("input:radio[name='firmwareSelector']:checked").parent().parent().parent().siblings().removeClass('hilite');
     $("input:radio[name='firmwareSelector']:checked").parent().parent().parent().addClass('hilite');
     $.each(firmwareList,function(index,value){
     if (value.id==$("input:radio[name='firmwareSelector']:checked").val()) {
     if (value.technology=="CDMA"){
     //$('#profileLinkTab').hide();
     $('.customRadio').each(function(){$(this).parent().hide();});
     $('.headProfileText').hide();
     }
     else{
     $('.customRadio').each(function(){$(this).parent().show();});
     $('.headProfileText').show();

     //$('#profileLinkTab').show();
     }
     return false;
     }else{
     $('.customRadio').each(function(){$(this).parent().show();});
     $('.headProfileText').show();
     //$('#profileLinkTab').show();
     }
     });

     });*/
    /*$(".customFirmwareRadio").click(function(){
     $(this).parent().parent().parent().find("input:radio[name='firmwareSelector']").click();
     });
     $(".customFirmwareRadio:first").click();*/
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "populateFirmwareTable()");
  }

  //if flag=true then show profile opts else hide
  function hideProfileOptions(flag) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "hideProfileOptions()");
    if (flag) {
      //$('#profileTab').children().each(function(){$(this).show()});
      //$('#cellularProfileMsg').remove();
      $('#profileLinkTab').show();
      $('.selectProfileSim').each(function() {
        $(this).show();
      });
      $('#simProfileColumn').show();
      $('#profileSlotOne').show();
      $('#profileSlotZero').show();
      /*$('#profileAction').show();
       $('#addProfileColumn').show();
       $('.headProfileText').show();
       $('#profileRadioSelection').show();
       $('#profileTableCellular').find('tr').each(function(){
       $(this).find('td').first().show();
       $(this).find('td').last().show();
       });*/
    } else {
      /*$('#profileAction').hide();
       $('#addProfileColumn').hide();
       $('.headProfileText').hide();
       $('#profileRadioSelection').hide();
       $('#profileTableCellular').find('tr').each(function(){
       $(this).find('td').first().hide();
       $(this).find('td').last().hide();
       });*/
      //$('#profileTab').children().each(function(){$(this).hide()});
      //$('#profileTab').prepend('<div class="alert alert-danger ccpexpCSSReplaceClass772" id="cellularProfileMsg" >'+
      //                         '<em class="fa fa-info-circle"></em><span> Profile can be selected/added/edited/deleted only when UMTS firmware is activated</span></div>');
      $('#profileLinkTab').hide();
      $('#profileSlotOne').hide();
      $('#profileSlotZero').hide();
      $('.selectProfileSim').each(function() {
        $(this).hide();
      });
      $('#simProfileColumn').hide();

    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "hideProfileOptions()");
  }

  function setSimType() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "setSimType()");
    var cmd = "show run | include event manager environment";
    var simZero = "", simOne = "", simZeroFound = false, simOneFound = false;
    var response = deviceCommunicator.getExecCmdOutput(cmd);
    if (response.trim() != "") {
      var splitLines = response.split('\n');
      $.each(splitLines, function(index, value) {
        if (value.indexOf("sim0") > -1 && value.indexOf("action") > -1) {
          var sliptWords = value.trim().split(/\s+/);
          simZero = sliptWords[sliptWords.length - 1].trim().replace(/"/g, "");
          simZeroFound = true;
        }
        if (value.indexOf("sim1") > -1 && value.indexOf("action") > -1) {
          var sliptWords = value.trim().split(/\s+/);
          simOne = sliptWords[sliptWords.length - 1].trim().replace(/"/g, "");
          simOneFound = true;
        }
        if (simZeroFound && simOneFound) {
          return false;
        }
      });
      $('#technologyTypeZero').val(simZero);
      $('#technologyTypeOne').val(simOne);

    }
    $(".technologyType").change();
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "setSimType()");
  }

  function checkScript() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "checkScript()");
    var flag = false;
    var response = deviceCommunicator.getExecCmdOutput("sh run | i applet");
    if (response.trim().indexOf("counter_runtimes")>-1) {
            if (response.trim().indexOf("watch-signal")>-1) {
                $('#simConfigTable').attr("data-script","dualSim");
                flag= true;
            }else if (response.trim().indexOf("applet cellular")>-1) {
                $('#simConfigTable').attr("data-script","singleSim");
                flag= true;
            }

        }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "checkScript()");
    return flag;
  }
  function getAndConfigureCellularInterface(interfaceName) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "getAndConfigureCellularInterface()");
    //var firmwareId = -1;
    var simSeleted, activeSim, lineNo, ipSla = false, natCheck = false, dialerDelete = false, setPrimary = false, setBackup = false, deleteRoutes = "", linkProfile = [], primarySim = -1, isPersistant = false, dialerPool = "", group = "", dialer = "", slotList = [], technologyPrefernce = "";
    var regEx = new RegExp("Cellular", "");
    var srArray = tempInterfaceName.split(regEx);
    var slot = srArray[1].trim();
    var chatScriptTimeout = $('#chatTimeout').val();
    if ($('#chatTimeout').attr('data') !== $('#chatTimeout').val()) {
      updateChatScript = true;
    }

    /*$('.activeState').each(function(){
     if ($(this).find('div').hasClass('selectedFirmware')) {
     firmwareId=parseInt($(this).attr("data"));
     return false;
     }
     });*/
    /*if ($("input:radio[name='firmwareSelector']:checked").parent().parent().siblings().last().text().trim().toUpperCase()=="ACTIVE") {
     firmwareId=-1; //setting -1 when firmware not changed
     }
     else{
     firmwareId=$("input:radio[name='firmwareSelector']:checked").val();
     }*/
    if (simList.length > 1) {
      if ($(".switchUI").attr("active-sim") != "") {
        activeSim = parseInt($(".switchUI").attr("active-sim"));
        selectedSim = $("input:radio[name='simType']:checked").val();
        if ($('#activateCheckboxZero').is(':checked')) {
          selectedSim = 0;
        } else if ($('#activateCheckboxOne').is(':checked')) {
          selectedSim = 1;
        }
        if (parseInt(selectedSim) == parseInt($(".switchUI").attr("active-sim"))) {
          simSeleted = -1;
        } else {
          simSeleted = parseInt(selectedSim);
        }
      } else {
        simSeleted = parseInt(selectedSim);
      }
      if ($("#primaryCheckboxZero").is(':checked')) {
        primarySim = 0;
      } else if ($("#primaryCheckboxOne").is(':checked')) {
        primarySim = 1;
      }
    }
    else {
      simSeleted = -1;
    }
    if (slot == "0/0/0") {
      lineNo = 3
    } else {
      lineNo = 19;
    }
    if ($('#primWANIntCellular').is(':checked')) {
      setPrimary = true;
    } else if ($('#backWANIntCellular').is(':checked')) {
      setBackup = true;
    }
    if (!setBackup && !setPrimary) {
      if (interfaceDetails.isPrimary) {
        deleteRoutes = "primary";
      } else if (interfaceDetails.isBackup) {
        deleteRoutes = "backup";
      }

    }

    //check ip sla
    if (interfaceDetails.isBackup){
      ipSla = true;
    }
    else{
        var getSla=iAndC.getSlaDetails();
        if (getSla.ipAddress!="" && getSla.interface1!="") {
            ipSla = true;
        }
    }
    if (((interfaceDetails.isPrimary && $('#primWANIntCellular').is(':checked')) || (interfaceDetails.isBackup && $('#backWANIntCellular').is(':checked'))) && enableDisableNatFlag) {
      iAndC.enableDisableNat("enableNatCellular");
    }
    //profile activation
    if ($('#firmwareTable').attr("data") == "gsm") {
      if (simList.length > 1) {
        $('.profileCombo').each(function() {
          if ($(this).attr("data") == "0"){
            linkProfile.push({simNo: 0, profileNo: $(this).val()});
          }
          if ($(this).attr("data") == "1"){
            linkProfile.push({simNo: 1, profileNo: $(this).val()});
          }
        });
        //}
      } else if (simList.length == 1) {
        if ($('#singleSimProfile').attr("data") == "0"){
          linkProfile.push({simNo: 0, profileNo: $('#singleSimProfile').val()});
        }
        if ($('#singleSimProfile').attr("data") == "1"){
          linkProfile.push({simNo: 1, profileNo: $('#singleSimProfile').val()});
        }
      }

    }
    //var currentPrimarySim=$("#"+id).attr("primarysim");

    //checking if persistant
    if ($('#persistYes').is(':checked')){
      isPersistant = true;
    }
    dialerPool = interfaceDetails.ipv4dialerPoolNumber;
    group = interfaceDetails.ipv4dialerGroupNumber;
    if (interfaceDetails.ipv4dialer.length > 0){
      dialer = interfaceDetails.ipv4dialer;
    }
    if (dialer.length <= 0) {
      dialer = iAndC.getDialerTag().toString();
        if (dialer != undefined && dialer.indexOf("Dialer")==-1){
          dialer = "Dialer" + dialer;
        }
    }
    if (dialerPool.length <= 0){
      dialerPool = iAndC.getDialerPoolTag();
    }
    if (group.length <= 0){
      group = iAndC.getDialerGroupTag();
    }


    //checking if profiles already associated
    $('.profileCombo').each(function() {
      if ($(this).attr("data") == "0" || $(this).attr("data") == "1") {
        if ($(this).attr("configured") != "") {
          slotList.push("no sim profile " + $(this).attr("configured") + " slot " + $(this).attr("data"));
        }
      }
    });
    //checking if technology preference
    if ($('#technologyPreference').val().toLowerCase().trim().indexOf($('#technologyPreference').attr("configured").toLowerCase().trim()) == -1) {
      technologyPrefernce = $("#technologyPreference option:selected").text();
    }
    //checking if dialer delete required
    if (interfaceDetails.ipv4dialer.length > 0) {
      dialerDelete = true;
    }

    //check NAT
    if ($("#enableNatCellular").is(':checked')){
      natCheck = true;
    }
    deleteOldConfiguationCellular(interfaceName, updateChatScript, deleteRoutes, slotList, dialerDelete, checkScriptFlag, ipSla);
    configureCellularInterface(interfaceName, chatScriptTimeout, simSeleted, activeSim, lineNo, setPrimary, setBackup, linkProfile, primarySim, isPersistant, dialer, dialerPool, group, technologyPrefernce, natCheck);
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "getAndConfigureCellularInterface()");
  }

  function configureCellularInterface(interfaceName, chatTimeout, simNo, activeSim, lineNo, setPrimary, setBackup, linkProfile, primarySim, isPersistant, dialer, dialerPool, group, technologyPrefernce, natCheck) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "configureCellularInterface()");
    var controllerCmd = "", arr = [];
    var chatScript = 'chat-script multimode "" "AT!CALL"TIMEOUT ' + chatTimeout + ' "OK"\n';
    //var firmwareActivation=interfaceName+" microcode activate "+firmwareId;
    var simActivate = "", ipNat = "", ipRoute = "", ipNatOverload = "", ipSla = "", backupNat = "", backupCli = "";
    if (setPrimary || setBackup) {
      var routeInt = interfaceName, primRouteInt = currentPrimaryWanInterface;
      if (isPersistant) {
        routeInt = dialer;
      }
      if (setPrimary) {
        ipRoute = "ip route 0.0.0.0 0.0.0.0 " + routeInt;
        ipNatOverload = "ip nat inside source list nat-list interface " + routeInt + " overload";
      }
      if (setBackup) {
        if (iAndC.getEditInterfaceDetails(currentPrimaryWanInterface).ipv4dialer.length > 0 && currentPrimaryWanInterface != "") {
          primRouteInt=iAndC.getEditInterfaceDetails(currentPrimaryWanInterface).ipv4dialer.toString();
            if (primRouteInt != undefined && primRouteInt.indexOf("Dialer")==-1) {
            primRouteInt="Dialer"+primRouteInt;
            }
        }
        if (currentPrimaryWanInterface != "") {
          iproute = "ip route 0.0.0.0 0.0.0.0 " + primRouteInt + " 1 track 1 \n";
        }
        ipRoute = iproute + "ip route 0.0.0.0 0.0.0.0 " + routeInt + " 253";
        //ipNatOverload="ip nat inside source list 198 interface "+routeInt+" overload";
        ipNatOverload = "\nip nat inside source route-map nat2primary interface " + primRouteInt + " overload";
        ipNatOverload = ipNatOverload + "\nip nat inside source route-map nat2backup interface " + routeInt + " overload";
        ipSla = ipSla+"\naccess-list 197 permit icmp any " + $("#slaWANIntCellular").val() + " 0.0.0.0 \n ip local policy route-map track-primary-if";
        ipSla = ipSla+"\nroute-map track-primary-if permit 1 \n match ip address 197 \n set interface " + primRouteInt + " \nexit";
        ipSla = ipSla + "\nip sla 1 \n icmp-echo " + $("#slaWANIntCellular").val() + " source-interface " + primRouteInt + " \n timeout 5000 \n frequency 60 \n  threshold 5000 \n  exit"
        ipSla = ipSla + "\ntrack 1 ip sla 1 reachability \n ip sla schedule 1 life forever start-time now \n";
        backupNat = "\n route-map nat2backup permit 1 \nmatch ip address nat-list \nmatch interface " + routeInt;
        backupNat = backupNat + "\nroute-map nat2primary permit 1\nmatch ip address nat-list\n match interface " + primRouteInt;
        backupCli = ipSla + backupNat;
      }
    }
    if (natCheck) {
      ipNat = "ip nat outside";
    }
    arr.push({name: "interfaceName", value: interfaceName}, {name: "lineNo", value: lineNo}, {name: "ipNat", value: ipNat}, {name: "ipRoute", value: ipRoute}, {name: "ipOverload", value: ipNatOverload});
    arr.push({name: "dialerPool", value: dialerPool.toString()}, {name: "interfaceDialer", value: dialer}, {name: "dialerGroupTag", value: group.toString()}, {name: "backupCli", value: backupCli});
    //for activating firmware
    try {
      /*if (firmwareId>-1) {

       var cmd=cellularInterfaceName+" microcode activate "+firmwareId;
       var response=deviceCommunicator.getExecCmdOutput(cmd);
       //setting flags for update
       updateFirmware=true;
       }*/
      //EmScript for Dual Sim Switching
       var tempArr=[];
                if (simList.length>1 && $('#enableAutoFimrwareSwitch').is(':checked')) {
                    tempArr.push({name:"simZeroType",value:$('#technologyTypeZero').val()},{name:"simOneType",value:$('#technologyTypeOne').val()},{name:"simPrimarySelected",value:primarySim});
                    var emscript=deviceCommunicator.configureCommandsFromTemplate2("EMScriptCellular.txt", tempArr, false);
                }else if(simList.length==1){
                    var emscript=deviceCommunicator.configureCommandsFromTemplate2("EMScriptSingleSIM.txt", tempArr, false);
                }

      //configuring controller, chatscript and sim activation
      if (isPersistant) {
        controllerCmd = deviceCommunicator.configureCommandsFromTemplate2("CellularNanoDialer.txt", arr, true);
      }
      else {
        controllerCmd = deviceCommunicator.configureCommandsFromTemplate2("CellularNanoSim0.txt", arr, true);
      }
      var interfaceCmd = "";
      if (updateChatScript) {
        interfaceCmd = interfaceCmd + chatScript;
      }
      interfaceCmd = interfaceCmd + controllerCmd;
      deviceCommunicator.getConfigCmdOutput(interfaceCmd);
      if (simNo > -1) {
        simActivate = cellularInterfaceName + " sim activate slot " + simNo;
        var response = deviceCommunicator.getExecCmdOutput(simActivate);
      }

      //adding primary/backup description
      var des = "";
      if ($('#primWANIntCellular').is(':checked')){
        des = "primary";
      }
      else if ($('#backWANIntCellular').is(':checked')){
        des = "backup";
      }
      else{
        des = "none";
      }
      setCellularPrimaryBackup(cellularInterfaceName, des, interfaceDetails);
      //iAndC.setCellularPrimaryBackup(cellularInterfaceName,des,currentPrimaryWanInterface);

      var controllerName = cellularInterfaceName.substring(0, cellularInterfaceName.length - 2);
      arr.push({name: "controllerName", value: controllerName});
      //selecting profile for gsm
      if (linkProfile.length > 0) {
        var controllerProfile = "", arrTemp = [];
        var controllerName = cellularInterfaceName.substring(0, cellularInterfaceName.length - 2);
        /*var simSlot=activeSim;
         if (simNo!=-1) {
         simSlot=simNo;
         }
         arr.push({name:"profileNo",value:linkProfile},{name:"slot",value:simSlot});

         var controllerProfile=deviceCommunicator.configureCommandsFromTemplate2("assignProfile.txt", arr, false);
         */
        $.each(linkProfile, function(index, profileSim) {
          arrTemp = [];
          arrTemp.push({name: "controllerName", value: controllerName});
          arrTemp.push({name: "profileNo", value: profileSim.profileNo}, {name: "slot", value: profileSim.simNo});
          controllerProfile = controllerProfile + "\n" + deviceCommunicator.configureCommandsFromTemplate2("assignProfile.txt", arrTemp, true);
        });
        //consoleLog(controllerProfile);
        deviceCommunicator.getConfigCmdOutput(controllerProfile);

      }
      //selecting primary sim slot
      if (primarySim > -1) {
        arr.push({name: "primarySlot", value: primarySim});
        var controllerProfile = deviceCommunicator.configureCommandsFromTemplate2("setPrimarySimSlot.txt", arr, false);
      }

      //setting technology preference
      if (technologyPrefernce != "") {
        var cmd = "interface " + interfaceName + "\n shutdown \n ";
        deviceCommunicator.getConfigCmdOutput(cmd);
        cmd = cellularInterfaceName + " technology " + technologyPrefernce;
        deviceCommunicator.getExecCmdOutput(cmd);
      }

      iAndC.modifyConfiguredFeatures("moveToWanNano", false);


      //shut no shut done atlast to get cellular working


      var cmd = "interface " + interfaceName + "\n shutdown \n no shutdown";
      deviceCommunicator.getConfigCmdOutput(cmd);
      deviceCommunicator.doWriteMemory();
      iAndC.refresh();
    }
    catch (e) {
      $("#cellularNanoDialog").dialog("open");
      $('#cellularErrorMsg').find('#errMsgList').remove();
      $('#errorCellularMsg').text(" " + e.errorResponse);
      $('#cellularErrorMsg').show();
      $.unblockUI();
      ////consoleLog(e);
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "configureCellularInterface()");
  }

  function setCellularPrimaryBackup(interfaceName, des, interfaceDetails) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "setCellularPrimaryBackup()");
    var description = "", desArr = [];
    desArr.push({name: "interfaceName", value: interfaceName});
    if (des == "primary"){
      description = "PrimaryWANDesc_";
    }
    else if (des == "backup"){
      description = "BackupWANDesc_";
    }
    if (des != "none") {
      desArr.push({name: "description", value: description});
      response = deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", desArr, false);
      if (des == "primary") {
        currentPrimaryWanInterface = interfaceName.replace(" ", "");
        if (interfaceDetails.ipv4dialer.length > 0) {
          var tempArr = [];
          tempArr.push({name: "interfaceName", value: interfaceDetails.ipv4dialer});
          tempArr.push({name: "description", value: "PrimaryWANDesc___" + interfaceName});
          response = deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", tempArr, false);
        }
      } else if (des == "backup") {
        currentBackupWanInterface = interfaceName.replace(" ", "");
        if (interfaceDetails.ipv4dialer.length > 0) {
          var tempArr = [];
          tempArr.push({name: "interfaceName", value: interfaceDetails.ipv4dialer});
          tempArr.push({name: "description", value: "BackupWANDesc___" + interfaceName});
          response = deviceCommunicator.configureCommandsFromTemplate("interfaceDescription.txt", tempArr, false);
        }
      }
    } else {
      response = deviceCommunicator.configureCommandsFromTemplate("deleteDescription.txt", desArr, false);
      if (interfaceDetails.isPrimary) {
        currentPrimaryWanInterface = "";
      } else if (interfaceDetails.isBackup) {
        currentBackupWanInterface = "";
      }
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "setCellularPrimaryBackup()");
  }

  function deleteOldConfiguationCellular(interfaceName, chatScript, deleteRoutes, slot, dialer, scriptCheck, ipSla) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "deleteOldConfiguationCellular()");
    var noChatScript = "no chat-script multimode", routes = "", cli = "";
    if (chatScript) {
      cli = cli + noChatScript + "\n";
    }
    if (slot.length > 0) {
      cli = cli + "controller " + cellularInterfaceName.substring(0, cellularInterfaceName.length - 2) + "\n";
      $.each(slot, function(index, value) {
        cli = cli + value + "\n";
      });
    }
    try {
      //consoleLog(cli);
      var resp = deviceCommunicator.getConfigCmdOutput(cli);
    }
    catch (e) {
      errorLogInConsole(e);
    }
    //may fail sometimes
    if (scriptCheck) {
      try {
          if ($('#simConfigTable').attr("data-script")=="dualSim"){
                var resp=deviceCommunicator.getConfigCmdOutput("no event manager applet nano-3 \n no event manager applet watch-signal \n no event manager applet nano-2 \n no event manager applet nano-1 \n no event manager applet counter_runtimes \n no event manager applet ccpcli");
          }
          else if($('#simConfigTable').attr("data-script")=="singleSim"){
                var resp=deviceCommunicator.getConfigCmdOutput("no event manager applet cellular \n no event manager applet counter_runtimes");
          }
        }
      catch (e) {
        isEmptyBlock = true;
      }
    }
    if (dialer) {
      try {
        var arr = [];
        arr.push({name: "interface", value: interfaceName});
        var response = deviceCommunicator.configureCommandsFromTemplate("DefaultInterface.txt", arr, false);
      } catch (e) {
        errorLogInConsole(e);
      }
      iAndC.deleteDialerConfigs(interfaceName, interfaceDetails);
    }
    deviceCommunicator.getExecCmdOutput(" clear ip nat trans forced ");
    if (deleteRoutes != "") {
      if (deleteRoutes == "primary") {
        routes = "interface " + cellularInterfaceName + " \n no ip nat outside";
        routes = routes + "\n no ip route 0.0.0.0 0.0.0.0 " + tempInterfaceName;
        routes = routes + "\n no ip nat inside source list nat-list interface " + tempInterfaceName + " overload";
      }
      if (deleteRoutes == "backup") {
        routes = "interface " + cellularInterfaceName + " \n no ip nat outside";
        routes = "\n no ip route 0.0.0.0 0.0.0.0 " + tempInterfaceName;
        routes = routes + "\n no ip nat inside source list nat-list interface " + tempInterfaceName + " overload";
        //routes=routes+"\nno ip sla 1";
      }
      try {
        var resp = deviceCommunicator.getConfigCmdOutput(routes);
      }
      catch (e) {
        isEmptyBlock = true;
      }
    }
    if (ipSla) {
      try {
        var resp = deviceCommunicator.getConfigCmdOutput("no ip sla 1");
      }
      catch (e) {
        isEmptyBlock = true;
      }
    }

    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "deleteOldConfiguationCellular()");
  }

  function setSimInfo(id) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "setSimInfo()");
    var primarySim = $("#" + id).attr("primarysim");
    $('#defaultSim').hide();
    $('#primarySlot').prop('checked', false);
    $('#activateSim').hide();
    //$('#primarySlot').val(primarySim);
    $('#noOfSim').text(simList.length);
    $('#cellularSimErrorMsg').remove();
    $('#cellularProfileSelMsg').remove();
    checkScriptFlag = checkScript();
    if (checkScriptFlag &&  $('#simConfigTable').attr("data-script")=="dualSim") {
      $('#enableAutoFimrwareSwitch').prop('checked', true);
      $('#enableAutoFimrwareSwitch').change();
    }
    if (simList.length > 0) {
      $('#simTab').find('.nanoContent').show();
      $('.headProfileText').show();
      $('#profileRadioSelection').show();
      $('#profileTableCellular').find('tr').each(function() {
        $(this).find('td').first().show();
        //$(this).find('td').last().hide();
      });
      if (simList.length == 1) {
        $('.switchUI').hide();
        $('#simTable').hide();
        $('#autoFirmwareDiv').hide();
        $('#simConfigTable').show();
        $('#simMessage').text("SIM " + simList[0].simNo);
        $('#activeSim').text("SIM " + simList[0].simNo);
        if (simList[0].simNo == 0){
          $("#modeSimOne").prop('checked', 'true');
        }
        else{
          $("#modeSimTwo").prop('checked', 'true');
        }
        //$(".switchUI").attr("state",parseInt(simList[0].simNo)+1);
        if (simList[0].active) {
          $(".switchUI").attr("active-sim", "0");
        }
        if ($('#firmwareTable').attr("data") != "cdma") {
          $('#singleSimProfileRow').show();
        } else {
          $('#singleSimProfileRow').hide();
        }
        $('#singleSimProfile').attr("data", simList[0].simNo);
        // $('#primarySimRow').hide();
      }
      else {
        $('#simConfigTable').hide();
        //$('#primarySimRow').show();
        $('#simTable').show();
        $('#autoFirmwareDiv').show();
        $("#simTable tbody").empty();
        $("#simTable tbody").append('<tr><td>' + simList[0].simNo + '</td><td class="techType"><select class="technologyType" id="technologyTypeZero"><option value="">Select</option><option value="cdma">CDMA</option><option value="gsm">GSM</option></select></td><td><input type="checkbox" id="activateCheckboxZero" class="activateCheckbox"></td><td><input type="checkbox" id="primaryCheckboxZero" class="primaryCheckbox"></td><td class="selectProfileSim"><select class="profileCombo" configured="" data="0" id="profileSlotZero"></select></td></tr>');
        $("#simTable tbody").append('<tr><td>' + simList[1].simNo + '</td><td class="techType"><select class="technologyType" id="technologyTypeOne"><option value="">Select</option><option value="cdma">CDMA</option><option value="gsm">GSM</option></select></td><td><input type="checkbox" id="activateCheckboxOne" class="activateCheckbox"></td><td><input type="checkbox" id="primaryCheckboxOne" class="primaryCheckbox"></td><td class="selectProfileSim"><select class="profileCombo" configured="" data="1" id="profileSlotOne"></select></td></tr>');
        $(".activateCheckbox").unbind("click").click(function() {
          $(".activateCheckbox").each(function() {
            $(this).prop('checked', false)
          });
          $(this).prop('checked', true);
        });
        $('#enableAutoFimrwareSwitch').change(function() {
          if ($(this).is(':checked')) {
            $('#simTypeTech').show();
            $('.techType').each(function() {
              $(this).show()
            });
          } else {
            $('#simTypeTech').hide();
            $('.techType').each(function() {
              $(this).hide()
            });
          }
        });
        $('#enableAutoFimrwareSwitch').change();
        $(".technologyType").unbind("change").change(function() {
          if ($('#technologyTypeZero').val() == "cdma") {
            $('#profileSlotZero').hide();
            $('#technologyTypeZero').removeClass('customErrorClass');
          } else if ($('#technologyTypeZero').val() == "gsm") {
            $('#profileSlotZero').show();
            $('#technologyTypeZero').removeClass('customErrorClass');
          }
          if ($('#technologyTypeOne').val() == "cdma") {
            $('#profileSlotOne').hide();
            $('#technologyTypeOne').removeClass('customErrorClass');
          } else if ($('#technologyTypeOne').val() == "gsm") {
            $('#profileSlotOne').show();
            $('#technologyTypeOne').removeClass('customErrorClass');
          }
        });
        $(".primaryCheckbox").unbind("click").click(function() {
          $(".primaryCheckbox").each(function() {
            $(this).prop('checked', false)
          });
          $(this).prop('checked', true);
        });
        if (primarySim == "0") {
          $('#primaryCheckboxZero').prop('checked', true);
        } else if (primarySim == "1") {
          $('#primaryCheckboxOne').prop('checked', true);
        }
        $('#simMessage').text("");
        if (simList[0].active) {
          $(".switchUI").attr("active-sim", simList[0].simNo);
          $('#activeSim').text("SIM " + simList[0].simNo);
          $("#modeSimOne").prop('checked', 'true');
          if (simList[0].simNo == 0) {
            $('#activateCheckboxZero').prop('checked', true);
          } else {
            $('#activateCheckboxOne').prop('checked', true);
          }
          //$(".switchUI").attr("state",parseInt(simList[0].simNo)+1);
          //changeSwitchState($('.switchUI').find('.switchToggler'),(parseInt(simList[1].simNo)+1).toString(),false);
        } else if (simList[1].active) {
          $(".switchUI").attr("active-sim", simList[1].simNo);
          $('#activeSim').text("SIM " + simList[1].simNo);
          $("#modeSimTwo").prop('checked', 'true');
          if (simList[1].simNo == 0) {
            $('#activateCheckboxZero').prop('checked', true);
          } else {
            $('#activateCheckboxOne').prop('checked', true);
          }
          //changeSwitchState($('.switchUI').find('.switchToggler'),(parseInt(simList[0].simNo)+1).toString(),false);
        }
        setSimType();
        if ($('#firmwareTable').attr("data") == "cdma"){
          hideProfileOptions(false);
        }
      }
    } else {
      $('.switchUI').hide();
      //$('#primarySimRow').hide();
      $('#simTable').hide();
      $('#autoFirmwareDiv').hide();
      $('#simConfigTable').show();
      // $('#simMessage').text("No Sim Inserted");
      $('#simMessage').text($.i18n.prop("noSim"));
      $('#activeSim').text("-");
      $(".switchUI").attr("active-sim", "");
      $('#simTab').find('.nanoContent').hide();
      $('#simTab').append('<div class="alert alert-danger ccpexpCSSReplaceClass773" id="cellularSimErrorMsg" >'+
                          '<em class="fa fa-exclamation-triangle"></em><span> No SIMs detected. Please insert SIM</span></div>');
      //$('#profileAction').hide();
      //$('#addProfileColumn').hide();
      if ($('#profileTab').find('#cellularProfileMsg').length == 0) {
        $('.headProfileText').hide();
        $('#profileRadioSelection').hide();
        $('#profileTableCellular').find('tr').each(function() {
          $(this).find('td').first().hide();
          //$(this).find('td').last().hide();
        });
        $('#profileTab').prepend('<div class="alert alert-danger ccpexpCSSReplaceClass774" id="cellularProfileSelMsg" >'+
                                 '<em class="fa fa-info-circle"></em><span> Please insert GSM(UMTS) SIM to select profile for activation</span></div>');
      }
    }
    $("input:radio[name='simType']").change();
    /*$('#activateSim').button().unbind("click").click(function(e){
     blockPage("Applying");
     setTimeout(function () {
     getAndConfigureCellularInterface(tempInterfaceName);
     loadCellularForNano(tempInterfaceName);
     $('#cellular-tabs').tabs({active: 2});
     activateSimFlag=true;
     $.unblockUI();
     },1000);
     e.preventDefault();
     return false;
     });*/
    populateProfileCombo(simList.length);
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "setSimInfo()");
  }

  function populateProfileCombo(simLength) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "populateProfileCombo()");
    $('#singleSimProfile').empty();
    $('.profileCombo').each(function() {
      $(this).empty();
    });
    if (simLength > 0) {
      $.each(profileList, function(index, value) {
        $('.profileCombo').each(function() {
          $(this).append('<option chosen="" value="' + value.profileNo + '">' + value.profileNo + ' - ' + value.apnName + '</option>');

        });
        $('#singleSimProfile').append('<option chosen="" value="' + value.profileNo + '">' + value.profileNo + ' - ' + value.apnName + '</option>');
      });
      setSelectedProfiles();
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "populateProfileCombo()");
  }

  function getSimInfo(interfaceName) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "getSimInfo()");
    var command = "show controllers " + interfaceName + " | include SIM", simArray = [];
    try {
      var response = deviceCommunicator.getExecCmdOutput(command);
      var outputLines = response.split("\n");
      $.each(outputLines, function(index, value) {
        var active = false;
        if (value.toUpperCase().indexOf("SIM 0") > -1 && value.toUpperCase().indexOf("PRESENT") > -1) {
          $.each(outputLines, function(index1, value1) {
            if (value1.toUpperCase().indexOf("SIM 0") > -1 && value1.toUpperCase().indexOf("ACTIVE SIM") > -1) {
              active = true;
            }
          });
          simArray.push({simNo: "0", active: active});
        }
        if (value.toUpperCase().indexOf("SIM 1") > -1 && value.toUpperCase().indexOf("PRESENT") > -1) {
          $.each(outputLines, function(index1, value1) {
            if (value1.toUpperCase().indexOf("SIM 1") > -1 && value1.toUpperCase().indexOf("ACTIVE SIM") > -1) {
              active = true;
            }
          });
          simArray.push({simNo: "1", active: active});
        }
      });
      //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "getSimInfo()");
      return simArray;
    } catch (e) {
      //consoleLogMethodDetailsEndWithError("interfaceAndConnection.js", "getSimInfo()", e);
      return [];
    }

  }

  function getAvailableFirmware(interfaceName) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "getAvailableFirmware()");
    var command = "show " + interfaceName + " microcode", firmwares = [];
    try {
      var response = deviceCommunicator.getExecCmdOutput(command);
      var outputLines = response.split("\n");
      var foundLine = false;
      for (var i = 0; i < outputLines.length; i++) {
        if (outputLines[i].trim().indexOf("ID") == 0 && !foundLine) {
          foundLine = true;
          continue;
        }
        if (foundLine) {
          firmwareArray = outputLines[i].trim().split(/\s{2,}/);
          if (firmwareArray.length == 5) {
            firmwares.push({id: firmwareArray[0].trim(), carrier: firmwareArray[1].trim(), technology: firmwareArray[2].trim(), version: firmwareArray[3].trim(), status: firmwareArray[4].trim()});
          } else if (firmwareArray.length == 4) {
            firmwares.push({id: firmwareArray[0].trim(), carrier: firmwareArray[1].trim(), technology: firmwareArray[2].trim(), version: "", status: firmwareArray[3].trim()});
          }

        }
      }
      //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "getAvailableFirmware()");
      return firmwares;
    }
    catch (e) {
      //consoleLogMethodDetailsEndWithError("interfaceAndConnection.js", "getAvailableFirmware()", e);
      return [];
    }

  }

  function hideShowSLAWAN() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "hideShowSLAWAN()");
    //$('#slaHolder').hide();
    //$('#moveToWanNano').hide();
    $("#noneWANIntCellular").prop("checked", true);
    $("input:radio[name='wanTypeConfig']").change(function() {
      if ($('#backWANIntCellular').is(':checked')) {
        $('#slaHolder').show();
      } else {
        $('#slaHolder').hide();
      }


    });
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "hideShowSLAWAN()");
  }


  /*function initializeSwitchUI(content1,content2,iconClass) {
   $('.switchUI').unbind('click');
   $('.switchUI').attr("state","1");
   $('.switchUI').find('.switchToggler').css("left","0");
   $('#content1').remove();
   $('#content2').remove();
   $('.switchUI').append('<div class="ccpexpCSSReplaceClass775" id="content1">'+content1+
                         '</div><div class="ccpexpCSSReplaceClass776" id="content2">'+content2+'</div>');
   if (iconClass!=undefined) {
   $('#content1').prepend('<em class="fa '+iconClass+'"></em>&nbsp;');
   $('#content2').prepend('<em class="fa '+iconClass+'"></em>&nbsp;');
   }
   $('#content1').css('color','#ffffff');
   $('#content2').css('color','#ababab');
   $('.switchUI').unbind('click').click(function(){
   changeSwitchState($(this).find('.switchToggler'),$(this).attr("state"),true);
   });
   }*/

  /*function changeSwitchState(switchObj,state,toast){
   var activeSim=parseInt($(".switchUI").attr("active-sim"))+1;
   $('.switchUI').unbind('click');
   if (state=="1") {
   switchObj.animate({left:"50%"}, 200, function() {
   $('.switchUI').unbind('click').click(function(){
   changeSwitchState($(this).find('.switchToggler'),$(this).attr("state"),true);
   });
   });
   $('#content2').animate({color:'#ffffff'});
   switchObj.parent('.switchUI').attr("state","2");
   if(switchObj.parent('.switchUI').find('.switchToast')&& toast){
   //$('.switchToast').text($('#content2').text()+ " selected");
   if ($(".switchUI").attr("state")!==activeSim.toString()) {
   $('#simNotify').text($('#content2').text()+ " is selected for activation");
   }
   //$('.switchToast').fadeIn(300);
   //$('.switchToast').delay(700).fadeOut(200);
   }

   $('#content1').css('color','#ababab');
   }else if (state=="2") {
   switchObj.animate({left:"0"}, 300, function() {
   $('.switchUI').unbind('click').click(function(){
   changeSwitchState($(this).find('.switchToggler'),$(this).attr("state"),true);
   });
   });
   $('#content1').animate({color:'#ffffff'});
   switchObj.parent('.switchUI').attr("state","1");
   if(switchObj.parent('.switchUI').find('.switchToast') && toast){
   //$('.switchToast').text($('#content1').text()+ " selected");
   if ($(".switchUI").attr("state")!==activeSim.toString()) {
   $('#simNotify').text($('#content1').text()+ " is selected for activation");
   }
   //$('.switchToast').fadeIn(300);
   //$('.switchToast').delay(700).fadeOut(200);
   }

   $('#content2').css('color','#ababab');
   }
   if ($(".switchUI").attr("state")==activeSim.toString()) {
   $('#simNotifyDiv').slideUp("300");

   }else{
   $('#simNotifyDiv').slideDown("300");
   }

   }*/



  function loadCellularForNanoDialog() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "loadCellularForNanoDialog()");
    $("#cellularNanoDialog").dialog({
      autoOpen: false,
      height: 620,
      width: 820,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function(e) {
            //if (!activateSimFlag) {
            //activateSimFlag=false;
            if ($('#cellularNanoForm').valid() && $('#chatTimeout').val().trim() != "" && (($('#enableAutoFimrwareSwitch').is(':checked') && $('#technologyTypeZero').val().trim() != "" && $('#technologyTypeOne').val().trim() != "") || !$('#enableAutoFimrwareSwitch').is(':checked'))) {
              blockPage("Applying");
              setTimeout(function() {
                $("#cellularNanoDialog").dialog("close");
                getAndConfigureCellularInterface(tempInterfaceName);
                $.unblockUI();
              }, 1000);
              //}else{
              $("#cellularNanoDialog").dialog("close");
            } else {
              var msg = [];
              $('#errorCellularMsg').empty();
              $('#cellularErrorMsg').find('#errMsgList').remove();
              if ($('#chatTimeout').val().trim() == "") {
                //$('#errorCellularMsg').text("Please fill the chatscript timeout value");
                msg.push($.i18n.prop("chatSciptRequired"));
                //$('#cellularErrorMsg').show();
              }
              if (($('#technologyTypeZero').val().trim() == "" || $('#technologyTypeOne').val().trim() == "") && $('#enableAutoFimrwareSwitch').is(':checked')) {
                if ($('#technologyTypeZero').val() == "") {
                  $('#technologyTypeZero').addClass("customErrorClass");
                  msg.push($.i18n.prop("selectSim") + "0" + $.i18n.prop("typeSim"));
                }
                if ($('#technologyTypeOne').val() == "") {
                  $('#technologyTypeOne').addClass("customErrorClass");
                  msg.push($.i18n.prop("selectSim") + "1" + $.i18n.prop("typeSim"));
                }

              }
              $('#errorCellularMsg').append($.i18n.prop('cellularNanoValid'));
              $('#cellularErrorMsg').append('<ul id="errMsgList" class="ccpexpCSSReplaceClass777"></ul>');
              $.each(msg, function(index, value) {
                $('#errMsgList').append('<li>' + value + '</li>');
              });
              $('#cellularErrorMsg').show();
            }
            //activateSimFlag=false;
            //}
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $("#cellularNanoDialog").dialog("close");
            activateSimFlag = false;
            //$('.switchToast').hide();
          }
        }],
      close: function() {
        activateSimFlag = false;
        //$('.switchToast').hide();
      }
    });

    $("#wanAlertNano").dialog({
      autoOpen: false,
      height: 250,
      width: 350,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yes"),
          click: function() {
            if ($('#moveToWanNano').attr("checkflag") == "configured") {
              $('#moveToWanNano').attr("checked", false);
            } else {
              $('#moveToWanNano').attr("checked", true);
              $('#enableNatCellular').attr("disabled", "disabled");
              $('#enableNatCellular').attr("checked", "checked");
            }
            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("no"),
          click: function() {
            if ($('#moveToWanNano').attr("checkflag") == "configured") {
              $('#moveToWanNano').attr("checked", true);
            } else {
              $('#moveToWanNano').attr("checked", false);
            }
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#firmwareAlert").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yes"),
          click: function() {
            $(this).dialog("close");
            blockPage("Applying");
            setTimeout(function() {
              var id = "";
              $("#firmwareTable").find(".activeState").each(function() {
                if ($(this).hasClass('selected')) {
                  id = $(this).attr("data");
                }
              });
              var response = activateSelectedFirmware(id, cellularInterfaceName);



              if (response.toLowerCase().indexOf("failed") > -1) {
                //  $('#errorCellularMsg').text(" Firmware activation failed");
                $('#cellularErrorMsg').find('#errMsgList').remove();
                $('#errorCellularMsg').text($.i18n.prop("firmwareActivationFailed"));
                $('#cellularErrorMsg').show();
                $.unblockUI();
              } else {
                firmwareList = getAvailableFirmware(cellularInterfaceName);
                populateFirmwareTable(cellularInterfaceName, firmwareList);
                getCellularInfo(cellularInterfaceName);
        //setting info for modem tab
                setModemInfo();
                if ($('#firmwareTable').attr("data") == "gsm") {
                  try {
                    deviceCommunicator.getExecCmdOutput("test " + cellularInterfaceName + " modem-power-cycle");
                  }
                  catch (e) {
                    isEmptyBlock = true;
                  }
                  var command = "show " + cellularInterfaceName + " profile";
                  counterModem = 0;
                  profileInterval = setInterval(function() {
                    counterModem++;
                    var responseProfiles = deviceCommunicator.getExecCmdOutput(command);
                    refreshProfiles(responseProfiles, true, false, "profileTableCellular");
                    hideShowEdit($('#profileTableCellular tr.hilite'), true, "profileTableCellular");
                    if (profileList.length > 0) {
                      clearInterval(profileInterval);
                      populateTechnologyList();
                      simList = getSimInfo(cellularInterfaceName);
                      setSimInfo(idCellular);
                      $.unblockUI();
                    }
                    if (counterModem == 90) {
                      clearInterval(profileInterval);
                      $.unblockUI();
                    }
                  }, 1000);
                } else {
                  try {
                    deviceCommunicator.getExecCmdOutput("test " + cellularInterfaceName + " modem-power-cycle");
                  }
                  catch (e) {
                    isEmptyBlock = true;
                  }
                  populateTechnologyList();
                  simList = getSimInfo(cellularInterfaceName);
                  setSimInfo(idCellular);
                  $.unblockUI();
                }
              }

            }, 1000);
          }}, {
          text: $.i18n.prop("no"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $('#cellular-tabs').tabs();
    //initializeSwitchUI("SIM 1","SIM 2","fa-file-o"); //for Sim switch
    //hideShowUserPass();
    hideShowSLAWAN();
    interfaceCellularNanoPage = $('#cellularNanoForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    //hideShowProfile();

    $('.cellularApnTxt').live('keypress', function(e) {
      if (e.which === 32){
        return false;
      }
    });
    $('.apnCellularUsername').live('keypress', function(e) {
      if (e.which === 32){
        return false;
      }
    });
    $('.apnCellularPassword').live('keypress', function(e) {
      if (e.which === 32){
        return false;
      }
    });
    $('#chatTimeout').keypress(function(e) {
      //if the letter is not digit then display error and don't type anything
      if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)){
        return false;
      }
    });
    $("input:radio[name='simType']").change(function() {
      /*if (parseInt($('.switchUI').attr("active-sim"))==parseInt($("input:radio[name='simType']:checked").val())-1){
       if(parseInt($('.switchUI').attr("active-sim"))==parseInt($("#"+id).attr("primarysim"))){
       $('#defaultSim').hide();
       $('#primarySlot').prop('checked',false);
       }else{
       $('#defaultSim').show();
       }
       }
       else if(parseInt($('.switchUI').attr("active-sim"))==parseInt($("#"+id).attr("primarysim"))){
       $('#defaultSim').hide();
       $('#primarySlot').prop('checked',false);
       }else{
       $('#defaultSim').show();
       }*/
      if (parseInt($('.switchUI').attr("active-sim")) == parseInt($("input:radio[name='simType']:checked").val()) - 1){
        $('#activateSim').hide();
      }
      else{
        $('#activateSim').show();
      }

      if (parseInt($("input:radio[name='simType']:checked").val()) - 1 == parseInt($("#" + idCellular).attr("primarysim"))) {
        $('#defaultSim').hide();
        $('#primarySlot').prop('checked', false);
      } else {
        $('#defaultSim').show();
      }
    });
    //$("#modeTypeCdma").prop("checked", true);
    $(".custom-alert-close").click(function() {
      $(this).parent().hide();
    });
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "loadCellularForNanoDialog()");
  }

  function createProfile(interfaceNames, profileNo, apn, username, password, authType) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "createProfile()");
    try {
      var command = "";
      // cellular 0/0/0 gsm profile create 3 apn.com ipv4 chap GSM GSMPassword --->(create profile)
      if (authType == "none") {
        command = interfaceNames + " profile create " + profileNo + " " + apn;
      } else {
        command = interfaceNames + " profile create " + profileNo + " " + apn + " " + authType + " " + username + " " + password + " " + " \n";
      }
      //consoleLog(command);
      response = deviceCommunicator.getExecCmdOutput(command);
    } catch (ex1) {
                    isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "createProfile()");
  }

  function deleteProfile(interfaceNames, profileNo) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "deleteProfile()");
    try {
      var command = interfaceNames + " profile delete " + profileNo;
      response = deviceCommunicator.getExecCmdOutput(command);
    } catch (ex1) {
                    isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "deleteProfile()");
  }

  /*if flag=false then hide else show*/
  function hideShowAddProfile(flag, id) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "hideShowAddProfile()");
    if (flag) {
      $("#" + id + " tbody").find('.addProfileColumn').find('.hideShowProfile').each(function() {
        $(this).show()
      });
      $("#" + id + " tbody").find('.addProfileColumn').find('.hideShowAdd').each(function() {
        $(this).hide()
      });
      //$('.hideShowAdd').hide();

    } else {
      $("#" + id + " tbody").find('.addProfileColumn').find('.hideShowProfile').each(function() {
        $(this).hide();
        if ($(this).hasClass("customErrorClass")) {
          $(this).removeClass("customErrorClass");
        }

      });
      $("#" + id + " tbody").find('.addProfileColumn').find('.hideShowAdd').each(function() {
        $(this).show()
      });
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "hideShowAddProfile()");
  }
  function hideShowEdit(object, flag, id) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "hideShowEdit()");
    $('#' + id + ' .hider').each(function() {
      $(this).show();
      $(this).parent().find('.cellularApnTxt').remove();
      $(this).parent().find('.authType').remove();
      $(this).parent().find('.apnCellularUsername').remove();
      $(this).parent().find('.apnCellularPassword').remove();
      $(this).parent().find('.showPassword').remove();
      $(this).parent().find('.editProfile').show();
      $(this).parent().find('.deleteProfile').show();
      $(this).parent().parent().find('.editTd').show();
      $(this).parent().parent().find('.saveTd').hide();

    });
    if (flag) {
      object.find('.hider').each(function() {
        $(this).show();
      });

    } else {
      object.find('.hider').each(function() {
        $(this).hide();
      });
      object.find('.profApnName').parent().append('<input type="text" class="cellularApnTxt" placeholder="Access Point Name" class="hideShowProfile customTbSize">');
      object.find('.profAuth').parent().append('<div class="hideShowProfile"><select class="authType"><option value="none">None</option><option value="pap">PAP</option><option value="chap">CHAP</option></select></div>');
      object.find('.profUsername').parent().append('<input type="text" placeholder="Username" class="hideShowProfile customTbSize apnCellularUsername">');
      object.find('.profPassword').parent().append('<input type="password" placeholder="Password" class="hideShowProfile customTbSize apnCellularPassword ccpexpCSSReplaceClass778" >'+
                                                   '<em class="fa fa-eye hideShowProfile showPassword" title="' + $.i18n.prop("showPassword") + '"></em>');
      object.find(".cellularApnTxt").val(object.find('.profApnName').text());
      object.find(".authType").val(object.find('.profAuth').text().toLowerCase());
      object.find(".apnCellularUsername").val(object.find('.profUsername').text());
      object.find('.editTd').hide();
      object.find('.saveTd').show();

      $(".showPassword")
        .mouseup(function() {
          $(this).parent().find('.apnCellularPassword').prop('type', 'password');
        })
        .mousedown(function() {
          $(this).parent().find('.apnCellularPassword').prop('type', 'text');
        });

      //object.find(".apnCellularPassword").val(object.find('.profApnName').text());
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "hideShowEdit()");
  }

  function profileValidation(currentRow) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "profileValidation()");
    var validFlag = true;
    if (currentRow.find('.cellularApnTxt').val().trim() == "") {
      currentRow.find('.cellularApnTxt').addClass("customErrorClass");
      currentRow.find('.cellularApnTxt').on('keyup', function() {
        if ($('.cellularApnTxt').val().trim() !== "") {
          currentRow.find('.cellularApnTxt').removeClass("customErrorClass");
        } else {
          currentRow.find('.cellularApnTxt').addClass("customErrorClass");
        }
      });
      validFlag = false;
    } else{
      currentRow.find('.cellularApnTxt').removeClass("customErrorClass");
    }
    if (currentRow.find('.authType').val() != "none") {
      if (currentRow.find('.apnCellularUsername').val().trim() == "") {
        currentRow.find('.apnCellularUsername').addClass("customErrorClass");
        validFlag = false;
        currentRow.find('.apnCellularUsername').on('keyup', function() {
          if ($('.apnCellularUsername').val().trim() !== "") {
            currentRow.find('.apnCellularUsername').removeClass("customErrorClass");
          } else {
            currentRow.find('.apnCellularUsername').addClass("customErrorClass");
          }
        });
      } else{
        currentRow.find('.apnCellularPassword').removeClass("customErrorClass");
      }
      if (currentRow.find('.apnCellularPassword').val().trim() == "") {
        currentRow.find('.apnCellularPassword').addClass("customErrorClass");
        validFlag = false;
        currentRow.find('.apnCellularPassword').on('keyup', function() {
          if ($('.apnCellularPassword').val().trim() !== "") {
            currentRow.find('.apnCellularPassword').removeClass("customErrorClass");
          } else {
            currentRow.find('.apnCellularPassword').addClass("customErrorClass");
          }
        });
      } else{
        currentRow.find('.apnCellularPassword').removeClass("customErrorClass");
      }
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "profileValidation()");
    return validFlag;
  }

  function populateProfileTable(profileList, wizardFlag, id) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "populateProfileTable()");
    var profileArr = [], profileNo;

    $("#reloadModemMsgReload").unbind('click').click(function() {
      blockPage("Applying");
      setTimeout(function() {
        try {
          deviceCommunicator.getConfigCmdOutput("service internal");
          deviceCommunicator.getExecCmdOutput("test " + cellularInterfaceName + " modem-power-cycle");
          $.unblockUI();
        } catch (e) {
          $.unblockUI();
        }
      }, 1000);
    });
    $("#" + id + " tbody").empty();
    $.each(profileList, function(index, value) {
      if (value.apnName.trim() != "") {
        profileArr.push(parseInt(value.profileNo));
        $("#" + id + " tbody").append('<tr><td class="selectorButton"><div><input id="radio' + value.profileNo + id + '" type="radio" name="profileSelector" value="' + value.profileNo + '" class="custom-radio">'+
                                      '<label  for="radio' + value.profileNo + '"><span><span class="customRadio ccpexpCSSReplaceClass779"></span></span></label></div><!--<input type="radio" name="profileSelector" class="rowSelector" value="' +
                                      value.profileNo + '">--></td><td class="ccpexpCSSReplaceClass780">'+
                                      '<span class="profNo">' + value.profileNo +
                                      '</span></td><td ><span class="profApnName hider ccpexpCSSReplaceClass781">' + value.apnName +
                                      '</span></td><td ><span class="profAuth hider ccpexpCSSReplaceClass782">' + value.authentication +
                                      '</span></td><td ><span class="profUsername hider ccpexpCSSReplaceClass783">' + value.username +
                                      '</span></td><td  class="passwordBox ccpexpCSSReplaceClass784"><span class="profPassword hider">******</span></td>'+
                                      '<td  class="editTd ccpexpCSSReplaceClass785">'+
                                      '<span  class="fa fa-pencil-square-o editProfile ccpexpCSSReplaceClass786" title="Edit"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+
                                      '<span  class="fa fa-trash-o deleteProfile ccpexpCSSReplaceClass787" title="Delete"></span></td>'+
                                      '<td  class="saveTd ccpexpCSSReplaceClass788">'+
                                      '<span  class="fa fa-floppy-o saveProfile ccpexpCSSReplaceClass789" title="Save"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+
                                      '<span  class="fa fa-times-circle-o closeProfile ccpexpCSSReplaceClass790" title="Cancel"></span></td></tr>');
        if ($('.profAuth:last').text().toLowerCase() == "none"){
          $('.profPassword:last').text("");
        }
      }
      if (wizardFlag) {
        $(".passwordBox:last").after('<td><select class="profileAssigner" chosen="" data="' + value.profileNo + '"><option value="">None</option><option value="0">SIM Slot 0</option><option value="1">SIM Slot 1</option></select></td>');
        $('.profileAssigner').change(function() {
          var currentProfile = $(this);
          if (currentProfile.attr("chosen") != "") {
            if (currentProfile.attr("chosen") != currentProfile.val()) {
              $("#" + id + " tbody").find('.profileAssigner').each(function() {
                $(this).find('option').each(function() {
                  if ($(this).val() == currentProfile.attr("chosen")) {
                    $(this).removeAttr("disabled");
                  }
                });
              });
            }

          }
          if (currentProfile.val() == "0" || currentProfile.val() == "1") {
            $("#" + id + " tbody").find('.profileAssigner').each(function() {
              if (currentProfile.attr("data") != $(this).attr("data")) {
                $(this).find('option').each(function() {
                  if ($(this).val() == currentProfile.val()) {
                    $(this).prop("disabled", true);
                    currentProfile.attr("chosen", currentProfile.val());
                  }
                });
              }
            });
          } else {
            $("#" + id + " tbody").find('.profileAssigner').each(function() {
              $(this).find('option').each(function() {
                if ($(this).val() == currentProfile.attr("chosen")) {
                  $(this).removeAttr("disabled");
                }
              });
            });
            currentProfile.attr("chosen", "");
          }
        });
      }
    });
    profileNo = getFreeProfileNo(profileArr);
    $("#" + id + " tbody").append('<tr class="addProfileColumn"><td><span class="hideShowProfile profileNo">' + profileNo + '</span></td><td><input type="text" placeholder="Access Point Name" class="hideShowProfile customTbSize cellularApnTxt"></td><td><div class="hideShowProfile"><select class="authType"><option value="none">None</option><option value="pap">PAP</option><option value="chap">CHAP</option></select></div></td><td><input type="text" placeholder="Username" class="hideShowProfile customTbSize apnCellularUsername"></td><td><input type="password" placeholder="Password" class="hideShowProfile customTbSize apnCellularPassword"></td><td><button class="hideShowAdd addProfile">Add</button><button  class="hideShowProfile saveProfileNew">Save</button></td></tr>');
    if (wizardFlag){
      $("#" + id + " tbody").find('.addProfileColumn').find('td').last().before('<td></td>');
    }
    hideShowAddProfile(false, id);
    $("#" + id + " tr:nth-child(even)").addClass("striped");
    $("#" + id + " tbody").find('.addProfile').button().click(function(e) {
      hideShowEdit($('#' + id + ' tr.hilite'), true, id);
      hideShowAddProfile(true, id);
      $("#" + id + " tbody").find(".addProfileColumn").find(".apnCellularUsername").hide();
      $("#" + id + " tbody").find(".addProfileColumn").find(".apnCellularPassword").hide();
      $("#" + id + " tbody").find(".addProfileColumn").find(".authType").val('none');
      e.preventDefault();
      return false;
    });
    $("#" + id + " tbody").find('.saveProfileNew').button().click(function(e) {
      e.preventDefault();
      if (profileValidation($('.addProfileColumn'))) {
        createProfile(cellularInterfaceName, $("#" + id + " tbody").find('.addProfileColumn').find('.profileNo').text(), $("#" + id + " tbody").find('.addProfileColumn').find('.cellularApnTxt').val().trim(), $("#" + id + " tbody").find('.addProfileColumn').find('.apnCellularUsername').val().trim(), $("#" + id + " tbody").find('.addProfileColumn').find('.apnCellularPassword').val().trim(), $("#" + id + " tbody").find('.addProfileColumn').find('.authType').val());
        var command = "show " + cellularInterfaceName + " profile";
        var responseProfiles = deviceCommunicator.getExecCmdOutput(command);
        setTimeout(function() {
          refreshProfiles(responseProfiles, true, wizardFlag, id);
        }, 1000);
        $("#reloadModemMsg").show();
      }

      return false;
    });
    /*$('.profileAssigner').change(function(){
     var currentProfile=$(this);
     if (currentProfile.attr("chosen")!="") {
     if(currentProfile.attr("chosen")!=currentProfile.val()){
     $('.profileAssigner').each(function(){
     $(this).find('option').each(function(){
     if ($(this).val()==currentProfile.attr("chosen")) {
     $(this).removeAttr("disabled");
     }
     });
     });
     }

     }
     if (currentProfile.val()=="0" || currentProfile.val()=="1") {
     $('.profileAssigner').each(function(){
     if (currentProfile.attr("data")!=$(this).attr("data")) {
     $(this).find('option').each(function(){
     if ($(this).val()==currentProfile.val()) {
     $(this).prop("disabled",true);
     currentProfile.attr("chosen",currentProfile.val());
     }
     });
     }
     });
     }else{
     $('.profileAssigner').each(function(){
     $(this).find('option').each(function(){
     if ($(this).val()==currentProfile.attr("chosen")) {
     $(this).removeAttr("disabled");
     }
     });
     });
     currentProfile.attr("chosen","");
     }
     });*/
    $("#" + id + " tbody").find('.editProfile').click(function() {
      $(this).parent().parent().find('.customRadio').click();
      var editRow = $('#' + id + ' tr.hilite');
      hideShowEdit(editRow, false, id);
      hideShowAddProfile(false, id);
      editRow.find('.authType').trigger('change');
    });
    $("#" + id + " tbody").find('.closeProfile').click(function() {
      hideShowEdit($('#' + id + ' tr.hilite'), true, id);
    });
    $("#" + id + " tbody").find('.deleteProfile').click(function() {
      $(this).parent().parent().find('.customRadio').click();
      var editRow = $('#' + id + ' tr.hilite');
      if (editRow.find('.profNo').text() != "1") {
        deleteProfile(cellularInterfaceName, editRow.find('.profNo').text());
        var command = "show " + cellularInterfaceName + " profile";
        var responseProfiles = deviceCommunicator.getExecCmdOutput(command);
        setTimeout(function() {
          refreshProfiles(responseProfiles, true, wizardFlag, id);
        }, 1000);
        hideShowEdit($('#' + id + ' tr.hilite'), true, id);
        $("#reloadModemMsg").show();
      }
    });
    $("#" + id + " tbody").find('.saveProfile').click(function() {
      var editRow = $('#' + id + ' tr.hilite');
      if (profileValidation(editRow)) {
        createProfile(cellularInterfaceName, editRow.find('.profNo').text(), editRow.find('.cellularApnTxt').val().trim(), editRow.find('.apnCellularUsername').val().trim(), editRow.find('.apnCellularPassword').val().trim(), editRow.find('.authType').val());
        var command = "show " + cellularInterfaceName + " profile";
        var responseProfiles = deviceCommunicator.getExecCmdOutput(command);
        setTimeout(function() {
          refreshProfiles(responseProfiles, true, wizardFlag, id);
        }, 1000);
        hideShowEdit($('#' + id + ' tr.hilite'), true, id);
        $("#reloadModemMsg").show();
      }
    });
    $("#" + id + " tbody").find('.authType').live("change", function() {
      if ($("#" + id + " tbody").find('.authType').val().toString() == "none") {
        $(this).parent().parent().parent().find(".apnCellularUsername").hide();
        $(this).parent().parent().parent().find(".apnCellularPassword").hide();
        $(this).parent().parent().parent().find('.showPassword').hide();
      }
      else {
        $(this).parent().parent().parent().find(".apnCellularUsername").show();
        $(this).parent().parent().parent().find(".apnCellularPassword").show();
        $(this).parent().parent().parent().find('.showPassword').show();
      }
      $('#profileRadioSelection').hide();

    });

    $("#" + id + " tbody").find("input:radio[name='profileSelector']").change(function() {
      $("#" + id + " tbody").find("input:radio[name='profileSelector']:checked").parent().parent().parent().siblings().removeClass('hilite');
      $("#" + id + " tbody").find("input:radio[name='profileSelector']:checked").parent().parent().parent().addClass('hilite');
      hideShowEdit($('#profileTableCellular tr.hilite'), true, id);
    });
    $("#" + id + " tbody").find(".customRadio").click(function() {
      $(this).parent().parent().parent().find("input:radio[name='profileSelector']").click();
    });
    //$(".customRadio:first").click();

    /*$('#profileTableCellular').attr("active-profile","");
     $.each(profileList,function(index,value){
     if (value.profileStatus=="ACTIVE") {
     $('#radio'+value.profileNo).parent().find('.customRadio').click();
     $('#profileTableCellular').attr("active-profile",value.profileNo);
     return false;
     }
     });*/
    $('#' + id).find('tbody').find('tr').first().find('.editTd').find('.deleteProfile').remove();
    if (simList.length == 0) {
      $('.headProfileText').hide();
      //$('#profileSlot').hide();
      //$('#profileTableCellular').find('tr').each(function(){
      //$(this).find('td').find('.slotSelector').hide();
      //$(this).find('td').last().hide();
      //});
    } else {
      $('.headProfileText').show();
      $('#profileSlot').show();
      //$('#profileTableCellular').find('tr').each(function(){
      //   $(this).find('td').find('.slotSelector').show();
      //$(this).find('td').last().hide();
      //});
    }
    //$("input:radio[name='profileSelector']:first").click();
    //$(".profileAssigner").change();
    //populateProfileCombo(simList.length);
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "populateProfileTable()");
  }

  function setSelectedProfiles() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "setSelectedProfiles()");
    var slotZeroFound = false, slotOneFound = false, slotList = [];
    var response = deviceCommunicator.getExecCmdOutput("show run | i profile");
    $('.profileCombo').each(function() {
      $(this).attr("configured", "");
    });
    if (response != "") {
      var splitLines = response.trim().split("\n");
      $.each(splitLines, function(index, value) {
        if (value.toLowerCase().indexOf("slot 0") > -1) {
          slotList.push({profileNo: value.trim().split(/\s+/)[2], simNo: "0"});
          slotZeroFound = true;
        }
        if (value.toLowerCase().indexOf("slot 1") > -1) {
          slotList.push({profileNo: value.trim().split(/\s+/)[2], simNo: "1"});
          slotOneFound = true;

        }

      });
      if (!slotZeroFound) {
        slotList.push({profileNo: "1", simNo: "0"});
      }
      if (!slotOneFound) {
        slotList.push({profileNo: "1", simNo: "1"});
      }
      if (simList.length > 1) {
        $.each(slotList, function(index, value) {
          /*$(".profileAssigner").each(function(){
           if ($(this).attr("data")==value.profileNo) {
           $(this).val(value.simNo);
           $(this).attr("configured",value.simNo);
           return false;
           }
           });   */
          if (value.simNo == "0") {
            $("#profileSlotZero").val(value.profileNo);
            $("#profileSlotZero").attr("configured", value.profileNo);
          }
          if (value.simNo == "1") {
            $("#profileSlotOne").val(value.profileNo);
            $("#profileSlotOne").attr("configured", value.profileNo);
          }
        });
      } else if (simList.length == 1) {
        $.each(slotList, function(index, value) {
          if (value.simNo == simList[0].simNo) {
            if (value.simNo == "0") {
              $("#profileSlotZero").val(value.profileNo);
              $("#profileSlotZero").attr("configured", value.profileNo);
              $('#singleSimProfile').val(value.profileNo);

            } else if (value.simNo == "1") {
              $("#profileSlotOne").val(value.profileNo);
              $("#profileSlotOne").attr("configured", value.profileNo);
              $('#singleSimProfile').val(value.profileNo);
            }
          }
        });

      }
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "setSelectedProfiles()");
  }

  function getFreeProfileNo(profileArr) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "getFreeProfileNo()");
    var profileNo = profileArr.length + 1;
    for (var i = 0; i < profileArr.length; i++) {
      if ((i + 1) != profileArr[i]) {
        profileNo = i + 1;
        break;
      }
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "getFreeProfileNo()");
    return profileNo;
  }

  /* function hideShowProfile(){
   $("#profileCreationHolder").show();
   $("#profileSelectionHolder").hide();
   $("input:radio[name='profileType']").change(function () {
   if ($('#createNew').is(':checked')) {
   $("#profileCreationHolder").show();
   $("#profileSelectionHolder").hide();
   }else{
   $("#profileCreationHolder").hide();
   $("#profileSelectionHolder").show();
   }
   });

   }*/

  function setModemInfo() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "setModemInfo()");
    $('#modemHDInfo').tooltip({items: "i", content: hardwareInfo.hardwareDescription, track: true, tooltipClass: 'tooltipNano'});
    $("#networkSim").empty();
    if (hardwareInfo.modemMode == ""){
      $('#modeMode').text("-");
    }
    else{
      $('#modeMode').text(hardwareInfo.modemMode);
    }
    if (hardwareInfo.modemFirmwareVersion == ""){
      $('#firmwareVer').text("-");
    }
    else{
      $('#firmwareVer').text(hardwareInfo.modemFirmwareVersion);
    }
    /*if (hardwareInfo.IMSI=="")
     $('#imsiNo').text("-");
     else
     $('#imsiNo').text(hardwareInfo.IMSI);*/
    if (hardwareInfo.technologySelected == ""){
      $('#imsiNo').text("-");
    }
    else{
      $('#imsiNo').text(hardwareInfo.technologySelected);
    }

    if (hardwareInfo.IMEI == ""){
      $('#imeiNo').text("-");
    }
    else{
      $('#imeiNo').text(hardwareInfo.IMEI);
    }
    if (hardwareInfo.ispName == ""){
      $('#networkProvider').text("-");
    }
    else{
      $('#networkProvider').text(hardwareInfo.ispName);
    }

    /*var imgPath="images/NoSignal.png";
     if (hardwareInfo.radioSignal!="") {
     var rssi=parseInt(hardwareInfo.radioSignal);
     if(rssi <= -100 ) {
     imgPath="images/Signal1.png";
     } else if(rssi >= -99 && rssi <= -90) {
     imgPath="images/Signal2.png";
     } else if(rssi >= -89 && rssi <= -70) {
     imgPath="images/Signal3.png";
     } else if(rssi >= -69){
     imgPath="images/Signal4.png";
     }
     }*/
    //$("#networkSim").append('<img src="'+imgPath+'" class="ccpexpCSSReplaceClass791">');
    if (hardwareInfo.radioSignal == ""){
      $('#networkSim').text("-");
    }
    else{
      $('#networkSim').text(hardwareInfo.radioSignal);
    }
    if (hardwareInfo.modemMode == "CDMA") {
      $('#modemNos').hide();
      $('#serviceProviderCell').hide();
    }
    else {
      $('#modemNos').show();
      $('#serviceProviderCell').show();
    }
    //$('#technologyPreference').val(hardwareInfo.technologyPreference);
    $('#technologyPreference').find('option').each(function() {
      if ($(this).val().toLowerCase().trim().indexOf(hardwareInfo.technologyPreference.toLowerCase().trim()) > -1) {
        $('#technologyPreference').val($(this).val());
      }
    });
    $('#technologyPreference').attr("configured", hardwareInfo.technologyPreference);
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "setModemInfo()");
  }

  function populateTechnologyList() {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "populateTechnologyList()");
    try {
      var response = deviceCommunicator.getExecCmdOutput(cellularInterfaceName + " technology ?");
      $('#technologyPreference').empty();
      var splitLines = response.trim().split("\n");
      $.each(splitLines, function(index, value) {
        if (value.trim() != "") {
          var technologyValue = "";
          var splitOut = value.trim().split(/\s+/);
          var technology = splitOut[0].toLowerCase();
          $.each(splitOut, function(indexSplit, valueSplit) {
            if (indexSplit != 0) {
              technologyValue = technologyValue + " " + valueSplit;
            }
          });
          $('#technologyPreference').append('<option value="' + technologyValue.trim() + '">' + technology + '</option>');
        }
      });
    }
    catch (e) {
      errorLogInConsole(e);

    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "populateTechnologyList()");
  }

  function getCellularInfo(interfaceName) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "getCellularInfo()");
    //setting global variable hardwareInfo
    var modemModeName = "", modemFirmwareVer = "", modemFirmwareBui = "", imsi = "", imei = "", hardwareDes = "", isp = "", radio = "", technologyPref = "", technologySel = "";
    try {
      var output = deviceCommunicator.getExecCmdOutput("show " + cellularInterfaceName + " all");
      var splitLines = output.split("\n");
      refreshProfiles(output, false, false, "profileTableCellular");
      $.each(splitLines, function(index, value) {
        //to get modem info
        if (value.trim().toLowerCase().indexOf("hardware information") == 0) {
          for (var i = index + 2; i < splitLines.length; i++) {
            hardwareDes += splitLines[i] + "<br/>";
            var opLine = splitLines[i].toLowerCase().trim();
            if (splitLines[i + 3].trim().indexOf("=======") > -1) {
              break;
            }
            if (opLine.indexOf("modem mode") > -1){
              modemModeName = opLine.split("=")[1].trim().toUpperCase();
            }
            if (opLine.indexOf("modem firmware version") > -1){
              modemFirmwareVer = opLine.split("=")[1].trim().toUpperCase();
            }
            if (opLine.indexOf("modem firmware built") > -1){
              modemFirmwareBui = opLine.split("=")[1].trim().toUpperCase();
            }
            if (opLine.indexOf("international mobile subscriber identity") > -1){
              imsi = opLine.split("=")[1].trim().toUpperCase();
            }
            if (opLine.indexOf("international mobile equipment identity") > -1){
              imei = opLine.split("=")[1].trim().toUpperCase();
            }
          }
        }
        //if (modemModeName=="UMTS") {
        if (value.trim().toLowerCase().indexOf("network information") == 0) {
          for (var i = index + 2; i < splitLines.length; i++) {

            if (splitLines[i].toLowerCase().trim().indexOf("network =") > -1) {
              isp = splitLines[i].toLowerCase().trim().split("=")[1].trim();

            }
            if (splitLines[i].toLowerCase().trim().indexOf("packet switch domain") > -1) {
              radio = splitLines[i].toLowerCase().trim().split("=")[1].trim();
              break;
            }
          }
        }
        // }
        if (value.trim().toLowerCase().indexOf("radio") == 0) {
          for (var i = index + 2; i < splitLines.length; i++) {
            /*if (splitLines[i].toLowerCase().trim().indexOf("current rssi")>-1) {
             radio=splitLines[i].toLowerCase().trim().split("=")[1].trim().split(/\s+/)[0];
             }*/
            if (splitLines[i].toLowerCase().trim().indexOf("technology preference") > -1) {
              technologyPref = splitLines[i].trim().split("=")[1].trim();
            }
            if (splitLines[i].toLowerCase().trim().indexOf("technology selected") > -1) {
              technologySel = splitLines[i].trim().split("=")[1].trim();
              break;
            }

          }
        }
      });
      hardwareInfo = {modemMode: modemModeName, modemFirmwareVersion: modemFirmwareVer, modemFirmwareBuild: modemFirmwareBui, IMSI: imsi, IMEI: imei, hardwareDescription: hardwareDes, ispName: isp, radioSignal: radio, technologyPreference: technologyPref, technologySelected: technologySel};
      //updateFlag=false;

    } catch (e) {
                    isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "getCellularInfo()");
  }
  function refreshProfiles(output, flag, wizardFlag, id) {
    //consoleLogMethodDetailsStart("interfaceAndConnection.js", "refreshProfiles()");
    var splitLines = output.split("\n");
    profileList.length = 0;
    var i;
    if (flag) {
      i = 0;
    } else {
      $.each(splitLines, function(index, value) {
        if (value.trim().toLowerCase().indexOf("profile information") == 0) {
          i = index + 2;
          return false;
        }
      });
    }

    for (; i < splitLines.length; i++) {
      var profileNo = "", apnName = "", pdpType = "", authentication = "", username = "", profileStatus = "";

      if (splitLines[i].trim().indexOf("======") > -1) {
        break;
      }
      if (splitLines[i].trim().indexOf("Profile ") == 0) {
          if(splitLines[i].trim().indexOf("=") != -1 )
          {
        var profSplit = splitLines[i].trim().split("=");
        profileNo = profSplit[0].trim().split(/\s+/)[1];
        profileStatus = profSplit[1].replace("*", "").trim();
        for (var j = i + 2; j < splitLines.length; j++) {
          if (splitLines[j].trim().toLowerCase().indexOf("pdp type") == 0) {
            pdpType = splitLines[j].split("=")[1].trim();
          }
          if (splitLines[j].trim().toLowerCase().indexOf("access point name") == 0) {
            apnName = splitLines[j].split("=")[1].trim();
          }
          if (splitLines[j].trim().toLowerCase().indexOf("authentication") == 0) {
            authentication = splitLines[j].split("=")[1].trim();
          }
          if (splitLines[j].trim().toLowerCase().indexOf("username") == 0) {
            username = splitLines[j].split(":")[1].trim();
          }
          if (splitLines[j].trim().toLowerCase().indexOf("password") == 0) {
            break;
          }

        }
        if (apnName != "") {
          profileList.push({profileNo: profileNo, profileStatus: profileStatus, apnName: apnName, pdpType: pdpType, authentication: authentication, username: username});
        }
      }
      }


    }
    populateProfileTable(profileList, wizardFlag, id);
    ////consoleLog(profileList);
    //consoleLogMethodDetailsEnd("interfaceAndConnection.js", "refreshProfiles()");
  }

  return {
    loadCellularForNano: loadCellularForNano,
    loadCellularForNanoDialog: loadCellularForNanoDialog,
    populateFirmwareTable: populateFirmwareTable,
    getAvailableFirmware: getAvailableFirmware,
    getSimInfo: getSimInfo,
    createProfile: createProfile,
    activateSelectedFirmware: activateSelectedFirmware,
    refreshProfiles: refreshProfiles
  };
}());

var xml, interfaceGraph, usedMemoryInPercentage, freeMemoryInPercentage, usedMemoryInMB, freeMemoryinMB, total, usedFlashmemoryInMB,
    freeFlashMemoryinMB, usedMemoryInPercentage, freeFlashMemoryInPercentage, gauges = [], timerInterval, hours, mins, secs,
    interfaceData, interfaceListAll = [];
interfaceData = [];
var runningConfig = "";
var primayWanList = [], clockInterval;

var overview = (/**
 * @returns {___anonymous34361_34464}
 */
  function() {


    function loadDashboardTab(index) {
      switch (index) {

        case 0:
          overview.overviewLoading();
          break;
        case 1:
          utmDashboard.loadDashboard();
          break;
        case 2:
          avcFuture.loadAvcFuture();
            break;
        default:
        break;
      }
    }
    /***********************To do Internationalization***********************************/
    function loadAndDisplayLanguages() {


      $("#FlashMemory").text($.i18n.prop("FlashMemory"));
      $("#ProcessorMemory").text($.i18n.prop("ProcessorMemory"));
      $("#fiveSec").text($.i18n.prop("fiveSec"));
      $("#oneMin").text($.i18n.prop("oneMin"));
      $("#fiveMin").text($.i18n.prop("fiveMin"));
      $("#IfcsLegend").text($.i18n.prop("IfcsLegend"));
      $("#DashBoardType").text($.i18n.prop("DashBoardType"));
      $("#DashBoardCount").text($.i18n.prop("DashBoardCount"));
      $("#CPUutilization").text($.i18n.prop("CPUutilization"));
      $("#advanceMemoryDtls").text($.i18n.prop("details"));
      $("#processMemoryTitel").text($.i18n.prop("processMemoryTitel"));
      $("#totalMemoryTitle").text($.i18n.prop("totalMemoryTitle"));
      $("#secndCoreTitle").text($.i18n.prop("secndCoreTitle"));
      $("#sizeTitle").text($.i18n.prop("sizeTitle"));
      $("#nameTitle").text($.i18n.prop("nameTitle"));
    }
    function clearDataTable() {
      //code
      $("#hostname td").remove();
      $("#deviceType td").remove();
      $("#iosVersion td").remove();
      $("#chartData td").remove();
      $("#MemoryData td").remove();

    }

    function setSystemDetails(output) {
      //resp=deviceCommunicator.getExecCmdOutput("show version");
      resp = output;
      respLines = resp.split("\n");
      //$("#uptimeHD").text("System Uptime:");
      //$("#timeHD").text("System Time:");
      //$("#reloadHD").text("Reason for Last Reload:");
      $('#uptimeHD').text($.i18n.prop("DBSystemUptime"));
      $('#timeHD').text($.i18n.prop("DBSystemTime"));
      $('#reloadHD').text($.i18n.prop("DBReloadHD"));
      //$('#reloadNm').text($.i18n.prop("DBReloadNm"));
      $.each(respLines, function(index, value) {
        if (value.indexOf("uptime is") > -1) {
          $("#uptimeNm").text(value.split("uptime is")[1]);
        }
        if (value.indexOf("Last reload reason") > -1) {
          $("#reloadNm").text(value.split(":")[1]);
        }

      });
    }

    function executeCli(cliValue) {
      var resp = "";
      try {
        resp = deviceCommunicator.getExecCmdOutput(cliValue);
      }
      catch (e) {
        isEmptyBlock = true;
      }
      return resp;
    }

    function setPrimaryBackup(output) {
      xml = output;
      if (xml.indexOf("Building configuration...") !== -1) {
        xml = xml.substring(25, xml.length);
        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
      }
      xml = xml.substring(xml.indexOf("<?xml"), xml.length);
      var regEx = new RegExp("&#x03;", "g");
      xml = xml.replace(regEx, "");
      try {
        xmlDoc = $.parseXML(xml);
      } catch (error) {
        xmlDoc = xml;
      }
      primayWanList.length = 0;
      $(xmlDoc).find('interface').each(function() {
        thisInterface = $(this).find('Param:first').text().trim();
        interfaceXml = this;
        intDescription = $(interfaceXml).find('description').text();
        //if(thisInterface.indexOf("Cellular") == -1){
        if (intDescription.indexOf("PrimaryWANDesc") != -1) {
          primayWanList.push(thisInterface);
        }
        if (intDescription.indexOf("BackupWANDesc") != -1) {
          primayWanList.push(thisInterface);
        }
        //}
        /*if(thisInterface.indexOf("Cellular") !== -1){
         $(output).find('ip route').each(function () {
         if($(this).find('Param').text().trim() === thisInterface){
         if($(this).find('DistanceMetricRoute').length > 0){
         if($(this).find('DistanceMetricRoute').text() == 253){
         primayWanList.push(thisInterface);
         } else {
         primayWanList.push(thisInterface);
         }
         } else {
         primayWanList.push(thisInterface);
         }
         }
         });
         }*/


      });
    }
    function getWANInterfaceDetails(interface1, interface2) {
      var bandwidth = 0, backUpWan = "", primaryWan = "", backupWanIP = "", primaryWanIP = "", primaryStatus = "", secondaryStatus = "";
      $.each(primayWanList, function(index, value) {
        var primaryFound = false, backupFound = false;
        if (index == 0){
          resp = interface1;
    }
        if (index == 1){
          resp = interface2;
    }
        if (resp != "") {
          interfaceLines = resp.split("\n");
          $.each(interfaceLines, function(index, iLines) {

            if ((iLines.indexOf("Description") > -1) && (iLines.indexOf("BackupWANDesc_") > -1)) {
              backUpWan = value;
              backupFound = true;

            }
            if ((iLines.indexOf("Description") > -1) && (iLines.indexOf("PrimaryWANDesc_") > -1)) {
              primaryWan = value;
              primaryFound = true;
            }
            if (primaryFound || backupFound) {
              if ((iLines.indexOf("5 minute input rate") > -1) || (iLines.indexOf("30 second input rate") > -1) ||
                  (iLines.indexOf("30 second output rate") > -1) || (iLines.indexOf("5 minute output rate") > -1)) {
                var iLinesSplit = iLines.split(",");
                //$.each(iLinesSplit,function(index,bLines){
                //if ((bLines.indexOf("BW")>-1) && (bLines.indexOf("Kbit/sec")>-1)) {
                var spLine = iLinesSplit[0].trim().split(/\s+/);
                bandwidth = bandwidth + parseInt(spLine[spLine.length - 2]);
                //}
                //});
              }
              if ((iLines.indexOf("Internet address") > -1)) {
                var iLinesSplit = iLines.trim().split(/\s+/);
                if (primaryFound){
                  primaryWanIP = iLinesSplit[iLinesSplit.length - 1].split("/")[0];
        }
                if (backupFound){
                  backupWanIP = iLinesSplit[iLinesSplit.length - 1].split("/")[0];
        }
              }
            }

          });
          if (primaryFound) {
            primaryStatus = interfaceLines[0].trim().split(",")[0];
            primaryStatusLine = interfaceLines[0].trim().split(",")[1];
          }

          if (backupFound) {
            secondaryStatus = interfaceLines[0].trim().split(",")[0];
            secondaryStatusLine = interfaceLines[0].trim().split(",")[1];
          }
        }


      });
      //return parseInt(bandwidth/1024);
      if (primaryStatus !== "") {
        if (primaryStatus.toLowerCase().indexOf("is up") > -1 && primaryStatusLine.toLowerCase().indexOf("is up") > -1){
          $("#primaryPort").css("background", "#26c977");
    }
        else {
          $("#primaryPort").css("background", "#c94926");        
       }
       $("#primaryStat").text(primaryStatus);
       
        if (primaryWanIP != "") {
          //$("#primaryWanIP").text("IP Address: "+primaryWanIP);
          $("#primaryWanIP").text($.i18n.prop("ipAddress") + ": " + primaryWanIP);
        } else {
          $("#primaryWanIP").text("");
        }

      } else {
        $("#primaryPort").css("background", "#95a39c");
        //$("#primaryStat").text("Not Configured");
        $("#primaryStat").text($.i18n.prop("notConfig"));
        $("#primaryWanIP").empty();
        $("#primaryWanIP").append('<a href="#" class="linkInterface" ><u>'+$.i18n.prop("configureOverview")+'</u></a>');
      }

      if (secondaryStatus !== "") {
        if (secondaryStatus.toLowerCase().indexOf("is up") > -1 && secondaryStatus.toLowerCase().indexOf("is up") > -1){
          $("#backupPort").css("background", "#26c977");
    }
        else{
          $("#backupPort").css("background", "#c94926");        
        }
        $("#backupStat").text(secondaryStatus);
        
        if (backupWanIP != "") {
          //$("#backupWanIP").text("IP Address: "+backupWanIP);
          $("#backupWanIP").text($.i18n.prop("ipAddress") + ": " + backupWanIP);
        } else {
          $("#backupWanIP").text("");
        }

      } else {
        $("#backupPort").css("background", "#95a39c");
        //$("#backupStat").text("Not Configured");
        $("#backupStat").text($.i18n.prop("notConfig"));
        $("#backupWanIP").empty();
        $("#backupWanIP").append('<a href="javascript:void(0)" class="linkInterface"><u>'+$.i18n.prop("configureOverview")+'</u></a>');
      }

      /*if (secondaryStatus!="" || primaryStatus!="") {
       var kbBandwidth=bandwidth/(8*1024);
       if (kbBandwidth>1024) {
       $('#wanBandwidth').text((kbBandwidth/1024).toFixed(2)+" Mb/s");
       }else{
       $('#wanBandwidth').text(kbBandwidth.toFixed(2)+" Kb/s");
       }

       }*/
      if (secondaryStatus != "" || primaryStatus != "") {
        var kbBandwidth = bandwidth / (8 * 1024);
        if (kbBandwidth > 1024) {
          var wanBWVal = (kbBandwidth / 1024).toFixed(2);
          $('#wanBandwidth').text((wanBWVal + " Mb/s"));
        } else {
          $('#wanBandwidth').text(kbBandwidth.toFixed(2) + " Kb/s");
        }

      }
      $('.linkInterface').click(function() {
        $('ul#bottomnav li#bottomnav-1 a').click();
      });
    }

    function setHardwareHealth(output) {
      var cpuTemp = "", power = "", clock = "", fan = "", fanList = [], normalFanCount = 0, faultyFanCount = 0;
      try {
        //resp=deviceCommunicator.getExecCmdOutput("show environment all");
        resp = output;
        respLines = resp.split("\n");
        $.each(respLines, function(index, value) {
          if (value.indexOf("CPU temperature:") > -1) {
            var temp = value.split("CPU temperature:")[1].split(",");
            cpuTemp = temp[0].trim().split(/\s+/)[0];
            //changeTemperature(cpuTemp);

          }
          if (value.indexOf("REAL TIME CLOCK BATTERY STATUS") > -1) {
            if (respLines[index + 2].indexOf("Battery OK") > -1) {
              clock = "OK";
            } else {
              clock = "Faulty";
            }
          }
          if (value.indexOf("SYSTEM FAN STATUS") > -1) {
            for (var i = index + 2; i < respLines.length; i++) {
              if (respLines[i].indexOf("========") > -1) {
                break;
              }
              if (respLines[i].indexOf("Fan") > -1) {
                fanList.push(respLines[i].split(",")[0]);
              }
            }
          }
          if (value.indexOf("Total System Power consumption") > -1) {
            power = value.split(":")[1].trim();
          }
        });
        $.each(fanList, function(index, value) {
          if (value.toLowerCase().indexOf("ok") > -1 || value.toLowerCase().indexOf("normal") > -1) {
            normalFanCount++;
          }
          else {
            faultyFanCount++;
          }
        });
        var normalString = "";
        var faultyString = "";

        if (faultyFanCount == 0 && normalFanCount == 0) {
          fan = "";
        }
        else {
          if (faultyFanCount != 0) {
            faultyString = faultyFanCount + " Faulty";
          }
          if (normalFanCount != 0) {
            normalString = normalFanCount + " OK";
          }
          if (normalFanCount == 0 && faultyFanCount > 0){
            fan = faultyString;
      }
          else if (normalFanCount > 0 && faultyFanCount == 0){
            fan = normalString;
      }
          else{
            fan = normalString + ", " + faultyString;
      }
        }

        $("#ciscoPower").text(power);
        $("#cpuTemp").text(cpuTemp + '\xB0' + 'C');
        $("#fanStatus").text(fan);
        $("#clockbattery").text(clock);
        $("#tempStatus").text(cpuTemp);

        if (power == "" && cpuTemp == "" && fan == "" && clock == ""){
          $(".hdPos").hide();
    }
        //To Hide/Unhide Tiles and to adjust width accordingly
        $('.routerTopBoxInner').each(function() {
          if ($(this).hasClass("removeRightBorder")){
            $(this).removeClass("removeRightBorder");
          }
        });
        var count = 0;
        if (power != "") {
          count++;
          if ($('#ciscoPower').parent().hasClass("hideIt")) {
            $('#ciscoPower').parent().removeClass("hideIt");
          }
          $('#ciscoPower').parent().addClass("showIt");
        }
        else {
          if ($('#ciscoPower').parent().hasClass("showIt")) {
            $('#ciscoPower').parent().removeClass("showIt");
          }
          $('#ciscoPower').parent().addClass("hideIt");
        }
        if (cpuTemp != "") {
          count++;
          if ($('#cpuTemp').parent().hasClass("hideIt")) {
            $('#cpuTemp').parent().removeClass("hideIt");
          }
          $('#cpuTemp').parent().addClass("showIt");
        }
        else {
          if ($('#cpuTemp').parent().hasClass("showIt")) {
            $('#cpuTemp').parent().removeClass("showIt");
          }
          $('#cpuTemp').parent().addClass("hideIt");
        }
        if (fan != "") {
          count++;
          if ($('#fanStatus').parent().hasClass("hideIt")) {
            $('#fanStatus').parent().removeClass("hideIt");
          }
          $('#fanStatus').parent().addClass("showIt");
        }
        else {
          if ($('#fanStatus').parent().hasClass("showIt")) {
            $('#fanStatus').parent().removeClass("showIt");
          }
          $('#fanStatus').parent().addClass("hideIt");
        }
        if (clock != "") {
          count++;
          $('#clockbattery').parent().show();
          if ($('#clockbattery').parent().hasClass("hideIt")) {
            $('#clockbattery').parent().removeClass("hideIt");
          }
          $('#clockbattery').parent().addClass("showIt");
        }
        else {
          if ($('#clockbattery').parent().hasClass("showIt")) {
            $('#clockbattery').parent().removeClass("showIt");
          }
          $('#clockbattery').parent().addClass("hideIt");
        }
        if (count == 3) {
          $('.routerTopBoxInner').each(function() {
            $(this).attr("style", "width:31% !important");
          });
        } else if (count == 2) {
          $('.routerTopBoxInner').each(function() {
            $(this).attr("style", "width:48.3% !important");
          });
        } else if (count == 1) {
          $('.routerTopBoxInner').each(function() {
            $(this).attr("style", "width:100% !important");
          });
        } else if (count == 4) {
          $('.routerTopBoxInner').each(function() {
            $(this).attr("style", "width:23% !important");
          });
        }
        //$('.securityTopBoxInner:last-child:not(:hidden)').css("border-right","none");
        //$('.securityTopBoxInner:not(:hidden):last-child').addClass("removeRightBorder");
        $('.routerTopBoxInner.showIt').last().addClass("removeRightBorder");
      }
      catch (e) {
        isEmptyBlock = true;
      }
    }

    function setProcessMemory(output) {
      var fiveseconds, oneminute, fiveminutes;
      //xml = deviceCommunicator.getExecCmdOutput("show processes cpu | format " + deviceCommunicator.getInstallDir() +       "/odm/overviewshCpuUtil.odm");
      xml = output;
      fiveseconds = $(xml).find('fiveseconds').text();
      //lastFiveSeconds = (2 * (fiveseconds.substring(0, fiveseconds.indexOf('%')))) //+ "px";
      lastFiveSeconds = (fiveseconds.substring(0, fiveseconds.indexOf('%')));
      //+ "px";
      oneminute = $(xml).find('oneminute').text();
      //lastOneMinute = (2 * (oneminute.substring(0, oneminute.indexOf('%')))) + "px";
      lastOneMinute = (oneminute.substring(0, oneminute.indexOf('%')));
      fiveminutes = $(xml).find('fiveminutes').text();
      //lastFiveMinutes = (2 * (fiveminutes.substring(0, fiveminutes.indexOf('%')))) + "px";
      lastFiveMinutes = (fiveminutes.substring(0, fiveminutes.indexOf('%')));
      updateGauges(parseInt(lastFiveMinutes));
      $("#FlashMemoryUsage").text(parseInt(lastFiveMinutes) + "%");

    }


//To get system time and increment time
    function setSystemTime() {
      try {
        resp = deviceCommunicator.getExecCmdOutput("show clock");
        respLines = resp.split(/\s+/);
        time = respLines[0].replace("*", "").split(".")[0];
        timeZone = respLines[1];
        var timeSplit = time.split(":");
        $("#systemHours").text(timeSplit[0]);
        $("#systemMinutes").text(timeSplit[1]);
        $("#systemSecs").text(timeSplit[2]);
        $("#systemTimeZone").text(timeZone);
        hours = parseInt(timeSplit[0]);
        mins = parseInt(timeSplit[1]);
        secs = parseInt(timeSplit[2]) + 1;
        if (timerInterval != undefined) {
          clearInterval(timerInterval);
        }
        timerInterval = setInterval(function() {

          function zeroPad(num, places) {
            var zero = places - num.toString().length + 1;
            return Array(+(zero > 0 && zero)).join("0") + num;
          }

          secs++;
          $("#systemSecs").text(zeroPad(secs, 2));
          if (secs == 60) {
            secs = 0;
            $("#systemSecs").text("00");
            mins++;
            $("#systemMinutes").text(zeroPad(mins, 2));
          }
          if (mins == 60) {
            mins = 0;
            hours++;
            $("#systemMinutes").text("00");
            $("#systemHours").text(zeroPad(hours, 2));
          }
          if (hours > 24) {
            hours == 0;
            $("#systemHours").text("00");
          }
        }, 1000);
      }
      catch (e) {
        isEmptyBlock = true;
      }
    }

//Gauges

    function Gauge(placeholderName, configuration)
    {
      this.placeholderName = placeholderName;
      // for internal d3 functions
      var self = this;

      this.configure = function(configuration)
      {
        this.config = configuration;

        this.config.size = this.config.size * 0.9;

        this.config.raduis = this.config.size * 0.97 / 2;
        this.config.cx = this.config.size / 2;
        this.config.cy = this.config.size / 2;

        this.config.min = undefined != configuration.min ? configuration.min : 0;
        this.config.max = undefined != configuration.max ? configuration.max : 100;
        this.config.range = this.config.max - this.config.min;

        this.config.majorTicks = configuration.majorTicks || 5;
        this.config.minorTicks = configuration.minorTicks || 2;

        this.config.greenColor = configuration.greenColor || "#109618";
        this.config.yellowColor = configuration.yellowColor || "#FF9900";
        this.config.redColor = configuration.redColor || "#DC3912";

        this.config.transitionDuration = configuration.transitionDuration || 500;
      };

      this.render = function()
      {
        this.body = d3.select("#" + this.placeholderName)
          .append("svg:svg")
          .attr("class", "gauge")
          .attr("width", this.config.size)
          .attr("height", this.config.size);

        this.body.append("svg:circle")
          .attr("cx", this.config.cx)
          .attr("cy", this.config.cy)
          .attr("r", this.config.raduis)
          .style("fill", "#ccc")
          .style("stroke", "#000")
          .style("stroke-width", "0.5px");

        this.body.append("svg:circle")
          .attr("cx", this.config.cx)
          .attr("cy", this.config.cy)
          .attr("r", 0.9 * this.config.raduis)
          .style("fill", "#fff")
          .style("stroke", "#e0e0e0")
          .style("stroke-width", "2px");

        for (var index in this.config.greenZones)
        {
          this.drawBand(this.config.greenZones[index].from, this.config.greenZones[index].to, self.config.greenColor);
        }

        for (var index in this.config.yellowZones)
        {
          this.drawBand(this.config.yellowZones[index].from, this.config.yellowZones[index].to, self.config.yellowColor);
        }

        for (var index in this.config.redZones)
        {
          this.drawBand(this.config.redZones[index].from, this.config.redZones[index].to, self.config.redColor);
        }

        if (undefined != this.config.label)
        {
          var fontSize = Math.round(this.config.size / 9);
          this.body.append("svg:text")
            .attr("x", this.config.cx)
            .attr("y", this.config.cy / 2 + fontSize / 2)
            .attr("dy", fontSize / 2)
            .attr("text-anchor", "middle")
            .text(this.config.label)
            .style("font-size", fontSize + "px")
            .style("fill", "#333")
            .style("stroke-width", "0px");
        }

        var fontSize = Math.round(this.config.size / 16);
        var majorDelta = this.config.range / (this.config.majorTicks - 1);
        for (var major = this.config.min; major <= this.config.max; major += majorDelta)
        {
          var minorDelta = majorDelta / this.config.minorTicks;
          for (var minor = major + minorDelta; minor < Math.min(major + majorDelta, this.config.max); minor += minorDelta)
          {
            var point1 = this.valueToPoint(minor, 0.75);
            var point2 = this.valueToPoint(minor, 0.85);

            this.body.append("svg:line")
              .attr("x1", point1.x)
              .attr("y1", point1.y)
              .attr("x2", point2.x)
              .attr("y2", point2.y)
              .style("stroke", "#666")
              .style("stroke-width", "1px");
          }

          var point1 = this.valueToPoint(major, 0.7);
          var point2 = this.valueToPoint(major, 0.85);

          this.body.append("svg:line")
            .attr("x1", point1.x)
            .attr("y1", point1.y)
            .attr("x2", point2.x)
            .attr("y2", point2.y)
            .style("stroke", "#333")
            .style("stroke-width", "2px");

          if (major == this.config.min || major == this.config.max)
          {
            var point = this.valueToPoint(major, 0.63);

            this.body.append("svg:text")
              .attr("x", point.x)
              .attr("y", point.y)
              .attr("dy", fontSize / 3)
              .attr("text-anchor", major == this.config.min ? "start" : "end")
              .text(major)
              .style("font-size", fontSize + "px")
              .style("fill", "#333")
              .style("stroke-width", "0px");
          }
        }

        var pointerContainer = this.body.append("svg:g").attr("class", "pointerContainer");

        var midValue = (this.config.min + this.config.max) / 2;

        var pointerPath = this.buildPointerPath(midValue);

        var pointerLine = d3.svg.line()
          .x(function(d) {
            return d.x;
          })
          .y(function(d) {
            return d.y;
          })
          .interpolate("basis");

        pointerContainer.selectAll("path")
          .data([pointerPath])
          .enter()
          .append("svg:path")
          .attr("d", pointerLine)
          .style("fill", "#dc3912")
          .style("stroke", "#c63310")
          .style("fill-opacity", 0.7);

        pointerContainer.append("svg:circle")
          .attr("cx", this.config.cx)
          .attr("cy", this.config.cy)
          .attr("r", 0.12 * this.config.raduis)
          .style("fill", "#4684EE")
          .style("stroke", "#666")
          .style("opacity", 1);

        var fontSize = Math.round(this.config.size / 10);
        pointerContainer.selectAll("text")
          .data([midValue])
          .enter()
          .append("svg:text")
          .attr("x", this.config.cx)
          .attr("y", this.config.size - this.config.cy / 4 - fontSize)
          .attr("dy", fontSize / 2)
          .attr("text-anchor", "middle")
          .style("font-size", fontSize + "px")
          .style("fill", "#000")
          .style("stroke-width", "0px");

        this.redraw(this.config.min, 0);
      };

      this.buildPointerPath = function(value)
      {
        var delta = this.config.range / 13;

        var head = valueToPoint(value, 0.85);
        var head1 = valueToPoint(value - delta, 0.12);
        var head2 = valueToPoint(value + delta, 0.12);

        var tailValue = value - (this.config.range * (1 / (270 / 360)) / 2);
        var tail = valueToPoint(tailValue, 0.28);
        var tail1 = valueToPoint(tailValue - delta, 0.12);
        var tail2 = valueToPoint(tailValue + delta, 0.12);

        return [head, head1, tail2, tail, tail1, head2, head];

        function valueToPoint(value, factor)
        {
          var point = self.valueToPoint(value, factor);
          point.x -= self.config.cx;
          point.y -= self.config.cy;
          return point;
        }
      };

      this.drawBand = function(start, end, color)
      {
        if (0 >= end - start){
          return;
    }
        this.body.append("svg:path")
          .style("fill", color)
          .attr("d", d3.svg.arc()
            .startAngle(this.valueToRadians(start))
            .endAngle(this.valueToRadians(end))
            .innerRadius(0.65 * this.config.raduis)
            .outerRadius(0.85 * this.config.raduis))
          .attr("transform", function() {
            return "translate(" + self.config.cx + ", " + self.config.cy + ") rotate(270)"
          }
          );
      };

      this.redraw = function(value, transitionDuration)
      {
        var pointerContainer = this.body.select(".pointerContainer");

        pointerContainer.selectAll("text").text(Math.round(value));

        var pointer = pointerContainer.selectAll("path");
        pointer.transition()
          .duration(undefined != transitionDuration ? transitionDuration : this.config.transitionDuration)
          //.delay(0)
          //.ease("linear")
          //.attr("transform", function(d)
          .attrTween("transform", function()
          {
            var pointerValue = value;
            if (value > self.config.max){
              pointerValue = self.config.max + 0.02 * self.config.range;
      }
            else if (value < self.config.min){
              pointerValue = self.config.min - 0.02 * self.config.range;
      }
            var targetRotation = (self.valueToDegrees(pointerValue) - 90);
            var currentRotation = self._currentRotation || targetRotation;
            self._currentRotation = targetRotation;

            return function(step)
            {
              var rotation = currentRotation + (targetRotation - currentRotation) * step;
              return "translate(" + self.config.cx + ", " + self.config.cy + ") rotate(" + rotation + ")";
            };
          });
      };

      this.valueToDegrees = function(value)
      {
        // thanks @closealert
        //return value / this.config.range * 270 - 45;
        return value / this.config.range * 270 - (this.config.min / this.config.range * 270 + 45);
      };

      this.valueToRadians = function(value)
      {
        return this.valueToDegrees(value) * Math.PI / 180;
      };

      this.valueToPoint = function(value, factor)
      {
        return {x: this.config.cx - this.config.raduis * factor * Math.cos(this.valueToRadians(value)),
          y: this.config.cy - this.config.raduis * factor * Math.sin(this.valueToRadians(value))};
      };

      // initialization
      this.configure(configuration);
    }

    function createGauge(name, label, min, max)
    {
      var config =
        {
          size: 120,
          label: label,
          min: undefined != min ? min : 0,
          max: undefined != max ? max : 100,
          minorTicks: 5
        };
      var range = config.max - config.min;
      config.yellowZones = [{from: config.min + range * 0.75, to: config.min + range * 0.9}];
      config.redZones = [{from: config.min + range * 0.9, to: config.max}];
      gauges[name] = new Gauge(name + "GaugeContainer", config);
      gauges[name].render();
    }
    function createGauges()
    {
//createGauge("memory", "Memory");
      createGauge("cpu", "CPU");
//createGauge("network", "Network");
//createGauge("test", "Test", -50, 50 );
    }
    function updateGauges(value)
    {
      for (var key in gauges)
      {
//var value = getRandomValue(gauges[key])
        gauges[key].redraw(value);
//changeTemperature(value.toString().split(".")[0]);
      }
    }
    function initialize()
    {
      createGauges();
    }


//custom tooltips for d3 charts
    function toolTipContentFunction() {
      return function(key, x, y, e, graph) {
        var tempArr, status, imgSrc;
        var element = e.series.values.filter(function(val) {
          return val.label === x;
        });
        if (key.toLowerCase().indexOf('down') > -1|| key.indexOf($.i18n.prop("downStr"))>-1) {
          status = "down";
          imgSrc = "disable";
        } else {
          status = "up";
          imgSrc = "enable";
        }
        $.each(interfaceListAll, function(index, value) {
          if (value['label'] == x && value['status'] == status) {
            tempArr = value['value'];
            return false;
          }
        });
        var list = $('<div><div>');
        if (tempArr != undefined) {
          $.each(tempArr, function(index, value) {
            list.find('div').append('<p>' + value + '&nbsp;&nbsp;<a href="javascript:void(0)" class="utmSprite ' + imgSrc + ' ccpexpCSSReplaceClass800" ></a></p>');
          });
        } else {
          list.find('div').append('<p>No interface ' + status + '</p>');
        }


        return '<div class="custom-d3-tooltip"><div><p><b>Interface:' + x + '</b></p></div>' + list.html() + '</div>';
      };
    }

    function flashMemToolTip() {
      return function(key, x, y, e, graph) {
        var dataMb;
        if (key.trim()==$.i18n.prop("FlashUsed")){
          dataMb = usedFlashmemoryInMB;
    }
        else{
          dataMb = freeFlashMemoryinMB;
    }
        return '<div class="custom-d3-tooltip ccpexpCSSReplaceClass801" ><div><p><b>' + key +
        '</b></p></div><p>' + dataMb + ' MB</p></div>';
      };
    }
    ;

    function systemMemToolTip() {
      return function(key, x, y, e, graph) {
        var dataMb;
        if (key.trim()==$.i18n.prop("ProcUsed")){
          dataMb = usedMemoryInMB;
    }
        else{
          dataMb = freeMemoryinMB;
    }
        return '<div class="custom-d3-tooltip ccpexpCSSReplaceClass802" ><div><p><b>' + key +
        '</b></p></div><p>' + dataMb + ' MB</p></div>';
      };
    }
    ;


    function drawInterfaceGraph() {
      try {

        nv.addGraph(function() {

          interfaceGraph = nv.models.multiBarHorizontalChart()
            .x(function(d) {
              return d.label;
            })
            .y(function(d) {
              return d.value;
            })
            //.margin({right:20,left: 150})
            .margin({top: 30, right: 20, bottom: 50, left: 175})
            .showValues(true)
            .tooltips(true)
            .showControls(false)
            .showLegend(true)
            .tooltipContent(toolTipContentFunction())
            .showYAxis(true);

          interfaceGraph.yAxis
            //.axisLabel('Interface Count')
            .axisLabel($.i18n.prop("interfaceCount"))
            .tickFormat(d3.format('d'));

          interfaceGraph.valueFormat(d3.format('d'));

          //d3.scale.ordinal()
          //.domain([0])
          //.rangeRoundBands([0, 260], 0.2);

          d3.select('#interfaceGraph svg')
            .datum(interfaceData)
            .transition().duration(500).call(interfaceGraph);
          nv.utils.windowResize(interfaceGraph.update);
          //d3.selectAll(".nv-bar > rect").attr("height", interfaceGraph.xAxis.rangeBand()/3);

          return interfaceGraph;
        });
        /*setTimeout(function() {
         d3.selectAll(".nv-bar > rect").attr("height", "10px");
         }, 100);*/

      }
      catch (e) {
        isEmptyBlock = true;
      }
    }
//Gauge
    function dashboardLoadingAll(activeTab, chart) {
      //code
      $("#DashboardTabs").hide();
      loadAndDisplayLanguages();
      loadDashboardLanguages();
       //var $dashbordTab = $('#DashboardTabs').tabs();
          if(!isAVCSuport){
              isAVCSuport=avcFuture.checkAVCSaport();
              if(!isAVCSuport){
                  //var tabs=$('#DashboardTabs').tabs();
                $("#avcDashbordMenu").hide();
              }
          }
          if(isAVCSuport){
                   $("#avcDashbord").children().remove();
                   $("#avcDashbord" ).load( "avcFuture.html" );
                   loadjscssfile("../html/avcStyles.css", "css");
          }
      $('#hideAll').css('display', 'block');
      runningConfig = deviceCommunicator.getExecCmdOutput("show running-config | format");
      $("#DashboardTabs").addClass("custom-tabs");
      $("#DashboardTabs").tabs({
        create: function(event, ui) {
          loadDashboardTab(ui.tab.index());
        },
        activate: function(event, ui) {
          loadDashboardTab(ui.newTab.index());
        }, active: activeTab
      });
      $('#DashboardTabs >ul >li').each(function() {
        $(this).removeClass("custom-tabs-active");
      });
      $('#top-active-dashboardtab').addClass("custom-tabs-active");



      $('#refreshTimeTitle').tooltip({
        tooltipClass: "custom-tooltip-styling"
      });

      $(".custom-tabs >ul >li").removeClass("ui-state-default");
      $('.custom-tabs >ul >li').hover(function() {
        $(this).removeClass("ui-state-hover");
      });

      $('#DashboardTabs >ul >li').click(function() {
        $('#DashboardTabs >ul >li').each(function() {
          $(this).removeClass("ui-state-active");
          $(this).removeClass("custom-tabs-active");
        });

        $(this).addClass("custom-tabs-active");
      });
      $('#hideAll').css('display', 'none');
      $("#DashboardTabs").show();
      loadAndDisplayLanguages();
      $("#refreshRouterDash").click(function() {
        $(this).addClass("fa-spin");
        $("#refreshText").fadeIn();
        $(this).prop('disabled', true);
        callRouterWorker("refresh");

      });
      //initializing gauge
      initialize();
      if (chart != "") {
        setTimeout(function() {
          if (!$("#" + chart).find('.widget-head').parent().is(':hidden')) {
            $("#" + chart).find('.widget-head').find('.maximize').click();
          }
        }, 2500);
      }

    }
    function loadDashboardLanguages() {

      $("#overviewRouterTabTitle").text($.i18n.prop("overviewRouterTabTitle"));
      $("#overviewRouterTitle").text($.i18n.prop("overviewRouterTitle"));
      $("#refreshText").text($.i18n.prop("refreshText"));
      $("#refreshRouterDash").attr("title", $.i18n.prop("refresh"));
      $("#dashboardTab").text($.i18n.prop("Security"));
      $("#dashboardSecurityTitle").text($.i18n.prop("Security"));
      $("#secuFeZone").text($.i18n.prop("zonesTabTitle"));
      $("#secuFePolicy").text($.i18n.prop("policyTabTitle"));
      $("#pollOption15Sec").text("15 "+$.i18n.prop("securityDashboardSeconds"));
      $("#pollOption30Sec").text("30 "+$.i18n.prop("securityDashboardSeconds"));
      $("#pollOption1Min").text("1 "+$.i18n.prop("securityDashboardMinutes"));

      //$("#refreshTimeTitle").html($.i18n.prop("refreshTimeTitle") + ' : ');
      $("#refreshTimeTitle").attr("title",$.i18n.prop("refreshTimeTitle"));
      $("#overviewHwHealthTitle").text($.i18n.prop("overviewHwHealthTitle"));
      $("#overviewCPUTemp").text($.i18n.prop("overviewCPUTemp"));
      $("#overviewClockBattery").text($.i18n.prop("overviewClockBattery"));
      $("#overviewCPUUtiliz").text($.i18n.prop("overviewCPUUtiliz"));
      $("#overviewCPUUtilizUsed").text($.i18n.prop("overviewCPUUtilizUsed"));
      $("#overviewWANInterface").text($.i18n.prop("overviewWANInterface"));
      $("#overviewWANPrimary").text($.i18n.prop("overviewWANPrimary"));
      $("#overviewWANBackup").text($.i18n.prop("overviewWANBackup"));
      $("#overviewWANBandwidth").text($.i18n.prop("overviewWANBandwidth"));
      $("#overviewFlashMemory").text($.i18n.prop("overviewFlashMemory"));
      $("#overviewFMFree").text($.i18n.prop("overviewFMFree"));
      $("#overviewSystemMemory").text($.i18n.prop("overviewSystemMemory"));
      $("#overviewSMFree").text($.i18n.prop("overviewSMFree"));
      $("#overviewDeviceDetail").text($.i18n.prop("overviewDeviceDetail"));
      $("#dashBoardIPSDrill").text($.i18n.prop("dashBoardIPSDrill"));
      $("#top10Threats").text($.i18n.prop("top10Threats"));
      $("#overviewFanStatus").text($.i18n.prop("overviewFanStatus"));
      $("#overviewPowerConsumption").text($.i18n.prop("overviewPowerConsumption"));

      $("#overviewInterfaces").text($.i18n.prop("overviewInterfaces"));
      $("#dashBoardApplDet").text($.i18n.prop("dashBoardApplDet"));
      $("#dashBoardNoActiveUser").text($.i18n.prop("dashBoardNoActiveUser"));
      //$("#dashBoardTunnelStatus").text($.i18n.prop("dashBoardTunnelStatus"));      
      $("#tunnelStatus").text($.i18n.prop("down"));
      $("#dashBoardWanZoneBandwidth").text($.i18n.prop("dashBoardWanZoneBandwidth"));
      $("#dashBoardTopApp").text($.i18n.prop("dashBoardTopApp"));
      $("#dashBoardTopUser").text($.i18n.prop("dashBoardTopUser"));
      $("#dashBoardFirwall").text($.i18n.prop("dashBoardFirwall"));
      $("#dashBoardPolicy").text($.i18n.prop("policyTabTitle"));
      $("#currentTitle").text($.i18n.prop("currentTitle"));
      $("#cumulativeTitle").text($.i18n.prop("cumulativeTitle"));
      $("#connectionsCWS").text($.i18n.prop("connectionsCWS"));
      $("#maxCurrentSessionTD").text($.i18n.prop("maxCurrentSessionTD"));
      $("#allow").text($.i18n.prop("allow"));
      $("#block").text($.i18n.prop("block"));
      $("#dashboardIpsVictimTitle").text($.i18n.prop("dashboardIpsVictimTitle"));

      $("#ipsAttackersTitle").text($.i18n.prop("ipsDashletAttackers"));
      $("#ipsVictimsTitle").text($.i18n.prop("ipsDashletVictims"));

      $(".searchTbx").attr("placeholder", $.i18n.prop("searchTbx"));
      //$("#primaryStat").text($.i18n.prop("primaryStat"));
      //$("#backupStat").text($.i18n.prop("backupStat"));


      $("text").each(function(e) {
        if ($(this).text() == "No Data Available.") {
          $(this).text($.i18n.prop("noDataAva"));
        }
        else if ($(this).text() == "Up") {
          $(this).text($.i18n.prop("upStr"));
        }
        else if ($(this).text() == "Down") {
          $(this).text($.i18n.prop("downStr"));
        }
      });

    }

    function overviewLoading() {
      //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("Loading")+'</h1>' });
      blockPage("Loading");
      loadDashboardLanguages();
      setTimeout(function() {
        $('.trashDiv').css({width: '280px', left: '36%'});

        clearDataTable();
        dashboardUI.dashboardLoad('.rootorColumn', '', 'rootorColumn1', 'rootorColumn2');

        //$('<td>' + $.i18n.prop("FlashUsed") + '</td><td>' + usedFlashMemoryInPercentage + '</td>').appendTo('#row1');
        //$('<td>' + $.i18n.prop("FlashFree") + '</td><td>' + freeFlashMemoryInPercentage + '</td>').appendTo('#row2');


        //setProcessMemory();

        /*var cpuUtilization = [
         {
         key: "Cumulative Return",
         values: [
         {
         "label" : "5secs",
         "value" : lastFiveSeconds
         } ,
         {
         "label" : "1min" ,
         "value" : lastOneMinute
         } ,
         {
         "label" : "5mins" ,
         "value" : lastFiveMinutes
         }
         ]
         }
         ];*/

        //$("#li1").css("height", lastFiveSeconds);
        //$("#li2").css("height", lastOneMinute);
        //$("#li3").css("height", lastFiveMinutes);
        //setSystemDetails();
        //getWANInterfaceDetails();
        //setHardwareHealth();







        //alert(deviceType);
        //$('<td>' + $.i18n.prop("DBDeviceType") + '</td>').appendTo('#row7');//.css("background-color", "#004373");
        //$('<td>' + deviceType + '</td>').appendTo('#row8');




        //showInterfaces();

        setPrimaryBackup(runningConfig);
        callRouterWorker("start");
        //showCpuUtilization(cpuUtilization);
        $.unblockUI();
      }, 500);
      $("#advanceMemoryDtls").on("click", advMemory);
      $("#advMemoryDtls").dialog({
        autoOpen: false,
        height: 550,
        width: 450,
        modal: true,
        buttons: [{
            text: $.i18n.prop("ok"),
            click: function() {
              $(this).dialog("close");
            }
          }],
        close: function() {

        }
      });





    }

//To add/remove loading to each dashlet
    function loader(action, id) {

      if (action == "add") {
        $("#" + id).find('.widget-content').children().hide();
        if (id == "rootorColumn7"){
          $("#" + id).find('.widget-content').append('<div id="dashletLoading" class="ccpexpCSSReplaceClass803">'+
                                                     '<div class="facebook"><div></div><div></div><div></div>'+
                                                     '<span  class="loadingBgTitle ccpexpCSSReplaceClass804">' +
                                                     $.i18n.prop("loadingBgTitle") + '</span></div></div>');
        }
        else if (id == "rootorColumn6" || id == "rootorColumn3"){
          $("#" + id).find('.widget-content').append('<div id="dashletLoading" class="ccpexpCSSReplaceClass805">'+
                                                     '<div class="facebook"><div></div><div></div><div></div>'+
                                                     '<span  class="loadingBgTitle ccpexpCSSReplaceClass806">' +
                                                     $.i18n.prop("loadingBgTitle") + '</span></div></div>');
        }
        else if (id == "rootorColumn4"){
          $("#" + id).find('.widget-content').append('<div id="dashletLoading" class="ccpexpCSSReplaceClass807">'+
                                                     '<div class="facebook"><div></div><div></div><div></div>'+
                                                     '<span  class="loadingBgTitle ccpexpCSSReplaceClass808">' +
                                                     $.i18n.prop("loadingBgTitle") + '</span></div></div>');
        }
        else{
          $("#" + id).find('.widget-content').append('<div id="dashletLoading" class="ccpexpCSSReplaceClass809">'+
                                                     '<div class="facebook"><div></div><div></div><div></div>'+
                                                     '<span  class="loadingBgTitle ccpexpCSSReplaceClass810">' +
                                                     $.i18n.prop("loadingBgTitle") + '</span></div></div>');
        }

        $("#" + id).find('.widget-content').css("background", "#ffffff");
      }
      else {
        $("#" + id).find('.widget-content').find("#dashletLoading").remove();
        $("#" + id).find('.widget-content').children().show();
        if (id != "rootorColumn7"){
          $("#" + id).find('.widget-content').css("background", "#f9f9f9");
        }
      }

    }

//Web Worker for Router Dashboard... Used to refresh router dahsboard
    function callRouterWorker(type) {
      utmDashboard.terminateCliWorker();
      loader("add", "rootorColumn7");
      loader("add", "rootorColumn6");
      loader("add", "rootorColumn1");
      loader("add", "rootorColumn2");
      loader("add", "rootorColumn5");
      loader("add", "rootorColumn4");
      loader("add", "rootorColumn3");

      var int1 = "", int2 = "";
      if (primayWanList != undefined) {
        $.each(primayWanList, function(index, value) {
          if (index == 0){
            int1 = value;
          }
          if (index == 1){
            int2 = value;
          }
        });
      }

      worker = new Worker('../js/routerDashboardWorker.js');
      var messagePost = [
        {"type": type, "installDir": deviceCommunicator.getInstallDir(), "int1": int1, "int2": int2}
      ];
      worker.postMessage(JSON.stringify(messagePost));
      worker.onmessage = function(event) {
        var resp = JSON.parse(event.data);
        if (resp[0]['cliName'] == "interface") {
          showAllInterfaces(resp[0]['output']);
          if (interfaceGraph == undefined) {
            drawInterfaceGraph();
          } else {
            utmDashboard.redrawGraphAtPoll("interfaceGraph", interfaceData, interfaceGraph);
          }
          loader("remove", "rootorColumn7");
        } else if (resp[0]['cliName'] == "environment") {
          setHardwareHealth(resp[0]['output']);
          loader("remove", "rootorColumn6");
        } else if (resp[0]['cliName'] == "shRun") {
          runningConfig = resp[0]['output'];
          setPrimaryBackup(runningConfig);
        }
        else if (resp[0]['cliName'] == "cpuUtil") {
          setProcessMemory(resp[0]['output']);
          loader("remove", "rootorColumn1");
        }
        else if (resp[0]['cliName'] == "wanInt") {
          getWANInterfaceDetails(resp[0]['int1'], resp[0]['int2']);
          loader("remove", "rootorColumn4");
        }
        else if (resp[0]['cliName'] == "flashMem") {
          //xml = deviceCommunicator.getExecCmdOutput("show file systems | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshFileSystem.odm");
          xml = resp[0]['output'];
          var flash = false;
          $(xml).find('entry').each(function() {
            prefixes = $(this).find('Prefixes').text();
            if (prefixes.indexOf('flash') !== -1 && !flash) {
              total = parseFloat((($(this).find('size').text()) / (1024 * 1024)).toFixed(2));
              freeFlashMemoryinMB = ($(this).find('free').text());
              var splitMemory = freeFlashMemoryinMB.split(" ");
              freeFlashMemoryinMB = parseFloat((splitMemory[0] / (1024 * 1024)).toFixed(2));
              usedFlashmemoryInMB = (total - freeFlashMemoryinMB).toFixed(2);
              usedFlashMemoryInPercentage = ((usedFlashmemoryInMB / total) * 100).toFixed(2);
              freeFlashMemoryInPercentage = ((freeFlashMemoryinMB / total) * 100).toFixed(2);
              flash = true;
            }
          });
          var flashData = [
            {
              key: $.i18n.prop("FlashUsed"),
              y: usedFlashMemoryInPercentage
            },
            {
              key: $.i18n.prop("FlashFree"),
              y: freeFlashMemoryInPercentage
            }
          ];
          $('#flashFreeMemary').text(freeFlashMemoryInPercentage + '%');
          pieChart(flashData);
          loader("remove", "rootorColumn2");
        }
        else if (resp[0]['cliName'] == "systemMem") {
          //xml = deviceCommunicator.getExecCmdOutput("show processes memory | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshProcMemory.odm");
          xml = resp[0]['output'];
          $(xml).find('ProcessorPool').each(function() {
            usedMemoryInMB = parseFloat((($(this).find('Used').text()) / (1024 * 1024)).toFixed(2));
            freeMemoryinMB = parseFloat((($(this).find('free').text()) / (1024 * 1024)).toFixed(2));
            totalmemoryInMB = parseFloat((($(this).find('Total').text()) / (1024 * 1024)).toFixed(2));
            usedMemoryInPercentage = ((usedMemoryInMB / totalmemoryInMB) * 100).toFixed(2);
            freeMemoryInPercentage = ((freeMemoryinMB / totalmemoryInMB) * 100).toFixed(2);
          });
          var processData = [
            {
              key: $.i18n.prop("ProcUsed"),
              y: usedMemoryInPercentage
            },
            {
              key: $.i18n.prop("ProcFree"),
              y: freeMemoryInPercentage
            }
          ];
          $('#processFreeMemary').text(freeMemoryInPercentage + '%');
          pieChart1(processData);
          loader("remove", "rootorColumn5");
        }
        else if (resp[0]['cliName'] == "shversion") {
          setSystemDetails(resp[0]['output']);
          loader("remove", "rootorColumn3");

        }
        else if (resp[0]['cliName'] == "deviceDetailsFirst") {
          //runningConfig=resp[0]['shRun'];
          hostNameVar = $(runningConfig).find('SystemNetworkName').text();
          $('#hostHD').text($.i18n.prop("DBHostName"));
          $('#hostNm').text(hostNameVar);
          var deviceType;
          deviceType = deviceCommunicator.getPlatformType();
          $('#typeHD').text($.i18n.prop("DBDeviceType"));
          $('#deviceTypeNm').text(deviceType);
          xml = resp[0]['shVerFormat'];
          Version = $(xml).find('Version').text();
          $('#VersionHD').text($.i18n.prop("DBIOSVersion"));
          $('#versionNm').text(Version);
          setSystemDetails(resp[0]['shVer']);
          setSystemTime();
          if (clockInterval != undefined){
            clearInterval(clockInterval);
          }
          clockInterval = setInterval(function() {
            setSystemTime();
          }, 300000);
          loader("remove", "rootorColumn3");
        } else if (resp[0]['cliName'] == "stop") {
          utmDashboard.terminateCliWorker();
          $("#refreshDiv").show();
          if (type == "refresh") {
            $("#refreshText").fadeOut();
            $("#refreshRouterDash").removeClass("fa-spin");
            $("#refreshRouterDash").prop('disabled', false);
          }
        }
      };
      //utmDashboard.terminateCliWorker();

    }
    function showCpuUtilization(data) {
      nv.addGraph(function() {
        var chart = nv.models.discreteBarChart()
          .x(function(d) {
            return d.label;
          })
          .y(function(d) {
            return d.value;
          })
          .staggerLabels(true)
          //.staggerLabels(historicalBarChart[0].values.length > 8)

          .tooltips(true)
          .showValues(true)
          .transitionDuration(250)

          ;
        //   chart.yAxis.tickFormat(function(d) { return d3.format('d')(d) + '%'; });
        chart.yAxis.tickFormat(d3.format(',f')).axisLabel('Attributes').staggerLabels(true).tickValues([0, 25, 50, 75, 100]);
        d3.select('#CPUutilizationBar svg')
          .datum(data)
          .call(chart);

        nv.utils.windowResize(chart.update);

        return chart;
      });

    }

    function showAllInterfaces(output) {
      //xmlResp = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
      xmlResp = output;
      var upValues = [], downValues = [];

      function checkExists(arr, checkVal) {
        var flag = false;
        $.each(arr, function(index, value) {
          if (value['label'] == checkVal) {
            flag = true;
            return false;
          }
        });
        return flag;
      }
      function addOne(arr, checkVal) {
        $.each(arr, function(index, value) {
          if (value['label'] == checkVal) {
            value['value'] = parseInt(value['value']) + 1;
            return false;
          }
        });

      }
      function addToList(listName, interfaceType, status) {
        var found = false;
        $.each(interfaceListAll, function(index, value) {
          if (value['label'] == listName && value['status'] == status) {
            value['value'].push(interfaceType);
            found = true;
            return false;
          }
        });
        if (!found) {
          interfaceListAll.push({label: listName, value: [interfaceType], status: status});
        }
      }
      interfaceListAll.length = 0;
      $(xmlResp).find('entry').each(function() {
        var interfaceName = $(this).find('Interface').text(),
          status = $(this).find('Status').text();
        protocol = $(this).find('Protocol').text();
        if (interfaceName.toLowerCase().trim().indexOf('Gigabit'.toLowerCase()) == 0) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, $.i18n.prop("IfaceGigabitEthernet"))) {
              upValues.push({label: $.i18n.prop("IfaceGigabitEthernet"), value: 1});
              downValues.push({label: $.i18n.prop("IfaceGigabitEthernet"), value: 0});
              addToList($.i18n.prop("IfaceGigabitEthernet"), interfaceName, "up");
            } else {
              addOne(upValues, $.i18n.prop("IfaceGigabitEthernet"));
              addToList($.i18n.prop("IfaceGigabitEthernet"), interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, $.i18n.prop("IfaceGigabitEthernet"))) {
              downValues.push({label: $.i18n.prop("IfaceGigabitEthernet"), value: 1});
              upValues.push({label: $.i18n.prop("IfaceGigabitEthernet"), value: 0});
              addToList($.i18n.prop("IfaceGigabitEthernet"), interfaceName, "down");
            }
            else {
              addOne(downValues, $.i18n.prop("IfaceGigabitEthernet"));
              addToList($.i18n.prop("IfaceGigabitEthernet"), interfaceName, "down");
            }

          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('FastEthernet'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, $.i18n.prop("IfaceFastEthernet"))) {
              upValues.push({label: $.i18n.prop("IfaceFastEthernet"), value: 1});
              downValues.push({label: $.i18n.prop("IfaceFastEthernet"), value: 0});
              addToList($.i18n.prop("IfaceFastEthernet"), interfaceName, "up");
            } else {
              addOne(upValues, $.i18n.prop("IfaceFastEthernet"));
              addToList($.i18n.prop("IfaceFastEthernet"), interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, $.i18n.prop("IfaceFastEthernet"))) {
              downValues.push({label: $.i18n.prop("IfaceFastEthernet"), value: 1});
              upValues.push({label: $.i18n.prop("IfaceFastEthernet"), value: 0});
              addToList($.i18n.prop("IfaceFastEthernet"), interfaceName, "down");
            } else {
              addOne(downValues, $.i18n.prop("IfaceFastEthernet"));
              addToList($.i18n.prop("IfaceFastEthernet"), interfaceName, "down");
            }
          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('ATM'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, $.i18n.prop("IfaceATM"))) {
              upValues.push({label: $.i18n.prop("IfaceATM"), value: 1});
              downValues.push({label: $.i18n.prop("IfaceATM"), value: 0});
              addToList($.i18n.prop("IfaceATM"), interfaceName, "up");
            } else {
              addOne(upValues, $.i18n.prop("IfaceATM"));
              addToList($.i18n.prop("IfaceATM"), interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, $.i18n.prop("IfaceATM"))) {
              downValues.push({label: $.i18n.prop("IfaceATM"), value: 1});
              upValues.push({label: $.i18n.prop("IfaceATM"), value: 0});
              addToList($.i18n.prop("IfaceATM"), interfaceName, "down");
            } else {
              addOne(downValues, $.i18n.prop("IfaceATM"));
              addToList($.i18n.prop("IfaceATM"), interfaceName, "down");
            }

          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('DSL'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, $.i18n.prop("IfaceDSL"))) {
              upValues.push({label: $.i18n.prop("IfaceDSL"), value: 1});
              downValues.push({label: $.i18n.prop("IfaceDSL"), value: 0});
              addToList($.i18n.prop("IfaceDSL"), interfaceName, "up");
            } else {
              addOne(upValues, $.i18n.prop("IfaceDSL"));
              addToList($.i18n.prop("IfaceDSL"), interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, $.i18n.prop("IfaceDSL"))) {
              downValues.push({label: $.i18n.prop("IfaceDSL"), value: 1});
              upValues.push({label: $.i18n.prop("IfaceDSL"), value: 0});
              addToList($.i18n.prop("IfaceDSL"), interfaceName, "down");
            } else {
              addOne(downValues, $.i18n.prop("IfaceDSL"));
              addToList($.i18n.prop("IfaceDSL"), interfaceName, "down");
            }

          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('Cellular'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, $.i18n.prop("IfaceCellular"))) {
              upValues.push({label: $.i18n.prop("IfaceCellular"), value: 1});
              downValues.push({label: $.i18n.prop("IfaceCellular"), value: 0});
              addToList($.i18n.prop("IfaceCellular"), interfaceName, "up");
            } else {
              addOne(upValues, $.i18n.prop("IfaceCellular"));
              addToList($.i18n.prop("IfaceCellular"), interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, $.i18n.prop("IfaceCellular"))) {
              downValues.push({label: $.i18n.prop("IfaceCellular"), value: 1});
              upValues.push({label: $.i18n.prop("IfaceCellular"), value: 0});
              addToList($.i18n.prop("IfaceCellular"), interfaceName, "down");
            } else {
              addOne(downValues, $.i18n.prop("IfaceCellular"));
              addToList($.i18n.prop("IfaceCellular"), interfaceName, "down");
            }

          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('Ethernet'.toLowerCase()) == 0) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, $.i18n.prop("IfaceEthernet"))) {
              upValues.push({label: $.i18n.prop("IfaceEthernet"), value: 1});
              downValues.push({label: $.i18n.prop("IfaceEthernet"), value: 0});
              addToList($.i18n.prop("IfaceEthernet"), interfaceName, "up");
            } else {
              addOne(upValues, $.i18n.prop("IfaceEthernet"));
              addToList($.i18n.prop("IfaceEthernet"), interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, $.i18n.prop("IfaceEthernet"))) {
              downValues.push({label: $.i18n.prop("IfaceEthernet"), value: 1});
              upValues.push({label: $.i18n.prop("IfaceEthernet"), value: 0});
              addToList($.i18n.prop("IfaceEthernet"), interfaceName, "down");
            } else {
              addOne(downValues, $.i18n.prop("IfaceEthernet"));
              addToList($.i18n.prop("IfaceEthernet"), interfaceName, "down");
            }

          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('loopback'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, "Loopback")) {
              upValues.push({label: "Loopback", value: 1});
              downValues.push({label: "Loopback", value: 0});
              addToList("Loopback", interfaceName, "up");
            } else {
              addOne(upValues, "Loopback");
              addToList("Loopback", interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, "Loopback")) {
              downValues.push({label: "Loopback", value: 1});
              upValues.push({label: "Loopback", value: 0});
              addToList("Loopback", interfaceName, "down");
            } else {
              addOne(downValues, "Loopback");
              addToList("Loopback", interfaceName, "down");
            }

          }

        }
        else if (interfaceName.toLowerCase().trim().indexOf('vlan'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, "Vlan")) {
              upValues.push({label: "Vlan", value: 1});
              downValues.push({label: "Vlan", value: 0});
              addToList("Vlan", interfaceName, "up");
            } else {
              addOne(upValues, "Vlan");
              addToList("Vlan", interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, "Vlan")) {
              downValues.push({label: "Vlan", value: 1});
              upValues.push({label: "Vlan", value: 0});
              addToList("Vlan", interfaceName, "down");
            } else {
              addOne(downValues, "Vlan");
              addToList("Vlan", interfaceName, "down");
            }

          }

        } else if (interfaceName.toLowerCase().trim().indexOf('Serial'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, "Serial")) {
              upValues.push({label: "Serial", value: 1});
              downValues.push({label: "Serial", value: 0});
              addToList("Serial", interfaceName, "up");
            } else {
              addOne(upValues, "Serial");
              addToList("Serial", interfaceName, "up");
            }
          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, "Serial")) {
              downValues.push({label: "Serial", value: 1});
              upValues.push({label: "Serial", value: 0});
              addToList("Serial", interfaceName, "down");
            } else {
              addOne(downValues, "Serial");
              addToList("Serial", interfaceName, "down");
            }
          }
        }
        else if (interfaceName.toLowerCase().trim().indexOf('Tunnel'.toLowerCase()) !== -1) {
          if (status.toLowerCase().trim() == "up" && protocol.toLowerCase().trim() == "up") {
            if (!checkExists(upValues, "Tunnel")) {
              upValues.push({label: "Tunnel", value: 1});
              downValues.push({label: "Tunnel", value: 0});
              addToList("Tunnel", interfaceName, "up");
            } else {
              addOne(upValues, "Tunnel");
              addToList("Tunnel", interfaceName, "up");
            }

          } else if (status.toLowerCase().trim().indexOf("down") > -1 || protocol.toLowerCase().trim().indexOf("down") > -1) {
            if (!checkExists(downValues, "Tunnel")) {
              downValues.push({label: "Tunnel", value: 1});
              upValues.push({label: "Tunnel", value: 0});
              addToList("Tunnel", interfaceName, "down");
            } else {
              addOne(downValues, "Tunnel");
              addToList("Tunnel", interfaceName, "down");
            }

          }

        }
      });
      //upInt.push({key:"Status: Up",color:"#d62728",values: upValues});
      //downInt.push({key:"Status: Down",color:"#1f77b4",values:downValues});

      interfaceData.length = 0;
      //interfaceData.push({key:"Up",color:"#26c977",values: upValues});
      //interfaceData.push({key:"Down",color:"#d62728",values:downValues});
      interfaceData.push({key: $.i18n.prop("upStr"), color: "#26c977", values: upValues});
      interfaceData.push({key: $.i18n.prop("downStr"), color: "#d62728", values: downValues});

    }

    function pieChart(data) {



      nv.addGraph(function() {


        var chart = nv.models.pieChart()
          .x(function(d) {
            return d.key;
          })
          .y(function(d) {
            return d.y;
          })

          .labelType("percent")
          .showLegend(false)
          .donut(true)
          .donutRatio(0.40)
          .tooltipContent(flashMemToolTip());
        chart.margin({top: 0, right: 0, bottom: 0, left: 0});
        d3.select("#flashMemoryPai")
          .datum(data)
          .transition().duration(1200)
          .call(chart);

        chart.dispatch.on('stateChange', function(e) {
          nv.log('New State:', JSON.stringify(e));
        });

        return chart;
      });


    }

    function pieChart1(data) {



      nv.addGraph(function() {


        var chart = nv.models.pieChart()
          .x(function(d) {
            return d.key;
          })
          .y(function(d) {
            return d.y;
          })


          .labelType("percent")

          .showLegend(false)
          .donut(true)
          .showLabels(true)
          .pieLabelsOutside(false)
          .tooltipContent(systemMemToolTip())
          .donutRatio(0.40);
        chart.margin({top: 0, right: 0, bottom: 0, left: 0});
        d3.select("#memoryUsagePI")
          .datum(data)
          .transition().duration(1200)

          .call(chart);



        return chart;
      });

    }
    function advMemory() {
      var reg = new RegExp("[,\\n]");
      var coreMemory = deviceCommunicator.getExecCmdOutput("show diag | i Total");
      var toatalMemory = 0;
      var secondCoreMemory = 0;
      if (coreMemory !== "") {
        var lines = coreMemory.split(reg);

        for (var i = 0; i < lines.length; i++) {
          var row = lines[i];
          var end = row.indexOf("K bytes");
          var start = row.indexOf(":");
          var memory = parseInt(row.substring(start + 1, end));
          if (i == 0) {
            toatalMemory = toatalMemory + memory;
          }
          if (i > 0) {
            secondCoreMemory = secondCoreMemory + memory;
          }

        }
      }
      if (toatalMemory <= 0) {
        $("#secndCore").hide();
        coreMemory = deviceCommunicator.getExecCmdOutput("show version | i bytes of memory");
        lines = coreMemory.split(reg);
        toatalMemory = 0;
        for (var i = 0; i < lines.length; i++) {
          var row = lines[i];
         // var end = row.indexOf("bytes of memory");
         // var start = row.indexOf("(revision 1.0) with");
         // var strLength = "(revision 1.0) with".length;
         // var memoryBlock = row.substring(start + strLength, end);
         var tokens=row.split("with");
         var size=tokens.length;
         for(var j=0;j<size;j++){
             var eachToken=tokens[j];
             var index=eachToken.indexOf("bytes of memory");
             if(index>=0){

                    var myStr = eachToken.replace("bytes of memory", "");
                    var memorys = myStr.split("/");
                    for (var j = 0; j < memorys.length; j++) {
                        var memory = memorys[j];
                        memory = memory.replace("K", "");
                        var finalMemory = parseInt(memory);
                        toatalMemory = toatalMemory + finalMemory;

                    }

             }
         }

        }

      }
      toatalMemory = toatalMemory / 1024;
      secondCoreMemory = secondCoreMemory / 1024;
      coreMemory = deviceCommunicator.getExecCmdOutput("show region ");
      lines = coreMemory.split(reg);
      $("#memoryDistTable tbody").empty();
      for (var i = 0; i < lines.length; i++) {
        var row = lines[i];
        if (!$.isEmptyObject(row) && row.indexOf("Start") === -1 && row.indexOf("Manager") === -1) {

          var spRow = row.trim().split(/\s+/);
          if (spRow[2] !== undefined && spRow[5] !== undefined) {
            var size = spRow[2];
            size = parseInt(size);
            var name = spRow[5];

            $("#memoryDistTable tbody").append('<tr><td class="ccpexpCSSReplaceClass811">' + name +
                                               '</td><td class="ccpexpCSSReplaceClass812">' + size + '</td></tr>');
          }
        }


      }
      toatalMemory = Math.round(toatalMemory);
      $("#totalMemory").text(toatalMemory + "Mb");
      secondCoreMemory = Math.round(secondCoreMemory);
      $("#secondCoreMemory").text(secondCoreMemory + "Mb");
      $("#advMemoryDtls").dialog("option", "title", $.i18n.prop("memoryDistribution"));
      $("#advMemoryDtls").dialog("open");
    }


    return {
      overviewLoading: overviewLoading,
      dashboardLoadingAll: dashboardLoadingAll,
      loadAndDisplayLanguages: loadAndDisplayLanguages
    };
  }());


/* This function gets the output in form of XML
 *  after running the command on the device and parses the values to update in the table
 */

var staticRouting = (function() {
  var srFlag = false;
  var add = false;
  var defaultRoute;
  function refresh() {
    //consoleLogMethodDetailsStart("staticRouting.js", "refresh()");
    $("#staticroutingtable  tbody").empty();
    var shOp, lines, i, re, e, prefix, mask, nextHop, shOpIpv6, lines1, xml, interfaceType, type, metr, staticRoutesAvailable = false;
    shOp = deviceCommunicator.getExecCmdOutput("show running-config | include ip route");
    lines = shOp.split(/\r\n|\r|\n/);
    for (i = 0; i < lines.length; i = i + 1) {
      var indexSpace = lines[i].split(" ");
      if (lines[i].indexOf('ip route') !== -1 && indexSpace[0] === "ip" && indexSpace[1] === "route") {
        /* eg output
         ip route 0.0.0.0 0.0.0.0 GigabitEthernet0
         ip route 3.3.3.0 255.255.255.0 6.6.6.6 56 tag 5 permanent name abcd
         ip route 4.4.4.0 255.255.255.0 5.5.5.0
         */
        re = /^ip\sroute\s(\S+)\s(\S+)\s(\S+)\s*(\S*).*$/;
        if (re.test(lines[i])) {
          e = re.exec(lines[i]);
          prefix = e[1];
          mask = e[2];
          nextHop = e[3];
          type = 'ipv4';
      if(e[4].trim()==""){
        metr = 1;
      }
      else{
        metr = e[4];
      }


        }
        $('<tr></tr>').html('<td>' + prefix + '</td><td>' + mask + '</td><td>' + nextHop + '</td><td>' + metr + '</td><td>' + type + '</td>').appendTo('#staticroutingtable');
        staticRoutesAvailable = true;
      }
    }
    if (staticRoutesAvailable) {
      $('#static-routing-table').show();
      $('#defaultRouterMsg').show();
      $('#noStaticRoutingMsg').hide();
    }
    else {
      $('#static-routing-table').hide();
      $('#defaultRouterMsg').hide();
      $('#noStaticRoutingMsg').show();
    }
    shOpIpv6 = deviceCommunicator.getExecCmdOutput("show running-config | include ipv6 route");
    lines1 = shOpIpv6.split(/\r\n|\r|\n/);
    for (i = 0; i < lines1.length; i = i + 1) {
      var indexSpace1 = lines1[i].split(" ");
      if (lines1[i].indexOf('ipv6 route') !== -1 && indexSpace1[0] === "ipv6" && indexSpace1[1] === "route") {
        /* eg output
         ipv6 route 2001:ABCD::/64 Vlan1
         ipv6 route 2001:ABCD::/64 2002:ABCD::1
         */
        re = /^ipv6\sroute\s(\S+)\/(\S+)\s(\S+).*$/;
        if (re.test(lines1[i])) {
          e = re.exec(lines1[i]);
          prefix = e[1];
          mask = e[2];
          nextHop = e[3];
          type = 'ipv6';
        }
        $('<tr></tr>').html('<td>' + prefix + '</td><td>' + mask + '</td><td>' + nextHop + '</td><td>' + '</td><td>' + type + '</td>').appendTo('#staticroutingtable');
      }
    }
    $("#interface-option").empty();
    $("#interface-option-ipv6").empty();
    xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
    $(xml).find('entry').each(function() {
      interfaceType = $(this).find('Interface').text();
      type = deviceCommunicator.getInterfaceType(interfaceType);
      if (type !== 5 && type !== 6) {
        $("#interface-option").append('<option>' + interfaceType + '</option>');
        $("#interface-option-ipv6").append('<option>' + interfaceType + '</option>');
      }
    });
    addTableColumn("staticroutingtable", "sredit", "srdelete");
    enableDisableButton("staticroutingtable", "add");
    $("#staticroutingtable tr:nth-child(even)").addClass("striped");
    //highlight();
    changeBtnState("staticroutingtable", "edit");
    $("#defaultRouterMsg").text("");
    xml = deviceCommunicator.getExecCmdOutput("show ip route");
    if (xml.indexOf("Gateway of last resort is") !== -1) {
      var xmlarray = xml.split("Gateway of last resort is");
      var defaultIP = xmlarray[1].trim().split(" ");
    }
    var firsttr = $("#staticroutingtable tbody tr:first");
    if ((firsttr.find('td').eq(3).text()) == defaultIP[0]) {
      firsttr.find('td:last').empty();
      firsttr.find('td:first').empty();
      firsttr.find('td:first').html('<input type="checkbox" disabled="disabled">');
      //$("#defaultRouterMsg").text("*Note: "+defaultIP[0]+" is default route.");
      $("#defaultRouterMsg").text("*" + $.i18n.prop("note") + $.i18n.prop("colon") + " " + defaultIP[0] + " " + $.i18n.prop("defaultRoute"));

    } else {
      $('#staticroutingtable tbody').find('tr').each(function() {
        $this = $(this);
        if (($this.find('td').eq(3).text()) == defaultIP[0]) {
          $this.detach();
          $this.insertBefore(firsttr);
          $this.find('td:last').empty();
          $this.find('td:first').empty();
          $this.find('td:first').html('<input type="checkbox" disabled="disabled">');
          //$("#defaultRouterMsg").text("*Note: "+defaultIP[0]+" is default route.");
          $("#defaultRouterMsg").text("*" + $.i18n.prop("note") + ": " + defaultIP[0] + " " + $.i18n.prop("defaultRoute"));
          return false;
        }
        return true;
      });
    }
    defaultRoute = defaultIP[0];
    //consoleLogMethodDetailsEnd("staticRouting.js", "refresh()");
  }

  function highlight() {
    //consoleLogMethodDetailsStart("staticRouting.js", "highlight()");
    $('#staticroutingtable tbody tr').on('click', function() {
      var $tr = $(this).closest("tr");
      $tr.siblings().removeClass('hilite');
      $tr.toggleClass('hilite');
    });
    //consoleLogMethodDetailsEnd("staticRouting.js", "highlight()");
  }

  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {

    //consoleLogMethodDetailsStart("staticRouting.js", "loadAndDisplayLanguages()");

    $("#staticRoutingLegend").text($.i18n.prop("staticRoutingLegend"));
    $("#add").text($.i18n.prop("add"));
    $("#edit").text($.i18n.prop("edit"));
    $("#delete").text($.i18n.prop("delete"));
    $("#SRprefix").text($.i18n.prop("SRprefix"));
    $("#prefix_mask").text($.i18n.prop("prefix_mask"));
    $("#IPinterface").text($.i18n.prop("IPinterface"));
    $("#Metric").text($.i18n.prop("Metric"));
    $("#type").text($.i18n.prop("type"));
    $("#SRaction").text($.i18n.prop("action"));
    $("#ipv4Heading").text($.i18n.prop("ipv4HeadingInC"));
    $("#destLegend").text($.i18n.prop("destLegend"));
    $("#PrefixLabel").html($.i18n.prop("PrefixLabel") + ' <span class="ccpexpCSSReplaceClass822">*</span>:');
    $("#PrefixMaskLabel").html($.i18n.prop("PrefixMaskLabel") + ' <span class="ccpexpCSSReplaceClass823">*</span>:');
    $("#nextHopLegend").text($.i18n.prop("nextHopLegend"));
    $("#interface").text($.i18n.prop("interface"));
    $("#ip").text($.i18n.prop("ip"));
    $("#forwardingInterface").html($.i18n.prop("forwardingInterface") + ':');
    $("#nextHopIP").html($.i18n.prop("nextHopIP") + ' <span class="ccpexpCSSReplaceClass824">*</span>:');
    $("#ipv6Heading").text($.i18n.prop("ipv6HeadingInC"));
    $("#ipv6DestLegend").text($.i18n.prop("ipv6DestLegend"));
    $("#ipv6PrefixLabel").html($.i18n.prop("ipv6PrefixLabel") + ' <span class="ccpexpCSSReplaceClass825">*</span>:');
    $("#ipv6PrefixMaskLabel").html($.i18n.prop("ipv6PrefixMaskLabel") + ' <span class="ccpexpCSSReplaceClass826">*</span>:');
    $("#ipv6ForwardingInterfaceLegend").text($.i18n.prop("ipv6ForwardingInterfaceLegend"));
    $("#ipv6ForwardingInterface").html($.i18n.prop("ipv6ForwardingInterface") + ':');
    $("#ipv6NextHopIP").html($.i18n.prop("ipv6NextHopIP") + ' <span class="ccpexpCSSReplaceClass827">*</span>:');
    $("#ipv6Interface").text($.i18n.prop("ipv6Interface"));
    $("#ipv6IP").text($.i18n.prop("ipv6IP"));
    $("#ipv4Interface").text($.i18n.prop("ipv4Interface"));
    $("#ipv4IP").text($.i18n.prop("ipv4IP"));
    //$("#srSelectRowStr").text($.i18n.prop("selectRowStr"));
    $("#srSelectRowStr").text($.i18n.prop("srSelectRowStr"));
    $("#srSelectRow").attr("title", $.i18n.prop("selectaHeading"));
    $("#dialog-form-staticRouting").attr("title", $.i18n.prop("AddStaticTitle"));
    $("#staticInfoDesc").text($.i18n.prop("staticInfoDesc"));
    $("#srDeleteRow").attr("title", $.i18n.prop("alertTitle"));
    $("#srDeleteRowStr").text($.i18n.prop("srDeleteRowStr"));
  $("#ipv4ID").text($.i18n.prop("ipv4HeadingInC"));
  $("#ipv6ID").text($.i18n.prop("ipv6HeadingInC"));
  $("#iptypeID").text($.i18n.prop("ipTypeRouting"));
  $("#metricID").text($.i18n.prop("Metric"));

    $('div[for="prefixMaskipv6"]').bind("DOMSubtreeModified", function() {
      if ($(this).text() == "Please enter a value between 0 and 128.") {
        $(this).text($.i18n.prop("srDeleteRowStr"));
      }
    });


    //consoleLogMethodDetailsEnd("staticRouting.js", "loadAndDisplayLanguages()");

  }
  function staticRoutingLoading() {

    //consoleLogMethodDetailsStart("staticRouting.js", "staticRoutingLoading()");
    loadAndDisplayLanguages();

    //hide the Static Routing table in the beginning. This should be displayed only if there are values.
    $('#static-routing-table').hide();
    $('#defaultRouterMsg').hide();

    var edit = false, validatorIpv6, validator;
    $('#hideAll').css('display', 'block');
    //This function should be called first
 //   $("#accordion").accordion();
    $('#staticRoutingError').hide();
    deviceCommunicator.getInterfaceType("", true);
    refresh();
    validator = $('#dest-net').validate({
      errorElement: "div",
      errorPlacement: function(error, element) {
        //error.insertAfter(element.parent());
        error.insertAfter(element.parent());
      }
    });


    validatorIpv6 = $('#dest-net-ipv6').validate({
      errorElement: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    $(function defaultIpv4Values() {
      $("#next-hop").hide();
      $("input[name=group1]").click(function() {
        if ($(this).val() === "interface") {
          $("#interface-selected").show();
          $("#next-hop").hide();
        } else if ($(this).val() === "IP") {
          $("#interface-selected").hide();
          $("#next-hop").show();
        } else {
          $("#interface-selected").hide();
          $("#next-hop").hide();
        }
      });
    });

    $(function defaultIpv6Values() {
      $("#next-hop-ipv6").hide();
      $("input[name=group2]").click(function() {
        if ($(this).val() === "interface") {
          $("#interface-selected-ipv6").show();
          $("#next-hop-ipv6").hide();
        } else {
          $("#interface-selected-ipv6").hide();
          $("#next-hop-ipv6").show();
        }
      });
    });
    //The modal dialog-form for interface table which opens up on click of add button
    $("#dialog-form-staticRouting").dialog({
      autoOpen: false,
      height: 550,
      width: 550,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            var validOne
            //var option;
            if ($("input[name='ipType']:checked").val() == 'ip4') {
              validOne = $('#dest-net').valid();
            } else {
              validOne = $('#dest-net-ipv6').valid();
            }
            if (validOne) {
              $("#dialog-form-staticRouting").dialog("close");
              blockPage("Applying");
              setTimeout(function() {
                try {
                  var response, arr, prefixipv6AndMask, arr1, $td, prefixValue, prefixMaskValue, interfaceOrIp, type, prefixAndMask;

                  arr = $('#dest-net').formToArray();
                  if (add) {
                    if ($("input[name='ipType']:checked").val() == 'ip4') {
                      if ($('input[name=group1]:checked', '#dest-net').val() === "interface") {
                        arr = $('#dest-net').formToArray();
                        response = deviceCommunicator.configureCommandsFromTemplate("dest-netInterfaceCreate.txt", arr, false);
                      } else if ($('input[name=group1]:checked', '#dest-net').val() === "IP") {
                        arr = $('#dest-net').formToArray();
                        response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpCreate.txt", arr, false);
                      } else {
                        arr = $('#dest-net').formToArray();
                        response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpDhcpCreate.txt", arr, false);
                      }
                    } else {
                      if ($('input[name=group2]:checked', '#dest-net-ipv6').val() === "interface") {
                        arr = $('#dest-net-ipv6').formToArray();
                        prefixipv6AndMask = arr[0].value + '/' + arr[1].value;
                        arr1 = [{name: "prefixipv6AndMask", value: prefixipv6AndMask}, {name: "interfaceipv6", value: arr[3].value}];
                        response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6Interface.txt", arr1, false);
                      } else {
                        arr = $('#dest-net-ipv6').formToArray();
                        prefixipv6AndMask = arr[0].value + '/' + arr[1].value;
                        arr1 = [{name: "prefixipv6AndMask", value: prefixipv6AndMask}, {name: "interfaceipv6", value: arr[4].value}];
                        response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6Interface.txt", arr1, false);

                      }
                    }
                  } else {
                    $td = $('#staticroutingtable tr.hilite').closest('tr').children('td');
                    prefixValue = $td.eq(1).text();
                    prefixMaskValue = $td.eq(2).text();
                    interfaceOrIp = $td.eq(3).text();
          metricField= $td.eq(4).text();
                    type = $td.eq(5).text();
                    if (type === "ipv4") {
                      inputPrefix = $('#prefix').val();
                      inputMask = $('#prefixMask').val();
            metric= $('#metric').val();
                      if ($('input[name=group1]:checked', '#dest-net').val() === "interface") {
                        inputInterfaceorIP = $('#interface-option').val();
                      } else if ($('input[name=group1]:checked', '#dest-net').val() === "IP") {
                        inputInterfaceorIP = $('#ipAddress').val();
                      } else {
                        inputInterfaceorIP = "dhcp";
                      }
                      if ((prefixValue != inputPrefix) || (prefixMaskValue != inputMask) || (interfaceOrIp != inputInterfaceorIP)) {
                        if ($('input[name=group1]:checked', '#dest-net').val() === "interface") {
                          arr = $('#dest-net').formToArray();
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netInterfaceCreate.txt", arr, false);
                        } else if ($('input[name=group1]:checked', '#dest-net').val() === "IP") {
                          arr = $('#dest-net').formToArray();
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpCreate.txt", arr, false);
                        } else {
                          arr = $('#dest-net').formToArray();
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpDhcpCreate.txt", arr, false);
                        }
                        if (interfaceOrIp.match(/\b(?:\d{1,3}\.){3}\d{1,3}\b/)) {
                          arr = [{name: "prefix", value: prefixValue}, {name: "Mask", value: prefixMaskValue}, {name: "ip", value: interfaceOrIp}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpDelete.txt", arr, false);

                        } else if (interfaceOrIp === "dhcp") {
                          arr = [{name: "prefix", value: prefixValue}, {name: "Mask", value: prefixMaskValue}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpDhcpDelete.txt", arr, false);
                        }
                        else {
                          arr = [{name: "prefix", value: prefixValue}, {name: "Mask", value: prefixMaskValue}, {name: "interface", value: interfaceOrIp}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netInterfaceDelete.txt", arr, false);
                        }
                      }
            else if((prefixValue == inputPrefix) && (prefixMaskValue == inputMask) && (interfaceOrIp == inputInterfaceorIP) && (metric!=metricField))
            {
              if ($('input[name=group1]:checked', '#dest-net').val() === "interface") {
                          arr = $('#dest-net').formToArray();
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netInterfaceCreate.txt", arr, false);
                        } else if ($('input[name=group1]:checked', '#dest-net').val() === "IP") {
                          arr = $('#dest-net').formToArray();
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpCreate.txt", arr, false);
                        } else {
                          arr = $('#dest-net').formToArray();
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-netIpDhcpCreate.txt", arr, false);
                        }
            }
                    } else {
                      inputPrefix = $('#prefixipv6').val();
                      inputMask = $('#prefixMaskipv6').val();
                      if ($('input[name=group2]:checked', '#dest-net-ipv6').val() === "interface") {
                        inputInterfaceorIP = $('#interface-option-ipv6').val();
                      } else {
                        inputInterfaceorIP = $('#ipv6Address').val();
                      }
                      if ((prefixValue != inputPrefix) || (prefixMaskValue != inputMask) || (interfaceOrIp != inputInterfaceorIP)) {

                        if ($('input[name=group2]:checked', '#dest-net-ipv6').val() === "interface") {
                          arr = $('#dest-net-ipv6').formToArray();
                          prefixAndMask = arr[0].value + '/' + arr[1].value;
                          arr1 = [{name: "prefixipv6AndMask", value: prefixAndMask}, {name: "interfaceipv6", value: arr[3].value}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6Interface.txt", arr1, false);
                        } else {
                          arr = $('#dest-net-ipv6').formToArray();
                          prefixAndMask = arr[0].value + '/' + arr[1].value;
                          arr1 = [{name: "prefixipv6AndMask", value: prefixAndMask}, {name: "interfaceipv6", value: arr[4].value}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6Interface.txt", arr1, false);
                        }
                        if (interfaceOrIp.indexOf(":") !== -1) {
                          prefixAndMask = prefixValue + '/' + prefixMaskValue;
                          arr1 = [{name: "prefixipv6AndMask", value: prefixAndMask}, {name: "interfaceipv6", value: interfaceOrIp}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6InterfaceDelete.txt", arr1, false);
                        } else {
                          prefixAndMask = prefixValue + '/' + prefixMaskValue;
                          arr1 = [{name: "prefixipv6AndMask", value: prefixAndMask}, {name: "interfaceipv6", value: interfaceOrIp}];
                          response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6InterfaceDelete.txt", arr1, false);
                        }
                      }
                    }
                  }
                  $("#dialog-form-staticRouting").dialog("close");
                  refresh();
                  $.unblockUI();
                  deviceCommunicator.doWriteMemory();
                } catch (error) {
                  $("#dialog-form-staticRouting").dialog("open");
                  $('#staticRoutingErrorMessage').html(error.errorResponse);
                  $('#staticRoutingError').show();
                  $.unblockUI();
                }
              }, 1000);
            }
          }}, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {

            $(this).dialog("close");
          }
        }],
      close: function() {
      }
    });

    $("#srSelectRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#srDeleteRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
            $("#delete").trigger("click");
          }}, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {
      }
    });

    //buttons for staticRouting table
    $("#add")
      .button()
      .click(function() {
        add = true;
        $("#dialog-form-staticRouting").dialog("open");
    $('#ipSelect').show();
        $('#staticRoutingError').hide();
        $('#dest-net').resetForm();
        validator.resetForm();
        validatorIpv6.resetForm();
        $('input[name=group1]')[0].checked = true;
        $("#interface-selected").show();
        $("#next-hop").hide();
        $('#dest-net-ipv6').resetForm();
        $('input[name=group2]')[0].checked = true;
        $("#interface-selected-ipv6").show();
        $("#next-hop-ipv6").hide();
        $("#dialog-form-staticRouting").dialog("option", "title", $.i18n.prop("AddStaticTitle"));
      });
    $(".sredit").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerSREdit($this);
    });
    $('#staticroutingtable tbody tr').live('dblclick', function() {
      $this = $(this).closest("tr");
      $td = $this.children('td');
      iporinterface = $td.eq(3).text();
      if (defaultRoute != iporinterface) {
        triggerSREdit($this);
      }
    });
    function triggerSREdit($this) {
      //consoleLogMethodDetailsStart("staticRouting.js", "triggerSREdit()");
      $('#staticroutingtable input:checkbox').removeAttr('checked');
      $this.find('input:checkbox').eq(0).prop("checked", true);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      enableDisableButton("staticroutingtable", "add");
      $("#edit").trigger("click");
      //consoleLogMethodDetailsEnd("staticRouting.js", "triggerSREdit()");
    }

    $("#edit")
      .button()
      .click(function() {
        var $td, prefixValue, prefixMaskValue, interfaceOrIp, type;
        $td = $('#staticroutingtable tr.hilite').closest('tr').children('td');
        validator.resetForm();
        validatorIpv6.resetForm();
        if ($td.length !== 0) {
          prefixValue = $td.eq(1).text();
          prefixMaskValue = $td.eq(2).text();
          interfaceOrIp = $td.eq(3).text();
      metricField = $td.eq(4).text();
          type = $td.eq(5).text();
          edit = true;
          add = false;
          $('#staticRoutingError').hide();
      $('#ipSelect').hide();
          if (type === "ipv4") {
        $('#radioIpv4').click();
        $('#prefix').val(prefixValue);
            $('#prefixMask').val(prefixMaskValue);
      $('#metric').val(metricField);
            if (interfaceOrIp.match(/\b(?:\d{1,3}\.){3}\d{1,3}\b/)) {
              $("#interface-selected").hide();
              $("#next-hop").show();
              $('input[name=group1]')[1].checked = true;
              $('#ipAddress').val(interfaceOrIp);
              $("#interface-option").val($("#interface-option option:first").val());
            } else if (interfaceOrIp === "dhcp") {
              $("#next-hop").hide();
              $("#interface-selected").hide();
              $('input[name=group1]')[2].checked = true;
            } else {
              $("#next-hop").hide();
              $("#interface-selected").show();
              $('input[name=group1]')[0].checked = true;
              $('#ipAddress').val("");

              $('#interface-option').val(interfaceOrIp);
            }
            $("#dialog-form-staticRouting").dialog("open");
          //  $("#accordion").accordion("option", "active", 0);
            //$("#accordion").find('h3').filter(':contains(IPv4 Address)').show();
            //$("#accordion").find('h3').filter(':contains(IPv6 Address)').hide();
          //  $("#accordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').show();
           // $("#accordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').hide();
          } else {
        $('#radioIpv6').click();
            $('#prefixipv6').val(prefixValue);
            $('#prefixMaskipv6').val(prefixMaskValue);
            if (interfaceOrIp.indexOf(':') !== -1) {
              $("#interface-selected-ipv6").hide();
              $("#next-hop-ipv6").show();
              $('input[name=group2]')[1].checked = true;
              $('#ipv6Address').val(interfaceOrIp);
              $("#interface-option-ipv6").val($("#interface-option-ipv6 option:first").val());
            } else {
              $("#next-hop-ipv6").hide();
              $("#interface-selected-ipv6").show();
              $('input[name=group2]')[0].checked = true;
              $('#ipv6Address').val("");
              $("#interface-option-ipv6").val(interfaceOrIp);
            }
            $("#dialog-form-staticRouting").dialog("open");
           // $("#accordion").accordion("option", "active", 1);
            //$("#accordion").find('h3').filter(':contains(IPv6 Address)').show();
            //$("#accordion").find('h3').filter(':contains(IPv4 Address)').hide();
         //   $("#accordion").find('h3').filter(':contains(' + $.i18n.prop("ipv6HeadingInC") + ')').show();
          //  $("#accordion").find('h3').filter(':contains(' + $.i18n.prop("ipv4HeadingInC") + ')').hide();
          }
          $("#dialog-form-staticRouting").dialog("option", "title", $.i18n.prop("EditStaticTitle"));
        } else {
          $("#srSelectRow").dialog("open");
          //$("#srSelectRowStr").text("Select a Row to Edit/Delete.");
          $("#srSelectRowStr").text($.i18n.prop("selectRowStr"));
        }
      });
    /*delete routing data by clicking delete icon*/
    $(".srdelete").live('click', function(e) {
      srFlag = true;
      $this = $(this).closest("tr");
      var srChkbox = $this.find('input:checkbox').eq(0);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      enableDisableButton("staticroutingtable", "add");
      srChkbox.prop('checked', true);
      $("#srDeleteRow").dialog("open");
      //$("#delete").trigger("click");

    });
    $("#delete")
      .button()
      .click(function() {
        var $td;
        var selectedRows = $("#staticroutingtable tbody input:checkbox:checked").length;
        var srRowCount = $('#staticroutingtable tbody tr').length;
        $td = $('#staticroutingtable tr.hilite').closest('tr').children('td');

        if (selectedRows == 0) {
          $.unblockUI();
          //$("#srSelectRowStr").text("Select a Row to Edit/Delete.");
          $("#srSelectRowStr").text($.i18n.prop("selectRowStr"));
          $("#srSelectRow").dialog("open");
        } else if (selectedRows == srRowCount && srFlag === false) {
          $.unblockUI();
          //$("#srSelectRowStr").text("Not possible to delete all rows.");
          $("#srSelectRowStr").text($.i18n.prop("notPosDelRow"));
          $("#srSelectRow").dialog("open");
        } else {
          blockPage("Applying");
          setTimeout(function() {
            if (selectedRows > 1 && srFlag === false) {
              $("#staticroutingtable tbody input:checkbox").each(function() {
                if (this.checked) {
                  $td = $(this).closest("tr").children('td');
                  deleteStaticRoutingData($td);
                }
              });
            } else {
              deleteStaticRoutingData($td);
            }
            srFlag = false;
            refresh();
            $("thead input:checkbox").prop('checked', false);
            $.unblockUI();
            deviceCommunicator.doWriteMemory();
          }, 500);
        }

      });
    function deleteStaticRoutingData($td) {

      //consoleLogMethodDetailsStart("staticRouting.js", "deleteStaticRoutingData()");
      var prefixValue, prefixMaskValue, interfaceOrIp, type, arr, prefixAndMask, arr1, response;
      prefixValue = $td.eq(1).text();
      prefixMaskValue = $td.eq(2).text();
      interfaceOrIp = $td.eq(3).text();
    metric = $td.eq(4).text();
      type = $td.eq(5).text();
      if (type === "ipv4") {
        if (interfaceOrIp.match(/\b(?:\d{1,3}\.){3}\d{1,3}\b/)) {
          arr = [{name: "prefix", value: prefixValue}, {name: "Mask", value: prefixMaskValue}, {name: "ip", value: interfaceOrIp}];
          deviceCommunicator.configureCommandsFromTemplate("dest-netIpDelete.txt", arr, false);
        } else if (interfaceOrIp === "dhcp") {
          arr = [{name: "prefix", value: prefixValue}, {name: "Mask", value: prefixMaskValue}, {name: "metric", value: metric}];
          deviceCommunicator.configureCommandsFromTemplate("dest-netIpDhcpDelete.txt", arr, false);
        } else {
          arr = [{name: "prefix", value: prefixValue}, {name: "Mask", value: prefixMaskValue}, {name: "interface", value: interfaceOrIp}];
          deviceCommunicator.configureCommandsFromTemplate("dest-netInterfaceDelete.txt", arr, false);
        }
      } else {
        prefixAndMask = prefixValue + '/' + prefixMaskValue;
        arr1 = [{name: "prefixipv6AndMask", value: prefixAndMask}, {name: "interfaceipv6", value: interfaceOrIp}];
        response = deviceCommunicator.configureCommandsFromTemplate("dest-net-ipv6InterfaceDelete.txt", arr1, false);
      }
      //consoleLogMethodDetailsEnd("staticRouting.js", "deleteStaticRoutingData()");
    }
    $('#hideAll').css('display', 'none');
    //consoleLogMethodDetailsEnd("staticRouting.js", "staticRoutingLoading()");

  $('input[name=ipType]').change(function () {
            if ($("input[name='ipType']:checked").val() == 'ip4') {
        $("#ipv61").hide();
        $("#ipv4").show();
            }
            if ($("input[name='ipType']:checked").val() == 'ip6') {
        $("#ipv4").hide();
        $("#ipv61").show();
            }
        });

    $('input[name=ipType]').change();
  }
  return {
    staticRoutingLoading: staticRoutingLoading
  };
}());var pingAndTrace = (function() {
  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {

    //consoleLogMethodDetailsStart("pingAndTrace.js", "loadAndDisplayLanguages()");
    $("#pingAndTraceLegend").text($.i18n.prop("pingAndTraceLegend"));
    $("#pingHelp").text($.i18n.prop("pingHelp"));
    $("#pingSource").text($.i18n.prop("pingSource") + ':');
    $("#pingDestination").text($.i18n.prop("pingDestination") + ':');
    $("#ipORhostname").text($.i18n.prop("ipORhostname"));
    $("#pingButton").text($.i18n.prop("pingButton"));
    $("#traceButton").text($.i18n.prop("traceButton"));
    $("#clearButton").text($.i18n.prop("clearButton"));
    $('#copyConfig').attr("title",$.i18n.prop("copyConfig"));
    $('#downloadConfig').attr("title",$.i18n.prop("downloadConfig"));
    $("#sourceInput").attr("placeholder", $.i18n.prop("pingSource"));
    $("#destinationIPInput").attr("placeholder", $.i18n.prop("pingDestination"));
    //consoleLogMethodDetailsEnd("pingAndTrace.js", "loadAndDisplayLanguages()");

  }

  function pingAndTraceLoading() {
    //consoleLogMethodDetailsStart("pingAndTrace.js", "pingAndTraceLoading()");
    loadAndDisplayLanguages();
    var interfaceName, interfaceIPAddres, interfaceStatus;
    $('#hideAll').css('display', 'block');
    xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
    $("#interface-list").html("");
    $(xml).find('entry').each(function() {
      interfaceName = $(this).find('Interface').text();
      interfaceIPAddres = $(this).find('IP-Address').text();
      interfaceStatus = $(this).find('Protocol').text();
      if (interfaceIPAddres != "" && interfaceIPAddres != null && interfaceIPAddres != "unassigned" && interfaceStatus == "up") {
        $("#interface-list").append('<option>' + interfaceName + '</option>');
      }
    });
    /*$('#sourceInput').keyup(function () {
     var sourceIPValue = $(this).val();
     if (sourceIPValue !== null && sourceIPValue !== "") {
     $("#traceButton").attr("disabled", false);
     } else {
     $("#traceButton").removeAttr("disabled");
     }
     }).keyup();*/
  document.getElementById("copyConfig").onclick = copyClipboard;
  $('#downloadConfig').click(function(){
      var cli=$('#pingTraceOutput').val();
	  if(cli.trim().length>0){
	  createConfig(cli,"pingAndTrace_output",".txt");
	  }
  });

    $('#destinationIPInput').on('keyup', function() {
      if ($("#destinationIpInputErrorSpan").hasClass('hint--top')) {
        $("#destinationIpInputErrorSpan").removeAttr("data-hint");
        $("#destinationIpInputErrorSpan").removeClass("hint--top");
        $("#destinationIPInput").removeClass("highlightTextBox");
      }
    });
    function validateIP(IP, inputId, spanId) {
      //consoleLogMethodDetailsStart("pingAndTrace.js", "validateIP()");
      if (IP.trim() == null || IP.trim() == "") {
        $("#" + spanId).addClass("hint--top");
        //$("#"+spanId).attr("data-hint", "Enter proper IP address (IPV4/IPV6) or Hostname.");
        $("#" + spanId).attr("data-hint", $.i18n.prop("enterProperIpOrHost"));
        $("#" + inputId).addClass("highlightTextBox");
        //consoleLogMethodDetailsEnd("pingAndTrace.js", "validateIP()");
        return false;
      } else {
        //consoleLogMethodDetailsEnd("pingAndTrace.js", "validateIP()");
        return true;
      }
    }


    $("#pingButton")
      .button()
      .click(function() {
        var pingAndTraceOutput,
          sourceIP = $('#sourceInput').val(),
          destinationIP = $('#destinationIPInput').val(),
          outputcontent = $('#pingTraceOutput').val();
        if (validateIP(destinationIP, "destinationIPInput", "destinationIpInputErrorSpan")) {
          blockPage("Loading");
          setTimeout(function() {
            try {
              if (sourceIP !== null && sourceIP !== "") {
                pingAndTraceOutput = deviceCommunicator.getExecCmdOutput("ping " + destinationIP + " source " + sourceIP);
              } else {
                pingAndTraceOutput = deviceCommunicator.getExecCmdOutput("ping " + destinationIP);
              }
              pingAndTraceOutput = pingAndTraceOutput.trim("");
              if (outputcontent !== null && outputcontent !== "") {
                pingAndTraceOutput = pingAndTraceOutput + "\n..........................................................." + "\n\n" + outputcontent;
              }
              $('#pingTraceOutput').val(pingAndTraceOutput);
              $('#temp').val(pingAndTraceOutput);
              $.unblockUI();
			  $( "#clearButton" ).button({disabled: false});
			  $("#copyConfig").addClass("utilBarIcon");    
			  $("#downloadConfig").addClass("utilBarIcon");
			  $("#copyConfig").removeClass("clipboardDownloadDisabled");    
			  $("#downloadConfig").removeClass("clipboardDownloadDisabled");
			  $(".utilToolbar").removeAttr("aria-disabled");
            } catch (error) {
              pingAndTraceOutput = error.errorResponse + "\n..........................................................." + "\n\n" + outputcontent;
              $('#pingTraceOutput').val(pingAndTraceOutput);
        $('#temp').val(pingAndTraceOutput);
              $.unblockUI();
            }
          }, 500);
		      $("#interface-list").html("");
          return false;
        } else {
          return false;
        }
      });

    $("#traceButton")
      .button()
      .click(function(e) {

        var tracedestinationIP = $('#destinationIPInput').val(),
          pingAndTraceOutput,
          tracesourceIP = $('#sourceInput').val(),
          outputcontent;
        outputcontent = $('#pingTraceOutput').val();
        e.preventDefault();
        if (validateIP(tracedestinationIP, "destinationIPInput", "destinationIpInputErrorSpan")) {
          blockPage("Loading");
          setTimeout(function() {
            try {
              if (tracesourceIP !== null && tracesourceIP !== "") {
                pingAndTraceOutput = deviceCommunicator.getExecCmdOutput("traceroute " + tracedestinationIP + " source " + tracesourceIP);
              } else {
                pingAndTraceOutput = deviceCommunicator.getExecCmdOutput("traceroute  " + tracedestinationIP);
              }
              pingAndTraceOutput = pingAndTraceOutput.trim("");
              if (outputcontent !== null && outputcontent !== "") {
                pingAndTraceOutput = pingAndTraceOutput + "\n..........................................................." + "\n\n" + outputcontent;
              }
              $('#pingTraceOutput').val(pingAndTraceOutput);
              $('#temp').val(pingAndTraceOutput);
              $.unblockUI();
			  $( "#clearButton" ).button({disabled: false});
	          $("#copyConfig").addClass("utilBarIcon");    
	          $("#downloadConfig").addClass("utilBarIcon");
	          $("#copyConfig").removeClass("clipboardDownloadDisabled");    
	          $("#downloadConfig").removeClass("clipboardDownloadDisabled");
	          $(".utilToolbar").removeAttr("aria-disabled");
              return false;
            } catch (error) {
              pingAndTraceOutput = error.errorResponse + "\n..........................................................." + "\n\n" + outputcontent;
              $('#pingTraceOutput').val(pingAndTraceOutput);
        $('#temp').val(pingAndTraceOutput);
              $.unblockUI();
              return false;
            }
          }, 500);
        } else {
          return false;
        }
      });

    $("#clearButton")
      .button()
      .click(function() {
        $('#sourceInput').val("");
        $('#destinationIPInput').val("");
        $('#pingTraceOutput').val("");
        $('#temp').val("");
		$( "#clearButton" ).button({disabled: true});
	    $("#copyConfig").removeClass("utilBarIcon");    
	    $("#downloadConfig").removeClass("utilBarIcon");
	    $("#copyConfig").addClass("clipboardDownloadDisabled");    
	    $("#downloadConfig").addClass("clipboardDownloadDisabled");
	    $(".utilToolbar").attr("aria-disabled","true");
      });
    $('#hideAll').css('display', 'none');
    //consoleLogMethodDetailsEnd("pingAndTrace.js", "pingAndTraceLoading()");
	$( "#clearButton" ).button({disabled: true});
	$("#copyConfig").removeClass("utilBarIcon");    
	$("#downloadConfig").removeClass("utilBarIcon");
	$("#copyConfig").addClass("clipboardDownloadDisabled");    
	$("#downloadConfig").addClass("clipboardDownloadDisabled");
	$(".utilToolbar  ").attr("aria-disabled","true");
    
  }
  return {
    pingAndTraceLoading: pingAndTraceLoading
  };
}());


var transportCLI = (function() {
  function refresh() {
    blockPage("Execute");
    setTimeout(function() {
      $('#transportError').hide();
      $('#cliOutput').val("");
      $('#temp').val("");
      var responseExecOrConfig;
      try {
        var cliType = $('[name=cliType]:checked').val();
        var cliValue = $('#cliInput').val();
        if ((cliType === "Exec")) {
          responseExecOrConfig = deviceCommunicator.getExecCmdOutput(cliValue);
        } else {
          responseExecOrConfig = deviceCommunicator.getConfigCmdOutput(cliValue);
        }
        $('#cliOutput').val(responseExecOrConfig);
        $('#temp').val(responseExecOrConfig);
        if (responseExecOrConfig === "") {
          $('#cliOutput').val($.i18n.prop("SuccessfulMessage"));
        }
        $.unblockUI();
      } catch (error) {
        $('#cliOutput').val(error.errorResponse);
        $.unblockUI();
      }
    }, 300);
  }


  function anyCliRefresh() {
    $('#cliInput').val("");
    $('#cliOutput').val("");
    $('#temp').val("");
    //$('input:radio[name=cliType]')[0].checked = true;
  }


  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {


    $("#configureCLILegend").text($.i18n.prop("configureCLILegend"));
    $("#Exec").text($.i18n.prop("Exec"));
    $("#Configure").text($.i18n.prop("Configure"));
    $("#runCommand").text($.i18n.prop("runCommand"));
    $("#clearcommand").text($.i18n.prop("clearcommand"));
    $("#cliHelp").text($.i18n.prop("cliHelp"));
    $('#copyConfig').attr("title",$.i18n.prop("copyConfig"));
    $('#downloadConfig').attr("title",$.i18n.prop("downloadConfig"));

  }


  function transportCLILoading() {
    $('#transportError').hide();
    loadAndDisplayLanguages();
    $('#hideAll').css('display', 'block');
	$('#cliInput').val("");
	var cliVal="";
    //refresh();
    $("#runCommand")
      .button()
      .click(function() {
        refresh();
        return false;

      });
    $("#clearcommand")
      .button()
      .click(function() {
        //refresh();
        anyCliRefresh();
        return false;

      });
	$( "#runCommand" ).button({disabled: true});
	$("#cliInput").keyup(function(){
	cliVal = $('#cliInput').val().trim();
	if(cliVal.length>0){
	$( "#runCommand" ).button({disabled: false});
	}else{
	$( "#runCommand" ).button({disabled: true});    
	}
	});
    document.getElementById("copyConfig").onclick = copyClipboard;
    $('#downloadConfig').click(function(){
	var cli=$('#cliOutput').val();
	createConfig(cli,"anyCli_output",".txt");
    });
    $('#hideAll').css('display', 'none');
  }
  return {
    transportCLILoading: transportCLILoading
  };
}());





/* This function gets the output in form of XML
 *  after running the command on the device and parses the values to update in the table
 */

var userFeature = (function() {
  var groupFlag = false;
  var userFlag = false;
  function refresh() {
    //consoleLogMethodDetailsStart("userFeature.js", "refresh()");
    var xml;
    $("#userTable  tbody").empty();
    var xmlDoc;
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xmlDoc = shRunFormatOutput;
    try {
      xml = $.parseXML(xmlDoc);
    } catch (error) {
      xml = xmlDoc;
    }
    groupListRefresh(xml);
    var encrypted,
      password,
      privilegelevel,
      user,
      userGroup;
    try {
      $(xml).find('username').each(function() {
        if ($(this).find('aaa').length == 0) {

          encrypted = false;
          user = $(this).find('UserName').text();
          privilegelevel = $(this).find('UserPrivilegeLevel').text();

          if (privilegelevel === "") {
            privilegelevel = 1;
          }
          $(this).find('password').each(function() {
            password = $(this).find('UnencryptedUserPassword').text();
          });

          $(this).find('secret').each(function() {
            password = $(this).find('HiddenUserSecretString').text();
            encrypted = true;

          });


          $(xml).find('username').each(function() {
            if (($(this).find('UserName').text() == user) && ($(this).find('AAAAttributeListName').length != 0)) {
              //var groupSplit;
              userGroup = $(this).find('AAAAttributeListName').text();
              //if (userGroup.indexOf('local-d_')==0) {
              //  groupSplit=userGroup.split('local-d_');
              //  userGroup=groupSplit[1];

              //}else if (userGroup.indexOf('active-d_')==0) {
              //  groupSplit=userGroup.split('active-d_');
              //  userGroup=groupSplit[1];
              //
              //}
              return false;
            } else {
              // userGroup = "No Group";
              userGroup = $.i18n.prop("noGroup");
            }
          });







          if ($(this).find('ViewName').length !== 0) {
            if ($(this).find('ViewName').text() === "enduserview") {
              view = $.i18n.prop("yesValue");
            } else {
              view = $.i18n.prop("noValue");
            }
          } else {
            view = $.i18n.prop("noValue");
          }

          if (password === "undefined" || password === "") {
            $(this).find('password').each(function() {
              password = $(this).find('HiddenUserPasswordString').text();
              encrypted = false;
            });
          }
          if (user != null && user != "" && password != null && password != "") {
            var rowDetails = '<td>' + user + '</td><td>******</td><td>'
              + privilegelevel + '</td><td><label id="hiddenPassword" name"hiddenPassword">'
              + password + '</label></td><td>' + encrypted + '</td><td>'
              + view + '</td><td><span title="'+$.i18n.prop("removeUserFromGroup");
            // if (userGroup === "No Group") {
            if (userGroup === $.i18n.prop("noGroup")) {
              rowDetails = rowDetails + '" class="closegroup ccpexpCSSReplaceClass829"  ';
            }
            else {
              rowDetails = rowDetails + ' ' + userGroup + '" class="closegroup ccpexpCSSReplaceClass830" ';
            }
            rowDetails = rowDetails + '></span><span class="grouplabel grouplabel-success ccpexpCSSReplaceClass831" >' + userGroup +
              '</span></td>';
            //alert(rowDetails);
            $('<tr></tr>').html(rowDetails).appendTo('#userTable');
            //$("#selected-groups").html(userGroup).appendTo("selected-groups");

          }
        }

      });

      addTableColumn("userTable", "user-edit", "user-delete");
      enableDisableButton("userTable", "add-user");
      $('#userTable input:checkbox,#usertablechkbx').bind('click', unloackDeleteUsersButton);
    } catch (error) {
        isEmptyBlock = true;
    }
    $('.closegroup').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $(".closegroup").click(function() {
      //alert("you just clicked to dissociate");
      var tableRow = $(this).parents('tr');
      var userName = tableRow.find('td').eq(1).text();
      var arr = [];
      arr.push({
        name: "username",
        value: userName
      });
      var userSearchCmdStr = "show running-config | include username " + userName + " privilege";
      //The first element of the array has the user details.

      var userInfoArray = deviceCommunicator.getExecCmdOutput(userSearchCmdStr);
      if (userInfoArray != undefined && userInfoArray.length > 0) {
        //response = deviceCommunicator.configureCommandsFromTemplate("userFormDelete.txt", arr, false);
        response = deviceCommunicator.getConfigCmdOutput("no " + userInfoArray + "\n" + userInfoArray, false);
        var groupLabel = tableRow.find('span.grouplabel');
        if (groupLabel != undefined) {
          // groupLabel.text("No Group");
          groupLabel.text($.i18n.prop("noGroup"));
          $(this).css('visibility', 'hidden');
        }
        //alert("group deleted");
      }
    });

    $('#userTable td:nth-child(6),#userTable th:nth-child(6)').hide();
    $('#userTable td:nth-child(5),#userTable th:nth-child(5)').hide();
    $('#withParser').show();

    $('#withGroup').show();
    $("#userTable tr:nth-child(even)").addClass("striped");
    // highlight();

    $(".GroupPopup").css('display', 'none');

    $(".grouplabel").click(
      function(e) {
        var usersName = $(this).parents('tr').find('td:nth-child(2)').text();

        $("#groupMngTitle").html(": " + usersName);

        if ($("#groupMngTitle").html().trim() != "" && usersName.length > 14) {


          $("#groupMngTitle").html(": " + usersName.substr(0, 11) + "...");

          $("#groupMngTitle").prop("title", usersName);
          $("#groupMngTitle").tooltip({
            content: usersName,
            show: {
              effect: "slideDown"
            },
            tooltipClass: "customblue-tooltip-styling"
          });
        }

        //if (usersName.length<=20) {
        //  $("#groupMngTitle").html(usersName);
        //}

        var position = $(this).position();
        $('.GroupPopup').css({
          left: position.left + 45 + "px"
        });

        $(".GroupPopup").animate({height: 'show'}, 'slow');

        var GroupSearchName = "";

        $(".grouplabel").each(function(index) {
          if ($(this).hasClass('ActiveUserRow')) {
            $(this).removeClass("ActiveUserRow");
          }
        });
        $(this).addClass("ActiveUserRow");
        $(".grouplabel").each(function(index) {
          GroupSearchName = $(this).text();
          if ($(this).hasClass('ActiveUserRow')) {
            $("input[name=userGroup]").each(function(index) {
              if (GroupSearchName == $(this).val()) {
                $(this).prop('checked', true);
              }
              else {
                $(this).prop('checked', false);
              }
            });
          }
        });

      });


//    $(".GroupPopup").hover(
//            function() {
//
//            },
//            function() {
//                $(".GroupPopup").css('display', 'none');
//            }
//    );

    $("#cancelGroupMgmt").button().click(function() {
      $(".GroupPopup").hide();
    });


    //$("#addToGroup").hover(
    //  function () {
    //    var selectedGroups = $(this).parents('div id[user-groups]').find('div id[selected-groups]').text();
    //
    //
    //    $("#groupMngTitle").prop("title",selectedGroups);
    //    $("#groupMngTitle").tooltip({
    //        content: selectedGroups,
    //        show: {
    //        effect: "slideDown"
    //        },
    //        tooltipClass: "customblue-tooltip-styling"
    //    });
    //  },
    //  function () {
    //
    //  }
    //);


    function assignGroupToUser() {
      //consoleLogMethodDetailsStart("userFeature.js", "assignGroupToUser()");
      var Selectedgroup = "", group;
      $('#userError').hide();
      $("input[name=userGroup]").each(function(index) {
        if ($(this).is(':checked')) {
          group = $(this).val();
          //var groupPrefix;
          //if ($(this).attr("group-data")=="Local") {
          //  groupPrefix='local-d_';
          //}else if ($(this).attr("group-data")=="Active") {
          //  groupPrefix='active-d_';
          //}else{
          //  groupPrefix='';
          //}
          //Selectedgroup=groupPrefix+group;
          Selectedgroup = group;
        }
      });
      $(".grouplabel").each(function(index) {

        if ($(this).hasClass('ActiveUserRow')) {
          var userName = $(this).parents('tr').find('td').eq(1).text();
          var arr = [], response;
          //var userSearchCmdString, userInfoArray;
          arr.push({
            name: "username",
            value: userName
          }, {
            name: "groupName",
            value: Selectedgroup
          });
          try {
            if (Selectedgroup.length > 0) {
              response = deviceCommunicator.configureCommandsFromTemplate("userToGroup.txt", arr, false);
              arr.length = 0;

              //setting the value of the label to the selected group name.
              $(this).text(group);
              var closegroupspan = $(this).parents('tr').find('span.closegroup');
              closegroupspan.css('visibility', 'visible');
              closegroupspan.attr('title',$.i18n.prop("removeUserFromGroup")+' '+group);
            }
            //refresh();

          } catch (error) {
            $('#userErrorMessage').html(error.errorResponse);
            $('#userError').show();
            return false;
          }


        }
      });
      $(".GroupPopup").hide();
      //consoleLogMethodDetailsEnd("userFeature.js", "assignGroupToUser()");
    }
    $("#addToGroup").button().click(function() {
      assignGroupToUser();
    });




    $("#TableSlideSearch").keyup(function(event) {
      var searchKeyword = $("#TableSlideSearch").val().trim().toLowerCase();
      var checktd = 0;
      if (searchKeyword != '' && searchKeyword != null) {

        $("#userTable tbody tr td:nth-child(2)").each(function(index) {
          if ($(this).text().toLowerCase().indexOf(searchKeyword) > -1) {
            checktd = 1;
            $(this).parents('tr').show();
          } else {
            $(this).parents('tr').hide();
          }
        });
      } else {
        $("#userTable").find('tr').each(function() {
          $(this).find('td').each(function() {
            $(this).parents('tr').show();
          });
        });
      }
//alert("hiii");
    });






    $("#search-groups").keyup(function(event) {
      var searchKeyword = $("#search-groups").val().trim();
      regExp = new RegExp('^' + searchKeyword + '([\s\S]*)+', "gi");
      if (searchKeyword != '' && searchKeyword != null) {
        $('#group-list').find(":radio").each(function() {
          var searchIndexer = $(this).val().indexOf(searchKeyword);
          //alert("indexer-"+searchIndexer);
          //searchIndexer = regExp.test($(this).val());
          if (searchIndexer >= 0) {
            $(this).show();
            $('[radio-data="' + $(this).val() + '"]').show();

          } else {
            $(this).hide();
            $('[radio-data="' + $(this).val() + '"]').hide();
          }
        });
      } else {
        $('#group-list').find(":radio").each(function() {
          $(this).show();
          $('[radio-data="' + $(this).val() + '"]').show();
        });
      }
    });
    //consoleLogMethodDetailsEnd("userFeature.js", "refresh()");

  }

  function highlight() {
    //consoleLogMethodDetailsStart("userFeature.js", "highlight()");
    $('#userTable tbody tr').on('click', (function() {
      var $tr = $(this).closest("tr");
      $tr.siblings().removeClass('hilite');
      $tr.toggleClass('hilite');
    }));
    //consoleLogMethodDetailsEnd("userFeature.js", "highlight()");
  }

  function tabRefresh() {
    //consoleLogMethodDetailsStart("userFeature.js", "tabRefresh()");
    $('#transportError').hide();
    $('.GroupPopup').hide();
    if ($("#tabs-1").select()) {
      refresh();
    }
    if ($("#tabs-2").select()) {
      parserRefreshing();
    }
    if ($("#tabs-3").select()) {
      groupRefreshing();
    }
    if ($("#tabs-1").select()) {
      loadAuthFutureTab();
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "tabRefresh()");
  }
  function groupRefreshing() {
    //consoleLogMethodDetailsStart("userFeature.js", "groupRefreshing()");
    $("#group-name").val("");
    //consoleLogMethodDetailsEnd("userFeature.js", "groupRefreshing()");

  }
  function groupListRefresh(data) {
    //consoleLogMethodDetailsStart("userFeature.js", "groupListRefresh()");
    var xml = data;
    ;
    if (typeof xml === 'undefined') {
      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;
    }
    $("#group-list").empty();
    $("#groupTable  tbody").empty();

    $("#groupsList").empty();
    //$("#groupsList").append('<option id="SelectGroup" value="SelectGroup">SelectGroup</option>');
    $("#groupsList").append('<option id="SelectGroup" value="SelectGroup">' + $.i18n.prop("SelectGroup") + '</option>');
    //$("#group-list").append('<input type="radio" name="userGroup" value="No Group"><span radio-data="No Group">No Group<br></span>');
    $(xml).find('aaa attribute list').each(function() {
      var groupType;
      //var groupSplit;
      var groupName = $(this).find('Name').text();
      if (groupName != "") {

        //if (groupName.indexOf('local-d_')==0) {
        //  groupSplit=groupName.split('local-d_');
        //  groupName=groupSplit[1];
        //  groupType='Local';
        //
        //}else if (groupName.indexOf('active-d_')==0) {
        //  groupSplit=groupName.split('active-d_');
        //  groupName=groupSplit[1];
        //  groupType='Active';
        //
        //}else{
        //  groupType='';
        //}
        $("#group-list").append('<input type="radio" name="userGroup" group-data="' + groupType + '" value="' + groupName +
                                '"><span radio-data="' + groupName + '">' + groupName + '<br></span>');
        $('<tr></tr>').html('<td>' + groupName + '</td>').appendTo('#groupTable');
        //New line added for user group selection in Add User page.
        $("#groupsList").append('<option id="' + groupName + '" value="' + groupName + '">' + groupName + '</option>');
      }

    });
    addTableColumn("groupTable", "group-edit", "group-delete");
    $('#groupTable input:checkbox,#usertablechkbx').bind('click', unloackDeleteGroupButton);
    enableDisableButton("groupTable", "add-group");
    var length = $('#groupsList').children('option').length;
    if (length == 1) {
      $("#groupsList").empty();
      //$("#groupsList").append('<option id="SelectGroup" value="SelectGroup">No Groups to Select</option>');
      $("#groupsList").append('<option id="SelectGroup" value="SelectGroup">' + $.i18n.prop("noSelectGroup") + '</option>');

      $("#groupsList").prop("disabled", true);
    } else {
      $("#groupsList").prop("disabled", false);
    }
    if ($('#group-list').find(':radio').length == 0) {
      $("#noGroupMessage").show();
      $("#groupTable").hide();
      $("#delete-group").hide();
      //$("#group-list").empty();
      //$("#addToGroup").hide();
      //$("#group-list").append('<br><span>No groups available</span>');
      //$('<tr></tr>').html('<td colspan="2">No groups available</td>').appendTo('#groupTable');
    } else {
      $("#noGroupMessage").hide();
      $("#groupTable").show();
      $("#delete-group").show();
      $("#addToGroup").show();
    }
    $("#groupTable tr:nth-child(even)").addClass("striped");
    /*$('#groupTable tbody tr').on('click', (function() {
     var $tr = $(this).closest("tr");
     $tr.siblings().removeClass('hilite');
     $tr.toggleClass('hilite');
     }));*/
    //consoleLogMethodDetailsEnd("userFeature.js", "groupListRefresh()");
  }


  function getPorts() {
    //consoleLogMethodDetailsStart("userFeature.js", "getPorts()");
    $('#intTable tr:not(:first)').remove();
    $("#parserIntTable tbody").empty();
    var interfaceName,
      interfaceType,
      coloumCount = 0,
      rowcount = 0,
      rowid;
    try {
      deviceCommunicator.getInterfaceType("", true);
      var xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
      $(xml).find('entry').each(function() {

        interfaceName = $(this).find('Interface').text();
        interfaceType = deviceCommunicator.getInterfaceType(interfaceName);
        if (interfaceType === 5 || interfaceType === 6) {
          if (rowcount === 0 && coloumCount === 0) {
            rowid = "allowedInterfacesRow" + rowcount;
            $('#parserIntTable tbody').append('<tr><td>' + $.i18n.prop("AllowedInterfaces") + '</td></tr>');
            $('#parserIntTable tbody').append('<tr></tr>');
          }
          if (coloumCount === 3) {
            coloumCount = 0;
            rowcount = rowcount + 1;
            rowid = "allowedInterfacesRow" + rowcount;
            $('#parserIntTable tbody').append('<tr></tr>');
          }
          $('#parserIntTable tbody').append('<td width="160"><input type="checkbox" id="' + interfaceName +
                                            '" name="interfaceType5or6" value="' + interfaceName + '"/>' + interfaceName + '</td>');
          coloumCount = coloumCount + 1;
        }

      });
    } catch (error) {
        isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "getPorts()");
  }

  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {

    //consoleLogMethodDetailsStart("userFeature.js", "loadAndDisplayLanguages()");
    $("#userLegend").text($.i18n.prop("userLegend"));
    $("#add-user").text($.i18n.prop("add-user"));
    $("#add-group").text($.i18n.prop("add-user"));
    $("#edit-user").text($.i18n.prop("edit-user"));
    $("#delete-user").text($.i18n.prop("delete-user"));
    $("#delete-group").text($.i18n.prop("delete-user"));
    $("#UserName").text($.i18n.prop("username"));
    $("#Password").text($.i18n.prop("password"));
    $("#PrivilegeLevel").text($.i18n.prop("PrivilegeLevel"));
    $("#UserLegend").text($.i18n.prop("UserLegend"));
    $("#TableSlideSearch").attr("placeholder", $.i18n.prop("TableSlideSearch"));
    $("#AstUserName").html($.i18n.prop("AstUserName") + ' <span class="ccpexpCSSReplaceClass832">*</span>:');
    $("#userInput").attr("placeholder", $.i18n.prop("AstUserName"));
    $("#AstPswd").html($.i18n.prop("AstPswd") + ' <span class="ccpexpCSSReplaceClass833">*</span>:');
    $("#paassworInput").attr("placeholder", $.i18n.prop("AstPswd"));
    $("#AstConfirmPswd").html($.i18n.prop("AstConfirmPswd") + ' <span class="ccpexpCSSReplaceClass834">*</span>:');
    $("#confirmInput").attr("placeholder", $.i18n.prop("AstConfirmPswd"));
    $("#AstGroupSelection").text($.i18n.prop("AstGroupSelection"));
    $("#encrytAlgo").text($.i18n.prop("encrytAlgo"));
    $("#ManagePrivilegeLevel").text($.i18n.prop("ManagePrivilegeLevel"));
    $("#userSelectRowStr").text($.i18n.prop("selectRowStr"));

    $("#userselectRow").attr("title", $.i18n.prop("selectaHeading"));
    $("#configureCLILegend").text($.i18n.prop("configureCLILegend"));
    $("#parserCLILegend").text($.i18n.prop("parserCLILegend"));
    $("#Apply").text($.i18n.prop("apply"));
    $("#DeleteView").text($.i18n.prop("DeleteView"));
    $("#EndUserUserName").html($.i18n.prop("eUserUserName") + ' <span class="ccpexpCSSReplaceClass835">*</span>:');
    $("#EndUserPassword").html($.i18n.prop("eUserPassword") + ' <span class="ccpexpCSSReplaceClass836">*</span>:');
    $("#EnableSecret").html($.i18n.prop("SecretInput") + ' <span class="ccpexpCSSReplaceClass837">*</span>:');
    $("#ConfirmSecret").html($.i18n.prop("ConfirmSecretInput") + ' <span class="ccpexpCSSReplaceClass838">*</span>:');
    $("#parserViewNote").text($.i18n.prop("parserViewNote"));
    $("#Apply").text($.i18n.prop("apply"));
    $("#DeletView").text($.i18n.prop("deleteView"));
    $("#endUserViewTab").text($.i18n.prop("endUserTabStr"));
    $("#withParser").text($.i18n.prop("withParser"));
    $("#withGroup").text($.i18n.prop("withGroup"));
    $("#usertbAction").text($.i18n.prop("usertbAction"));
    $("#GroupName").text($.i18n.prop("GroupName"));
    $("#GPaction").text($.i18n.prop("GPaction"));
    $("#addToGroup").text($.i18n.prop("ok"));
    $("#search-groups").attr("placeholder", $.i18n.prop("searchGroups"));
    $("#groupMngLbl").text($.i18n.prop("groupMngLbl"));
    $("#cancelGroupMgmt").text($.i18n.prop("cancelGroupMgmt"));
    $("#userCreateGroup").text($.i18n.prop("userCreateGroup"));

    $("#userGroupName").html($.i18n.prop("userGroupName"));
    $("#group-name").attr("placeholder", $.i18n.prop("userGroupName"));
    $("#dialog-form-groups").attr("title", $.i18n.prop("userAddGroup"));

    $("#authTab").text($.i18n.prop("authTab"));
    $("#createGroupsTab").text($.i18n.prop("createGroupsTab"));
    $("#userTab").text($.i18n.prop("userTab"));
    $("#endUserViewTab").text($.i18n.prop("endUserViewTab"));
    $("#add-user").text($.i18n.prop("add-user"));
    $("#edit-user").text($.i18n.prop("edit-user"));
    $("#delete-user").text($.i18n.prop("delete-user"));

    $("#userAuthenticServerTitle").text($.i18n.prop("userAuthenticServerTitle"));
    $("#profileNmae").text($.i18n.prop("profileNmae"));
    $("#serverType").text($.i18n.prop("serverType"));
    $(".serverIP").text($.i18n.prop("serverIP"));
    $("#baseDn").text($.i18n.prop("baseDn"));
    $("#state").text($.i18n.prop("state"));
    $("#ldapAction").text($.i18n.prop("ldapAction"));
    $("#add-ldap").text($.i18n.prop("add-ldap"));

    $("#dialog-form-ldap").attr("title", $.i18n.prop("userAddEditLdap"));
    $("#userServerType").text($.i18n.prop("userServerType"));
    $("#userProfileName").text($.i18n.prop("userProfileName"));
    $("#userStatus").text($.i18n.prop("userStatus"));
    $("#userserverIP").text($.i18n.prop("userserverIP"));
    $("#userBaseDN").text($.i18n.prop("userBaseDN"));

    $("#profileName").attr("placeholder", $.i18n.prop("profileName"));
    $("#ldapIpAddress").attr("placeholder", $.i18n.prop("ldapIpAddress"));
    $("#ldapBaseDn").attr("placeholder", $.i18n.prop("ldapBaseDn"));
    $(".error[for='ldapIpAddress']").text($.i18n.prop("ldapIpAddressError"));
    $(".error[for='ldapBaseDn']").text($.i18n.prop("ldapBaseDn"));

    $("#userAuthenticSerTitle").text($.i18n.prop("userAuthenticSerTitle"));
    $("#zone").text($.i18n.prop("zone"));
    $(".methodTitle").text($.i18n.prop("methodTitle"));
    $("#authMethods option[value='none']").text($.i18n.prop("none"));
    $("#authMethods option[value='webauth']").text($.i18n.prop("webAuth"));

    $("#groupLegend").text($.i18n.prop("groupLegend"));
    $("#noGroupAval").text($.i18n.prop("noGroupAval"));
    $("#authValidationPopup").attr("title", $.i18n.prop("authValidationPopup"));

    $("#enableOnBox").text($.i18n.prop("enableOnBox"));
    $("#enableExternal").text($.i18n.prop("enableExternal"));
    $("#applyAuth").text($.i18n.prop("apply"));
    $("#resetAuth").text($.i18n.prop("reSetTitle"));

    //consoleLogMethodDetailsEnd("userFeature.js", "loadAndDisplayLanguages()");

  }

  function parserRefreshing() {
    //consoleLogMethodDetailsStart("userFeature.js", "parserRefreshing()");
    var eUserHostname, eUserPassword, oldeUserHostname = "", oldeUserPassword = "", xml;
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    $(xml).find('username').each(function() {
      if ($(this).find('ViewName').length !== 0) {
        if ($(this).find('ViewName').text() === "enduserview") {
          oldeUserHostname = $(this).find('UserName').text();
          oldeUserPassword = $(this).find('UnencryptedUserPassword').text();
        }

      }
    });
    eUserHostname = $('#eUserUserName').val(oldeUserHostname);
    eUserPassword = $('#eUserPassword').val(oldeUserPassword);
    if (oldeUserHostname == null || oldeUserHostname == "") {
      eUserSecret = $('#SecretInput').val("");
      eUserConfirmSecret = $('#ConfirmSecretInput').val("");
      $('#eUserUserName').attr("disabled", false);
      $('#eUserPassword').attr("disabled", false);
      $("#SecretInput").attr("disabled", false);
      $("#ConfirmSecretInput").attr("disabled", false);
      $('#parserForm').find('input[type="checkbox"]').each(function() {
        this.checked = true;
        this.disabled = false;
      });
      $("#Apply").show();
      $("#DeleteView").hide();

    } else {
      eUserSecret = $('#SecretInput').val("*****");
      eUserConfirmSecret = $('#ConfirmSecretInput').val("*****");
      $('#eUserUserName').attr("disabled", true);
      $('#eUserPassword').attr("disabled", true);
      $("#SecretInput").attr("disabled", true);
      $("#ConfirmSecretInput").attr("disabled", true);
      parseAllowedInterfaces();
      $('#parserForm').find('input[type="checkbox"]').each(function() {
        this.disabled = true;
      });
      $("#Apply").hide();
      $("#DeleteView").show();
    }
    $("#parserIntTable").find('td').each(function() {
      $(this).css("display", "inline-block");
    });
    //consoleLogMethodDetailsEnd("userFeature.js", "parserRefreshing()");
  }

  function parseAllowedInterfaces() {
    //consoleLogMethodDetailsStart("userFeature.js", "parseAllowedInterfaces()");
    try {

      var xmlDoc;

      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xmlDoc = shRunFormatOutput;
      $(xmlDoc).find('commands').each(function() {
        $(this).find('configure').each(function() {
          $(this).find('include').each(function() {

            var allowedInterfaces = $(this).find('KeywordsCommand').text();
            if (allowedInterfaces.indexOf('interface ') !== -1) {
              str = allowedInterfaces.indexOf(' ');
              allowedInterfaces = allowedInterfaces.substring(str + 1, allowedInterfaces.length);
              $("#" + allowedInterfaces + "").attr("checked", true);

            }
          });
        });
      });



    } catch (error) {
        isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "parseAllowedInterfaces()");

  }


  function parserApply() {

    //consoleLogMethodDetailsStart("userFeature.js", "parserApply()");
    var eUserHostname, eUserPassword, eUserSecret, eUserConfirmSecret, responseAaaCmds, arrNewUserValues = [], responseParserCmds, emptyArray = [];
    //var oldeUserHostname = "", oldeUserPassword = "", arrOldUserValues = [] , responseWlanCmds, responseWLAN;
    eUserHostname = $('#eUserUserName').val();
    eUserPassword = $('#eUserPassword').val();
    eUserSecret = $('#SecretInput').val();
    eUserConfirmSecret = $('#ConfirmSecretInput').val();
    arr = $('#parserForm').formToArray();
    arrNewUserValues.push({name: "eUserHostname", value: eUserHostname},
                          {name: "eUserPassword", value: eUserPassword},
                          {name: "eUserSecret", value: eUserSecret});
    try {
      if (eUserHostname !== null && eUserHostname !== "" && eUserPassword !== null && eUserPassword !== "") {
          //var interfaceValue;
          responseAaaCmds = deviceCommunicator.configureCommandsFromTemplate("parserCLIAaaCommands.txt", arrNewUserValues, false);
          responseParserCmds = deviceCommunicator.configureCommandsFromTemplate("parserCLIView.txt", arrNewUserValues, true);

          for (var i = 0; i < arr.length; i++) {
            var interfaceValues, interfaceArr = [];
            interfaceValues = arr[i].value;
            if (interfaceValues.indexOf('Ethernet') !== -1) {

              interfaceArr.push({name: "interfaceValue", value: interfaceValues});
              responseParserCmds = responseParserCmds + deviceCommunicator.configureCommandsFromTemplate("parserCLIInterface.txt", interfaceArr, true);
            }
          }

          responseParserCmds = responseParserCmds + wlanAndCellularChecking();
      }
      deviceCommunicator.getConfigCmdOutput(responseParserCmds);
      try {
        deviceCommunicator.configureCommandsFromTemplate("filePrivilege.txt", emptyArray, false);
      } catch (err) {
        //no need to handle the error as the CLI "file privilege 0" is not supported in IOS < 15.2
      }
    } catch (error) {
      $('#transportErrorMessage').html(error.errorResponse);
      $('#transportError').show();
    }
    parserRefreshing();
    $.unblockUI();
    deviceCommunicator.doWriteMemory();
    //consoleLogMethodDetailsEnd("userFeature.js", "parserApply()");
  }

  function wlanAndCellularChecking() {
    //consoleLogMethodDetailsStart("userFeature.js", "wlanAndCellularChecking()");
    var arrWlanCmds = [], responseWlanCmds = "";
    try {

      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;
      if (xml.indexOf("Building configuration...") !== -1) {
        xml = xml.substring(25, xml.length);
        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
      }
      xml = xml.substring(xml.indexOf("<?xml"), xml.length);
      regEx = new RegExp("&#x03;", "g");
      xml = xml.replace(regEx, "");
      try {
        xmlWlan = $.parseXML(xml);
      } catch (error) {
        xmlWlan = xml;
      }

      $(xmlWlan).find('interface').each(function() {
        var interfaceName, regEx, srarray, cellularTag, templateArray = [];
        //var interfaceXml;
        interfaceName = $(this).find('Param:first').text();
        if (interfaceName.indexOf('Wlan') !== -1 && interfaceName.indexOf('GigabitEthernet') !== -1) {
          responseWlanCmds = responseWlanCmds + deviceCommunicator.configureCommandsFromTemplate("parserCLIWlanCommand.txt", arrWlanCmds, true);
        }
        if (interfaceName.indexOf('Cellular') !== -1) {
          regEx = new RegExp("Cellular", "");
          srarray = interfaceName.split(regEx);
          cellularTag = srarray[1];
          templateArray = [];
          templateArray.push({name: "cellularTag", value: cellularTag});
          responseWlanCmds = responseWlanCmds + deviceCommunicator.configureCommandsFromTemplate("parserCLICellularCommands.txt", templateArray, true);
        }
      });
    } catch (error) {
        isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "wlanAndCellularChecking()");
    return responseWlanCmds;
  }


  function deleteUser(deleterow, deladminarr) {
    //consoleLogMethodDetailsStart("userFeature.js", "deleteUser()");
    try {
      var deletUsername, arr, selectedPrivlege;
      //var privilege, allrows;
      deletUsername = deleterow.children().get(1).textContent;
      arr = [{name: "username", value: deletUsername}];
      selectedPrivlege = deleterow.children().get(3).textContent;
      viewDeleteCheck = deleterow.children().get(6).textContent;
      if (selectedPrivlege === "15") {
        if (deladminarr.length === 1) {
          if (viewDeleteCheck === "NO") {
            deleteUserdialog('Ok', deletUsername);
            $.unblockUI();
          } else {
            deviceCommunicator.configureCommandsFromTemplate("userFormDelete.txt", arr, false);
          }
        } else {
          deviceCommunicator.configureCommandsFromTemplate("userFormDelete.txt", arr, false);
        }
      } else {
        deviceCommunicator.configureCommandsFromTemplate("userFormDelete.txt", arr, false);
      }
    } catch (error) {
      $('#userErrorMessage').html(error.errorResponse);
      $('#userError').show();
      $.unblockUI();
      //return false;
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "deleteUser()");
  }
  function deleteUserdialog(button1, deletUsername) {
    //consoleLogMethodDetailsStart("userFeature.js", "deleteUserdialog()");
    var btns = {};
    btns[button1] = function() {
      $(this).dialog("close");
    };
    $('<div><p>' + deletUsername +
      $.i18n.prop("userFeatonlyUser")+' '+
      $.i18n.prop("userFeatDelUserPriv")+'</p></div>').dialog({
      autoOpen: true,
      title: 'Delete User',
      modal: true,
      buttons: btns
    });
    //consoleLogMethodDetailsEnd("userFeature.js", "deleteUserdialog()");
  }
  function unloackDeleteUsersButton(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "unloackDeleteUsersButton()");
    var selectedRows = $("#userTable tbody input:checkbox:checked").length;
    var usertablechkbx = $('#usertablechkbx').prop('checked');
    if (usertablechkbx) {
      selectedRows = selectedRows + 1;
    }
    //consoleLog('unloackDeleteUsersButton:' + selectedRows);
    if (selectedRows > 0) {
      // $('delete-user').removeAttr('disabled');
      $("#delete-user").removeAttr("disabled");
      $("#delete-user").removeClass("ui-button-disabled");
      $("#delete-user").removeClass("ui-state-disabled");
    } else {
      $("#delete-user").attr("disabled", "disabled");
      $("#delete-user").addClass("ui-button-disabled");
      $("#delete-user").addClass("ui-state-disabled");
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "unloackDeleteUsersButton()");
  }
  ;
  function unloackDeleteGroupButton(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "unloackDeleteGroupButton()");
    //  e.preventDefault();
    var selectedRows = $("#groupTable tbody input:checkbox:checked").length;
    var usertablechkbx = $('#GPchkbox').prop('checked');
    if (usertablechkbx) {
      selectedRows = selectedRows + 1;
    }
    //consoleLog('unloackDeleteGroupButton:' + selectedRows);
    if (selectedRows > 0) {
      // $('#delete-group').removeAttr('disabled');
      // $('#delete-group').prop('disabled','false');
      $("#delete-group").removeAttr("disabled");
      $("#delete-group").removeClass("ui-button-disabled");
      $("#delete-group").removeClass("ui-state-disabled");
      //$('#delete-user').prop('disabled',true);
    } else {
      $("#delete-group").attr("disabled", "disabled");
      $("#delete-group").addClass("ui-button-disabled");
      $("#delete-group").addClass("ui-state-disabled");
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "unloackDeleteGroupButton()");
  }
  ;
  function editLdap(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "editLdap()");
    $('#ldapError').hide();
    try {
      var par = $(this).parent().parent(); //tr
      var profileName = par.children("td:nth-child(1)").html();
      var sererType = par.children("td:nth-child(2)").html();
      var serverIp = par.children("td:nth-child(3)").html();
      var baseDn = par.children("td:nth-child(4)").html();
      var status = par.children("td:nth-child(4)").html();
      $('#ldapIpAddress').val(serverIp.trim());
      $('#ldapBaseDn').val(baseDn.trim());
      $('#profileName').val(profileName.trim());
      $('#profileNmTr').hide();
      $('#ldapStatus').val(status.trim());
      $('#ldapStatusTr').hide();
      $('#serverTypes').val(sererType);
      $("#dialog-form-ldap").dialog("open");
    } catch (error) {
      errorLogInConsole(error);
    }
    e.preventDefault();
    //consoleLogMethodDetailsEnd("userFeature.js", "editLdap()");
  }
  ;
  function removeExistingAuthConfig(isPriview) {
    //consoleLogMethodDetailsStart("userFeature.js", "removeExistingAuthConfig()");
    var localServers = authInitialConfig['localServers'];
    var remoteServers = authInitialConfig['remoteServers'];
    var authServices = authInitialConfig['authMethods'];
    var profileName = 'LDAP-SERVER';
    var groupLocalOrLDAP = '';
    var valiedNtlm = false;
    var valiedWebauth = false;
    var cliInput = '';
    var paramMAP = [];
    paramMAP.push(
      {name: "profileNm", value: profileName});


    if (remoteServers === 'Y') {

      groupLocalOrLDAP = 'group AAA-SG-LDAP ';
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deconfigLDAP.txt", paramMAP, true) + '\n';
      valiedNtlm = true;
      valiedWebauth = true;
    }
    if (localServers === 'Y') {
      groupLocalOrLDAP = groupLocalOrLDAP + 'local';
      //  cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigLocalServer.txt", paramMAP, true)+'\n';
      valiedNtlm = false;
      valiedWebauth = true;
    }

    paramMAP.push(
      {name: "groupLocalOrLDAP", value: groupLocalOrLDAP});

    if (authServices === 'webauth' && valiedWebauth) {
      paramMAP.push(
        {name: "authPNm", value: "default"});
      paramMAP.push(
        {name: "authProxyNm", value: "auth-proxy"});
      cliInput = cliInput + deConfigNTLMAuthRoleToAllLANZones(authServices);
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigAuthServer.txt", paramMAP, true) + '\n';
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigWebAuthService.txt", paramMAP, true) + '\n';


    } else if (authServices === 'ntlm' && valiedNtlm) {
      paramMAP.push(
        {name: "authPNm", value: "NTLM-AUTH"});
      paramMAP.push(
        {name: "authProxyNm", value: "network"});
      cliInput = cliInput + deConfigNTLMAuthRoleToAllLANZones(authServices);
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigAuthServer.txt", paramMAP, true) + '\n';
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigNTLMAuthService.txt", paramMAP, true) + '\n';

    }
//        if (cliInput !== '') {
//            ////consoleLog(cliInput);
//            //deviceCommunicator.getConfigCmdOutput(cliInput);
//        }
    //consoleLogMethodDetailsEnd("userFeature.js", "removeExistingAuthConfig()");
    return cliInput;
  }
  function validateAuthConfig() {
    //consoleLogMethodDetailsStart("userFeature.js", "validateAuthConfig()");
    var localServers = $('#localServers').prop('checked');
    var remoteServers = $('#remoteServers').prop('checked');
    var authServices = $('#authMethods').val();
    var errorMessage = '';
    var showApplyButtons = true;
    if (localServers === false && remoteServers === false && authServices !== 'none') {
      //errorMessage = errorMessage + 'Authentication Service requires atleset one configured Authentication server' + '\n';
      errorMessage = errorMessage + $.i18n.prop("errorAuthentication") + '\n';
      showApplyButtons = false;
    } else if (localServers === true && authServices !== 'webauth') {
      var authServices = authInitialConfig['authMethods'];
      //   $('#authMethods').val(authServices);
      showApplyButtons = false;
      //errorMessage = 'Only Web-Auth is supported for onbox server';
      errorMessage = $.i18n.prop("errorWebAuthsupported");
    } else if (localServers === true && remoteServers === true && authServices === 'ntlm') {
      //errorMessage = errorMessage + 'Only Web-Auth is supported for onbox server' + '\n';
      errorMessage = errorMessage + $.i18n.prop("errorWebAuthsupported") + '\n';
      showApplyButtons = false;
    }
    if (showApplyButtons === true) {
      $('#previewClip').show();
      $('#applyAuth').show();
      $('#resetAuth').show();
    } else {
      $('#previewClip').hide();
      $('#applyAuth').hide();
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "validateAuthConfig()");
    return errorMessage;

  }
  function applyAuthConfig() {
    //consoleLogMethodDetailsStart("userFeature.js", "applyAuthConfig()");
    applyAuthConfigMethod(false);
    //consoleLogMethodDetailsEnd("userFeature.js", "applyAuthConfig()");
  }
  function priviewCli() {
    //consoleLogMethodDetailsStart("userFeature.js", "priviewCli()");
    applyAuthConfigMethod(true);
    //consoleLogMethodDetailsEnd("userFeature.js", "priviewCli()");
  }
  function applyAuthConfigMethod(isPriview) {
    //consoleLogMethodDetailsStart("userFeature.js", "applyAuthConfigMethod()");
    var validationMessages = validateAuthConfig();
    if (validationMessages !== '') {
      $('#authValidationMessages').html(validationMessages);
      $('#authValidationPopup').dialog("open");
      //consoleLogMethodDetailsEnd("userFeature.js", "applyAuthConfigMethod()");
      return;
    }
    var cliInput = '';
    cliInput = cliInput + removeExistingAuthConfig(isPriview) + '\n';
    var localServers = $('#localServers').prop('checked');
    var remoteServers = $('#remoteServers').prop('checked');
    var authServices = $('#authMethods').val();

    var profileName = 'LDAP-SERVER';
    var groupLocalOrLDAP = '';
    var valiedNtlm = false;
    var valiedWebauth = false;
    var valiedLdap = false;
    var paramMAP = [];

    var profileName;
    var serverType;
    var serverNm;
    var baseDn;
    var status;
    var par = $('#ldapTable>tbody>tr');
    if (remoteServers === true) {
      var rowCount = par.length;
      if (rowCount > 0) {
        profileName = par.children("td:nth-child(1)").html();
        serverType = par.children("td:nth-child(2)").html();
        serverNm = par.children("td:nth-child(3)").html();
        baseDn = par.children("td:nth-child(4)").html();
        status = par.children("td:nth-child(5)").html();
        var ipversion = 'ipv4';
        if (serverNm !== '' && validateIpv4Address(serverNm)) {
          ipversion = 'ipv4';
        } else if (validateIpv6Address(serverNm)) {
          ipversion = 'ipv6';
        }
        paramMAP.push({name: "profileNm", value: profileName.trim()});
        paramMAP.push({name: "ipv4Address", value: serverNm.trim()});
        paramMAP.push({name: "baseDn", value: baseDn.trim()});
        paramMAP.push({name: "ipversion", value: ipversion.trim()});
        valiedLdap = true;
      }
    }

    if (remoteServers === true && valiedLdap === true) {
      groupLocalOrLDAP = 'group AAA-SG-LDAP ';
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("configLDAPIPv4.txt", paramMAP, true) + '\n';
      valiedNtlm = true;
      valiedWebauth = true;
    }
    if (localServers === true) {
      groupLocalOrLDAP = groupLocalOrLDAP + 'local';
      // cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("configLocalServer.txt", paramMAP, true)+'\n';
      valiedNtlm = false;
      valiedWebauth = true;
    }
    paramMAP.push(
      {name: "groupLocalOrLDAP", value: groupLocalOrLDAP});
    if (authServices === 'webauth' && valiedWebauth) {
      paramMAP.push(
        {name: "authPNm", value: "default"});
      paramMAP.push(
        {name: "authProxyNm", value: "auth-proxy"});
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("configAuthServer.txt", paramMAP, true) + '\n';
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("configWebAuthService.txt", paramMAP, true) + '\n';
      cliInput = cliInput + applyNTLMAuthRoleToAllLANZones(authServices);

    } else if (authServices === 'ntlm' && valiedNtlm) {
      paramMAP.push(
        {name: "authPNm", value: "NTLM-AUTH"});
      paramMAP.push(
        {name: "authProxyNm", value: "network"});
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("configAuthServer.txt", paramMAP, true) + '\n';
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("configNTLMService.txt", paramMAP, true) + '\n';
      cliInput = cliInput + applyNTLMAuthRoleToAllLANZones(authServices);
    }
    if (cliInput !== '' && isPriview === false) {
      //consoleLog(cliInput);
      try {
        deviceCommunicator.getConfigCmdOutput(cliInput);
        deviceCommunicator.doWriteMemory();
      } catch (error) {
        errorLogInConsole(error);
      }
      loadAuthFutureTab();



    } else if (cliInput !== '' && isPriview === true) {
      $('#priviewCliMessages').html(cliInput);
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "applyAuthConfigMethod()");
  }
  function deleteLdap(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "deleteLdap()");
    $('#ldapError').hide();
    try {
      var par = $(this).parent().parent(); //tr

      par.remove();
      var par = $('#ldapTable>tbody>tr');
      var rowCount = par.length;
      if (rowCount > 0) {
        $("#add-ldap").hide();
      } else {
        $("#add-ldap").show();
      }
      $('#applyAuth').show();
      $('#resetAuth').show();
    } catch (error) {
      errorLogInConsole(error);
    }

    e.preventDefault();
    //consoleLogMethodDetailsEnd("userFeature.js", "deleteLdap()");
  }
  ;
  function addLdapToArray(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "addLdapToArray()");
    $('#ldapError').hide();

    var serverType = $('#serverTypes').val();
    var profileNm = $('#profileName').val();
    var serverIp = $('#ldapIpAddress').val();
    var baseDn = $('#ldapBaseDn').val();
    var state = $('#ldapStatus').val();
    if ($('#ldapForm').valid()) {
      $("#ldapTable > tbody").empty();
      // $('<tr></tr>').html('<td>' + profileNm + '</td><td>' + serverType + '</td><td>' + serverIp + '</td><td>' + baseDn + '</td><td>' + state +
      //                     '</td><td class="ccpexpCSSReplaceClass839">'+
      //                     '<span  class="fa fa-pencil-square-o ccpexpCSSReplaceClass840" title="Edit" id="edit-ldap"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+
      //                     '<span  class="fa fa-trash-o ccpexpCSSReplaceClass841" title="Delete" id="delete-ldap" /></td>').appendTo('#ldapTable');
      $('<tr></tr>').html('<td>' + profileNm + '</td><td>' + serverType + '</td><td>' + serverIp + '</td><td>' +
                          baseDn + '</td><td>' + state +
                          '</td><td class="ccpexpCSSReplaceClass842">'+
                          '<span  class="fa fa-pencil-square-o ccpexpCSSReplaceClass843" title="' +
                          $.i18n.prop("edit") + '" id="edit-ldap"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+
                          '<span  class="fa fa-trash-o ccpexpCSSReplaceClass844" title="' +
                          $.i18n.prop("delete") + '" id="delete-ldap" /></td>').appendTo('#ldapTable');
      $('#edit-ldap').bind('click', editLdap);
      $('#delete-ldap').bind('click', deleteLdap);
      $('#add-ldap').hide();
      $('#dialog-form-ldap').dialog("close");
      $('#ldapTable td:nth-child(4),#ldapTable th:nth-child(4)').hide();
      $('#ldapTable td:nth-child(5),#ldapTable th:nth-child(5)').hide();
      $('#applyAuth').show();
      $('#resetAuth').show();
      //consoleLogMethodDetailsEnd("userFeature.js", "addLdapToArray()");
      return;
    }
    $('#dialog-form-ldap').dialog("open");
    //consoleLogMethodDetailsEnd("userFeature.js", "addLdapToArray()");
  }

  function editingUser() {
    //consoleLogMethodDetailsStart("userFeature.js", "editingUser()");
    editrow = $('#userTable tr.hilite');
    username = editrow.children().get(0).textContent;
    password = editrow.children().get(1).textContent;
    privilege = editrow.children().get(2).textContent;
    encrypted = editrow.children().get(4).textContent;
    $("#dialog-form").dialog("open");
    $("#dialog-form").dialog("option", "title", $.i18n.prop("EditUserTitle"));
    edit = true;
    $('#error').hide();
    validatorUser.resetForm();
    $('#userInput').val(username);
    $('#paassworInput').val(password);
    $('#confirmInput').val(password);
    $('#privileges').val(privilege);
    $("#userInput").attr("disabled", true);

    if (encrypted === true) {
      $('input[name=encryptPassword]').attr('checked', true);
    }
    $("#encryptPassword").attr("disabled", true);
    //consoleLogMethodDetailsEnd("userFeature.js", "editingUser()");

  }
  function warningMsg(eUserHostname) {
    //consoleLogMethodDetailsStart("userFeature.js", "warningMsg()");
    $('<div><p> Username ' + eUserHostname + ' '+$.i18n.prop("userFeatNameExists")+'</p></div>').dialog({
      autoOpen: true,
      title: 'User Exists',
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            var responseUserCmd, eUserHostname, userExistarray = [];
            eUserHostname = $('#eUserUserName').val();
            userExistarray.push({name: "eUserHostname", value: eUserHostname});
            $(this).dialog("close");
            blockPage("ApplyConfig");
            setTimeout(function() {
              responseUserCmd = deviceCommunicator.configureCommandsFromTemplate("parserUserDeleteCmd.txt", userExistarray, false);
              parserApply();
              $.unblockUI();
            }, 1000);
          }}, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    //consoleLogMethodDetailsEnd("userFeature.js", "warningMsg()");
  }
  function loadLDAPConfTable(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "loadLDAPConfTable()");
    try {

      $("#ldapTable > tbody").empty();
      $("#remoteServers").prop('checked', false);
      $('#ldapTable').hide();
      $('#add-ldap').hide();
      $('#ldapTable td:nth-child(4),#ldapTable th:nth-child(4)').hide();
      $('#ldapTable td:nth-child(5),#ldapTable th:nth-child(5)').hide();
      authInitialConfig['remoteServers'] = 'N';
      try {
        var responseLDAPConfig = deviceCommunicator.getExecCmdOutput("show ldap server all ");
      } catch (error) {

        return;
      }
      if (responseLDAPConfig === '') {
        //$('#add-ldap').show();
        return;
      }
      var reg = new RegExp("[=]{2,}");
      var ldapConfigs = responseLDAPConfig.split(reg);
      var maxLdapConfs = ldapConfigs.length;
      var hideAdd = false;
      for (var i = 0; i < maxLdapConfs; i++) {
        var ldapConfig = ldapConfigs[i];
        reg = new RegExp("[-]{2,}");
        if (!reg.test(ldapConfig)) {
          continue;
        }
        var ldapConfParams = ldapConfig.split(reg);
        var conf = ldapConfParams[0];
        reg = new RegExp("[\n]");
        var confNames = conf.split(reg);
        var max = confNames.length;
        var serverNm;
        var ipAddress;
        var baseDn;
        var port;
        var state;
        for (var j = 0; j < max; j++) {
          var row = confNames[j];
          var start = row.indexOf(":");
          var end = row.length;
          var value = row.substring(start + 1, end);
          var index = row.indexOf("Server name");
          if (index !== -1) {
            //  var datas = row.split(":");
            serverNm = value;
            continue;
          }
          index = row.indexOf("State");
          if (index !== -1) {

            state = value;
            continue;
          }
          index = row.indexOf("Server Address");
          if (index !== -1) {
            ipAddress = value;
            /*  if(validateIpv4orIpv6Address(ipAddress)){
             $('#ldapErrorMessage').html('Invalid Server IP '+ipAddress);
             $('#ldapError').show();
             deleteLdap(e);
             return;
             }*/
            continue;
          }
          index = row.indexOf("Base-Dn");
          if (index !== -1) {

            baseDn = value;
//                        if(!validateLdapDn(baseDn)){
//                              $('#ldapErrorMessage').html('Invalid Base Dn '+baseDn);
//                            $('#ldapError').show();
//                           deleteLdap(e);
//                           return;
//                         }
            continue;
          }
          index = row.indexOf("Server listening Port");
          if (index !== -1) {

            port = value;
            continue;
          }
        }
        //$('<tr></tr>').html('<td>' + serverNm + '</td><td>LDAP</td><td>' + ipAddress + '</td><td>' + baseDn + '</td><td>' + state +
        //                    '</td><td class="ccpexpCSSReplaceClass845">'+
        //                    '<span id="edit-ldap"  class="fa fa-pencil-square-o  ccpexpCSSReplaceClass846" title="Edit" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+
        //                    '<span id="delete-ldap"  class="fa fa-trash-o  ccpexpCSSReplaceClass847" title="Delete"/></td>').appendTo('#ldapTable');
        $('<tr></tr>').html('<td>' + serverNm + '</td><td>LDAP</td><td>' + ipAddress + '</td><td>' +
                            baseDn + '</td><td>' + state +
                            '</td><td class="ccpexpCSSReplaceClass848">'+
                            '<span id="edit-ldap"  class="fa fa-pencil-square-o  ccpexpCSSReplaceClass849" title="' +
                            $.i18n.prop("edit") + '" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+
                            '<span id="delete-ldap"  class="fa fa-trash-o  ccpexpCSSReplaceClass850" title="' +
                            $.i18n.prop("delete") + '"/></td>').appendTo('#ldapTable');
        hideAdd = true;
        $('#edit-ldap').bind('click', editLdap);
        $('#delete-ldap').bind('click', deleteLdap);
      }
      if (hideAdd) {
        $('#add-ldap').hide();
        $("#remoteServers").prop('checked', true);
        $('#ldapTable').show();
        authInitialConfig['remoteServers'] = 'Y';

      } else {
        $("#remoteServers").prop('checked', false);
        $('#ldapTable').hide();
        $('#add-ldap').hide();
        authInitialConfig['remoteServers'] = 'N';
      }
      $('#ldapTable td:nth-child(4),#ldapTable th:nth-child(4)').hide();
      $('#ldapTable td:nth-child(5),#ldapTable th:nth-child(5)').hide();
    } catch (error) {
      errorLogInConsole('Catched Error:' + error);
      $("#remoteServers").prop('checked', false);
      $('#ldapTable').hide();
      $('#add-ldap').hide();
      authInitialConfig['remoteServers'] = 'N';
      $('#ldapTable td:nth-child(4),#ldapTable th:nth-child(4)').hide();
      $('#ldapTable td:nth-child(5),#ldapTable th:nth-child(5)').hide();
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "loadLDAPConfTable()");
  }
//        function ldapTableHighlight() {
//            $('#ldapTable tbody tr').on('click', (function() {
//                var $tr = $(this).closest("tr");
//                $tr.siblings().removeClass('hilite');
//                $tr.toggleClass('hilite');
//            }));
//        }
  function applyNTLMAuthRoleToAllLANZones(authmethod) {
    //consoleLogMethodDetailsStart("userFeature.js", "applyNTLMAuthRoleToAllLANZones()");
    try {
      var responseLANZones = deviceCommunicator.getExecCmdOutput("show zone security LAN");
    } catch (error) {
      return;
    }
    var reg = new RegExp("[,\\n]");
    var lanNames = responseLANZones.split(reg);
    var max = lanNames.length;
    var i;
    var ipadmisionRoul = '';
    if (authmethod === 'webauth') {
      ipadmisionRoul = 'IP-ADM-WEB-AUTH';
    } else if (authmethod === 'ntlm') {
      ipadmisionRoul = 'IP-ADM-NTLM-AUTH';
    }
    var cliInput = '\n';
    for (i = 2; i < max; i++) {
      var row = lanNames[i];
      if (row !== "") {
        var paramMap = [];
        paramMap.push({name: "laneZoneName", value: row});
        paramMap.push({name: "ipadmisionRoul", value: ipadmisionRoul});
        cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("authRoulToLAN.txt", paramMap, true) + '\n';

      }
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "applyNTLMAuthRoleToAllLANZones()");
    return cliInput;
  }
  function deConfigNTLMAuthRoleToAllLANZones(authServices) {
    //consoleLogMethodDetailsStart("userFeature.js", "deConfigNTLMAuthRoleToAllLANZones()");
    try {
      var responseLANZones = deviceCommunicator.getExecCmdOutput("show zone security LAN");
    } catch (error) {
      return;
    }
    var reg = new RegExp("[,\\n]");
    var lanNames = responseLANZones.split(reg);
    var max = lanNames.length;
    var ipadmisionRoul = '\n';
    if (authServices === 'webauth') {
      ipadmisionRoul = 'IP-ADM-WEB-AUTH';
    } else if (authServices === 'ntlm') {
      ipadmisionRoul = 'IP-ADM-NTLM-AUTH';
    }
    var i;
    var cliInput = '';
    for (i = 2; i < max; i++) {
      var row = lanNames[i];
      if (row !== "") {
        var paramMap = [];
        paramMap.push({name: "laneZoneName", value: row});
        paramMap.push({name: "ipadmisionRoul", value: ipadmisionRoul});
        cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigAuthRoulToLAN.txt", paramMap, true) + '\n';
      }
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "deConfigNTLMAuthRoleToAllLANZones()");
    return cliInput;
  }
  function loadAuthServece(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "loadAuthServece()");
    $('#ldapError').hide();
    var responseAuthConfig = deviceCommunicator.getExecCmdOutput("show running-config | include ip admission name ");
    if (responseAuthConfig === '') {
      //$('#add-ldap').show();
      $("#authMethods").val('none');
      authInitialConfig['authMethods'] = 'none';
      //consoleLogMethodDetailsEnd("userFeature.js", "loadAuthServece()");
      return;
    }
    var reg = new RegExp("[\n]");
    var config = responseAuthConfig.split(reg);
    var max = config.length;
    for (var i = 0; i < max; i++) {
      var row = config[i];
      if (row === '') {
        continue;
      }
      var result = row.search("IP-ADM-WEB-AUTH");
      if (result >= 0) {
        $("#authMethods").val('webauth');
        authInitialConfig['authMethods'] = 'webauth';
        //consoleLogMethodDetailsEnd("userFeature.js", "loadAuthServece()");
        return;
      }
      result = row.search("IP-ADM-NTLM-AUTH");
      if (result >= 0) {
        $("#authMethods").val('ntlm');
        authInitialConfig['authMethods'] = 'ntlm';
        //consoleLogMethodDetailsEnd("userFeature.js", "loadAuthServece()");
        return;
      }

    }
    //consoleLogMethodDetailsEnd("userFeature.js", "loadAuthServece()");
  }
  function loadLocalServer(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "loadLocalServer()");
    $('#ldapError').hide();
    var responseLocalConfig = deviceCommunicator.getExecCmdOutput("show running-config | include aaa authentication login default ");
    if (responseLocalConfig === '') {
      //$('#add-ldap').show();
      $("#localServers").prop('checked', false);
      authInitialConfig['localServers'] = 'N';
      //consoleLogMethodDetailsEnd("userFeature.js", "loadLocalServer()");
      return;
    }
    var reg = new RegExp("[\n]");
    var config = responseLocalConfig.split(reg);
    var max = config.length;
    for (var i = 0; i < max; i++) {
      var row = config[i];
      if (row === '') {
        continue;
      }
      var result = row.search("local");
      if (result >= 0) {
        $("#localServers").prop('checked', true);
        authInitialConfig['localServers'] = 'Y';
      } else {
        $("#localServers").prop('checked', false);
        authInitialConfig['localServers'] = 'N';
      }

    }
    //consoleLogMethodDetailsEnd("userFeature.js", "loadLocalServer()");
  }
  function loadAuthFutureTab(e) {
    //consoleLogMethodDetailsStart("userFeature.js", "loadAuthFutureTab()");
    $('#ldapError').hide();
    authInitialConfig = [];
    $('#previewClip').hide();
    $('#applyAuth').hide();
    $('#resetAuth').hide();
    loadLocalServer(e);
    loadLDAPConfTable(e);
    loadAuthServece(e);
    // ldapTableHighlight();
    //consoleLogMethodDetailsEnd("userFeature.js", "loadAuthFutureTab()");
  }
  function loadTab(index) {
    //consoleLogMethodDetailsStart("userFeature.js", "loadTab()");
    switch (index) {
      case 0:
        blockPage("Loading");
        setTimeout(function() {
          loadAuthFutureTab();
          $.unblockUI();
        }, 1000);
        break;
      case 1:
        blockPage("Loading");
        setTimeout(function() {
          groupListRefresh();
          $.unblockUI();
        }, 1000);
        break;
      case 2:
        blockPage("Loading");
        setTimeout(function() {
          refresh();
          $.unblockUI();
        }, 1000);
        break;
      case 3:
        blockPage("Loading");
        setTimeout(function() {
          getPorts();
          $.unblockUI();
        }, 1000);
        break;
    }
    //consoleLogMethodDetailsEnd("userFeature.js", "loadTab()");
  }
  function userFeatureLoading() {
    //consoleLogMethodDetailsStart("userFeature.js", "userFeatureLoading()");
    $("#tabs").hide();
    loadAndDisplayLanguages();

    //This function should be called first
    $('#hideAll').css('display', 'block');
    // getPorts();
    $("#tabs").tabs();

    //var authInitialConfig = [];
    $('#previewClip').hide();
    $('#applyAuth').hide();
    // setTimeout(function() {
    //     loadAuthFutureTab();
    //     $.unblockUI();
    // }, 1000);
    //  e.preventDefault();
    var $userFuterTab = $('#tabs').tabs();
    $userFuterTab.tabs({disabled: [3]});

    if (!licenseCheck && iosk9check !== "SecurityEnable") {
      $userFuterTab.tabs({disabled: [0, 3]});
      $userFuterTab.tabs({active: 1});
      groupListRefresh();

    }
    else {
      if (iosk9check === "SecurityEnable") {
        $userFuterTab.tabs({disabled: [3]});
      }
      $userFuterTab.tabs({active: 0});
      var paramMap = [];
      deviceCommunicator.configureCommandsFromTemplate("enableAAAConfig.txt", paramMap, false);
      loadAuthFutureTab();
    }
    $("#tabs").tabs({
      activate: function(event, ui) {
        loadTab(ui.newTab.index());

      },
      active: 0
    });
    $("#tabs").on("tabsactivate", function(event, ui) {
      $('#transportError').hide();
      $('.GroupPopup').hide();
      $('#userError').hide();
      $('#groupError').hide();
      groupRefreshing();
    });

    // loadAuthFutureTab();
    $('#parserForm').validate({
      errorElement: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    // loadUserFutureTab();
    $("#tabs").bind("tabsselect", function() {
      tabRefresh();
    });
    $('#error').hide();
    $('#userError').hide();
    $('#userdialogError').hide();

    validatorUser = $('#userForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    validatorGroup = $('#groupForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    validatorLDAP = $('#ldapForm').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    $("#tabs").show();
    $("#dialog-form").dialog({
      autoOpen: false,
      modal: true,
      height: 375,
      width: 650,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            if ($('#userForm').valid()) {
              $(this).dialog("close");
              blockPage("Applying");
              setTimeout(function() {
                $('#userdialogError').hide();
                var arr, response, editrow, editUsername, encryptValue, encryptArray, usserArray;
                arr = $('#userForm').formToArray();
                try {
                  if (edit) {
                    editrow = $('#userTable tr.hilite');
                    editUsername = editrow.children().get(0).textContent;
                    encryptValue = editrow.children().get(3).textContent;
                    encryptArray = [{name: "privileges", value: encryptValue}];
                    usserArray = [{name: "username", value: editUsername}];
                    arr.push({name: "username", value: editUsername});
                    response = deviceCommunicator.configureCommandsFromTemplate("userFormDelete.txt", arr, false);
                  }
                  if ($('#encryptPassword').is(':checked')) {
                    response = deviceCommunicator.configureCommandsFromTemplate("userSecretCreate.txt", arr, false);
                  } else {
                    response = deviceCommunicator.configureCommandsFromTemplate("userPasswordCreate.txt", arr, false);
                  }
                  var selGroup = $('#groupsList').val();
                  if (selGroup != 'SelectGroup' && selGroup != 'undefined') {
                    arr.push({name: "groupName", value: selGroup});
                    response = deviceCommunicator.configureCommandsFromTemplate("userToGroup.txt", arr, false);
                  }
                  $("#dialog-form").dialog("close");
                  refresh();
                  $.unblockUI();
                  deviceCommunicator.doWriteMemory();
                } catch (error) {
                  $("#dialog-form").dialog("open");
                  $('#userdialogErrorMessage').html(error.errorResponse);
                  $('#userdialogError').show();
                  $.unblockUI();
                }
              }, 1000);
            }
          }}, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }

    });

    $("#dialog-form-groups").dialog({
      autoOpen: false,
      height: 240,
      width: 650,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function(e) {

            var arr = [], response;
            $('#groupError').hide();

            try {
              if ($('#groupForm').valid()) {
                blockPage("Applying");
                setTimeout(function() {

                  var xml;
                  if (!shRunFormatLatest) {
                    shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
                    shRunFormatLatest = true;
                  }
                  xml = shRunFormatOutput;
                  var groupName = $("#group-name").val().trim();
                  //if ($("#groupLocal").is(':checked')) {
                  //  groupName='local-d_'+groupName;
                  //}else if ($("#groupActive").is(':checked')) {
                  //  groupName='active-d_'+groupName;
                  //}
                  var groupExists = false;
                  $(xml).find('aaa').each(function() {
                    var group = $(this).find('Name').text();
                    if (group != "" && group == groupName) {
                      groupExists = true;
                      return false;
                    }
                  });
                  if (!groupExists) {
                    $('#dialog-form-groups').dialog("close");
                    arr.push({
                      name: "groupName",
                      value: groupName
                    });
                    response = deviceCommunicator.configureCommandsFromTemplate("group.txt", arr, false);
                    arr.length = 0;
                    groupListRefresh();
                    $("#group-name").val("");
                    $('#groupForm').resetForm();
                    $('#groupError').hide();
                    $.unblockUI();
                  } else {
                    //$('#groupErrorMessage').html('Group Name already exists!');
                    $('#groupErrorMessage').html($.i18n.prop("groupNameExists"));
                    $('#groupError').show();
                    $.unblockUI();
                  }

                }, 1000);
              }
            }
            catch (error) {
              $('#groupErrorMessage').html(error.errorResponse);
              $('#groupError').show();
              $.unblockUI();
              return false;
            }
            e.preventDefault();

          }}, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

    $("#userselectRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            if (groupFlag) {
              $("#delete-group").trigger("click");
            } else if (userFlag) {
              $("#delete-user").trigger("click");
            } else {
              $("#userselectRow").attr("title", $.i18n.prop("selectaHeading"));
            }
            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("cancel"),
          click: function() {
            userFlag = false;
            $(this).dialog("close");
          }
        }],
      close: function() {
        userFlag = false;
      }
    });

    //buttons for user table
    $("#add-user")
      .button()
      .click(function() {
        $('#userdialogError').hide();
        edit = false;
        $("#dialog-form").dialog("open");
        $('#userForm').resetForm();
        $('#error').hide();
        validatorUser.resetForm();
        $("#userInput").attr("disabled", false);
        $("#encryptPassword").attr("disabled", false);
        $('input[name=encryptPassword]').attr('checked', true);
        $('#privileges').attr("disabled", false);
        $("#dialog-form").dialog("option", "title", $.i18n.prop("AddUserTitle"));

      });

    $("#add-group")
      .button()
      .click(function() {
        $('#userdialogError').hide();
        $("#dialog-form-groups").dialog("open");
        $('#groupForm').resetForm();
        $('#error').hide();
        $('#groupError').hide();
        validatorGroup.resetForm();
        //$("#dialog-form-groups").dialog("option", "title", "Add Group");
        $("#dialog-form-groups").dialog("option", "title", $.i18n.prop("userAddGroup"));

      });

    $("#edit-user")
      .button()
      .click(function() {
        var editrow, editadminarr = [];
        //var username, password, privilege, encrypted;
        $('#userdialogError').hide();
        editrow = $('#userTable tr.hilite');

        var xmlEditAdminCheck;
        if (!shRunFormatLatest) {
          shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
          shRunFormatLatest = true;
        }
        xmlEditAdminCheck = shRunFormatOutput;
        $(xmlEditAdminCheck).find('username').each(function() {
          if ($(this).find('ViewName').length === 0 && $(this).find('UserPrivilegeLevel').text() === "15") {
            var editUserParserName = $(this).find('UserName').text();
            if (editUserParserName !== "") {
              editadminarr.push({name: "editUserParserName", value: editUserParserName});
            }
          }
        });

        if (editrow.children().get(0)) {
          var viewCheck = editrow.children().get(5).textContent;
          var Privlegecheck = editrow.children().get(2).textContent;
          if (Privlegecheck === "15") {
            if (editadminarr.length === 1) {
              if (viewCheck === "NO") {
                editingUser();
                $("#privileges").attr("disabled", true);
              } else {
                editingUser();
                $("#privileges").attr("disabled", false);
              }
            } else {
              editingUser();
              $("#privileges").attr("disabled", false);
            }
          } else {
            editingUser();
            $("#privileges").attr("disabled", false);
          }
        } else {
          $("#userselectRow").dialog("open");
        }
      });
    $(".user-delete").live('click', function(e) {
      userFlag = true;
      $this = $(this).closest("tr");
      $("#usertablechkbx").prop('checked', false);
      var userChkbox = $this.find('input:checkbox').eq(0);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      userChkbox.prop('checked', true);
      enableDisableButton("userTable", "add-user");
      $("#delete-user").removeClass("ui-state-disabled");
      $("#delete-user").attr("disabled", false);
      //$("#userSelectRowStr").text("This user will be deleted. Do you want to continue?");
      //$("#userselectRow").dialog("option", "title","Alert");
      $("#userSelectRowStr").text($.i18n.prop("userSelectRowStrMessg"));
      $("#userselectRow").dialog("option", "title", $.i18n.prop("alertTitle"));

      $("#userselectRow").dialog("open");
      //$("#delete-user").trigger("click");

    });

    $("#delete-user")
      .button()
      .click(function() {
        var deleterow, deladminarr = [];
        //var deletUsername, arr, privilege, selectedPrivlege, allrows;
        var selectedRows = $("#userTable tbody input:checkbox:checked").length;
        var usrRowCount = $('#userTable tbody tr').length;
        deleterow = $('#userTable tr.hilite');
        if (selectedRows == 0) {
          $.unblockUI();
          //$("#userSelectRowStr").text("Select a Row to Edit/Delete.");
          $("#userSelectRowStr").text($.i18n.prop("selectRowStr"));
          $("#userselectRow").dialog("open");
        } else if (selectedRows === usrRowCount && userFlag === false) {
          $.unblockUI();
          //$("#userSelectRowStr").text("Not possible to delete all rows.");
          $("#userSelectRowStr").text($.i18n.prop("notPosDelRow"));
          $("#userselectRow").dialog("open");
        } else {
          blockPage("Applying");
          setTimeout(function() {
            var xmldelAdminCheck;
            if (!shRunFormatLatest) {
              shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
              shRunFormatLatest = true;
            }
            xmldelAdminCheck = shRunFormatOutput;
            $(xmldelAdminCheck).find('username').each(function() {
              if ($(this).find('ViewName').length === 0 && $(this).find('UserPrivilegeLevel').text() === "15") {
                var delUserParserName = $(this).find('UserName').text();
                if (delUserParserName !== "") {
                  deladminarr.push({name: "delUserParserName", value: delUserParserName});
                }
              }
            });
            if (selectedRows > 1 && !userFlag) {
              $("#userTable tbody input:checkbox").each(function() {
                if (this.checked) {
                  deleterow = $(this).closest("tr");
                  deleteUser(deleterow, deladminarr);
                }
              });
            } else {
              deleteUser(deleterow, deladminarr);
            }
            userFlag = false;
            refresh();
            $.unblockUI();
            deviceCommunicator.doWriteMemory();
          }, 1000);
        }
      });
    $(".group-delete").live('click', function(e) {
      groupFlag = true;
      $this = $(this).closest("tr");
      var gpChkbox = $this.find('input:checkbox').eq(0);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      $("#GPchkbox").prop('checked', false);
      gpChkbox.prop('checked', true);
      $("#userSelectRowStr").text($.i18n.prop("groupSelectRowStrMessg"));
      enableDisableButton("groupTable", "add-group");
      $("#delete-group").removeClass("ui-state-disabled");
      $("#delete-group").attr("disabled", false);
      //$("#userSelectRowStr").text("This group will be deleted. Do you want to continue?");
      //$("#userSelectRowStr").text($.i18n.prop("validateGroupDeleted"));
      $("#userselectRow").dialog("option", "title", $.i18n.prop("alertTitle"));
      $("#userselectRow").dialog("option", "title", "Alert");
      $("#userselectRow").dialog("open");
      //$("#delete-group").trigger("click");

    });
    $("#delete-group")
      .button()
      .click(function() {
        var deleterow, arr;
        //var groupPrefix,deleteGroup, deleteGroupType;
        var selectedRows = $("#groupTable tbody input:checkbox:checked").length;
        deleterow = $('#groupTable tr.hilite');
        if (selectedRows == 0) {
          $.unblockUI();
          $("#userselectRow").dialog("open");
        } else {
          blockPage("Applying");
          setTimeout(function() {
            if (selectedRows > 1 && !groupFlag) {
              $("#groupTable tbody input:checkbox").each(function() {
                if (this.checked) {
                  deleterow = $(this).closest("tr");
                  deleteGroup = deleterow.children().get(1).textContent;
                  deleteGroup = deleteGroup;
                  arr = [{name: "groupName", value: deleteGroup}];
                  response = deviceCommunicator.configureCommandsFromTemplate("deleteGroup.txt", arr, false);
                  arr.length = 0;
                }
              });
            } else {
              deleteGroup = deleterow.children().get(1).textContent;
              deleteGroup = deleteGroup;
              arr = [{name: "groupName", value: deleteGroup}];
              response = deviceCommunicator.configureCommandsFromTemplate("deleteGroup.txt", arr, false);
              arr.length = 0;
            }
            groupFlag = false;
            groupListRefresh();
            $.unblockUI();
          }, 1000);
        }
      });



    $("#Apply")
      .button()
      .click(function(e) {
        if ($('#parserForm').valid()) {
          blockPage("Applying");
          setTimeout(function() {
            //var oneusername;
            var oneUserName, onearr = [], usernameExists = false, eUserHostname;
            $('#transportError').hide();
            eUserHostname = $('#eUserUserName').val();

            var xmlApply;
            if (!shRunFormatLatest) {
              shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
              shRunFormatLatest = true;
            }
            xmlApply = shRunFormatOutput;
            $(xmlApply).find('UserName').each(function() {
              oneUserName = $(this).find('UserName').text();
              if (oneUserName !== "") {
                onearr.push({name: "oneusername", value: oneUserName});
              }
            });

            for (i = 0; i < onearr.length; i++) {
              if (eUserHostname === onearr[i].value) {
                $.unblockUI();
                warningMsg(eUserHostname);
                usernameExists = true;
              }
            }
            try {
              if (usernameExists === false) {
                parserApply();
              }
            } catch (error) {
              $('#transportErrorMessage').html(error.errorResponse);
              $('#transportError').show();
              $.unblockUI();
            }
          }, 1000);
          e.preventDefault();

        }
      });

    $("#DeleteView")
      .button()
      .click(function(e) {
        var eUserHostname, eUserPassword, eUserSecret, eUserConfirmSecret, responseAaaCmds, responseParserCmds, emptyArray = [], arrOldUserValues = [];
        $('#transportError').hide();
        eUserHostname = $('#eUserUserName').val();
        eUserPassword = $('#eUserPassword').val();
        eUserSecret = $('#SecretInput').val();
        eUserConfirmSecret = $('#ConfirmSecretInput').val();
        blockPage("Applying");
        setTimeout(function() {
          try {
            deviceCommunicator.configureCommandsFromTemplate("NofilePrivilege.txt", emptyArray, false);
          } catch (error) {
            //no need to handle the error as the CLI "file privilege 0" is not supported in IOS < 15.2
          }

          try {
            if (eUserHostname !== null && eUserPassword !== null) {
              arrOldUserValues.push({name: "eUserHostname", value: eUserHostname},
                                    {name: "eUserPassword", value: eUserPassword},
                                    {name: "eUserSecret", value: eUserSecret},
                                    {name: "eUserConfirmSecret", value: eUserConfirmSecret});
              responseAaaCmds = deviceCommunicator.configureCommandsFromTemplate("parserCLIDeleteAaaCommand.txt", arrOldUserValues, false);
              responseParserCmds = deviceCommunicator.configureCommandsFromTemplate("parserCLIDeleteView.txt", arrOldUserValues, false);
            }
          } catch (error) {
            $('#transportErrorMessage').html(error.errorResponse);
            $('#transportError').show();
          }


          parserRefreshing();
          $.unblockUI();
          deviceCommunicator.doWriteMemory();
        }, 1000);
        e.preventDefault();
      });
    /********************************************/
    //var serversList = [];
    $("#add-ldap")
      .button()
      .click(function(e) {
        e.preventDefault();
        $('#ldapError').hide();
        try {
          $("#ldapForm").validate().resetForm();
          $('#profileName').val('LDAP-SERVER');
          $('#profileNmTr').hide();
          $('#ldapStatus').val('');
          $('#ldapIpAddress').val('');
          $('#ldapBaseDn').val('');
          $('#ldapStatusTr').hide();
          $("#dialog-form-ldap").dialog("open");
        } catch (error) {
          errorLogInConsole(error);
        }
      });
    $("#applyAuth")
      .button()
      .click(function(e) {
        e.preventDefault();
        $('#ldapError').hide();
        blockPage("Loading");
        try {
          setTimeout(function() {
            applyAuthConfig();
            $.unblockUI();
          }, 1000);
        } catch (error) {
          errorLogInConsole(error);
        }
      });
    $("#resetAuth")
      .button()
      .click(function(e) {
        e.preventDefault();
        $('#ldapError').hide();
  blockPage("Loading");
        try {
          setTimeout(function() {
            loadAuthFutureTab();
            $.unblockUI();
          }, 1000);

        } catch (error) {
          errorLogInConsole(error);
        }

      });
    $("#previewClip")
      .button()
      .click(function(e) {
        e.preventDefault();
        $('#ldapError').hide();
        try {
          setTimeout(function() {
            blockPage("Loading");
            priviewCli();
            $("#priviewCliPopup").dialog("open");
            $.unblockUI();
          }, 1000);
        } catch (error) {
          errorLogInConsole(error);
        }
      });
    $("#remoteServers").click(function() {
      var value = $("#remoteServers").prop('checked');
      if (value === true) {
        // $('#applyAuth').show();
        $("#ldapTable").show();
        var par = $('#ldapTable>tbody>tr');
        var rowCount = par.length;
        if (rowCount > 0) {
          $("#add-ldap").hide();
        } else {
          $("#add-ldap").show();
        }
        $('#ldapTable td:nth-child(4),#ldapTable th:nth-child(4)').hide();
        $('#ldapTable td:nth-child(5),#ldapTable th:nth-child(5)').hide();

      } else {
        $("#ldapTable").hide();
        $("#add-ldap").hide();
      }
      var validationMessages = validateAuthConfig();
      if (validationMessages !== '') {
        $('#authValidationMessages').html(validationMessages);
        $('#authValidationPopup').dialog("open");
        $('#remoteServers').prop('checked', false);
        $("#ldapTable").hide();
        $("#add-ldap").hide();
        return;
      }
    });
    $("#localServers").click(function() {
      var isLocal = $('#localServers').prop('checked');
      var isRemote = $('#remoteServers').prop('checked');
      if (isLocal === false && isRemote === false) {
        $('#authMethods').val('none');
      }
      if (isLocal === true) {
        $('#authMethods').val('webauth');
      }
      var validationMessages = validateAuthConfig();
      if (validationMessages !== '') {
        $('#authValidationMessages').html(validationMessages);
        $('#authValidationPopup').dialog("open");
        $('#localServers').prop('checked', false);
        return;
      }
    });

    $("#authMethods").change(function() {
      var validationMessages = validateAuthConfig();
      if (validationMessages !== '') {
        $('#authValidationMessages').html(validationMessages);

        $('#authValidationPopup').dialog("open");

        return;
      }
      var authServices = $('#authMethods').val();
      if (authServices === 'none') {
        return;
      }
      var responseLANZones = '';
      try {
        responseLANZones = deviceCommunicator.getExecCmdOutput("show zone security LAN");
      } catch (error) {
        isEmptyBlock = true;
      }
      var reg = new RegExp("[,\\n]");
      var lines = responseLANZones.split(reg);
      var linesSize = lines.length;
      if (linesSize <= 2) {
        //$('#authWarningMessages').html('No Interface is associated with LAN Zone. Do you want to continue?');
        $('#authWarningMessages').html($.i18n.prop("noInterfaceAssociated"));
        $('#authWarningPopup').dialog("open");
      }

    });
    //var serversList = [];
    $("#dialog-form-ldap").dialog({
      autoOpen: false,
      height: 430,
      width: 650,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function(e) {

            addLdapToArray(e);

          }}, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
            //cancelLdap();
          }
        }],
      close: function() {
        $(this).dialog("close");
      }
    });
    $("#authValidationPopup").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      close: function() {
        $(this).dialog("close");
      }
    });
    $("#priviewCliPopup").dialog({
      autoOpen: false,
      height: 500,
      width: 600,
      modal: true,
      close: function() {
        $(this).dialog("close");
      }
    });
    $("#authWarningPopup").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yes"),
          click: function(e) {
            $(this).dialog("close");

          }}, {
          text: $.i18n.prop("no"),
          click: function() {
            $('#authMethods').val('none');
            $(this).dialog("close");
            //cancelLdap();
          }
        }],
      close: function() {
        $(this).dialog("close");
      }
    });
    $('#hideAll').css('display', 'none');
    $('#delete-group').attr('disabled', 'disabled');
    $("#delete-group").attr("disabled", "disabled");
    $("#delete-group").addClass("ui-button-disabled");
    $("#delete-group").addClass("ui-state-disabled");
    $('#delete-user').attr('disabled', 'disabled');
    $("#delete-user").attr("disabled", "disabled");
    $("#delete-user").addClass("ui-button-disabled");
    $("#delete-user").addClass("ui-state-disabled");
    //consoleLogMethodDetailsEnd("userFeature.js", "userFeatureLoading()");
  }

  return {
    userFeatureLoading: userFeatureLoading

  };
}());

//$(document).click(function(e)
//{
//    var container = $("#groupMngForUser");
//    if (!container.is(e.target) && container.has(e.target).length === 0)
//    {
//        container.fadeOut('slow');
//    }
//});



var wireless = (function() {

  function wirelessLoading() {
    //consoleLogMethodDetailsStart("wireless.js", "wirelessLoading()");
    loadccpExpressLanguages();
    //var xml
    var  wlanApIPAddress, href;
    $('#wirelessError').hide();
    $('#infoMessageForCrossLaunch').hide();
    $('#unableToAccessWlanApError').hide();
    blockPage("Loading");
    $.browser.chrome = /chrome/.test(navigator.userAgent.toLowerCase());
    validatorUser = $('#unableToAccessWlanApForm').validate({
      errorElement: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });

    $("#unableToAccessWlan-dialogForm").dialog({
      autoOpen: false,
      modal: true,
      height: 210,
      width: 595,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            if ($('#unableToAccessWlanApForm').valid()) {
              wlanApIPAddress = $('#ipAddressInput').val();
              $("#unableToAccessWlan-dialogForm").dialog("close");
              href = $(location).attr('href');
              if ($.browser.chrome || $.browser.msie) {
                $('#infoMessageForCrossLaunch').show();
                if (href.indexOf("EndUser") === -1) {
                  // Admin view
                  if ($.browser.msie) {
                    $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//' + wlanApIPAddress + '/ccpExpress_ap_express-security' + $.i18n.prop("langwage") + '.shtml');
                  } else {
                    $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpress_ap_express-security' + $.i18n.prop("langwage") + '.shtml');
                  }
                } else {
                  if ($.browser.msie) {
                    $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//' + wlanApIPAddress + '/ccpExpressEU_ap_express-security.shtml');
                  } else {
                    $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpress_ap_express-security_' + $.i18n.prop("langwage") + '.shtml');
                  }
                }
              }
              if (href.indexOf("EndUser") === -1) {
                // Admin view
                $('#wlanFrame').attr('src', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpress_ap_express-security_' + $.i18n.prop("langwage") + '.shtml');
              } else {
                $('#wlanFrame').attr('src', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpressEU_ap_express-security.shtml');
              }
            }
          }
        }]

    });

    $("#unableToAccessAPDialog").dialog({
      autoOpen: false,
      height: 250,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    wlanApIPAddress = getApIpAddress();
    //consoleLogMethodDetailsEnd("wireless.js", "wirelessLoading()");
  }
  function loadccpExpressLanguages() {
    $("#wifiAccessPointBVI").text($.i18n.prop("wifiAccessPointBVI"));

  }

  function openWlanApInterface(wlanApIPAddress) {
    //consoleLogMethodDetailsStart("wireless.js", "openWlanApInterface()");
    try {

      $.unblockUI();
      hreflink = $(location).attr('href');
      hrefip = hreflink.split("/");
      hrefipextract = hrefip[2];
      if (hrefipextract === wlanApIPAddress) {
        throwError();
        return;
      }

      if (!wlanApIPAddress) {
        throwError();
        return;
      }

      if ($.browser.chrome || $.browser.msie) {
        $('#infoMessageForCrossLaunch').show();
        if ($(location).attr('href').indexOf("EndUser") === -1) {
          // Admin view
          if ($.browser.msie) {
            $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//' + wlanApIPAddress + '/ccpExpress_ap_express-security_' + $.i18n.prop("langwage") + '.shtml');
          } else {
            $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpress_ap_express-security_' + $.i18n.prop("langwage") + '.shtml');
          }
        } else {
          if ($.browser.msie) {
            $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//' + wlanApIPAddress + '/ccpExpressEU_ap_express-security.shtml');
          } else {
            $("a#wirelessLink").attr('href', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpress_ap_express-security_' + $.i18n.prop("langwage") + '.shtml');
          }
        }

      }

    } catch (error) {
      $('#wirelessErrorMessage').html(error.errorResponse);
      $('#wirelessError').show();
      return false;
    }
    href = $(location).attr('href');
    if (href.indexOf("EndUser") === -1) {
      // Admin view
      if ($.browser.msie) {
        $('#wlanFrame').hide();
      } else {
        $('#wlanFrame').attr('src', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpress_ap_express-security_' + $.i18n.prop("langwage") + '.shtml');
      }
    } else {
      if ($.browser.msie) {
        $('#wlanFrame').hide();
      } else {
        $('#wlanFrame').attr('src', $(location).attr('protocol') + '//cisco:cisco@' + wlanApIPAddress + '/ccpExpressEU_ap_express-security.shtml');
      }
    }
    //consoleLogMethodDetailsEnd("wireless.js", "openWlanApInterface()");
  }

  function getApIpAddress() {
    //consoleLogMethodDetailsStart("wireless.js", "getApIpAddress()");
    var wlanIP, macTableEntry, arpTableEntry, wlanMacAddress, arpTableArray = [];
    if (deviceCommunicator.getExecCmdOutput("show cdp").indexOf('CDP is not enabled') != -1) {
      // if cdp is not enabled by default, try ip from arp table. if ip is not available in arp table enable cdp, get AP ip, ping to the ip, get ip from arp table and disable cdp.
      macTableEntry = deviceCommunicator.getExecCmdOutput("show mac-address-table | include Wlan-G");
      wlanMacAddress = $.trim(macTableEntry.substring(0, macTableEntry.indexOf("Dynamic")));
      if (!wlanMacAddress) {
        enableCdpAndGetApIP();
        //consoleLogMethodDetailsEnd("wireless.js", "getApIpAddress()");
        return false;
      }
      arpTableEntry = deviceCommunicator.getExecCmdOutput("show arp | include " + wlanMacAddress);
      if (arpTableEntry.length > 0) {
        arpTableArray = arpTableEntry.split(" ");
        if (arpTableArray.length < 2) {
          enableCdpAndGetApIP();
          //consoleLogMethodDetailsEnd("wireless.js", "getApIpAddress()");
          return false;
        }
        wlanIP = arpTableArray[2];
        openWlanApInterface(wlanIP);
      } else {
        enableCdpAndGetApIP();
      }
    } else {
      // if cdp is already enabled get the ip from "show cdp neighbors detail " command
      wlanIP = getApIpFromCdpNeighbor();
      openWlanApInterface(wlanIP);
    }
    //consoleLogMethodDetailsEnd("wireless.js", "getApIpAddress()");
  }

  function enableCdpAndGetApIP() {
    //consoleLogMethodDetailsStart("wireless.js", "enableCdpAndGetApIP()");
    var refreshIntervalId, arr = [], count = 0, wlanIP;
    deviceCommunicator.configureCommandsFromTemplate("cdpRun.txt", arr, false);
    refreshIntervalId = setInterval(function() {
      wlanIP = getApIpFromCdpNeighbor();
      count++;
      if (wlanIP) {
        deviceCommunicator.getExecCmdOutput("ping " + wlanIP);
        try {
          deviceCommunicator.configureCommandsFromTemplate("noCdpRun.txt", arr, false);
        } catch (nocdpEx) {
                    isEmptyBlock = true;
        }
        clearInterval(refreshIntervalId);
        openWlanApInterface(wlanIP);
      }
      if (count > 20) {
        try {
          deviceCommunicator.configureCommandsFromTemplate("noCdpRun.txt", arr, false);
        } catch (nocdpEx2) {
                    isEmptyBlock = true;
        }
        clearInterval(refreshIntervalId);
        throwError();
      }
    }, 3000);
    //consoleLogMethodDetailsEnd("wireless.js", "enableCdpAndGetApIP()");
  }

  function getApIpFromCdpNeighbor() {
    //consoleLogMethodDetailsStart("wireless.js", "getApIpFromCdpNeighbor()");
    var wlanIp;
    var xml = deviceCommunicator.getExecCmdOutput("show cdp neighbors detail | format " + deviceCommunicator.getInstallDir() + "/odm/wirelessshCdpNeighborDetail.odm");
    $(xml).find('Neighbor').each(function() {
      if ($(this).find('Interface').text().toLowerCase().indexOf('wlan') != -1) {
        wlanIp = $(this).find('IPaddress').text();
      }
    });
    //consoleLogMethodDetailsEnd("wireless.js", "getApIpFromCdpNeighbor()");
    return wlanIp;
  }


  function throwError() {
    //consoleLogMethodDetailsStart("wireless.js", "throwError()");
    $.unblockUI();
    $("#unableToAccessWlan-dialogForm").dialog("open");
    //$('<p id = "unableToAccessWlanApInfo" class="ccpexpCSSReplaceClass882"></p>').html('CCPExpress is unable to determine the IP Address of the wireless lan access point using Cisco Discovery Protocol. You must enable CDP using the <b> cdp run </b> command OR key in the IP Address here.').prependTo('#unableToAccessWlanApForm').addClass('messagewireless');
    $('<p id = "unableToAccessWlanApInfo" class="ccpexpCSSReplaceClass883"></p>').html($.i18n.prop("ccpUnableToDetermineStr1") + '<b> cdp run </b>' + $.i18n.prop("ccpUnableToDetermineStr2")).prependTo('#unableToAccessWlanApForm').addClass('messagewireless');
    $("#unableToAccessWlan-dialogForm").dialog("option", "title", $.i18n.prop("wifiAccessTitle")).addClass('message1');
    $('#ipAddressInput').val("");
    //consoleLogMethodDetailsEnd("wireless.js", "throwError()");
  }
  return {
    wirelessLoading: wirelessLoading
  };
}());
var phonehome = (function() {
  //var caa_url = "https://demo.ciscoactiveadvisor.com/";
  var caa_url = "https://www.ciscoactiveadvisor.com/";
  //var caa_url = "https://op2-dev2-wprox1.cisco.com/";
  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {

    //consoleLogMethodDetailsStart("phonehome.js", "loadAndDisplayLanguages()");

    $("#caaTab").text($.i18n.prop("caaTab"));
    $("#caaLinksTab").text($.i18n.prop("caaLinksTab"));
    $("#phonehome-legend").text($.i18n.prop("phonehome-legend"));
    $("#ccoUserLabel").html($.i18n.prop("ccoUserLabel") + ' <span class="ccpexpCSSReplaceClass820">*</span>:');
    $("#ccoPasswordLabel").html($.i18n.prop("ccoPasswordLabel") + ' <span class="ccpexpCSSReplaceClass821">*</span>:');
    $("#clearBtn").text($.i18n.prop("clearBtn"));
    $("#authenticateBtn").text($.i18n.prop("authenticateBtn"));
    $("#authenticatedBtn").text($.i18n.prop("authenticatedBtn"));
    $("#uploadBtn").text($.i18n.prop("uploadBtn"));
    $("#phonehomeLinkLegend").text($.i18n.prop("phonehomeLinkLegend"));
    $("#caaIntro").text($.i18n.prop("caaIntro"));
    $("#caaDevices").text($.i18n.prop("caaDevices"));
    $("#caaAlert").text($.i18n.prop("caaAlert"));
    $("#caaDescP1").text($.i18n.prop("caaDescP1"));
    $("#caaDescP2").text($.i18n.prop("caaDescP2"));

    $("#caaDescP3One").text($.i18n.prop("caaDescP3One"));
    $("#caaDescP3Two").text($.i18n.prop("caaDescP3Two"));
    $(".clickHere").text($.i18n.prop("clickHereStr"));

    $("#caaDescLi1").text($.i18n.prop("caaDescLi1"));
    $("#caaDescLi2").text($.i18n.prop("caaDescLi2"));
    $("#caaDescLi3").text($.i18n.prop("caaDescLi3"));
    $("#caaOffer").text($.i18n.prop("caaOffer"));
    $("#phoneHelpMessOne").text($.i18n.prop("phoneHelpMessOne"));
    $("#phoneHelpMessOneFullStop").text($.i18n.prop("fullStop"));
    $("#sampleConfigLink").text($.i18n.prop("clickHereStr"));

    $("#clickHere").text($.i18n.prop("clickHereStr"));
    $("#clickHereID").text($.i18n.prop("clickHereStr"));
    $("#clickHereFullStop").text($.i18n.prop("fullStop"));

    $("#phoneHelpMessTwo").text($.i18n.prop("phoneHelpMessTwo"));
    $("#phonehomedesc2").text($.i18n.prop("phonehomedesc2"));
    $("#phonehomePrivacy").text($.i18n.prop("phonehomePrivacy"));
    $("#ccoUser").attr("placeholder", $.i18n.prop("ccoUserLabel"));
    $("#ccoPassword").attr("placeholder", $.i18n.prop("ccoPasswordLabel"));
    $("#phonehomeErrorMessage").text($.i18n.prop("phonehomeErrorMessage"));

    //consoleLogMethodDetailsEnd("phonehome.js", "loadAndDisplayLanguages()");
  }

  // Upload of scanner xml
  function scannerUpload(csrf_artifact1) {
    //consoleLogMethodDetailsStart("phonehome.js", "scannerUpload()");
    var loggedin_url = caa_url + "asi/rs/SCANNER-UPLOAD?csrf_artifact=" + csrf_artifact1, xml, reg, hostNameValue = "",
        ipAddress = "", scannerMethod = "", sysDescription = "", version = "", hardwareSerialId = "", pid = "", vid = "",
        inventoryValues, uptime = "", macAddress = "", scannerXml, arr = [], healthMonitor = "";
    var showCommand = showCommandsOutput();
    reg = new RegExp("\\n", "");
    try {
      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;

      $(xml).find('hostname').each(function() {
        $(this).find('SystemNetworkName').each(function() {
          hostNameValue = $(this).text();
          return false;
        });
      });
      ipAddress = $(location).attr('host');

      scannerMethod = ($(location).attr('protocol')).slice(0, -1);

      if (clubbedCLIOutputAvailable && shVerFormatOdmOutput != null) {
        xml = shVerFormatOdmOutput;
      }
      else {
        xml = deviceCommunicator.getExecCmdOutput("show version | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshVer.odm");
      }
      version = $(xml).find('Version').text();

      xml = deviceCommunicator.getExecCmdOutput("show arp | include " + ipAddress);
      var cols = xml.split(/ +/);
      if (cols[3] != null) {
        macAddress = cols[3].replace(/\./g, '').replace(/(.{2})/g, "$1:").slice(0, -1);
      }

      xml = deviceCommunicator.getExecCmdOutput("show hardware | include Processor board");
      if ((xml.indexOf("Processor board ID")) > -1) {
        var serialIdDetails = xml.split("Processor board ID ");
        if (serialIdDetails.length >= 2) {
          hardwareSerialId = serialIdDetails[1];
        }
      }

      xml = deviceCommunicator.getExecCmdOutput("show inventory | include " + hardwareSerialId);
      var rows = xml.split(reg), fields;
      for (var i = 0; i < rows.length; i++) {
        if (rows[i].indexOf("PID: ") > -1 && rows[i].indexOf("VID: ") > -1) {
          inventoryValues = rows[i].split(",");
          for (var j = 0; j < inventoryValues.length; j++) {
            if (inventoryValues[j].indexOf("PID: ") > -1) {
              fields = inventoryValues[j].split("PID: ");
              pid = fields[1];
            }
            else if (inventoryValues[j].indexOf("VID: ") > -1) {
              fields = inventoryValues[j].split("VID: ");
              vid = fields[1];
            }
          }
          break;
        }
      }

      rows = showCommand.version.split(reg);
      for (var i = 0; i < rows.length; i++) {
        if (rows[i].indexOf("uptime ") > -1) {
          fields = rows[i].split("uptime is ");
          uptime = fields[1];
          break;
        }
      }

      sysDescription = showCommand.version.split(/\n\s*\n/);
      healthMonitor = deviceCommunicator.getExecCmdOutput("show health-monitor");
    }
    catch (error) {
        isEmptyBlock = true;
    }

    arr = [{name: "userid", value: $('#ccoUser').val()},
      {name: "location", value: ""},
      {name: "protoVersion", value: version},
      {name: "hVersion", value: "1.0"},
      {name: "scannerMethod", value: scannerMethod},
      {name: "deviceType", value: pid},
      {name: "ipAddress", value: ipAddress},
      {name: "deviceClass", value: "router"},
      {name: "macAddress", value: macAddress},
      {name: "firmware", value: version},
      {name: "serialNo", value: hardwareSerialId},
      {name: "productID", value: pid},
      {name: "pidvid", value: vid},
      {name: "hostname", value: hostNameValue},
      {name: "sysDescription", value: sysDescription[0]},
      {name: "sysUptime", value: uptime},
      {name: "bootReason", value: ""},
      {name: "totalVisibleMemorySize", value: ""},
      {name: "imageName", value: ""},
      {name: "runningConfig", value: showCommand.runningConfig},
      {name: "snmp", value: showCommand.snmp},
      {name: "inventory", value: showCommand.inventory},
      {name: "version", value: showCommand.version},
      {name: "ipInterfaceBrief", value: showCommand.ipIntBrief},
      {name: "interfaceDesc", value: showCommand.interfaceDesc},
      {name: "macAddrTable", value: showCommand.macAddrTable},
      {name: "cdpNeighbors", value: showCommand.cdpNeighbor},
      {name: "healthMonitor", value: ""}];
    // Generating scanner xml
    scannerXml = deviceCommunicator.configureCommandsFromTemplate("ScannerPayloadTemplate.txt", arr, true);

    try {
      $.ajax(loggedin_url, {
        type: 'POST',
        contentType: 'application/xml',
        data: scannerXml,
        xhrFields: {withCredentials: true},
        crossDomain:true,
        success: function(response) {
          if ($(response).find('success').first().text() === "1") {
            //$('#uploadStatus').text("Configuration securely uploaded");
            $('#uploadStatus').text($.i18n.prop("configSecurityUploaded"));
          }
          else {
            $('#uploadStatus').text($.i18n.prop("unableUploadConfig"));
          }
        },
        error: function(xhr, textStatus, errorThrown) {
          $('#uploadStatus').text($.i18n.prop("unableUploadConfig"));
        }
      });
    }
    catch (error) {
      $('#uploadStatus').text($.i18n.prop("unableUploadConfig"));
    }
    //consoleLogMethodDetailsEnd("phonehome.js", "scannerUpload()");
  }

  function showCommandsOutput() {
    //consoleLogMethodDetailsStart("phonehome.js", "showCommandsOutput()");
    var versionOutput = "", runningConfig = "", snmp = "", inventory = "", ipIntBrief = "", interfaceDesc = "", macAddrTable = "",
        cdpNeighbor = "", regExpStr = "", regExp = "", replaceExp = "";
    try {
      versionOutput = deviceCommunicator.getExecCmdOutput("show version");
      runningConfig = deviceCommunicator.getExecCmdOutput("show running-config");
      snmp = deviceCommunicator.getExecCmdOutput("show snmp");
      inventory = deviceCommunicator.getExecCmdOutput("show inventory");
      ipIntBrief = deviceCommunicator.getExecCmdOutput("show ip interface brief");
      interfaceDesc = deviceCommunicator.getExecCmdOutput("show interfaces description");
      macAddrTable = deviceCommunicator.getExecCmdOutput("show mac-address-table");
      cdpNeighbor = deviceCommunicator.getExecCmdOutput("show cdp neighbors");

      // Sanitize running Config
      $.ajaxSetup({async: false});
      $.ajax({
        type: "GET",
        url: "../templates/masking_rule.xml",
        dataType: "xml",
        success: function(xml) {
          $(xml).find('MaskPattern').each(function() {
            try {
              regExpStr = $(this).find('Expression').text();
              replaceExp = $(this).find('Replacement').text();
              regExp = new RegExp(regExpStr, "gm");
              if (runningConfig.match(regExp)) {
                runningConfig = runningConfig.replace(regExp, "\n" + replaceExp);
              }
            }
            catch (e) {
                isEmptyBlock = true;
            }
          });
        }
      });
      $.ajaxSetup({async: true});
    }
    catch (error) {
        isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("phonehome.js", "showCommandsOutput()");
    return {
      runningConfig: runningConfig,
      version: versionOutput,
      snmp: snmp,
      inventory: inventory,
      ipIntBrief: ipIntBrief,
      interfaceDesc: interfaceDesc,
      macAddrTable: macAddrTable,
      cdpNeighbor: cdpNeighbor
    }
  }

  function setCookie(c_name, value) {
    //consoleLogMethodDetailsStart("phonehome.js", "setCookie()");
    var date = new Date();
    date.setTime(date.getTime() + (15 * 60 * 1000));
    document.cookie = c_name + "=" + escape(value) + "; expires=" + date.toGMTString();
    //consoleLogMethodDetailsEnd("phonehome.js", "setCookie()");
  }

  function getCookie(c_name) {
    //consoleLogMethodDetailsStart("phonehome.js", "getCookie()");
    if (document.cookie.length > 0) {
      c_start = document.cookie.indexOf(c_name + "=");
      if (c_start != -1) {
        c_start = c_start + c_name.length + 1;
        c_end = document.cookie.indexOf(";", c_start);
        if (c_end == -1){
          c_end = document.cookie.length;
        }
        //consoleLogMethodDetailsEnd("phonehome.js", "getCookie()");
        return unescape(document.cookie.substring(c_start, c_end));
      }
    }
    //consoleLogMethodDetailsEnd("phonehome.js", "getCookie()");
    return "";
  }

  function eraseCookie(name) {
    //consoleLogMethodDetailsStart("phonehome.js", "eraseCookie()");
    setCookie(name, "");
    //consoleLogMethodDetailsEnd("phonehome.js", "eraseCookie()");
  }

  function refresh() {
    //consoleLogMethodDetailsStart("phonehome.js", "refresh()");
    $('#phonehomeError').hide();
    //consoleLogMethodDetailsEnd("phonehome.js", "refresh()");
  }

  function enableAuthUploadBtn() {
    //consoleLogMethodDetailsStart("phonehome.js", "enableAuthUploadBtn()");
    $("#authenticateBtn").show();
    $("#authenticatedBtn").hide();
    $('#uploadBtn').hide();
    $('#uploadStatus').text("");
    //consoleLogMethodDetailsEnd("phonehome.js", "enableAuthUploadBtn()");
  }

  function disableAuthUploadBtn() {
    //consoleLogMethodDetailsStart("phonehome.js", "disableAuthUploadBtn()");
    $("#authenticateBtn").hide();
    $("#authenticatedBtn").show();
    $('#uploadStatus').text("");
    //consoleLogMethodDetailsEnd("phonehome.js", "disableAuthUploadBtn()");
  }

  function phoneHomeLoading() {
    //consoleLogMethodDetailsStart("phonehome.js", "phoneHomeLoading()");
    loadAndDisplayLanguages();
    // Warning message to be displayed for IE browsers
    if ($.browser.msie) {
      $('#tabs').append('<div id="browserInfoVer" class="browserInfo"></div>');
      $('#browserInfoVer').append('<p><div class="utmSprite information"></div><span id="browserInfoVerClose" class="browserInfoClose"></span>'+
                                  '<span id="browserInfoVerMessage" class="browserInfoMessage"><noscript id="scriptDisable">' +
                                  $.i18n.prop("ScriptMessage") + '</noscript></span></p>');
      $('#browserInfoVerMessage').html($.i18n.prop("caaBrowserVersion"));
      //$('#browserInfoVerClose').html("<a href='#' id='warningClose'><span class='closeButton' title='Close Info Window'></span></a>");
      $('#browserInfoVerClose').html("<a href='#' id='warningClose'><span class='closeButton' title='" + $.i18n.prop("closeInfoWindow") + "'></span></a>");
      $('#browserInfoVer').show();
      $('#warningClose').click(function() {
        $('#browserInfoVer').hide();
        return false;
      });
    }

    $('#phonehomeError').hide();
    $("#tabs").tabs();
    $('#hideAll').css('display', 'block');
    $('#phoneHomeForm').validate({
      errorElement: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });

    var csrf_artifact = getCookie("csrf_artifact"), userid = getCookie("userAuth"), login_url, logout_url;

    // In case user is already authenticated, then no need to authenticate again
    if (userid != null && userid !== "") {
      $('#ccoUser').val(userid);
      disableAuthUploadBtn();
      $('#uploadBtn').show();
    } else {
      enableAuthUploadBtn();
      $('#ccoUser').val("");
    }

    $("#authenticateBtn")
      .button()
      .click(function(e) {
        if ($('#phoneHomeForm').valid()) {
          blockPage("Applying");
          setTimeout(function() {
            login_url = caa_url + "asi/rs/authenticate";
            $.ajax(login_url, {
              type: 'POST',
              dataType: 'json',
              data: {
                username: $('#ccoUser').val(),
                password: $('#ccoPassword').val()
              },
              crossDomain: true,
              xhrFields: {withCredentials: true},
              success: function(response) {
                // Capture the current CSRF token for upcoming calls
                csrf_artifact = response.csrf_artifact;
                if (response.loggedIn) {
                  disableAuthUploadBtn();
                  setCookie("userAuth", $('#ccoUser').val());
                  setCookie("csrf_artifact", csrf_artifact);
                  scannerUpload(csrf_artifact);
                  refresh();
                } else if (response.loggedIn) {
                  //$('#phonehomeErrorMessage').html("Credentials entered are incorrect! Please try again.");
                  $('#phonehomeErrorMessage').html($.i18n.prop("credIncorrect"));
                  $('#phonehomeError').show();
                }
                $.unblockUI();
              },
              error: function() {
                //$('#phonehomeErrorMessage').html("Authentication has failed!"); //either due to CORS failure, bad URL or other problem
                $('#phonehomeErrorMessage').html($.i18n.prop("phonehomeErrorMessage"));
                $('#phonehomeError').show();
                $.unblockUI();
              }
            });
            return false;
          }, 1000);
          e.preventDefault();
        }
      });

    $("#uploadBtn")
      .button()
      .click(function(e) {
        blockPage("Applying");
        setTimeout(function() {
          try {
            var csrfToken = getCookie("csrf_artifact");
            if (csrfToken != null && csrfToken !== "") {
              scannerUpload(csrfToken);
            }
            else {
              //$('#phonehomeErrorMessage').html("Session has timed out! Please provide your credentials again.");
              $('#phonehomeErrorMessage').html($.i18n.prop("sessionTimeout"));
              $('#phonehomeError').show();
              enableAuthUploadBtn();
            }
          }
          catch (e) {
            $('#uploadStatus').text($.i18n.prop("unableUploadConfig"));
          }
          $.unblockUI();
          return false;
        }, 1000);
        e.preventDefault();
      });

    $("#clearBtn")
      .button()
      .click(function(e) {
        refresh();
        //Clear STD cookie on server side
        csrf_artifact = getCookie("csrf_artifact");
        if (csrf_artifact != null && csrf_artifact !== "") {
          logout_url = caa_url + "asi/rs/logout?csrf_artifact=" + csrf_artifact;
          $.ajax(logout_url, {
            type: 'GET',
            xhrFields: {withCredentials: true}
          });
        }
        eraseCookie("userAuth");
        eraseCookie("csrf_artifact");
        userid = "";
        csrf_artifact = "";
        $('#ccoUser').val("");
        $('#ccoPassword').val("");
        enableAuthUploadBtn();
        return false;
      });

    $("#authenticatedBtn")
      .button()
      .click(function(e) {
        return false;
      });
    // Display sample data based on router details
    $('a#sampleConfigLink').click(function() {
      var showCommand = showCommandsOutput(), arr = [], sampleConfig = "";
      arr = [{name: "runningConfig", value: showCommand.runningConfig},
        {name: "version", value: showCommand.version},
        {name: "snmp", value: showCommand.snmp},
        {name: "inventory", value: showCommand.inventory},
        {name: "ipIntBrief", value: showCommand.ipIntBrief},
        {name: "interfaceDesc", value: showCommand.interfaceDesc},
        {name: "macAddrTable", value: showCommand.macAddrTable},
        {name: "cdpNeighbor", value: showCommand.cdpNeighbor}];
      sampleConfig = deviceCommunicator.configureCommandsFromTemplate("sampleSwitchConfiguration.txt", arr, true);
      $("#sampleConfig").val(sampleConfig);
      $('#sampleConfigDialog').dialog('open');
    });

    $("#sampleConfigDialog").dialog({
      autoOpen: false,
      modal: true,
      height: 430,
      width: 650,
      buttons: {
        Close: function() {
          $("#sampleConfig").val("");
          $(this).dialog("close");
        }
      },
      close: function() {
      }
    });

    $('#hideAll').css('display', 'none');
    //consoleLogMethodDetailsEnd("phonehome.js", "phoneHomeLoading()");
  }
  return {
    phoneHomeLoading: phoneHomeLoading
  };
}());
var utm = (function() {
  var loadFirst = false;

  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {

    //consoleLogMethodDetailsStart("utm.js", "loadAndDisplayLanguages()");
    $("#zonesTabTitle").text($.i18n.prop("zonesTabTitle"));
    $("#policyTabTitle").text($.i18n.prop("policyTabTitle"));
    $("#securityTab").text($.i18n.prop("securityTab"));
    $("#staticTab").text($.i18n.prop("staticTab"));
    $("#zonesTitle").text($.i18n.prop("zonesTitle"));
    $("#zoneNotesDesc").text($.i18n.prop("zoneNotesDesc"));
    $("#zoneDragDropText").text($.i18n.prop("zoneDragDropText"));
    $("#zoneDragDropInfo").text($.i18n.prop("zoneDragDropInfo"));
    $("#zoneAvailInterf").text($.i18n.prop("zoneAvailInterf"));
    $("#zoneLAN").text($.i18n.prop("zoneLAN"));
    $("#zoneWAN").text($.i18n.prop("zoneWAN"));
    $("#zoneVPN").text($.i18n.prop("zoneVPN"));
    $("#zoneDMZ").text($.i18n.prop("zoneDMZ"));

    $("#vpnTitle").text($.i18n.prop("vpnTitle"));
    $("#vpnInfoDesc").text($.i18n.prop("vpnInfoDesc"));
    $("#vpnWANMessgOne").text($.i18n.prop("vpnWANMessgOne"));
    $("#vpnWANMessgTwo").text($.i18n.prop("vpnWANMessgTwo"));
    $("#vpnWANMessgThree").text($.i18n.prop("vpnWANMessgThree"));
    $("#vpnLANMessgOne").text($.i18n.prop("vpnLANMessgOne"));
    $("#vpnLANMessgTwo").text($.i18n.prop("vpnLANMessgTwo"));
    $("#vpnLANMessgThree").text($.i18n.prop("vpnLANMessgThree"));

    //VPN
    $("#vpnSiteTitle").text($.i18n.prop("vpnSiteTitle"));
    $("#vpnDMVPNTitle").text($.i18n.prop("vpnDMVPNTitle"));
    $("#dmvpnSpokeToHubLabel").text($.i18n.prop("vpnSpoke") + " - " + $.i18n.prop("spokeHub"));
    $("#vpnEnableTitle").text($.i18n.prop("vpnEnableTitle"));
    $('#vpnConfigSelect').prop('title', $.i18n.prop("selectVpnTypeToConfigure"));

    $("#vpnKeyTitle").text($.i18n.prop("vpnKeyTitle") + ':');
    $("#vpnTunnelIPTitle").html($.i18n.prop("vpnTunnelIPTitle") + '<span class="ccpexpCSSReplaceClass851">*</span>:');
    $("#s2svpnBackupTunIPTitle").html($.i18n.prop("vpnBackupTunIPTitle") + '<span class="ccpexpCSSReplaceClass852">*</span>:');
    $("#vpnTunMaskTitle").html($.i18n.prop("vpnTunMaskTitle") + '<span class="ccpexpCSSReplaceClass853">*</span>:');
    $("#vpnRemotePeerTitle").html($.i18n.prop("vpnRemotePeerTitle") + '<span class="ccpexpCSSReplaceClass854">*</span>:');
    $("#vpnPrekeyTitle").html($.i18n.prop("vpnPrekeyTitle") + '<span class="ccpexpCSSReplaceClass855">*</span>:');
    $("#vpnRemoteSubTitle").html($.i18n.prop("vpnRemoteSubTitle") + '<span class="ccpexpCSSReplaceClass856">*</span>:');

    $("#s2sTunnelIP").attr("placeholder", $.i18n.prop("vpnTunnelIPTitle"));
    $("#s2sBackupIP").attr("placeholder", $.i18n.prop("vpnBackupTunIPTitle"));
    $("#s2sTunnelMask").attr("placeholder", $.i18n.prop("vpnTunMaskTitle"));
    $("#peerAddr").attr("placeholder", $.i18n.prop("vpnRemotePeerTitle"));
    $("#preSharedKey").attr("placeholder", $.i18n.prop("vpnPrekeyTitle"));
    $("#applyVpn").text($.i18n.prop("apply"));
    $("#savebutt").text($.i18n.prop("apply"));
    $("#SiteTunnel").text($.i18n.prop("tunnelText"));
    $("#ipsecSourceIP").text($.i18n.prop("sourceSite"));
    $("#IpsecDestIP").text($.i18n.prop("destSite"));
    $("#ipsecStatus").text($.i18n.prop("ipSecState"));
    $("#ipsecActions").text($.i18n.prop("policyAct"));
    $("#refreshSite").text($.i18n.prop("refresh"));
    $("#addSite").text($.i18n.prop("addSite"));
	$("#noDataIpsecMessage").text($.i18n.prop("noDataAva"));
	$("#wildMaskLabel2").text($.i18n.prop("wildcardMask")+':');



    /*vpn Spoke*/
    $(".enableText").text($.i18n.prop("enableText"));
    $("#vpnPeersText").text($.i18n.prop("vpnPeersText"));
    $("#vpnSpoke").text($.i18n.prop("vpnSpoke"));

    $("#spokeHubDHCP").text($.i18n.prop("spokeHubDHCP"));
    $("#spokeTunnerIp").html($.i18n.prop("vpnTunnelIPTitle") + '<span class="ccpexpCSSReplaceClass857">*</span>:');
    $("#spokeBakckupTunnerIp").html($.i18n.prop("vpnBackupTunIPTitle") + '<span class="ccpexpCSSReplaceClass858">*</span>:');
    $("#spokeTunnerMask").html($.i18n.prop("vpnTunMaskTitle") + '<span class="ccpexpCSSReplaceClass859">*</span>:');
    $("#spokeRemotSubnet").html($.i18n.prop("localLANLabel") + ' :');

    $("#spokeHub").text($.i18n.prop("spokeHub"));
    $("#hubText").text($.i18n.prop("spokeHub"));
    $("#spokeTransportAdd").html($.i18n.prop("spokeTransportAdd") + '<span class="ccpexpCSSReplaceClass861">*</span>:');
    $("#spokeRemotTunnel").html($.i18n.prop("spokeRemotTunnel") + '<span class="ccpexpCSSReplaceClass862">*</span>:');

    $("#spokeVPNPro").text($.i18n.prop("spokeVPNPro"));
    $("#spokeKeyExchange").text($.i18n.prop("spokeKeyExchange"));
    $("#spokeKeyExchangeMethod").html($.i18n.prop("spokeKeyExchangeMethod") + '<span class="ccpexpCSSReplaceClass863">*</span>:');
    $("#spokePreKey").html($.i18n.prop("spokePreKey") + '<span class="ccpexpCSSReplaceClass864">*</span>:');

    $("#spokeRouting").text($.i18n.prop("spokeRouting"));
    $("#spokeEigrp").html($.i18n.prop("spokeEigrp") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
	
	$("#tunnelIp").attr("placeholder", $.i18n.prop("vpnTunnelIPTitle"));
	$("#dmvpnDestAddr").attr("placeholder", $.i18n.prop("localLANLabel"));
	$("#dmvpnTunnelIp").attr("placeholder", $.i18n.prop("vpnTunnelIPTitle"));
	$("#localLanIp").attr("placeholder", $.i18n.prop("localLANLabel"));
	$("#tunnelMask").attr("placeholder", $.i18n.prop("vpnTunMaskTitle"));
	$("#dmvpnHubTunnelMask").attr("placeholder", $.i18n.prop("vpnTunMaskTitle"));
	$("#transportAddr").attr("placeholder", $.i18n.prop("spokeTransportAdd"));
	$("#tunnelAddr").attr("placeholder", $.i18n.prop("spokeRemotTunnel"));
	$("#siteTositeDialog").attr("title", $.i18n.prop("wizConfig"));


    //Contant Security
    $("#contantSecuNote").text($.i18n.prop("contantSecuNote"));
    $("#contantSecuCloudWeb").text($.i18n.prop("contantSecuCloudWeb"));
    $("#contantSecuPrimServ").html($.i18n.prop("contantSecuPrimServ") + '<span class="ccpexpCSSReplaceClass866">*</span>:');
    $("#contantSecuServ").html($.i18n.prop("contantSecuServ") + ':');
    $("#contantSecuEncryption").html($.i18n.prop("contantSecuEncryption") + ':');
    $("#contantSecuLicense").html($.i18n.prop("contantSecuLicense") + '<span class="ccpexpCSSReplaceClass867">*</span>:');

    $("#primaryAddress").attr("placeholder", $.i18n.prop("contantSecuPrimServ"));
    $("#secondaryAddress").attr("placeholder", $.i18n.prop("contantSecuServ"));
    $("#licenseId").attr("placeholder", $.i18n.prop("contantSecuLicense"));
    $("#contantSecuYes").text($.i18n.prop("yes"));
    $("#contantSecuNo").text($.i18n.prop("no"));
    $("#contantSecuPortal").text($.i18n.prop("contantSecuPortal"));

    $("#alreadyPresentFileMess1").text($.i18n.prop("alreadyPresentFileMess1"));
    $(".overrideAndUploadFiles").text($.i18n.prop("clickHereStr"));
    $("#alreadyPresentFileMess2").text($.i18n.prop("alreadyPresentFileMess2"));
    $("#uploadSigMess1").text($.i18n.prop("uploadSigMess1"));
    $("#uploadSigMess2").text($.i18n.prop("uploadSigMess2"));
    $("#uploadSigMess3").text($.i18n.prop("uploadSigMess3"));
    $("#initializingUpload").text($.i18n.prop("initializingUpload"));
    $("#selectFile").text($.i18n.prop("selectFile"));
    $("#uploadSignaturePackage").text($.i18n.prop("uploadBtn"));
    $("#sig-pkg-file-select").attr("title", $.i18n.prop("selectSignatureUpload"));
    $("#abortCurrentFileUpload").attr("title", $.i18n.prop("abortUpload"));
    $("#urlFilteringDialog").attr("title", $.i18n.prop("contentSecure"));
	$("#SecurityurlFilteringDialog").attr("title", $.i18n.prop("contentSecure"));
    $("#urlLegend").text($.i18n.prop("urlLegend"));
    $("#dragDropPopulerSites").text($.i18n.prop("dragDropPopulerSites"));
    $("#popularSites").text($.i18n.prop("popularSites"));
    $("#selectedSites").text($.i18n.prop("selectedSites"));
    $("#searchBox").text($.i18n.prop("searchTbx") + ':');
    $("#enterKeywordURL").text($.i18n.prop("enterKeywordURL") + ':');
    $("#addContentName").text($.i18n.prop("addContentName"));
    $("#securityPolicyDialogMessage").text($.i18n.prop("securityPolicyDialogMessage"));



    $("#staticNATTitle").text($.i18n.prop("staticNATTitle"));
    $("#staticNATInfoDesc").text($.i18n.prop("staticNATInfoDesc"));
    $("#staticNoData").text($.i18n.prop("staticNoData"));
    $("#internalIP").text($.i18n.prop("internalIP"));
    $("#externalIP").text($.i18n.prop("externalIP"));
    $("#pat").text($.i18n.prop("pat"));
    $("#natAct").text($.i18n.prop("natAct"));
    $("#applyScan").text($.i18n.prop("applyChange"));
    $("#addNat").text($.i18n.prop("add"));
    $("#editNat").text($.i18n.prop("edit"));
    $("#deleteNat").text($.i18n.prop("delete"));

    //IPS Tab
    $("#iPSTitle").text($.i18n.prop("iPSTitle"));
    $("#ipsIdentifyNote").text($.i18n.prop("ipsIdentifyNote"));
    $("#ipsSignatureNote").text($.i18n.prop("ipsSignatureNote"));
    $("#ipsEnable").text($.i18n.prop("ipsEnable"));
    $("#ipsLastUp").html($.i18n.prop("ipsLastUp") + ":");
    $("#ipsCCOID").html($.i18n.prop("ipsCCOID") + ":");
    $("#ipsCCOPass").html($.i18n.prop("ipsCCOPass") + ":");
    $("#ipsSignName").html($.i18n.prop("ipsSignName") + ":");
    $("#ccoUserid").attr("placeholder", $.i18n.prop("ipsCCOID"));
    $("#ccoPassword").attr("placeholder", $.i18n.prop("ipsCCOPass"));
    $("#sigName").attr("placeholder", $.i18n.prop("ipsSignName"));
    $("#authUpdate").text($.i18n.prop("authUpdate"));
    $("#ipsSDF").html($.i18n.prop("ipsSDF") + ":");
    $("#ipsTotalFS").html($.i18n.prop("ipsTotalFS") + ":");
    $("#ipsImg").attr("title", $.i18n.prop("ipsImgTitle"));
    $("#dialog-signature-select").attr("title", $.i18n.prop("ipsSignaturesTitle"));
    $("#ipsSignaturesError").text($.i18n.prop("ipsSignaturesError") + ': ');
    $("#uploadIps").text($.i18n.prop("uploadIps"));
    $("#changeIps").text($.i18n.prop("changeIps"));
    $("#downloadIps").text($.i18n.prop("downloadIps"));
    $("#sdeeNotification").text($.i18n.prop("sdeeNotification"));
    $("#ipsIdentifyNote").text($.i18n.prop("ipsIdentifyNote"));
    $("#ipsSigLicenseNotAvailable").text($.i18n.prop("ipsSigLicenseNotAvailable"));
    $("#wanInterfaceConfStr1").text($.i18n.prop("wanInterfaceConfStr1"));
    $("#wanInterfaceConfStr2").text($.i18n.prop("wanInterfaceConfStr2"));
    $("#wanInterfaceConfStr3").text($.i18n.prop("wanInterfaceConfStr3"));
    $("#ipsSyslogStr1").text($.i18n.prop("ipsSyslogStr1"));
    $("#ipsSyslogStr2").text($.i18n.prop("ipsSyslogStr2"));
    $("#ipsSyslogStr3").text($.i18n.prop("ipsSyslogStr3"));
    $("#ipsEnableMsg").text($.i18n.prop("ipsEnableMsg"));
    $("#ipsWarningStr").text($.i18n.prop("ipsWarningStr"));

    $("#applyIPS").text($.i18n.prop("apply"));
    $("#refreshIPS").text($.i18n.prop("refresh"));
    //$("#ipsImage").text($.i18n.prop("ipsImgMsg3"));



    $("#Apply").text($.i18n.prop("apply"));
    $("#securityPolicyDialog").attr("title", $.i18n.prop("securityPolicyDialog"));
    $("#policyTitle").text($.i18n.prop("policyTitle"));
    $("#add").text($.i18n.prop("add"));
    $("#edit").text($.i18n.prop("edit"));
    $("#delete").text($.i18n.prop("delete"));
    $("#SaveOrder").text($.i18n.prop("SaveOrder"));
    $("#policyNote").text($.i18n.prop("policyNote"));
    $("#policyExpand").text($.i18n.prop("policyExpand"));
    $("#policyCollapse").text($.i18n.prop("policyCollapse"));
    $("#policyRollBack").text($.i18n.prop("policyRollBack"));
    $("#PolicyNames").text($.i18n.prop("policyNames"));
    $("#policyDesc").text($.i18n.prop("policyDesc"));
    $("#policyUsers").text($.i18n.prop("policyUsers"));
    $("#policySourceNetworks").text($.i18n.prop("policySourceNetworks"));
    $("#policyDestinationeNetworks").text($.i18n.prop("policyDestinationeNetworks"));
    $("#policyDestinationPorts").text($.i18n.prop("policyDestinationPorts"));
    $("#policyApplications").text($.i18n.prop("policyApplications"));
    $("#policyURLs").text($.i18n.prop("policyURLs"));
    $("#policyAction").text($.i18n.prop("policyAction"));
    $("#policyAct").text($.i18n.prop("policyAct"));

    $(".secPolicyEdit").attr("title", $.i18n.prop("Edit"));
    $(".secPolicyDelete").attr("title", $.i18n.prop("Delete"));

    $("#policyInfoDesc").text($.i18n.prop("policyInfoDesc"));
    $("#policyNoFound").text($.i18n.prop("policyNoFound"));
    $("#policyNamesTitle").text($.i18n.prop("policyNamesTitle") + ':');
    $("#policyDescTitle").text($.i18n.prop("policyDescTitle") + ':');
    $("#SecurityPolicyName").attr("placeholder", $.i18n.prop("policyNamesPop"));
    $("#SecurityPolicyDescription").attr("placeholder", $.i18n.prop("policyDescPop"));
    $("#policyActionTitle").text($.i18n.prop("policyActionTitle") + ':');
    $("#policySourceZoneTitle").text($.i18n.prop("policySourceZoneTitle") + ':');
    $("#policyDestZoneTitle").text($.i18n.prop("policyDestZoneTitle") + ':');


    $("#policyNetworkTab").text($.i18n.prop("policyNetworkTab"));
    $("#policyApplicationTab").text($.i18n.prop("policyApplicationTab"));
    $("#policyPortsTab").text($.i18n.prop("policyPortsTab"));
    $("#policyDomainFilteringTab").text($.i18n.prop("policyDomainFilteringTab"));
    $("#policyUserGroupTab").text($.i18n.prop("policyUserGroupTab"));

    $("#policySourNetwork").text($.i18n.prop("policySourNetwork"));
    $("#policyDesNetwork").text($.i18n.prop("policyDesNetwork"));
    $("#policyAvailApp").text($.i18n.prop("policyAvailApp"));
    $("#policySelectApp").text($.i18n.prop("policySelectApp"));
    $("#policyAppMessgOne").text($.i18n.prop("policyAppMessgOne"));
    $("#policyAppMessgTwo").text($.i18n.prop("policyAppMessgTwo"));
    $("#policyPortMessgOne").text($.i18n.prop("policyPortMessgOne"));
    $("#policyPortMessgTwo").text($.i18n.prop("policyPortMessgTwo"));

    $("#SecurityNetworkSource").text($.i18n.prop("SecurityNetworkSource"));
    $("#SecurityNetworkDestination").text($.i18n.prop("SecurityNetworkDestination"));

    $("#policyAvailablePorts").text($.i18n.prop("policyAvailablePorts"));
    //$("#policySourcePorts").text($.i18n.prop("policySourcePorts"));
    $(".policySourcePorts").text($.i18n.prop("policySourcePorts"));
    $("#policyDestPorts").text($.i18n.prop("policyDestPorts"));

    $("#policyDomainMessgOne").text($.i18n.prop("policyDomainMessgOne"));
    $("#policyDomainMessgTwo").text($.i18n.prop("policyDomainMessgTwo"));
    $("#policyPopularSite").text($.i18n.prop("policyPopularSite"));
    $("#policySelectedSite").text($.i18n.prop("policySelectedSite"));
    $("#policyKeywordURL").text($.i18n.prop("policyKeywordURL"));
    $("#SecuritysiteName").attr("placeholder", $.i18n.prop("policyKeywordURL"));
    $("#SecurityaddContentName").text($.i18n.prop("SecurityaddContentName"));
    $("#policyUserGMessgOne").text($.i18n.prop("policyUserGMessgOne"));
    $("#policyUserGMessgTwo").text($.i18n.prop("policyUserGMessgTwo"));
    $("#policySelectUserG").text($.i18n.prop("policySelectUserG"));
    $("#policyAvailableUserG").text($.i18n.prop("policyAvailableUserG"));
    $("#policyContentSecurity").text($.i18n.prop("policyContentSecurity"));
    $("#policyConSecuInfoDesc").text($.i18n.prop("policyConSecuInfoDesc"));
    $("#policyConSecuMessgOne").text($.i18n.prop("policyConSecuMessgOne"));
    $("#policyConSecuMessgTwo").text($.i18n.prop("policyConSecuMessgTwo"));
    $("#policyConSecuMessgThree").text($.i18n.prop("policyConSecuMessgThree"));
    $(".dashboardBTN").text($.i18n.prop("dashboardBTN"));
    $(".dashLink").attr("title", $.i18n.prop("dashLink"));
    $("#allow").text($.i18n.prop("allow"));
    $("#block").text($.i18n.prop("block"));
    $(".searchTbx").attr("placeholder", $.i18n.prop("searchTbx"));

    $("#userSelectRowStr").text($.i18n.prop("selectRowStr"));
    $("#selectaRow").attr("title", $.i18n.prop("selectaRow"));
    $(".egText").text($.i18n.prop("egText"));
    $("#ipSubnet").text($.i18n.prop("ipSubnet"));
    $(".orRange").text($.i18n.prop("orRange"));

    $("#staticNatDialog").attr("title", $.i18n.prop("staticNatDialog"));
    $("#t1").html($.i18n.prop("internalIP") + '<span class="ccpexpCSSReplaceClass868">*</span>:');
    $("#t2").html($.i18n.prop("externalIP") + '<span class="ccpexpCSSReplaceClass869">*</span>:');
    $("#t3").html($.i18n.prop("internalPort") + '<span class="ccpexpCSSReplaceClass870">*</span>:');
    $("#t4").html($.i18n.prop("externalPort") + '<span class="ccpexpCSSReplaceClass871">*</span>:');
    $("#enablePortTitle").text($.i18n.prop("enablePortTitle"));
    $("#portForwardAny").text($.i18n.prop("any"));


    $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));
    $("div[title='Policy Alert']").attr("title", $.i18n.prop("policyAlert"));
    $("#policyNotificationString").text($.i18n.prop("autoPolicyAlert"));
    //consoleLogMethodDetailsEnd("utm.js", "loadAndDisplayLanguages()");

  //DMVPN Hub
  $("#hubSpokeIpText").html($.i18n.prop("ipAddress") + '<span class="ccpexpCSSReplaceClass860">*</span>:');
  $("#hubSubnetMask").html($.i18n.prop("vpnRemoteSubTitle") + '<span class="ccpexpCSSReplaceClass860">*</span>:');
  $("#hubEigrp").html($.i18n.prop("spokeEigrp") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
  $("#dmvpnHubPreKey").html($.i18n.prop("spokePreKey") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
  $("#dmvpnTunnelMask").html($.i18n.prop("vpnTunMaskTitle") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
  $("#dmvpnHubTunnelIp").html($.i18n.prop("vpnTunnelIPTitle") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
  $("#vpnBackupTunIPTitle").html($.i18n.prop("vpnBackupTunIPTitle") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
  $("#hubKeyExchangeMethod").html($.i18n.prop("spokeKeyExchangeMethod") + '<span class="ccpexpCSSReplaceClass865">*</span>:');
  $("#hubVPNPro").text($.i18n.prop("spokeVPNPro"));
  $("#spokeVPNPro").text($.i18n.prop("spokeVPNPro"));
  $("#spokeVPNPro2").text($.i18n.prop("spokeVPNPro"));
  $("#spokeRouting").text($.i18n.prop("spokeRouting"));
  $("#vpnPeersText2").text($.i18n.prop("vpnPeersText"));
  $("#spokeRouting2").text($.i18n.prop("spokeRouting"));
  $("#dmVpnHubKeyExchange").text($.i18n.prop("spokeKeyExchange"));
  $("#localLANLabel").html($.i18n.prop("localLANLabel") + '<span class="ccpexpCSSReplaceClass865"></span>:');
  $("#wildMaskLabel").html($.i18n.prop("wildcardMask") + '<span class="ccpexpCSSReplaceClass865"></span>:');
  $("#localLanMask").attr("placeholder", $.i18n.prop("wildcardMask"));
  $("#dmvpnDestMask").attr("placeholder", $.i18n.prop("wildcardMask"));

  //New
  $("#vpnConfText").html($.i18n.prop("vpnConfText"));
  $("#siteTosite").html($.i18n.prop("IPSec"));
  $("#dmvpnSpoke").html($.i18n.prop("dmvpnSpoke"));
  $("#dmvpnHub").html($.i18n.prop("dmvpnHub"));
  $("#remoteAccess").html($.i18n.prop("remoteAccess"));

//  $("#vpnSiteTitle").html($.i18n.prop("IPSec"));
//  $("#vpnDMVPNTitle").html($.i18n.prop("dmvpnSpoke"));
//  $("#vpnDmvpnHub").html($.i18n.prop("dmvpnHub"));
//  $("#vpnRemAccess").html($.i18n.prop("remoteAccess"));

  $("#vpnPeersRemote").html($.i18n.prop("vpnRemotePool"));
  $("#vpnProRemote").html($.i18n.prop("spokeVPNPro"));
  $("#vpnRouteRemote").html($.i18n.prop("vpnRemoteMapping"));

  $("#SiteToSiteEnableText").html($.i18n.prop("SiteToSiteEnableText"));
  $(".enableSpokeText").html($.i18n.prop("enableSpokeText"));
  $(".enableDmvpnHubText").html($.i18n.prop("enableDmvpnHubText"));
  $(".enableRemAccessText").html($.i18n.prop("enableRemAccessText"));
  $("#tunnelText").text($.i18n.prop("tunnelText"));
  $("#remoteText").text($.i18n.prop("remoteText"));

      //Remote Access VPN
      //$("#vpnRemoteTunnelName").html($.i18n.prop("remoteTunnelName"));
      //$("#remoteTunnelName").attr("placeholder", $.i18n.prop("vpnTunnelIPTitle"));
      $("#vpnRemoteInterfaceTitle").html($.i18n.prop("vpnRemoteInterfaceTitle"));

      $("#vpnRemotePoolName").html($.i18n.prop("vpnRemotePoolName"));
      $("#remoteTunnelName").attr("placeholder", $.i18n.prop("vpnRemotePoolName"));
      $("#vpnRemoteAddressPool").html($.i18n.prop("poolAddressRangeFrom"));
      $("#vpnRemoteAddressPoolTo").html($.i18n.prop("poolAddressRangeTo"));
      $("#remoteAddressPoolFrom").attr("placeholder", $.i18n.prop("poolAddressRangeFrom"));
      $("#remoteAddressPoolTo").attr("placeholder", $.i18n.prop("poolAddressRangeTo"));
      $("#vpnRemotePrekeyTitle").html($.i18n.prop("preSharedKey"));
      $("#preSharedKeyRemote").attr("placeholder", $.i18n.prop("preSharedKey"));
      $("#remoteVpnReverseRouteSpan").html($.i18n.prop("remoteAccessReverseRoute"));
	  $(".removeConf").attr("title", $.i18n.prop("removeConfiguration"));
      $("#backupTunnelIP").attr("placeholder", $.i18n.prop("vpnBackupTunIPTitle"));
      $("#hubBackupIP").attr("placeholder", $.i18n.prop("vpnBackupTunIPTitle"));
  }

  function loadTab(index) {
    //consoleLogMethodDetailsStart("utm.js", "loadTab()");
    utmDashboard.terminateCliWorker();
    $("#secPolicyAlert").dialog({
    autoOpen: false,
    dialogClass: 'noClose',
    height: 200,
    width: 400,
    modal: true,
    buttons: [{
      text: $.i18n.prop("apply"),
      click: function(e) {
	  var policyarr = [];
          deviceCommunicator.configureCommandsFromTemplate("createDefaultDmvpnPolicy.txt",policyarr, false);
	  configureSecurityPolicy.loadSecurityPolicy();
	  $(this).dialog("close");
        }
      }]
  });
    switch (index) {
      case 0:
        if (loadFirst) {

          configureFirewall.loadFirewallPolicy();
          loadFirst = false;

        } else {
          blockPage("Loading");
          setTimeout(function() {
            configureFirewall.loadFirewallPolicy();
            $.unblockUI();
            return false;
          }, 1000);
        }
        break;
      case 1:
	var defaultPolicyValue = defPolicyCheck();
	if (defaultPolicyValue) {
	  $("#secPolicyAlert").dialog("open");
	} else {
          configureSecurityPolicy.loadSecurityPolicy();
	}
        break;
      case 2:
        blockPage("Loading");
        setTimeout(function() {
          configureIPS.loadIPSSettings();
          $.unblockUI();
          return false;
        }, 1000);
        break;
      case 3:
        configureVpn.vpnOverallLoading();
        break;
      case 4:
        configureScanSafe.loadContentSecurity();
        break;
      case 5:
        configureNat.loadStaticNat();
        break;
    }
    //consoleLogMethodDetailsEnd("utm.js", "loadTab()");
  }

  function defPolicyCheck(){
      /* var policyMapArr = []; */
      var defPolicy = true;
      var resp = deviceCommunicator.getExecCmdOutput("show running-config policy-map");
      policyMapList = resp.split('policy-map');
      for (var i = 1; i < policyMapList.length; i++) {
        var policyMapName, className = [];
        var policyLines = policyMapList[i].split("\n");

        $.each(policyLines, function(index, value) {
        var splitPolicyLines = value.trim().split(/\s+/);
        if (index == 0) {
          policyMapName = splitPolicyLines[splitPolicyLines.length - 1];
        }
        if (value.indexOf("class type") > -1) {
          if (splitPolicyLines[splitPolicyLines.length - 1].trim().toUpperCase() != "INTERNAL_DOMAIN_FILTER") {
          className.push({name: policyLines[index + 1].trim(), value: splitPolicyLines[splitPolicyLines.length - 1]});
          }
          if((policyMapName == "LAN-WAN-POLICY") && (className[className.length-1].value.toLowerCase() == "web" || className[className.length-1].value.toLowerCase() == "others")){
          defPolicy = false;
          }
        }
        });
      }
      return defPolicy;
    }

  function redirectToDashBoard(active, chart) {
    //consoleLogMethodDetailsStart("utm.js", "redirectToDashBoard()");
    $.get('overview.html',
      function(data) {
        blockPage("Loading");
        setTimeout(function() {
          if (!($('ul#bottomnav li#bottomnav-5 a').hasClass('toggleopacity'))) {
            $('#content').html(data);
            $('#hideAll').css('display', 'block');
            $.unblockUI();
            overview.dashboardLoadingAll(1, chart);
            utmDashboard.terminateCliWorker();
            $('#hideAll').css('display', 'none');
            $('ul#bottomnav li a').removeClass('toggleopacity');
            $('ul#bottomnav li#bottomnav-5 a').addClass('toggleopacity');
            enableDisableDashboard();
            //setTimeout(openGoogleAnalyticsDialog(),5000);
          }

        }, 1000);
      }
    );
    $.unblockUI();
    history.pushState({}, '', "frames.html?feature=routerdiagonstics");
    //consoleLogMethodDetailsEnd("utm.js", "redirectToDashBoard()");
  }

  function loadProvisioningTab(index) {
    //consoleLogMethodDetailsStart("utm.js", "loadProvisioningTab()");
    switch (index) {
      case 0:
        blockPage("Loading");
        setTimeout(function() {
          configureFirewall.loadFirewallPolicy();
          $.unblockUI();
          return false;
        }, 1000);
        break;
      case 2:
        blockPage("Loading");
        setTimeout(function() {
          configureIPS.loadIPSSettings();
          $.unblockUI();
          return false;
        }, 1000);
        break;
      case 3:
        configureVpn.vpnOverallLoading();
        break;
      case 4:
        configureScanSafe.loadContentSecurity();
        break;
      case 5:
        configureNat.loadStaticNat();
        break;
        //case 4: utmReport.loadReport(); break;

    }
    //consoleLogMethodDetailsEnd("utm.js", "loadProvisioningTab()");
  }

  function utmLoading(activeTab) {
    //consoleLogMethodDetailsStart("utm.js", "utmLoading()");
    loadFirst = true;
    $('#utmError').hide();
    $("#utmTabs").hide();
    loadAndDisplayLanguages();
    configureFirewall.configureFirewallLoading();
    configureSecurityPolicy.securityPolicyLoading();
    configureIPS.confIPSLoading();
    if (ipsTabHide) {
      $("#ipsTab").hide();
    }
    configureScanSafe.scanSafeLoading();
    configureVpn.confVpnLoading();
    configureNat.configNatLoading();
    utmReport.reportLoading();
   /* if (xesoftwareString!="") {
      configureSnort.SnortLoading();
    }else{
      configureIPS.confIPSLoading();
    }*/
    $('#hideAll').css('display', 'block');
    $("#provisioningTabs").addClass("custom-tabs");
    $("#utmTabs").addClass("custom-tabs");
    $("#utmTabs").tabs({
      create: function(event, ui) {
        loadTab(ui.tab.index())
      },
      activate: function(event, ui) {
        loadTab(ui.newTab.index())
      }, active: activeTab
    });
    $('#utmTabs >ul >li').each(function() {
      $(this).removeClass("custom-tabs-active");
    });
    $('#top-active-tab').addClass("custom-tabs-active");





    $(".custom-tabs >ul >li").removeClass("ui-state-default");
    $('.custom-tabs >ul >li').hover(function() {
      $(this).removeClass("ui-state-hover");
    });

    $('#utmTabs >ul >li').click(function() {
      $('#utmTabs >ul >li').each(function() {
        $(this).removeClass("ui-state-active");
        $(this).removeClass("custom-tabs-active");
      });
      //$("#utmTabs").hide();

      $(this).addClass("custom-tabs-active");
    });


    $('#hideAll').css('display', 'none');
    $("#utmTabs").show();
    $(".dashLink").tooltip({
      tooltipClass: "custom-tooltip-styling"
    });
    $(".dashLink").click(function() {
      redirectToDashBoard(1, $(this).attr("data"));
    });

    $('#vpnConfigSelect').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    if (!licenseCheck && iosk9check == "SecurityEnable") {
      //code
      $('#utmTabs').tabs({disabled: [2]});
    }
    else if (!licenseCheck && iosk9check == "staticNatEnable") {
      $('#utmTabs').tabs({disabled: [0, 1, 2, 3, 4]});


    }
    else if (!isEnableIPS) {
      $('#utmTabs').tabs({disabled: [2]});
    }
   /* else if (xesoftwareString!="") {
      $('#utmTabs').tabs({disabled: [2]});
    }else if (xesoftwareString=="") {
      $('#utmTabs').tabs({disabled: [6]});
    }*/
    //consoleLogMethodDetailsEnd("utm.js", "utmLoading()");
  }
  return {
    utmLoading: utmLoading
  };
}());
var configureIPS = (function() {
  var signaturepackage, signaturepackageNoExtn, ipsPkgInRouter = [], ipsEnabled = false, selectedPackage = false,
    ipsDir, ipsSignVer, ipsLoadedVer,
    ipsFirstTime = false, ipsIntfString, ipsLoaded = false, ipsPkgVerPresent, ipsPkgVerSelected,
    dashPatt = /-/, multiSpacePatt = /\s+/, calledForIPSPkgChange = false, reg,
    regExpIpsSigPkgName = /^IOS-S[0-9]+-CLI.pkg$/,
    dotPatt = ".", regExpNewLine = new RegExp("[,\\n]"), regExpForTab = new RegExp("[,\\t]"),
    currentXHR, userAbortedXHR = false, syslogdisabled = false;
  //var uploadObject, regExpIpsSigPkgNameNoExtn = /IOS-S[0-9]+-CLI/, linePatt = /-rw-/, dirLines = [];
  var pageURL = $(location), urlofPage;
  var varProtocol = pageURL.attr('protocol').match(/https/);

  if (varProtocol != null && varProtocol != undefined && varProtocol != '') {
    urlofPage = 'https://'
  } else {
    urlofPage = 'http://'
  }
  urlofPage = urlofPage + pageURL.attr('host') + '/flash:';

  // Variable to store your files and file details for upload.
  var files, selectedFileName, selectedFileSize;

  function enableUploadOnFlash()
  {
    var flashUploadEnabled = true;
    //consoleLogMethodDetailsStart("configureIPS.js", "enableUploadOnFlash()");

    try {
      deviceCommunicator.getConfigCmdOutput("ip http upload enable path flash: \n\n ip http upload overwrite");
    } catch (e) {
      ////consoleLog(e.message);
      flashUploadEnabled = false;
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "enableUploadOnFlash()");
    return flashUploadEnabled;
  }

  function getIpsPkgListOnRouter()
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "getIpsPkgListOnRouter()");
    //var ipsPkgInRouter = [], ipsPkgExist =false;
    ipsDir = deviceCommunicator.getExecCmdOutput("dir flash:");
    var sigPkgValuesNew = ipsDir.match(/IOS-S[0-9]+-CLI.pkg/g);

    if (sigPkgValuesNew != null && sigPkgValuesNew != undefined && sigPkgValuesNew.length > 1) {
      return sigPkgValuesNew.sort().reverse();
    }
    else {
      return sigPkgValuesNew;
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "getIpsPkgListOnRouter()");
  }

  function loadIPSSettings() {
    //consoleLogMethodDetailsStart("configureIPS.js", "loadIPSSettings()");
    //blockPage("Loading");
    $('#confIPSError').hide();
    $('#confIPSInfo').hide();
    $('#ipsEnableRepeatInfoMsg').hide();
    $("#warningIPSSysLogDisabled").hide();
    selectedPackage = false;
    try {
      var sigindex, ipsPkgExist = false;
      //var ipsPkgName = null;
      ipsPkgInRouter = getIpsPkgListOnRouter();

      if (ipsPkgInRouter != null && ipsPkgInRouter != undefined && ipsPkgInRouter.length > 0) {
        ipsPkgExist = true;
      }

      //Code for checking if Signature package license is purchased or not.
      licFeat = deviceCommunicator.getExecCmdOutput("show license feature");
      if (licFeat != null && licFeat != undefined && licFeat.trim() != "") {
        iosipsupdate = licFeat.split("ios-ips-update");
        if (iosipsupdate != undefined && iosipsupdate.length > 0) {
          if (iosipsupdate[1] != undefined) {
            var licFeatValues = iosipsupdate[1].split(regExpNewLine);
            if (licFeatValues != undefined && licFeatValues.length > 0)
            {
              var ipsSubscVal = licFeatValues[0].split(multiSpacePatt);
              if (ipsSubscVal != undefined && ipsSubscVal[3] == "yes") {
                licPurchased = true;
              }
            }
          }
        }
      }
      //IPS License purchase check is not included for Beta
      //The following line should be removed after Beta.
      //licPurchased = true;

      //Reading IPS settings details
      var shIpIpsAllCmdOutput = deviceCommunicator.getExecCmdOutput("show ip ips all");
      var rowsIPSData = shIpIpsAllCmdOutput.split(regExpNewLine);
      //alert("rowsIPSData-"+rowsIPSData.length);
      for (var i = 0; i < rowsIPSData.length; i++) {
        //Code changes for SDEE enable/disable
        if (rowsIPSData[i].indexOf("Event notification through SDEE is ") > -1) {
          var newArray = rowsIPSData[i].split("Event notification through SDEE is ");
          if (newArray.length > 1)
          {
            var varObj = $('#IPSsdeeNotification');
            var innterTextVal = varObj.find(".EnableDisableToggle").text().trim();
            var temp123 = newArray[1].trim();
            if ((temp123 === "enabled" && innterTextVal === "Enable") ||
              (temp123 === "disabled" && innterTextVal === "Disable"))
            {
              toggleEnableDisable('sdee', varObj);
            }
          }
        }

        //Code changes for Syslog enable/disable
        if (rowsIPSData[i].indexOf("Event notification through syslog is ") > -1) {
          var newArray = rowsIPSData[i].split("Event notification through syslog is ");
          if (newArray.length > 1)
          {
            var varObj = $('#IPSsyslog');
            var innterTextVal = varObj.find(".EnableDisableToggle").text().trim();
            var temp123 = newArray[1].trim();
            if ((temp123 === "enabled" && innterTextVal === "Enable") ||
              (temp123 === "disabled" && innterTextVal === "Disable"))
            {
              toggleEnableDisable('log', varObj);
            }
            if (temp123 === "disabled") {
              //To show an alert that the IPS dashboard will not show data if IPS log is disabled.
              syslogdisabled = true;
            } else {
              syslogdisabled = false;
            }
          }
        }

        if (rowsIPSData[i].indexOf("Signatures Loaded:") > -1) {
          var newArray = rowsIPSData[i].split("Signatures Loaded:");
          if (newArray.length > 1)
          {
            //alert("inside sig loaded ");
            var temp123 = newArray[1].split(regExpForTab);
            if (temp123.length > 0)
            {
              if (temp123[1] != "Not Available")
              {
                ipsLoaded = true;
              }
              ipsLoadedVer = temp123[2];
            }
          }
        }

        if (rowsIPSData[i].indexOf("Signature Package:") > -1) {
          //alert("inside sig pkg ");
          var newArray1 = rowsIPSData[i].split("Signature Package:");
          if (newArray1.length > 1)
          {
            var temp456 = newArray1[1].split(regExpForTab);
            if (temp456.length > 0)
            {
              if (temp456[1] == "Not Available")
              {
                ipsFirstTime = true;
              }
              ipsSignVer = temp456[2];
              var temp789 = ipsSignVer.split(dotPatt);
              if (temp789.length > 0) {
                ipsPkgVerPresent = temp789[0];
              }
            }
          }
        }
      }



      $('#ipsImage').prop('title', '');
      if (ipsPkgExist === true) {
        $("#ipsSignDiv").hide();
        $("#ipsSignFailureMsgDiv").hide();
        if (licPurchased === true) {
          $("#ipsSecLicDiv").hide();
          var wanListcheck = configureFirewall.getInterfacesInZone("WAN");
          if (wanListcheck.length <= 0) {
            //code
            $("#ipsFieldSet").hide();
            $("#ipsWanCheckDiv").show();
            ipsEnabled = false;
          }
          else {
            commaSepWanList = wanListcheck.toString();
            //$('#ipsImage').prop('title', 'IPS enabled on WAN Interface(s): '+commaSepWanList);
            $('#ipsImage').prop('title', $.i18n.prop("ipsImgMsg1") + ': ' + commaSepWanList);
            $("#ipsFieldSet").show();
            $("#ipsWanCheckDiv").hide();
            $('#enableIPS').removeAttr("disabled");
            $('#applyIPS').removeAttr("disabled");
            //ipsIntfString = 'IPS will be enabled for inbound traffic on interface';
            ipsIntfString = $.i18n.prop("ipsImgMsg2");
            if (ipsEnabled) {
              //ipsIntfString = 'IPS enabled for inbound traffic on interface';
              ipsIntfString = $.i18n.prop("ipsImgMsg3");
              $("#ipsImage").show();
              $("#ipsImageFirewall").hide();
              $("#enableIPS").prop('checked', true);

              if (ipsPkgInRouter != undefined && ipsPkgInRouter.length > 1) {
                $('#ChangeIPSSignatures').show();
                // Add code to increase the popup menu height to 187.
                $('#IPSSettings').css('height', '187px');
              } else {
                $('#ChangeIPSSignatures').hide();
                // Add code to shorten the popup menu to 151.
                $('#IPSSettings').css('height', '151px');
              }
            } else {
              $("#ipsImage").hide();
              $("#ipsImageFirewall").show();
              $("#enableIPS").prop('checked', false);
              $('#ChangeIPSSignatures').hide();
              // Add code to shorten the popup menu to 151.
              $('#IPSSettings').css('height', '151px');
            }
            if (wanListcheck.length == 1)
            {
              ipsIntfString = ipsIntfString + ' '
            }
            else
            {
              ipsIntfString = ipsIntfString + 's: '
            }
            ipsIntfString = ipsIntfString + wanListcheck.toString();

            $('#ipsImage').attr('title', ipsIntfString);

            $("#ipsTable").hide();

            ////consoleLog("ipsSignVer-"+ipsSignVer+" ipsLoadedVer-"+ipsLoadedVer+"\n ipsFirstTime-"+
            //ipsFirstTime+" ipsLoaded-"+ipsLoaded+"\n ipsPkgVerPresent-"+ipsPkgVerPresent);

            var ipsEnableOutput, signCountOutput = deviceCommunicator.getExecCmdOutput("show ip ips signatures count"),
              ipsVersion, compiledSign, failedSign, failedCount,
              rows = signCountOutput.split(regExpNewLine);
            for (var i = 0; i < rows.length; i++) {
              // In case of this error message disable Apply and enabling of IPS
              if (rows[i].indexOf("Another IPS operation is accessing the signatures.") > -1) {
                //$('#confIPSInfoMessage').html("Signature compilation in progress. Please revisit/refresh the page after sometime to view the signature details.");
                $('#confIPSInfoMessage').html($.i18n.prop("signatureCompilation"));
                $('#confIPSInfo').show();
                $("#refreshIPS").show();
                $("#applyIPS").hide();
                $('#enableIPS').attr("disabled", "disabled");
                $('#applyIPS').attr("disabled", "disabled");
                $('#applyIPS').removeClass("ui-state-focus");
                if (ipsEnabled && syslogdisabled) {
                  $("#warningIPSSysLogDisabled").show();
                } else {
                  $("#warningIPSSysLogDisabled").hide();
                }
                $('#ChangeIPSSignatures').hide();
                // To shorten the popup menu to 151.
                $('#IPSSettings').css('height', '151px');
                return false;
              }
              else {
                $("#refreshIPS").hide();
                $("#applyIPS").show();
                $('#applyIPS').removeAttr("disabled");
                $('#applyIPS').removeClass("ui-state-focus");
                $('#ChangeIPSSignatures').show();
                // To increase the popup menu height to 187.
                $('#IPSSettings').css('height', '187px');
              }
              if (rows[i].indexOf("Cisco SDF release version") > -1) {
                ipsVersion = rows[i].split("Cisco SDF release version ");
                if (ipsVersion.length >= 2) {
                  $("#ipsVersion").text($.trim(ipsVersion[1]));
                }
              }
              if (rows[i].indexOf("Total Compiled Signatures: ") > -1) {
                compiledSign = rows[i].split("Total Compiled Signatures: ");
                if (compiledSign.length >= 2) {
                  //$("#ipsSignatureCount").text(compiledSign[1]);
                  if (compiledSign[1] >= 0) {
                    ipsEnableOutput = deviceCommunicator.getExecCmdOutput("show ip ips interfaces");
                    if ((ipsEnableOutput.indexOf("Interface")) > -1) {
                      $("#enableIPS").prop('checked', true);
                      ipsEnabled = true;
                      $("#initialIpsStatus").val("true");
                      $("#ipsTable").show();
                      $("#ipsImage").show();
                      $("#ipsImageFirewall").hide();
                      //return false;
                    }
                  }
                  else {
                    $("#enableIPS").prop('checked', false);
                    ipsEnabled = false;
                    $("#ipsTable").hide();
                    $("#ipsImage").hide();
                    $("#ipsImageFirewall").show();
                    //return false;
                  }

                }
              }

              if (rows[i].indexOf("Total Signatures with compile failures: ") > -1) {
                failedCount = 0;
                $("#ipsSignatureCount").text(failedCount);
                failedSign = rows[i].split("Total Signatures with compile failures: ");
                if (failedSign.length >= 2) {
                  failedCount = failedSign[1];
                  $("#ipsSignatureCount").text(failedCount);
                  if (failedCount >= 0) {
                    $("#ipsSignFailureMsgDiv").show();
                    return false;
                  }
                  else {
                    $("#ipsSignFailureMsgDiv").hide();
                    return false;
                  }
                }
              }
            }
          }
        }
        else {
          $("#ipsWanCheckDiv").hide();
          $("#ipsFieldSet").hide();
          $("#ipsSignDiv").hide();
          $("#ipsSecLicDiv").show();
        }
      }
      else {
        $("#ipsWanCheckDiv").hide();
        $("#ipsFieldSet").hide();
        $("#ipsSignDiv").show();
      }

      //Store the IPS signature selected value from the selected package version.
      signaturepackage = getPackageFullNameFromVersion(ipsPkgVerPresent, ipsPkgInRouter);
    }
    catch (e) {
      //alert(e.message);
      //$('#confIPSErrorMessage').html(e.errorResponse);
      if (e.errorResponse != null && e.errorResponse != undefined) {
        if ((e.errorResponse).indexOf("Invalid input detected") == 0) {
          $('#confIPSErrorMessage').html($.i18n.prop("invalidInputDetected"));
        }
        else if ((e.errorResponse).indexOf("Specify non-empty resource name") == 0) {
          $('#confIPSErrorMessage').html($.i18n.prop("errSpecifyOne"));
        }
        else if ((e.errorResponse).indexOf("Specify non-empty interface name") == 0) {
          $('#confIPSErrorMessage').html($.i18n.prop("errSpecifyTwo"));
        }
        else {
          $('#confIPSErrorMessage').html(e.errorResponse);
        }
        $('#confIPSError').show();
      }
  }

    //The below lines of code is to be commented out after beta to enable selection of package.
    sigindex = 0;
    if (ipsPkgInRouter != null && ipsPkgInRouter != undefined && ipsPkgInRouter.length > 0)
    {
      if (signaturepackage == undefined)
      {
        signaturepackage = ipsPkgInRouter[sigindex];
      }
      var signaturepackageNoExtnArray = signaturepackage.split(".");
      signaturepackageNoExtn = signaturepackageNoExtnArray[0];
      ////consoleLog('signaturepackage-'+signaturepackage);
      ////consoleLog('signaturepackageNoExtn-'+signaturepackageNoExtn);
    }

    //This is to clear the already added elements to the div and write new elements
    refreshIPSSignaturesListElements();

    $('#ipsImage').tooltip({
      show: {
        effect: "slideDown"
      },
      position: {
        my: "bottom-50",
        at: "left+275",
        track: false,
        using: function(position, feedback) {
          $(this).css(position);
        }
      },
      tooltipClass: "custom-tooltip-styling"
    });

    $("#dialog-signature-select").dialog({
      autoOpen: false,
      height: 250,
      width: 400,
      modal: true,
      //buttons: {
      //"Ok": function (e) {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function(e) {
            selectedPackage = true;
            $("#selectedSignaturePackage").val($("input:radio[name='ipsSigPkgSelctd']:checked").val());
            signaturepackage = $("#selectedSignaturePackage").attr("value");
            var signaturepackageNoExtnArray = signaturepackage.split(".");
            signaturepackageNoExtn = signaturepackageNoExtnArray[0];
            var temp101112 = signaturepackage.split(dashPatt);
            ipsPkgVerSelected = temp101112[1];

            if (!calledForIPSPkgChange) {
              $("#ipsImage").show();
              $("#ipsImageFirewall").hide();
              ////consoleLog("ipsPkgVerSelected - "+ipsPkgVerSelected);
              //$('#confIPSInfoMessage').html("There are changes to IPS configuration. To persist the same, please click on Apply.");
              $('#confIPSInfoMessage').html($.i18n.prop("changesToIPS"));
              $('#confIPSInfo').show();
            }
            else {
              blockPage("Applying");
              setTimeout(function() {
                try {
                  deviceCommunicator.getExecCmdOutput("copy flash:" + signaturepackage + " idconf");
                  ////consoleLog("idconf log - "+temp);
                  e.preventDefault();
                  loadIPSSettings();
                  $.unblockUI();
                }
                catch (e) {
                  //alert(e.errorResponse);
                  $.unblockUI();
                  calledForIPSPkgChange = false;
                }
              }, 1000);
            }
            $(this).dialog("close");
            //},
            //Cancel: function () {
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            selectedPackage = false;
            if (!calledForIPSPkgChange) {
              //Reset the IPS enable so that its the old state.
              $("#enableIPS").prop('checked', false);

              $('#ipsEnableRepeatInfoMsg').hide();
              $('#confIPSInfo').hide();

              $("#ipsImageFirewall").show();

              $("#ipsImage").hide();
              $("#ipsTable").hide();
            }
            $(this).dialog("close");
          }
        }],
      close: function() {
        if (!selectedPackage) {
          $("input[name='ipsSigPkgSelctd']").attr('checked', false);
        }
        if (!ipsEnabled && syslogdisabled)
        {
          $("#warningIPSSysLogDisabled").hide();
        }
        calledForIPSPkgChange = false;

      }
    });


    $("#dialog-signature-upload").dialog({
      autoOpen: false,
      height: 200,
      width: 500,
      closeOnEscape: false,
      title: $.i18n.prop("uploadSignature"),
      resizable: false,
      modal: true,
      close: function() {
        //resetUploadInputFileField();
        abortCurrentUpload();
        currentXHR = null;
        userAbortedXHR = false;
        $('#uploadSigPkgMsgs').html('');
        $('#uploadSigPkgErrs').html('');
        $('#uploadSigPkgMsgs').hide();
        $('#uploadSigPkgErrs').hide();
        $('#uploadSigPkgDuplicate').hide();
        $('#uploadSigPkgInterrupted').hide();
        $('#uploadSignaturePackage').hide();
      }
    });
    //$.unblockUI();


    if (ipsEnabled && syslogdisabled) {
      $("#warningIPSSysLogDisabled").show();
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "loadIPSSettings()");

    return false;


  }

  function addIpsInterface(wanList,privew) {
    //consoleLogMethodDetailsStart("configureIPS.js", "addIpsInterface()");
    //code
    if(privew==undefined){
    privew=false;
    }
    var arr = [];
    var DefaultIps = [];
    var outPut="";
    outPut=outPut+deviceCommunicator.configureCommandsFromTemplate("DefaultIps.txt", DefaultIps, true);
    for (var i = 0; i < wanList.length; i++) {
      arr.length = 0;
      arr.push({name: "interface", value: wanList[i]});
      outPut = outPut+deviceCommunicator.configureCommandsFromTemplate("IPSAdd.txt", arr, true);
    }
    if(privew){
    return outPut;
    }else{
    deviceCommunicator.getConfigCmdOutput(outPut);
    return "";
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "addIpsInterface()");
  }

  function deleteIpsInterface(wanList) {
    //consoleLogMethodDetailsStart("configureIPS.js", "deleteIpsInterface()");
    //code
    var intArray = [];
    for (var i = 0; i < wanList.length; i++) {
      intArray.length = 0;
      intArray.push({name: "interface", value: wanList[i]});
      response = deviceCommunicator.configureCommandsFromTemplate("IPSDelete.txt", intArray, false);
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "deleteIpsInterface()");
  }

  function ipsInterfaceDetails() {
    //code
    //consoleLogMethodDetailsStart("configureIPS.js", "ipsInterfaceDetails()");
    configureInterfaceArray = [];
    configureInterfaceArray.length = 0;
    try {
      Arrval = [];
      rows = [];
      rows.length = 0;
      Outputcli = deviceCommunicator.getExecCmdOutput("show ip ips interfaces");
      reg = new RegExp("[,\\n]");
      rows = Outputcli.split(reg);
      for (i = 0; i < rows.length; i++) {
        ////consoleLog(rows[i].indexof("Interface")+"="+rows[i].indexof("Conf"))
        if ((rows[i].indexOf("Interface") > -1) && rows[i].indexOf("Configuration") <= -1) {
          //code
          Arrval = rows[i].trim().split(" ");
          configureInterfaceArray[configureInterfaceArray.length] = Arrval[1];
          Arrval.length = 0;
        }
      }
    } catch (error) {
      return configureInterfaceArray;
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "ipsInterfaceDetails()");
    return configureInterfaceArray;
  }

  function toggleEnableDisable(notificationType, divObj)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "toggleEnableDisable()");

    var innterTextVal = divObj.find(".EnableDisableToggle");
    if (innterTextVal.text() == "Enable") {
      innterTextVal.text($.i18n.prop("configureIPSdisable"));
    } else
    {
      innterTextVal.text($.i18n.prop("configureIPSenable"));
    }

    if (notificationType == "sdee") {
      divObj.find('i').toggleClass('fa-envelope fa-envelope-o');
    }
    else if (notificationType == "log") {
      divObj.find('i').toggleClass('fa-file-text fa-file-text-o');
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "toggleEnableDisable()");
  }

  function toggleEnableDisableIPSNotification(notificationType, divObj)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "toggleEnableDisableIPSNotification()");
    blockPage("Applying");
    var disabling = false;
    var notifyCmd = "ip ips notify " + notificationType, enableDisableToggleVar = divObj.find(".EnableDisableToggle");
    ////consoleLog(enableDisableToggleVar.text());
    if (enableDisableToggleVar.text() == "Disable") {
      notifyCmd = "no " + notifyCmd;
      disabling = true;
    }

    try {
      setTimeout(function(e) {
        deviceCommunicator.getConfigCmdOutput(notifyCmd, false);
        ////consoleLog(responseToUserCmd);
        toggleEnableDisable(notificationType, divObj);
        $.unblockUI();
      }, 1000);
    } catch (e)
    {
      ////consoleLog('Error while enabling '+notificationType+ 'Notification:' + e);
      $.unblockUI();
    }

    if (notificationType == "log") {
      $("#warningIPSSysLogDisabled").hide();
    }
    if (disabling && notificationType == "log") {
      syslogdisabled = true;
    } else {
      syslogdisabled = false;
    }

    if (ipsEnabled && syslogdisabled) {
      $("#warningIPSSysLogDisabled").show();
    } else {
      $("#warningIPSSysLogDisabled").hide();
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "toggleEnableDisableIPSNotification()");
  }


  // Grab the files and set them to our variable
  function prepareUpload(event)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "prepareUpload()");
    blockPage("Loading");
    currentXHR = null;
    userAbortedXHR = false;
    $("#progressBarMsgDivTemp1").hide();
    $("#progressBarMsgDivTemp2").hide();
    //Clear and Hide Alert Div
    $('#uploadSigPkgDuplicate').hide();
    $('#uploadSigPkgInterrupted').hide();
    $('#uploadSigPkgErrs').hide();
    $('#uploadSigPkgMsgs').hide();
    $('#uploadSignaturePackage').hide();

    files = event.target.files;

    if (files != null && files != undefined && files.length > 0) {
      //code
      selectedFileName = files[0].name;
      selectedFileSize = files[0].size;
      var flashFreeSpace = getFlashFreeSpace();
      ipsPkgInRouter = getIpsPkgListOnRouter();
      var fileAlreadyInFlashIndex = jQuery.inArray(selectedFileName, ipsPkgInRouter);
      ////consoleLog('fileAlreadyInFlashIndex-'+fileAlreadyInFlashIndex);

      var fileNameCheck = selectedFileName.match(regExpIpsSigPkgName);

      if (fileNameCheck == null || fileNameCheck == undefined || fileNameCheck == '') {
        //var msgTxt = 'File name should be of the format IOS-Sxxx-CLI.pkg';
        var msgTxt = $.i18n.prop("fileNameFormatMess");
        $('#uploadSigPkgErrs').html(msgTxt);
        $('#uploadSigPkgErrs').show();
      } else if (flashFreeSpace == 0 || flashFreeSpace < selectedFileSize) {
        var msgTxt = 'Selected file (' + selectedFileName +
          ') size is ' + selectedFileSize + ' bytes.';
        if (flashFreeSpace == 0)
        {
          //msgTxt = msgTxt + ' Box not responding OR free space on flash: is low ('+flashFreeSpace+' bytes).' +
          //' Please check connection OR free up space to upload files.';
          msgTxt = msgTxt + $.i18n.prop("boxSpaceLowMess") + ' (' + flashFreeSpace + ' bytes). ' + $.i18n.prop("checkConnectionORSpace");
        } else {
          //msgTxt = msgTxt + ' Free space on flash: is low ('+flashFreeSpace+' bytes).' +
          //Please free up space to upload files.';
          msgTxt = msgTxt + $.i18n.prop("freeSpaceLowMess") + ' (' + flashFreeSpace + ' bytes). ' + $.i18n.prop("freeUpSpaceToUploadMess");

        }
        $('#uploadSigPkgErrs').html(msgTxt);
        $('#uploadSigPkgErrs').show();
      } else if (fileAlreadyInFlashIndex != -1) {
        $('#uploadSigPkgDuplicateSpan').html(selectedFileName);
        $('#uploadSigPkgDuplicate').show();
      }
      else {
        //var msgTxt = 'Selected file ' + selectedFileName +
        //' ('+ selectedFileSize+' bytes) is ready for upload. Please proceed by clicking on Upload.';
        var msgTxt = $.i18n.prop("selectedFile") + ' ' + selectedFileName +
          ' (' + selectedFileSize + ' bytes) ' + $.i18n.prop("isReadyUpload");
        $('#uploadSigPkgErrs').html('');
        $('#uploadSigPkgErrs').hide();
        $('#uploadSigPkgDuplicate').hide();
        $('#uploadSigPkgInterrupted').hide();
        $('#uploadSigPkgMsgs').html(msgTxt);
        $('#uploadSigPkgMsgs').show();
        $('#uploadSignaturePackage').show();
      }
    } else {

      //var msgTxt = 'File selection cancelled by user. Please select a Package file for upload.';
      var msgTxt = $.i18n.prop("fileUploadMess");
      $('#uploadSigPkgErrs').html(msgTxt);
      $('#uploadSigPkgErrs').show();
    }
    $.unblockUI();
    //consoleLogMethodDetailsEnd("configureIPS.js", "prepareUpload()");
  }

  function getFlashFreeSpace()
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "getFlashFreeSpace()");
    var freeFlashMemory = 0;
    var xml = deviceCommunicator.getExecCmdOutput("show file systems | format " + deviceCommunicator.getInstallDir() + "/odm/overviewshFileSystem.odm");
    var flash = false;
    $(xml).find('entry').each(function() {
      prefixes = $(this).find('Prefixes').text();
      if (prefixes.indexOf('flash') !== -1 && !flash) {
        freeFlashMemory = ($(this).find('free').text());
        var splitMemory = freeFlashMemory.split(" ");
        freeFlashMemory = splitMemory[0];
        //freeFlashMemoryinKB = parseFloat((splitMemory[0] / 1024).toFixed(2));
        flash = true;
      }
    });
    //consoleLogMethodDetailsEnd("configureIPS.js", "getFlashFreeSpace()");

    return freeFlashMemory;
  }

  function uploadProgressBar(completedPercent, objProgressBarDiv, objUploadMsgDiv, stringForInProgress, fileName)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "uploadProgressBar()");
    var uploadMessage = stringForInProgress + " (" + completedPercent + "%)";

    objUploadMsgDiv.find('.uploadPercentSpan').html(uploadMessage);

    var tempUploadWidth = Math.round((completedPercent * 458) / 100) + 'px';
    objProgressBarDiv.css('width', tempUploadWidth);
    //consoleLogMethodDetailsEnd("configureIPS.js", "uploadProgressBar()");
  }

  function uploadFiles() {
    //blockPage("Uploading");
    //consoleLogMethodDetailsStart("configureIPS.js", "uploadFiles()");
    currentXHR = null;
    userAbortedXHR = false;
    $('#uploadSigPkgDuplicate').hide();
    $('#uploadSigPkgInterrupted').hide();
    $('#uploadSigPkgErrs').hide();
    $('#uploadSigPkgMsgs').hide();

    //disable close button for dialog
    //var dialogCloseButton = $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close');
    //if (dialogCloseButton!= null && dialogCloseButton != undefined) {
    //    dialogCloseButton.hide();
    //}

    var uploadPercent;
    var uploadProgressBarDiv = $("#progressBarMsgDivTemp1");
    uploadProgressBarDiv.css('width', '1px');

    var uploadInfoDiv = $("#progressBarMsgDivTemp2");
    uploadProgressBarDiv.hide();
    uploadInfoDiv.hide();
    //uploadInfoDiv.find('.uploadPercentSpan').html("Initializing Upload");
    uploadInfoDiv.find('.uploadPercentSpan').html($.i18n.prop("initUpload"));
    $('#uploadSignaturePkg').hide();
    $('#uploadSignaturePackage').hide();

    //$('#progressBarMsgDivTemp2').show();

    uploadProgressBarDiv.show();
    uploadInfoDiv.show();
    //var uploadProgressString = "Signature Package "+ selectedFileName + " Upload in Progress";
    var uploadProgressString = $.i18n.prop("signaturePackage") + ' ' + selectedFileName + ' ' + $.i18n.prop("uploadInProgress");

    var xhr = new XMLHttpRequest();
    currentXHR = xhr;
    xhr.upload.onprogress = function(e) {
      uploadPercent = Math.round((e.loaded / e.total) * 100);
      ////consoleLog('Upload Percent - '+percent+'%');
      uploadProgressBar(uploadPercent, uploadProgressBarDiv, uploadInfoDiv, uploadProgressString, selectedFileName);

    };
    xhr.onreadystatechange = function(e) {
      if (this.readyState === 4) {
        uploadProgressBarDiv.hide();
        uploadInfoDiv.hide();

        if (uploadPercent == 100) {
          var isFirstPkg = false, isSecondPkg = false;
          //$("#IPSUploadProgress").hide();
          //$('#uploadSigPkgMsgs').html("File "+selectedFileName+ " Upload Completed.");
          //Wrong way of doing should store complete string in property file and replace the select file name
          $('#uploadSigPkgMsgs').html($.i18n.prop("fileStr") + " " + selectedFileName + " " + $.i18n.prop("upComplete"));
          $('#uploadSigPkgMsgs').show();
          //uploadInfoDiv.html("File "+selectedFileName+ " Upload Completed.");
          if (ipsPkgInRouter == undefined || ipsPkgInRouter == null || ipsPkgInRouter.length == 0)
          {
            ipsPkgInRouter = [];
            isFirstPkg = true;
          } else if (ipsPkgInRouter.length == 1)
          {
            isSecondPkg = true;
          }
          ipsPkgInRouter.push(selectedFileName);
          refreshIPSSignaturesListElements();
          if (isFirstPkg)
          {
            loadIPSSettings();
          }
          else if (isSecondPkg)
          {
            //enable the icon

            $('#ChangeIPSSignatures').show();
            // Add code to increase the popup menu height to 187.
            $('#IPSSettings').css('height', '187px');
          }
          isFirstPkg = false;
          isSecondPkg = false;
        } else {
          uploadProgressBarDiv.css('width', '1px');
          uploadProgressBarDiv.hide();
          if (!userAbortedXHR) {
            $('#uploadSigPkgInterruptedSpan').html(selectedFileName);
            $('#uploadSigPkgInterrupted').show();
            userAbortedXHR = false;
          }
        }

        //Reset the File uploader so that the user can
        //resetUploadInputFileField();
        $('#uploadSignaturePkg').show();
        //enable close button for dialog.
        //if (dialogCloseButton!= null && dialogCloseButton != undefined) {
        //    dialogCloseButton.show();
        //}

        //$.unblockUI();
      }
      //else {
      //    onUploadError(xhr.statusText);
      //}
    };
    xhr.open('PUT', urlofPage + selectedFileName, true);
    xhr.onerror = function() {
      //resetUploadInputFileField();
    };
    // Pass the filename along
    xhr.setRequestHeader('X-FileName', selectedFileName);
    try {
      ////consoleLog("starting file upload - " + files[0]);
      xhr.send(files[0]);
    } catch (err) {
      onUploadError(err);
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "uploadFiles()");
  }

  function onUploadError(err)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "onUploadError()");
    //resetUploadInputFileField();
    var errorString = 'Errors during upload';
    if (err != null && err != undefined) {
      if (typeof err === 'string') {
        errorString = errorString + ': ' + err;
      } else if (err.description != null && err.description != undefined) {
        errorString = errorString + err.description;
      }
    }
    ////consoleLog(errorString);
    $('#uploadSigPkgMsgs').hide();
    $('#uploadSigPkgMsgs').html(errorString);
    $('#uploadSigPkgErrs').show();
    //consoleLogMethodDetailsEnd("configureIPS.js", "onUploadError()");
  }

  function resetUploadInputFileField() {
    //consoleLogMethodDetailsStart("configureIPS.js", "resetUploadInputFileField()");
    var inputFileForUpload = $("#sig-pkg-file-select-orig");
    inputFileForUpload.replaceWith(inputFileForUpload.val('').clone(true));
    //consoleLogMethodDetailsEnd("configureIPS.js", "resetUploadInputFileField()");
  }

  ////The below function did not work. The upload was successful, but the file size was wrong.
  //function uploadFilesDIDNOTWORK() {
  //blockPage("Uploading");
  //$('#uploadSignaturePackage').hide();
  //
  //var file_data = files[0];   // Getting the properties of file from file field
  //var form_data = new FormData();                  // Creating object of FormData class
  //form_data.append("file", file_data);              // Appending parameter named file with properties of file_field to form_data
  //$.ajax({
  //  url: urlofPage+selectedFileName,
  //  dataType: 'script',
  //  cache: false,
  //  contentType: false,
  //  processData: false,
  //  data: form_data,                         // Setting the data attribute of ajax with file_data
  //  type: 'PUT',
  //  success: function(data, textStatus, jqXHR)
  // {
  //  ipsPkgInRouter.push(selectedFileName);
  // },
  //  error: function(jqXHR, textStatus, errorThrown)
  //  {
  //  // Handle errors here
  //  ////consoleLog('ERRORS: ' + textStatus + ' ' + errorThrown);
  //  $('#uploadSigPkgErrs').html('Error during upload: '+ textStatus);
  //  $('#uploadSigPkgErrs').show();
  //  $('#uploadSignaturePackage').hide();
  //  $.unblockUI();
  //  },
  //  complete: function()
  //  {
  //   $.unblockUI();
  //   $("#IPSUploadProgress").hide();
  //   $('#uploadSigPkgMsgs').html('Upload Completed');
  //   $('#uploadSigPkgMsgs').show();
  //   $('#uploadSignaturePackage').hide();
  //  }
  // })
  //}

  function refreshIPSSignaturesListElements() {
    //This function refreshes the elements of div ipsFlashSignaturesList
    //consoleLogMethodDetailsStart("configureIPS.js", "refreshIPSSignaturesListElements()");

    $("#ipsFlashSignaturesList").empty();

    if (ipsPkgInRouter != null && ipsPkgInRouter != undefined && ipsPkgInRouter.length != 0) {
      var indexOfPackageSelected = ipsPkgInRouter.indexOf(signaturepackage);
      //alert("about to do checking12345");
      for (var i = 0; i < ipsPkgInRouter.length; i++) {
        var tempChkdString = '';
        //var tempPkgString = ipsPkgInRouter[i];
        if (indexOfPackageSelected != undefined && indexOfPackageSelected != -1 && indexOfPackageSelected == i)
        {
          tempChkdString = ' checked="checked" ';
          ////consoleLog("checking done");
        }

        var ipsPackageFullName = ipsPkgInRouter[i];
        var signaturepackageNoExtnArray = ipsPackageFullName.split(".");
        var ipsPackageWithoutExtension = signaturepackageNoExtnArray[0];
        ////consoleLog('ipsPackageFullName-'+ipsPackageFullName);
        ////consoleLog('ipsPackageWithoutExtension-'+ipsPackageWithoutExtension);

        var totalString = '<input type="radio" name="ipsSigPkgSelctd" ips-sig-group-data="' + ipsPackageFullName
          + '" value="' + ipsPackageFullName + '" class="' + ipsPackageWithoutExtension + '" ' +
          tempChkdString + '><span class="' + ipsPackageWithoutExtension + '">'
          + ipsPackageFullName + '</span> <span class="selected-' + ipsPackageWithoutExtension
          //    +'" class="ccpexpCSSReplaceClass577">&nbsp;(Currently in use) </span><br>';
          + '" class="ccpexpCSSReplaceClass578">&nbsp;' + $.i18n.prop("currentlyInUse") + ' </span><br>';

        $("#ipsFlashSignaturesList").append(totalString);

      }
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "refreshIPSSignaturesListElements()");
  }
  ;

  /***
   * Method to get the index in the array that has the substring
   *
   */
  function getSubStringFromArray(searchSubString, mainArray)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "getSubStringFromArray()");

    var returnValue = -1, temp;

    if (searchSubString != null && searchSubString != undefined)
    {
      if (mainArray != null && mainArray != undefined && $.isArray(mainArray)) {
        for (var i = 0; i < mainArray.length; i++)
        {
          temp = mainArray[i].match(searchSubString);
          if (temp != null && temp != undefined && temp == searchSubString) {
            returnValue = i;
            break;
          }
        }
      }
    } else {
      returnValue = -1;
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "getSubStringFromArray()");
    return returnValue;

  }

  /**
   * Method to get the array element holding the package names based on pacakge version
   */

  function getPackageFullNameFromVersion(verValue, pkgArray)
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "getPackageFullNameFromVersion()");
    var pkgFullName, index = getSubStringFromArray(verValue, pkgArray);

    if (index != -1) {
      pkgFullName = pkgArray[index];
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "getPackageFullNameFromVersion()");
    return pkgFullName;

  }

  function abortCurrentUpload()
  {
    //consoleLogMethodDetailsStart("configureIPS.js", "abortCurrentUpload()");
    if (currentXHR != null && currentXHR != undefined && currentXHR.readyState != 4) {
      userAbortedXHR = true;
      $('#progressBarMsgDivTemp1').hide();
      $('#progressBarMsgDivTemp1').css('width', '1px');
      $('#progressBarMsgDivTemp2').hide();
      currentXHR.abort();
    }
    //consoleLogMethodDetailsEnd("configureIPS.js", "abortCurrentUpload()");
  }
  function confIPSLoading() {
    //consoleLogMethodDetailsStart("configureIPS.js", "confIPSLoading()");

    $("#sig-pkg-file-select").on("click", function() {
      blockPage("Loading");
      $('#uploadSigPkgDuplicate').hide();
      $('#uploadSigPkgInterrupted').hide();
      $('#uploadSigPkgErrs').hide();
      $('#uploadSigPkgMsgs').hide();
      $('#uploadSignaturePackage').hide();
      resetUploadInputFileField();
      $("#sig-pkg-file-select-orig").click();
      $.unblockUI();
      return false;
    });

    // Add events
    $('#sig-pkg-file-select-orig').on('change', prepareUpload);

    //$('#ipsSigPkgUploadForm').on('submit', uploadFiles);
    $('#uploadSignaturePackage').on('click',
      function() {
        //var dialogCloseButton1 = $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close');
        ////consoleLog(dialogCloseButton1.parent().html());
        //dialogCloseButton1.hide();
        ////consoleLog(dialogCloseButton1.parent().html());
        uploadFiles();
        //dialogCloseButton1.show();
        return false;
      }
    );

    $(".enableIPSSyslog").on("click",
      function() {
        var syslogDivObject = $("#IPSsyslog");
        toggleEnableDisableIPSNotification("log", syslogDivObject);
        return false;
      }
    );


    //Binding the click on the override links to the uploadFiles function.
    //$(".overrideAndUploadFiles").click(uploadFiles());
    $(".overrideAndUploadFiles").live("click",
      function() {
        //var dialogCloseButton2 = $(this).closest('.ui-dialog').find('.ui-dialog-titlebar-close');
        ////consoleLog(dialogCloseButton2.parent().html());
        //dialogCloseButton2.hide();
        ////consoleLog(dialogCloseButton2.parent().html());
        uploadFiles();
        //dialogCloseButton2.show();
        return false;
      }
    );

    $('#abortCurrentFileUpload').click(function() {

      if (currentXHR != null && currentXHR.readyState != 4) {
        abortCurrentUpload();
        //$('#uploadSigPkgErrs').html('Aborted File Upload on user request.');
        $('#uploadSigPkgErrs').html($.i18n.prop("abortedFileUpload"));
        $('#uploadSigPkgErrs').show();
        setTimeout(function() {
          $('#uploadSigPkgErrs').fadeOut('slow');
        }, 3000);
      }
      return false;
    });

    //loadAndDisplayConfIPSLanguages();
    $("#refreshIPS").hide();
    $(".gotointerfaceAsso").click(function(e) {
      $('ul#bottomnav li#bottomnav-1 a').trigger("click");
      return false;
    });

    $("#enableIPS").change(function() {
      if ($('#enableIPS').is(':checked')) {
        $("#ipsImageFirewall").hide();
        $("#ipsImage").show();
        if (syslogdisabled)
        {
          $("#warningIPSSysLogDisabled").show();
        }
        if (ipsEnabled) {
          $("#ipsTable").show();
          $('#confIPSInfo').hide();
          $('#ipsEnableRepeatInfoMsg').show();
        }
        else {

          if (ipsFirstTime) {
            $("input:radio[name='ipsSigPkgSelctd']:first").attr('checked', true);
            $("#progressBarMsgDivTemp1").hide();
            $("#progressBarMsgDivTemp2").hide();
            $("#dialog-signature-select").dialog("open");
          }
          else
          {
            //$('#confIPSInfoMessage').html("There are changes to IPS configuration. To persist the same, please click on Apply.");
            $('#confIPSInfoMessage').html($.i18n.prop("changesToIPS"));
            $('#confIPSInfo').show();
          }
        }
      }
      else {
        $("#warningIPSSysLogDisabled").hide();
        $("#ipsImage").hide();
        $("#ipsTable").hide();
        $('#ipsEnableRepeatInfoMsg').hide();
        $("#ipsImageFirewall").show();
        if (ipsEnabled) {
          //$('#confIPSInfoMessage').html("There are changes to IPS configuration. To persist the same, please click on Apply.");
          $('#confIPSInfoMessage').html($.i18n.prop("changesToIPS"));
          $('#confIPSInfo').show();
        } else {
          $('#confIPSInfo').hide();
        }
      }
    });

    $("#ccoCredentialsTable").hide();
    $("#autoUpdate").change(function() {
      if ($('#autoUpdate').is(':checked')) {
        $("#ccoCredentialsTable").show();
      }
      else {
        $("#ccoCredentialsTable").hide();
      }
    });


    $('#ChangeIPSSignatures').click(function() {
      ipsPkgInRouter = getIpsPkgListOnRouter();
      refreshIPSSignaturesListElements();
      calledForIPSPkgChange = true;
      $("input[name='ipsSigPkgSelctd']").attr('checked', false);
      ////consoleLog('signaturepackage-'+signaturepackage);
      ////consoleLog('signaturepackageNoExtn -'+signaturepackageNoExtn );

      var spanShowSelectedVar = $('.selected-' + signaturepackageNoExtn);
      ////consoleLog('spanShowSelectedVar-'+spanShowSelectedVar+'-'+spanShowSelectedVar.html());
      $('.' + signaturepackageNoExtn).prop('disabled', 'true');
      spanShowSelectedVar.show();
      spanShowSelectedVar.css('visibility', 'visible');
      $(".IPSSettingsPopup").css('display', 'none');
      $("#IPSSettings").slideUp();
      $("input:radio[name='ipsSigPkgSelctd']:not(:disabled):first").attr('checked', true);
      $("#progressBarMsgDivTemp1").hide();
      $("#progressBarMsgDivTemp2").hide();

      $("#dialog-signature-select").dialog("open");
    });


    $('#UploadIPSSigPkg').click(function() {
      //alert("Upload Signature package - Underconstruction.");

      //Check if selected package is present in list of package files using packageIndex = fruits.indexOf(packageFileName); if(packageIndex != -1) {}
      //e.preventDefault();
      var flashFreeSpace = getFlashFreeSpace();
      ////consoleLog('flashFreeSpace-'+flashFreeSpace);
      var flashFreeSpaceinKB = parseFloat((flashFreeSpace / 1024).toFixed(2));

      if (flashFreeSpaceinKB == 0) {
        //$('#uploadSigPkgErrs').html('Box not responding OR free space on flash: is 0 KB. Please check connection OR free up space to enable upload.');
        $('#uploadSigPkgErrs').html($.i18n.prop("boxNotResponding"));
        ////consoleLog('Free space on flash: is 0 KB. Please free up space to enable upload.');
        $('#uploadSigPkgErrs').show();
        $('#uploadSigPkgDuplicate').hide();
        $('#uploadSigPkgInterrupted').hide();
        $('#uploadSignaturePkg').hide();
      }
      else {
        enableUploadOnFlash();
        $('#uploadSigPkgMsgs').html('');
        $('#uploadSigPkgErrs').html('');
        $('#uploadSigPkgMsgs').hide();
        $('#uploadSigPkgErrs').hide();
        $('#uploadSigPkgDuplicate').hide();
        $('#uploadSigPkgInterrupted').hide();
        $('#uploadSignaturePkg').show();
      }
      $(".IPSSettingsPopup").css('display', 'none');
      $("#IPSSettings").slideUp();
      //resetUploadInputFileField();
      $("#progressBarMsgDivTemp1").hide();
      $("#progressBarMsgDivTemp2").hide();
      $("#dialog-signature-upload").dialog("open");
    });

    $('#abortCurrentFileUpload').tooltip({
      tooltipClass: "upload-tooltip-styling"
    });

    $('#sig-pkg-file-select').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $(".IPSConfiguration").hover(
      function() {
        $("#IPSSettings").slideDown(500);
      },
      function() {

      }
    );

    $("#IPSSettings").hover(
      function() {
        $(".IPSSettingsPopup").css('cursor', 'hand');
      },
      function() {
        $(".IPSSettingsPopup").css('cursor', 'pointer');
        $(".IPSSettingsPopup").css('display', 'none');
        $("#IPSSettings").slideUp();
      }
    );

    $('#IPSsdeeNotification').click(function() {
      toggleEnableDisableIPSNotification("sdee", $(this));

      $(".IPSSettingsPopup").css('display', 'none');
      $("#IPSSettings").slideUp();
    });

    $('#IPSsyslog').click(function() {
      toggleEnableDisableIPSNotification("log", $(this));

      $(".IPSSettingsPopup").css('display', 'none');
      $("#IPSSettings").slideUp();
    });

    $("#authUpdate")
      .button()
      .click(function(e) {
        return false;
      });

    $("#applyIPS")
      .button()
      .click(function(e) {
        //try {
        //consoleLogMethodDetailsStart("configureIPS.js", "$(\"#applyIPS\").button().click()");

        $("#warningIPSSysLogDisabled").hide();

        if ($.parseJSON($("#initialIpsStatus").val()) != $("#enableIPS").is(':checked')) {
          blockPage("Applying");
          setTimeout(function() {
            try {
              if ($("#enableIPS").is(':checked')) {
                var DefaultIps = [], ipsDirName, noConfigLocation = true;
                var dirPattern = /drw-/, regDir = /ips/;
                var dirArray = ipsDir.split(dirPattern);
                for (var i = 0; i < dirArray.length; i++) {
                  ipsDirName = dirArray[i].match(regDir);
                  if ((ipsDirName != null) && (ipsDirName != "") && (ipsDirName == "ips"))
                  {
                    noConfigLocation = false;
                    break;
                  }
                }

                try {
                  if (noConfigLocation) {
                    deviceCommunicator.getExecCmdOutput("mkdir ips \n\n");
                  }
                } catch (e) {
                  //alert(e);
                }

                deviceCommunicator.configureCommandsFromTemplate("DefaultIps.txt", DefaultIps, false);
                deviceCommunicator.getExecCmdOutput("copy running-config startup-config \n\n");
                deviceCommunicator.configureCommandsFromTemplate("IPSCompileSignatures.txt", DefaultIps, false);

                var wanList = configureFirewall.getInterfacesInZone("WAN"), arr = [], response;
                for (var i = 0; i < wanList.length; i++) {
                  arr.length = 0;
                  arr.push({name: "interface", value: wanList[i]});
                  response = deviceCommunicator.configureCommandsFromTemplate("IPSAdd.txt", arr, false);
                }
                deviceCommunicator.doWriteMemory();

                arr.push({name: "signaturepackage", value: signaturepackage});

                var arr1 = [], temp1;
                arr1.length = 0;
                arr1.push({name: "signaturepackage", value: signaturepackage});
                //if (ipsFirstTime === true) || (ipsPkgVerPresent != ipsPkgVerSelected))
                if (ipsFirstTime)
                {
                  ////consoleLog("firsttimeIPS - "+ipsFirstTime + "ipsPkgVerPresent - "+ipsPkgVerPresent+" ipsPkgVerSelected - "+ipsPkgVerSelected);
                  var commandString = 'copy flash:' + signaturepackage + ' idconf';
                  temp1 = deviceCommunicator.getExecCmdOutput(commandString);
                  ////consoleLog("idconf log - "+temp1);
                  ipsFirstTime = false;
                }

                ipsEnabled = true;

              }
              else {
                configureInterfaceArray = [];
                configureInterfaceArray.length = 0;
                Arrval = [];
                rows = [];
                rows.length = 0;
                intArray = [];
                try {
                  Outputcli = deviceCommunicator.getExecCmdOutput("show ip ips interfaces");

                  reg = new RegExp("[,\\n]");
                  rows = Outputcli.split(reg);
                  for (i = 0; i < rows.length; i++) {
                    ////consoleLog(rows[i].indexof("Interface")+"="+rows[i].indexof("Conf"))
                    if ((rows[i].indexOf("Interface") > -1) && rows[i].indexOf("Configuration") <= -1) {
                      //code
                      Arrval = rows[i].trim().split(" ");
                      configureInterfaceArray[configureInterfaceArray.length] = Arrval[1];
                      Arrval.length = 0;
                    }
                  }
                  for (j = 0; j < configureInterfaceArray.length; j++) {
                    intArray.length = 0;
                    intArray.push({name: "interface", value: configureInterfaceArray[j]});
                    response = deviceCommunicator.configureCommandsFromTemplate("IPSDelete.txt", intArray, false);
                  }
                  $("#ipsTable").hide();
                }
                catch (e) {
                  // Ignore error messages like 'IPS is currently not configured for interface '
                }
                ipsEnabled = false;
              }

              e.preventDefault();
              // not reloading because immediately displays IPS operations is being used.
              deviceCommunicator.doWriteMemory();
              // initialIpsStatus is being used to keep track of previous state in case no change action is done no need to apply changes
              $("#initialIpsStatus").val($("#enableIPS").is(':checked'));
              loadIPSSettings();
              $.unblockUI();
            }
            catch (e) {
              //alert(e.errorResponse);
              //$('#confIPSErrorMessage').html(e.errorResponse);
              if ((e.errorResponse).indexOf("Invalid input detected") == 0) {
                $('#confIPSErrorMessage').html($.i18n.prop("invalidInputDetected"));
              }
              else if ((e.errorResponse).indexOf("Specify non-empty resource name") == 0) {
                $('#confIPSErrorMessage').html($.i18n.prop("errSpecifyOne"));
              }
              else if ((e.errorResponse).indexOf("Specify non-empty interface name") == 0) {
                $('#confIPSErrorMessage').html($.i18n.prop("errSpecifyTwo"));
              }
              else {
                $('#confIPSErrorMessage').html(e.errorResponse);
              }
              $('#confIPSError').show();
              $.unblockUI();
            }
          }, 1000);
        }
        /*}
         catch(e) {
         alert(e.errorResponse);
         $('#confIPSErrorMessage').html(e.errorResponse);
         $('#confIPSError').show();
         $.unblockUI();
         }*/
        //consoleLogMethodDetailsEnd("configureIPS.js", "$(\"#applyIPS\").button().click()");

        return false;
      });

    $("#refreshIPS")
      .button()
      .click(function(e) {
        try {
          blockPage("Loading");
          setTimeout(function() {
            loadIPSSettings();
            $.unblockUI();
            return false;
          }, 1000);
          e.preventDefault();
        } catch (error) {
          ////consoleLog(error);
          $.unblockUI();
        }
      });

    loadIPSSettings();
    //consoleLogMethodDetailsEnd("configureIPS.js", "confIPSLoading()");

  }
  return {
    confIPSLoading: confIPSLoading,
    loadIPSSettings: loadIPSSettings,
    addIpsInterface: addIpsInterface,
    deleteIpsInterface: deleteIpsInterface,
    ipsInterfaceDetails: ipsInterfaceDetails,
    getFlashFreeSpace:getFlashFreeSpace
  };
}());


$(document).click(function(e)
{
  var containerIPSSettings = $("#IPSSettings");
  if (!containerIPSSettings.is(e.target) && containerIPSSettings.has(e.target).length === 0)
  {
    containerIPSSettings.fadeOut('slow');
  }
});
var disableDomainFiltering = false;
var configureFirewall = (function() {

  function loadFirewallPolicy() {
    //consoleLogMethodDetailsStart("configureFirewall.js", "loadFirewallPolicy()");

    try {
      $('#zoneError').hide();
      var xml;
      //var cliOutput, rows, desc, lanDesc = "", wanDesc = "", interfaceName = "", status = "";
      //var reg = new RegExp("[,\\n]");
      //var RegrColen = new RegExp(": ", ""), RegSlash = new RegExp("/", "g");
      var DefaultZone = [];

      if (!zoneCheck) {
        //code
        deviceCommunicator.configureCommandsFromTemplate("DefaultZone.txt", DefaultZone, false);
        zoneCheck = true;
      }
      // empty out all lists in the screen
      $("#zonableInterfaceList").empty();
      $("#lanInterfaceList").empty();
      $("#wanInterfaceList").empty();
      $("#vpnInterfaceList").empty();
      $("#dmzInterfaceList").empty();
      $('#wanFieldSet').fadeTo("fast", 0.43);
      $('#vpnZoneFieldset').fadeTo("fast", 0.43);

      var wanList = getInterfacesInZone("WAN"),
          lanList = getInterfacesInZone("LAN"),
          vpnList = getInterfacesInZone("VPN"),
          dmzList = getInterfacesInZone("DMZ");
      //put all output of sh ip int brief into zonable interfaces.
      xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");

      $(xml).find('entry').each(function() {
        var interfaceName = $(this).find('Interface').text(), status;
        if ($(this).find('Status').text() == "up") {
          status = "interfaceUp";
          image = '<div id="primaryPort" class="portImageBoxSmall interfaceUpGreenBgColor" >'+
                  '<div class="utmSprite interfacePortSmall"></div></div>';
        }
        else {
          status = "interfaceDown";
          image = '<div id="backupPort" class="portImageBoxSmall interfaceDownRedBgColor" >'+
                  '<div class="utmSprite interfacePortSmall"></div></div>';
        }
        if ((jQuery.inArray(interfaceName, wanList) == -1) &&
            (jQuery.inArray(interfaceName, lanList) == -1) &&
            (jQuery.inArray(interfaceName, vpnList) == -1) &&
            (jQuery.inArray(interfaceName, dmzList) == -1))
        {
      var isNotSwitchport = checkSwitchPort(interfaceName);
      if(isNotSwitchport){
          $('#zonableInterfaceList').append('<li value="' + interfaceName + '" >' + image + " " + interfaceName + '</li>');
      }
        }
    function checkSwitchPort(interfaceNameCheck) {
        var checkSwitchPortFlag = true;
        try {
            var editInterfaceType;
            try {
                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceNameCheck);
            } catch (error) {
                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceNameCheck, true);
            }
            if (editInterfaceType == undefined) {
                //code
                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceNameCheck, true);
            }
            //consoleLog(editInterfaceType);
            if (editInterfaceType == 6 || editInterfaceType == 5) {
                checkSwitchPortFlag = false;
            }
        } catch (error) {
            errorLogInConsole(error.message);
        }
        return checkSwitchPortFlag;

    }

        if (jQuery.inArray(interfaceName, wanList) != -1) {
          //$('#wanInterfaceList').append('<li value="' + interfaceName + '" title="Read only">'+ image + " " + interfaceName + '</li>');
          $('#wanInterfaceList').append('<li value="' + interfaceName + '" title="' + $.i18n.prop("readOnly") + '">' + image + " " + interfaceName + '</li>');
          $("#wanInterfaceList li").tooltip({
            show: {
              effect: "slideDown"
            },
            tooltipClass: "custom-tooltip-styling"
          });
        }

        if (jQuery.inArray(interfaceName, lanList) != -1) {
          $('#lanInterfaceList').append('<li value="' + interfaceName + '" >' + image + " " + interfaceName + '</li>');
        }

        if (jQuery.inArray(interfaceName, vpnList) != -1) {
          //$('#vpnInterfaceList').append('<li value="' + interfaceName + '" title="Read only" >'+ image +" "+ interfaceName  + '</li>');
          $('#vpnInterfaceList').append('<li value="' + interfaceName + '" title="' + $.i18n.prop("readOnly") + '" >' + image + " " + interfaceName + '</li>');
          $("#vpnInterfaceList li").tooltip({
            show: {
              effect: "slideDown"
            },
            tooltipClass: "custom-tooltip-styling"
          });

        }

        if (jQuery.inArray(interfaceName, dmzList) != -1) {
          $('#dmzInterfaceList').append('<li value="' + interfaceName + '" >' + image + " " + interfaceName + '</li>');
        }

      });

       $("#interfaceSearch").keyup(function (event) {

           var searchText = $(this).val().toLowerCase();


            $('#zonableInterfaceList > li').each(function(){

            var currentLiText = $(this).text().toLowerCase(),
                showCurrentLi = currentLiText.indexOf(searchText) !== -1;
             console.log(currentLiText+"::::::"+searchText);
             console.log(currentLiText.indexOf(searchText));

            $(this).toggle(showCurrentLi);

        });

       });
      try {
        /*$( "#zonableInterfaceList, #lanInterfaceList, #wanInterfaceList, #vpnInterfaceList, #dmzInterfaceList" ).sortable({
         connectWith: ".connectedSortable" //, dropOnEmpty: false
         }).disableSelection();*/
        $("#zonableInterfaceList li,#lanInterfaceList li,#dmzInterfaceList li").draggable({
          tolerance: "touch",
          helper: "clone",
          drag: function() {
          },
          stop: function() {
          }
        });
        $("#zonableInterfaceList, #lanInterfaceList, #dmzInterfaceList").droppable({
          drop: function(event, ui) {
            //ui.revert(false);
            $(this)
              .append(ui.helper.clone(false).css({
                position: 'relative',
                left: '0px',
                top: '0px'
              }));
            move = ui.draggable;
            move.remove();
            $(this).find("li").draggable({
              tolerance: "touch",
              helper: "clone",
              drag: function() {
              },
              stop: function() {
              }
            });
          }
        });
      }
      catch (e) {
        errorLogInConsole(e.message);
      }
      //consoleLogMethodDetailsEnd("configureFirewall.js", "loadFirewallPolicy()");

      return false;
    }
    catch (e) {
      $('#zoneErrorMessage').html(e.errorMessage);
      $('#zoneError').show();
      $.unblockUI();
      return false;
    }
  }
  function getInterfacesInZoneWAN(zone) {
    //consoleLogMethodDetailsStart("configureFirewall.js", "getInterfacesInZoneWAN()");

    var reg = new RegExp("[,\\n]"), cliOutput = deviceCommunicator.getExecCmdOutput("show zone security " + zone),
      rows = cliOutput.split(reg), zoneList = [];
    for (var i = 0; i < rows.length; i++) {
      if (rows[i].indexOf("Member Interfaces") == -1 && rows[i].indexOf("zone") == -1 && rows[i].indexOf("Description:") == -1) {
        zoneList.push($.trim(rows[i]));
      }
    }
    //consoleLogMethodDetailsEnd("configureFirewall.js", "getInterfacesInZoneWAN()");
    return zoneList;
  }
  function getNetworkAddress(ipStr, netMask) {
    //consoleLogMethodDetailsStart("configureFirewall.js", "getNetworkAddress()");
    if (ipStr != null && netMask != null) {
      var fieldArray = ipStr.split(".");
      var maskArray = netMask.split(".");
      var octet = [];
      var mask = [];
      if (fieldArray.length == 4 && maskArray.length == 4) {
        for (var i = 0; i < 4; i++) {
          octet[i] = parseInt(fieldArray[i], 10);
          mask[i] = parseInt(maskArray[i], 10);
        }
        var network = [];
        for (var i = 0; i < 4; i++) {
          network[network.length] = octet[i] & mask[i];
        }
        //consoleLogMethodDetailsEnd("configureFirewall.js", "getNetworkAddress()");
        return network.join(".");
      }
    }
    //consoleLogMethodDetailsEnd("configureFirewall.js", "getNetworkAddress()");
    return null;
  }

  function getInterfacesInZone(zone) {
    //consoleLogMethodDetailsStart("configureFirewall.js", "getInterfacesInZone()");

    var reg = new RegExp("[,\\n]"), cliOutput = deviceCommunicator.getExecCmdOutput("show zone security " + zone),
      rows = cliOutput.split(reg), zoneList = [];
    for (var i = 0; i < rows.length; i++) {
      if (rows[i].indexOf("Member Interfaces") == -1 && rows[i].indexOf("zone") == -1 && rows[i].indexOf("Description:") == -1) {
        zoneList.push($.trim(rows[i]));
      }
    }
    if (zone == "WAN") {
      var primaryWan = "";
      var Backup = "";
      for (var i = 0; i < zoneList.length; i++) {
        cliOutput = deviceCommunicator.getExecCmdOutput("show interfaces " + zoneList[i] + " description");
        rows = cliOutput.split(reg);
        for (var j = 0; j < rows.length; j++) {
          if (rows[j].indexOf("PrimaryWANDesc_") > -1) {
            //code
            primaryWan = zoneList[i];
          }
          else if (rows[j].indexOf("BackupWANDesc_") > -1) {
            //code
            Backup = zoneList[i];
          }
        }
      }
      zoneList.length = 0;
      if (primaryWan != "") {
        //code
        zoneList[zoneList.length] = primaryWan;
      }
      if (Backup != "") {
        //code
        zoneList[zoneList.length] = Backup;
      }
      //var reg = new RegExp("[,\\n]"), cliOutput = deviceCommunicator.getExecCmdOutput("sh "),

    }
    //consoleLogMethodDetailsEnd("configureFirewall.js", "getInterfacesInZone()");
    return zoneList;
  }

  function getInterfaceStatus(xml, interfaceName) {
    //consoleLogMethodDetailsStart("configureFirewall.js", "getInterfaceStatus()");
    var status = "";
    $(xml).find('entry').each(function() {
      var interfaceNameXml = $(this).find('Interface').text();
      if (interfaceNameXml === interfaceName) {
        if ($(this).find('Status').text() == "up") {
          status = "interfaceUp";
        }
        else {
          status = "interfaceDown";
        }
        //consoleLogMethodDetailsEnd("configureFirewall.js", "getInterfaceStatus()");
        return false;
      }
    });
    //consoleLogMethodDetailsEnd("configureFirewall.js", "getInterfaceStatus()");
    return status;
  }

  function throwZoneError(errorMessage) {
    $('#zoneErrorMessage').html(errorMessage);
    $('#zoneError').show();
  }
  function deleteWanZoneInterface(interfaceArray,privew) {
    //consoleLogMethodDetailsStart("configureFirewall.js", "deleteWanZoneInterface()");
    if(privew==undefined){
    privew=false;
    }
    var arrval = [], cliInput = "";
    for (var i = 0; i < interfaceArray.length; i++) {
      arrval.length = 0;
      arrval.push({name: "interface", value: interfaceArray[i]}, {name: "zone", value: "WAN"});
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtDelete.txt", arrval, true) + "\n";
    }
    if(privew){
    return cliInput;
    }else{
    response = deviceCommunicator.getConfigCmdOutput(cliInput);
    return "";
    }
    //consoleLogMethodDetailsEnd("configureFirewall.js", "deleteWanZoneInterface()");
  }
  function addWanZoneInterface(interfaceArray,privew) {
    //code
    //consoleLogMethodDetailsStart("configureFirewall.js", "addWanZoneInterface()");
    if(privew===undefined){
    privew=false;
    }
    var arr = [], cliInput = "";
    for (var i = 0; i < interfaceArray.length; i++) {
      arr.length = 0;
      arr.push({name: "interface", value: interfaceArray[i]}, {name: "zone", value: "WAN"});
      cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtAdd.txt", arr, true) + "\n";
    }
    if(!privew){
    response = deviceCommunicator.getConfigCmdOutput(cliInput);
     return "";
    }else{
    return cliInput;
    }
    //consoleLogMethodDetailsEnd("configureFirewall.js", "addWanZoneInterface()");
  }
  function checkWanDetails() {
    //code
    //consoleLogMethodDetailsStart("configureFirewall.js", "checkWanDetails()");

    primayWanList = [];
    primayWanList = getInterfacesInZone("WAN");
    if (primayWanList.length > 0) {
      //for (var i = 0; i < primayWanList.length; i++) {

      //}
      //if ((primayWanList[0] == interfaceWan[0]) && (primayWanList[1] == interfaceWan[1])) {
        //code
      //}
      //else {

      //}
    }
    //consoleLogMethodDetailsEnd("configureFirewall.js", "checkWanDetails()");

  }

  function configureFirewallLoading() {
    //consoleLogMethodDetailsStart("configureFirewall.js", "configureFirewallLoading()");

    $('#confFirewallError').hide();
    $('#zoneError').hide();
    var DefaultZone = [];
    try {
      if (!zoneCheck) {
        //code
        deviceCommunicator.configureCommandsFromTemplate("DefaultZone.txt", DefaultZone, false);
        zoneCheck = true;
      }
      var xml_dnsproxy = deviceCommunicator.getExecCmdOutput("show run | i ip dns server");
	  if (xml_dnsproxy == null || xml_dnsproxy == ""){
		$("#domainFilteringError").hide();
		$("#domainFilteringMessage").html().remove();
	    disableDomainFiltering = false;
	  }
	  else{				 
		 $("#domainFilteringMessage").html($.i18n.prop("enableDNSProxyWarning"));
		 $("#domainFilteringError").show();
		 disableDomainFiltering = true;	   
	     enableDisableDomain();
	  }
    } catch (e) {
      isEmptyBlock = true;
    }
    $('.blue').draggable({
      tolerance: "touch",
      revert: true,
      snap: true,
      drag: function(event, ui) {
      }, stop: function(event, ui) {
      }
    });

    $('.expand-tree').droppable({
      tolerance: "touch",
      drop: function(event, ui) {
        var tableRow = ui.draggable;
        var tagValue = tableRow.find("div.tile-content h1").html();
        $(this).find('.eventTags').tagit("createTag", tagValue);
        event.preventDefault();
      }
    });

    /* Adding new buttons on click

     $("#addFirewallButton")
     .button()
     .click(function () {
     var left="0";
     var zoneCount = 0;
     $('#appendZone').find('fieldset').each(function(index){
     if(index==0){
      isEmptyBlock = true;
    }else{
     zoneCount = zoneCount+1;
     }
     });
     var pos=$('#lanFieldSet').offset();

     if(zoneCount<=2){
     $('#appendZone').append('<fieldset id="zone'+ zoneCount+'" class="newZoneClass">'+
                              '<legend contenteditable="true" id = "newzone'+zoneCount+'">New Zone'
                              +zoneCount+'</legend><div id = "addZone'+zoneCount+
                              '" class="zoneListDiv"><ul class="connectedSortable zoneInterfaceList"></ul></div></fieldset>');
     $('.newZoneClass').css("top",pos.top);
     }
     if (zoneCount%2==0) {
     $('#zone'+zoneCount).css("left","328.1px");
     }
     try {
     $( ".zoneInterfaceList" ).sortable({
     connectWith: ".connectedSortable" //, dropOnEmpty: false
     }).disableSelection();
     }
     catch (e) {
     alert(e.message);
     }
     return false;
     });
     */

    $("#savebutt")
      .button()
      .click(function(e) {
        //consoleLogMethodDetailsStart("configureFirewall.js", "$(\"#savebutt\").button().click()");

        var wanLen = 0, lanLen = 0, vpnLen = 0, dmzLen = 0;
        var lanobjList = [];
        var deleteobjGroupIdRoute = "", xmlObjectGroup = [], rowsobjecGroup = [];
        var networkAddress = "";

        blockPage("Applying");
        setTimeout(function() {
          $('#zoneError').hide();
          var reg = new RegExp("[,\\n]");
          var rows = [], xmlLan = [], oldLanZoneList = getInterfacesInZone('LAN'), newLanzonelist = [];
          var outValue = [];
          var xml;
          if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
          }
          xml = shRunFormatOutput;
          //var cliOutput;
          var rows, wanList = getInterfacesInZone("WAN"), lanList = getInterfacesInZone("LAN"),
              vpnList = getInterfacesInZone("VPN"), dmzList = getInterfacesInZone("DMZ"), arr = [], cliInput = "",
              interfaceName = "", response, deleteZone = "";
          $("#wanInterfaceList li").each(function() {
            wanLen = wanLen + 1;
          });
          $("#lanInterfaceList li").each(function() {
            lanLen = lanLen + 1;
          });
          $("#vpnInterfaceList li").each(function() {
            vpnLen = vpnLen + 1;
          });
          $("#dmzInterfaceList li").each(function() {
            dmzLen = dmzLen + 1;
          });
          //alert($("#wanInterfaceList li").size()+""+$("lanInterfaceList li").size());
          if ((wanLen == 0) && (lanLen == 0) &&
              (dmzLen == 0) && (vpnLen == 0) &&
              (wanList.length == 0) && (lanList.length == 0) &&
              (vpnList.length == 0) && (dmzList.length == 0)) {
            throwZoneError("Zones cannot be empty!");
            $.unblockUI();
          }
          else {
            try {
              // var responseLDAPConfig = deviceCommunicator.getExecCmdOutput("show ldap server all ");
              var responseLDAPConfig = deviceCommunicator.getExecCmdOutput("show running-config | include ip admission name ");
              var ipAdmission = '';
              if (responseLDAPConfig !== '') {
                var result = responseLDAPConfig.search("IP-ADM-WEB-AUTH");
                if (result >= 0) {
                  ipAdmission = 'IP-ADM-WEB-AUTH';
                }
                result = responseLDAPConfig.search("IP-ADM-NTLM-AUTH");
                if (result >= 0) {
                  ipAdmission = 'IP-ADM-NTLM-AUTH';
                }
              }
              // get lan and wan zone list for comparison
              //var cliOutput, rows, wanList = getInterfacesInZone("WAN"), lanList = getInterfacesInZone("LAN"),
              //vpnList = getInterfacesInZone("VPN"), dmzList = getInterfacesInZone("DMZ"), arr = [], cliInput = "", interfaceName = "", response, deleteZone = "";
              var reg = new RegExp("[,\\n]")
              //var RegrColen = new RegExp(": ", "");
              var DefaultZone = [];
              if (!zoneCheck) {
                //code
                deviceCommunicator.configureCommandsFromTemplate("DefaultZone.txt", DefaultZone, false);
                zoneCheck = true;
              }
              // Looping through Interfaces in Zone WAN
              $("#wanInterfaceList li").each(function() {
                interfaceName = $.trim($(this).text());
                if (jQuery.inArray(interfaceName, wanList) == -1) {
                  arr.length = 0;
                  arr.push({name: "interface", value: interfaceName}, {name: "zone", value: "WAN"});
                  cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtAdd.txt", arr, true) + "\n";
                }
              });

              // Looping through Interfaces in Zone LAN
              $("#lanInterfaceList li").each(function() {
                interfaceName = $.trim($(this).text());
                lanobjList[lanobjList.length] = interfaceName;
                if (jQuery.inArray(interfaceName, lanList) == -1) {
                  arr.length = 0;
                  arr.push({name: "interface", value: interfaceName}, {name: "zone", value: "LAN"});
                  cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtAdd.txt", arr, true) + "\n";
                  if (ipAdmission !== '') {
                    arr.push({name: "laneZoneName", value: interfaceName});
                    arr.push({name: "ipadmisionRoul", value: ipAdmission});
                    cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("authRoulToLAN.txt", arr, true) + "\n";
                  }

                  try {
                    var escErrorClis = '';
                    if (natEnabledFlag === true) {
                      arr.push({name: "ipNatInside", value: "ip nat inside"});
                    } else {
                      arr.push({name: "ipNatInside", value: ""});
                    }
                    escErrorClis = escErrorClis + deviceCommunicator.configureCommandsFromTemplate("enableNbarProtocolDiscovery.txt", arr, true) + "\n";
                    escErrorClis = escErrorClis + deviceCommunicator.configureCommandsFromTemplate("configNetFlow.txt", arr, true) + "\n";
                    deviceCommunicator.getConfigCmdOutput(escErrorClis);
                  } catch (myError) {
                    errorLogInConsole('>>Escape Errors>>' + myError.errorMessage);
                  }
                }
              });

              // Looping through Interfaces in Zone 1
              $("#vpnInterfaceList li").each(function() {
                interfaceName = $.trim($(this).text());
                if (jQuery.inArray(interfaceName, vpnList) == -1) {
                  arr.length = 0;
                  arr.push({name: "interface", value: interfaceName}, {name: "zone", value: "VPN"});
                  cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtAdd.txt", arr, true) + "\n";
                }
              });

              // Looping through Interfaces in Zone 2
              $("#dmzInterfaceList li").each(function() {
                interfaceName = $.trim($(this).text());
                if (jQuery.inArray(interfaceName, dmzList) == -1) {
                  arr.length = 0;
                  arr.push({name: "interface", value: interfaceName}, {name: "zone", value: "DMZ"});
                  cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtAdd.txt", arr, true) + "\n";
                }
              });

              // Looping through available zonable interfaces
              $("#zonableInterfaceList li").each(function() {
                interfaceName = $.trim($(this).text());
                if (jQuery.inArray(interfaceName, lanList) > -1 ||
                    jQuery.inArray(interfaceName, wanList) > -1 ||
                    jQuery.inArray(interfaceName, vpnList) > -1 ||
                    jQuery.inArray(interfaceName, dmzList) > -1) {
                  arr.length = 0;
                  if (jQuery.inArray(interfaceName, lanList) > -1) {
                    deleteZone = "LAN";
                  }
                  if (jQuery.inArray(interfaceName, wanList) > -1) {
                    deleteZone = "WAN";
                  }
                  if (jQuery.inArray(interfaceName, vpnList) > -1) {
                    deleteZone = "VPN";
                  }
                  if (jQuery.inArray(interfaceName, dmzList) > -1) {
                    deleteZone = "DMZ";
                  }
                  arr.push({name: "interface", value: interfaceName}, {name: "zone", value: deleteZone});
                  cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("ZoneMgmtDelete.txt", arr, true) + "\n";
                  if (ipAdmission !== '') {
                    arr.push({name: "laneZoneName", value: interfaceName});
                    arr.push({name: "ipadmisionRoul", value: ipAdmission});
                    cliInput = cliInput + deviceCommunicator.configureCommandsFromTemplate("deConfigAuthRoulToLAN.txt", arr, true) + "\n";
                  }
                  try {
                    var escErrorClis = '';
                    if (natEnabledFlag === true) {
                      arr.push({name: "ipNatInside", value: "no ip nat inside"});
                    } else {
                      arr.push({name: "ipNatInside", value: ""});
                    }
                    escErrorClis = escErrorClis + deviceCommunicator.configureCommandsFromTemplate("deleteEnableNbarProtocolDiscovery.txt", arr, true) + "\n";
                    escErrorClis = escErrorClis + deviceCommunicator.configureCommandsFromTemplate("deConfigNetFlow.txt", arr, true) + "\n";
                    deviceCommunicator.getConfigCmdOutput(escErrorClis);
                  } catch (myError) {
                    errorLogInConsole('>>Escape Errors>>' + myError.errorMessage);
                  }
                }
              });

              // Execute entire list of CLIs
              //response = deviceCommunicator.getConfigCmdOutput(cliInput);
              if (lanobjList.length <= 0) {
                xmlObjectGroup.length = 0;
                rowsobjecGroup.length = 0;
                deleteobjGroupIdRoute = "";
                xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets");
                rowsobjecGroup = xmlObjectGroup.split(reg);
                for (var j = 0; j < rowsobjecGroup.length; j++) {
                  if ((rowsobjecGroup[j].indexOf("Network object group local_lan_subnets") <= -1)) {
                    if ((rowsobjecGroup[j].trim().length > 0)) {
                      deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
                    }
                  }
                }
                //code
              } else {
                xmlObjectGroup.length = 0;
                rowsobjecGroup.length = 0;
                deleteobjGroupIdRoute = "";
                xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets");
                rowsobjecGroup = xmlObjectGroup.split(reg);
                for (var j = 0; j < rowsobjecGroup.length; j++) {
                  if ((rowsobjecGroup[j].indexOf("Network object group local_lan_subnets") <= -1)) {
                    if ((rowsobjecGroup[j].trim().length > 0)) {
                      deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
                    }
                  }
                }
                for (var i = 0; i < lanobjList.length; i++) {
                  xmlLan.length = 0;
                  //rows.length=0;
                  xmlLan = deviceCommunicator.getExecCmdOutput("show running-config interface " + lanobjList[i]);
                  rows = xmlLan.split(reg);
                  for (var j = 0; j < rows.length; j++) {
                    if ((rows[j].indexOf("no ip address") <= -1)) {
                      if ((rows[j].indexOf("no ip address") <= -1)) {
                        outValue.length = 0;
                        outValue = rows[j].trim().split(" ");
                        if (validateIpv4Address(outValue[2])) {
                          //code
                          networkAddress = networkAddress + "\n" + getNetworkAddress(outValue[2].trim(), outValue[3].trim()) + " " + outValue[3].trim();
                        }

                      }
                    }
                  }
                }
              }
              var lanobjGroupCli = "object-group network local_lan_subnets";
              if (networkAddress == "") {
                //code
                networkAddress = "any";
              }
              cliInput = cliInput + "\n" + lanobjGroupCli + "\n" + deleteobjGroupIdRoute + "\n" + networkAddress;
              response = deviceCommunicator.getConfigCmdOutput(cliInput);
              /**
               This piece of code is written to update authorization policy under Ikev2 profile in case site to site VPN is configured
               */
              if (!shRunFormatLatest) {
                shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
                shRunFormatLatest = true;
              }
              xml = shRunFormatOutput;

              var dmvpnFlag = configureVpn.checkValuesDMVPN(xml);
              var ikev2flag = configureVpn.checkValuesIkve2(xml), bflag = false, delflag = false;
              var routeInterfaceString = "", noRouteInterfaceString = "";
              if (ikev2flag) {
                if (!dmvpnFlag) {
                  var policyName = "";
                  $(xml).find('crypto').each(function() {
                    try {
                      policyName = $(this).find('NamePolicy').text().trim().toLowerCase();
                    } catch (error) {
                      policyName = "";
                    }
                    if (policyName == "authpolicy1") {
                      newLanzonelist = getInterfacesInZone("LAN");
                      /**
                       When new lan zone is added
                       */
                      for (var i = 0; i < newLanzonelist.length; i++) {
                        bflag = false;
                        for (var j = 0; j < oldLanZoneList.length; j++) {
                          if (newLanzonelist[i] == oldLanZoneList[j]) {
                            bflag = true;
                          }
                        }
                        if (!bflag) {
                          routeInterfaceString = routeInterfaceString + "\n" + " route set interface " + newLanzonelist[i];
                        }
                      }
                      /**
                       when existing lan zone removed
                       */
                      for (var i = 0; i < oldLanZoneList.length; i++) {
                        delflag = false;
                        for (var j = 0; j < newLanzonelist.length; j++) {
                          if (oldLanZoneList[i] == newLanzonelist[j]) {
                            delflag = true;
                          }
                        }
                        if (!delflag) {
                          noRouteInterfaceString = noRouteInterfaceString + "\n" + " no route set interface " + oldLanZoneList[i];
                        }
                      }
                      arr.length = 0;
                      arr.push({
                        name: "noRouteInterfaceString",
                        value: noRouteInterfaceString
                      }, {
                        name: "routeInterfaceString",
                        value: routeInterfaceString
                      });
                      response = deviceCommunicator.configureCommandsFromTemplate("authorizationPolicy.txt", arr, false);
                      arr.length = 0;
                    }
                  });
                }
              }
              if (dmvpnFlag) {
                iAndC.updateEigrp(xml);
              }
              iAndC.createAccessListforNAT(licenseCheck, xml);
              deviceCommunicator.doWriteMemory();
              $.unblockUI();
              $('#manageZoneDialog').dialog("close");
            }
            catch (error) {
              $('#zoneErrorMessage').html(error.errorMessage);
              $('#zoneError').show();
              throwZoneError(error.errorResponse);
              $.unblockUI();

            }
          }
          e.preventDefault();
        }, 1000);
        //consoleLogMethodDetailsEnd("configureFirewall.js", "$(\"#savebutt\").button().click()");

        return false;
      });
    //consoleLogMethodDetailsEnd("configureFirewall.js", "configureFirewallLoading()");

  }
  return {
    configureFirewallLoading: configureFirewallLoading,
    loadFirewallPolicy: loadFirewallPolicy,
    getInterfacesInZone: getInterfacesInZone,
    getInterfacesInZoneWAN: getInterfacesInZoneWAN,
    deleteWanZoneInterface: deleteWanZoneInterface,
    addWanZoneInterface: addWanZoneInterface,
    getNetworkAddress: getNetworkAddress
  };
}());
var myStatus, myTunnel, peerOrHubAddress, isIpSecVPNProfileIKev2 = true, selectedTunnDetails;
var configureVpn = (function() {
  var dmvpnflag = false, oldPeerAddress = "", oldKey = "",dmvpnHubflag = false,ipsecExists=false,remoteAccessVpnConfigured = false,vpnConfigPresent = false;
  var vpnLoadingCliArray = [], vpnLoadingClubbedCLIOutputArray = [], vpnLoadingClubbedCLIOutputAvailable = false;
  var oldSpokeIPs=[],oldSpokeMasks=[],oldKeys=[];
  var isEmptyBlock=false;
  var hubConfigured="";
  var maxInterfaceIndex;
  var tunnelToEdit="",isBackupInterface=false,editingSite=false;
  var ikevSet="";
  var firstRow=false;
  var selectedTunnel="",peerIp="";
  var defaultPolicyExists = false;

  // Added for Release 3.2 CCP Express Performance Changes
  function getInterfacesInZone(showZoneSecurityOutput, zone) {
    //consoleLog("configureVpn() getInterfacesInZone() - showZoneSecurityOutput- "+showZoneSecurityOutput);
    var reg = new RegExp("[,\\n]"), rows = showZoneSecurityOutput.split(reg), zoneList = [], zoneIntfDescCLIArray = [], zoneIntfCLIDescOutput = [];
    for (var i = 0; i < rows.length; i++) {
      if (rows[i].indexOf("Member Interfaces") == -1 && rows[i].indexOf("zone") == -1 && rows[i].indexOf("Description:") == -1 && $.trim(rows[i])!="") {
        zoneList.push($.trim(rows[i]));
      }
    }
    if (zone == "WAN") {
      for (i = 0; i < zoneList.length; i++) {
        var commandToExecute = "show interfaces " + zoneList[i] + " description";
        //consoleLog("configureVpn() getInterfacesInZone() - commandToExecute - "+commandToExecute);
        zoneIntfDescCLIArray.push(commandToExecute);
        zoneIntfDescCLIArray.push(cliOutputSeparatorGeneratorCommands);
      }
      zoneIntfCLIDescOutput = deviceCommunicator.clubShowCmdsExecuteAndSplitOutput(zoneIntfDescCLIArray, globalCLIOutputSeparator);
    if(zoneIntfCLIDescOutput!=null){
      //consoleLog("configureVpn() getInterfacesInZone() - zoneIntfCLIDescOutput.length - "+zoneIntfCLIDescOutput.length);
  }
      //consoleLog(zoneIntfCLIDescOutput);
      var primaryWan = "";
      var Backup = "";
      for (i = 0; i < zoneList.length; i++) {
        cliOutput = zoneIntfCLIDescOutput[i];
        //consoleLog("cliOutput - "+i+" - ");
        //consoleLog(cliOutput);
        rows = cliOutput.split(reg);
        for (j = 0; j < rows.length; j++) {
          if (rows[j].indexOf(primaryWANDescription) > -1) {
            //code
            primaryWan = zoneList[i];
          }
          else if (rows[j].indexOf(backupWANDescription) > -1) {
            //code
            Backup = zoneList[i];
          }
        }
      }
      zoneList.length = 0;
      if (primaryWan != "") {
        //code
        zoneList[zoneList.length] = primaryWan;
      }
      if (Backup != "") {
        //code
        zoneList[zoneList.length] = Backup;
      }
    }
    return zoneList;
  }
  function vpnOverallLoading() {
    $(".fullMeshImage").show();
    $(".tunnelImage").hide();
	if(!dmvpnHubEnableFlag){
	  $("#vpnType >option[value='dmvpnHub']").remove();	
	}
	if(!dmvpnSpokeEnableFlag){
	  $("#vpnType >option[value='dmvpnSpoke']").remove();	
	}
	//$("#site-table").hide();
	//$("#noDataIpsecMessage").hide();
    blockPage("Loading");
    //consoleLogMethodDetailsStart("configureVpn.js", "vpnOverallLoading");
    //enableVPN replaced with enableIPSecVPN
    if ($("#enableIPSecVPN").is(':checked')){
      $("#addDest").show();
      $("#ipsecButtonBar").show();
      fadeInTextBox();
    }
    else{
      $("#addDest").hide();
      $("#ipsecButtonBar").hide();
      fadeOutTextBox();
    }
    vpnLoadingCliArray.length = 0;
    vpnLoadingCliArray.push("show zone security WAN");
    vpnLoadingCliArray.push(cliOutputSeparatorGeneratorCommands);

    vpnLoadingCliArray.push("show zone security LAN");
    vpnLoadingCliArray.push(cliOutputSeparatorGeneratorCommands);

    vpnLoadingCliArray.push("show object-group vpn_remote_subnets");
    vpnLoadingCliArray.push(cliOutputSeparatorGeneratorCommands);

    vpnLoadingCliArray.push("show object-group local_lan_subnets");
    vpnLoadingCliArray.push(cliOutputSeparatorGeneratorCommands);

    //vpnLoadingCliArray.push("show crypto session interface tunnel 0");
    //vpnLoadingCliArray.push(cliOutputSeparatorGeneratorCommands);

    if (!shRunFormatLatest) {
      vpnLoadingCliArray.push("show running-config | format");
      vpnLoadingCliArray.push(cliOutputSeparatorGeneratorCommands);
    }
    setTimeout(function() {
      $("#vpnWanCheckDiv").hide();
      $("#vpnLanCheckDiv").hide();
      $('#confvpnError').hide();
      /* $("#dmvpnHubDiv").hide();
      $("#remoteAccessDiv").hide(); */
    if (isNano&&advsecurity) {
      //$("#dmvpnSpoke").hide();
      $("#vpnDMVPNTitle").hide();
      //$("#dmVPN").hide();
      //$('#siteTosite').hide();
      $('#vpnSiteTitle').hide();
    }
      var wanListcheck, lanListCheck;

      try {
        vpnLoadingClubbedCLIOutputArray = deviceCommunicator.clubShowCmdsExecuteAndSplitOutput(vpnLoadingCliArray, globalCLIOutputSeparator);
      }
      catch(e)
      {
        errorLogInConsole(clubbedCLIExecutionErrorMsg + " Source configureVpn.js. Error message - " + e);
      }

      if (vpnLoadingClubbedCLIOutputArray != null && vpnLoadingClubbedCLIOutputArray.length >0) {
        vpnLoadingClubbedCLIOutputAvailable = true;
        wanListcheck = getInterfacesInZone(vpnLoadingClubbedCLIOutputArray[0],"WAN");
        lanListCheck = getInterfacesInZone(vpnLoadingClubbedCLIOutputArray[1],"LAN");
        if (!shRunFormatLatest) {
          shRunFormatOutput = vpnLoadingClubbedCLIOutputArray[4];
          shRunFormatLatest = true;
        }
      }
      else{
        wanListcheck = configureFirewall.getInterfacesInZone("WAN");
        lanListCheck = configureFirewall.getInterfacesInZone("LAN");
      }
      $('#utmForm').resetForm();
      addSecondryField();
      validator.resetForm();
      if (!defaultPolicyExists) {
        defaultPolicyExists = defPolicyCheck(shRunFormatOutput);
      }
      if (wanListcheck.length <= 0) {
        $("#vpnWanCheckDiv").show();
        $("#vpnFieldSet").hide();
      } else if (lanListCheck.length <= 0) {
        $("#vpnLanCheckDiv").show();
        $("#vpnFieldSet").hide();
      } else {
        $("#vpnWanCheckDiv").hide();
        $("#vpnLanCheckDiv").hide();
        $("#vpnFieldSet").show();
        $('#confvpnError').hide();
        if (!shRunFormatLatest) {
          shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
          shRunFormatLatest = true;
        }
        xml = shRunFormatOutput;
        updateIkev1Data(xml);

        //$("#enableIPSecVPN").prop("checked", true);
        //$("#enableDmVPN").prop("checked", true);
        //$("#enableDmvpnHub").prop("checked", true);
        //$("#enableRemAccess").prop("checked", true);

	//Remove all contents from the dropdown before appending
	$("#remoteConfigInterface").empty();
        for(var i =0; i<wanListcheck.length; i++){
          $("#remoteConfigInterface").append('<option value="'+wanListcheck[i]+'">' + wanListcheck[i] + '</option>');
        }

        hubConfigured=checkDmvpnHub();
        if(hubConfigured=="hub-ikev1" || hubConfigured=="hub-ikev2"){
          dmvpnHubflag=true;
          $("#ipsecVPN").hide();
          $("#dmVPN").hide();
          $("#remoteAccessDiv").hide();
          $("#dmvpnHubDiv").show();
          $("#enableIPSecVPN").prop("checked", false);
          $("#enableDmVPN").prop("checked", false);
          $("#enableDmvpnHub").prop("checked", true);
          $("#enableRemAccess").prop("checked", false);
          $('#vpnType option[value="dmvpnHub"]').attr("selected", "selected");
          toggleEnableDisableVpnConfigurationList(false);
          //$("#dmvpnSpokeToHubLabel").text($.i18n.prop("vpnSpoke") + " - " + $.i18n.prop("spokeHub"));
          //$("#dmvpnSpokeToHubLabel").show();

          $('.wizard > .actions').show();
          loadDmVPNhub(hubConfigured);
	  vpnConfigPresent = true;
        }else if (checkValuesDMVPN(xml)) {
          $("#ipsecVPN").hide();
          $("#dmvpnHubDiv").hide();
          $("#remoteAccessDiv").hide();
          $("#dmVPN").show();

          $("#enableIPSecVPN").prop("checked", false);
          $("#enableDmVPN").prop("checked", true);
          $("#enableDmvpnHub").prop("checked", false);
          $("#enableRemAccess").prop("checked", false);
          $('#vpnType option[value="dmvpnSpoke"]').attr("selected", "selected");
          toggleEnableDisableVpnConfigurationList(false);

          //$("#dmvpnSpokeToHubLabel").text($.i18n.prop("vpnSpoke") + " - " + $.i18n.prop("spokeHub"));
          //$("#dmvpnSpokeToHubLabel").show();

          loadDmVPN();
          $('.wizard > .actions').show();
	  vpnConfigPresent = true;
        } else if (remoteAccessVPNEnabled()) {
          $("#dmVPN").hide();
          $("#dmvpnHubDiv").hide();
          $("#ipsecVPN").hide();
          $("#remoteAccessDiv").show();

          $("#enableIPSecVPN").prop("checked", false);
          $("#enableDmVPN").prop("checked", false);
          $("#enableDmvpnHub").prop("checked", false);
          $("#enableRemAccess").prop("checked", true);

          $('#vpnType option[value="remoteAccess"]').attr("selected", "selected");
          toggleEnableDisableVpnConfigurationList(false);

          remoteAccessVpnConfigured = true;
          loadRemoteAccessVpn();
          $('.wizard > .actions').show();
	  vpnConfigPresent = true;
        } else {
          $("#dmVPN").hide();
          $("#dmvpnHubDiv").hide();
          $("#remoteAccessDiv").hide();
          fadeOutTextBoxDmVPN();
          $("#ipsecVPN").show();

          $("#enableIPSecVPN").prop("checked", true);
          $("#ipsecButtonBar").show();

          $("#enableDmVPN").prop("checked", false);
          $("#enableDmvpnHub").prop("checked", false);
          $("#enableRemAccess").prop("checked", false);

          $('#vpnType option[value="siteTosite"]').attr("selected", "selected");
          toggleEnableDisableVpnConfigurationList(false);

          //$("#dmvpnSpokeToHubLabel").text(" ");
          //$("#dmvpnSpokeToHubLabel").hide();
          loadVpn();
          if (!vpnConfigPresent) {
            $("#enableIPSecVPN").removeAttr('checked');
            toggleEnableDisableVpnConfigurationList(true);
            $("#ipsecButtonBar").hide();
          } else {
            $("#enableIPSecVPN").prop("checked", true);
            toggleEnableDisableVpnConfigurationList(false);
            $("#ipsecButtonBar").show();
	  }
        }
        /* callLoadTunnel(vpnLoadingClubbedCLIOutputArray[5]); */
      }
      $.unblockUI();
    }, 500);
    //consoleLogMethodDetailsEnd("configureVpn.js", "vpnOverallLoading");

  }

  function loopAndGetPairData(originalArray, string1ToCheck, string2ToCheck, return1Index, return2Index, separatorChar)
  {
    var pairDataArray = [];
    //consoleLogMethodDetailsStart("configureVPN.js", "loopAndGetPairdata()");
    //consoleLog("string1ToCheck - " + string1ToCheck + " string2ToCheck - " + string2ToCheck);
    if (originalArray != null && originalArray != undefined && originalArray.length > 1) {
      for (var i = 0; i < originalArray.length; i++)
      {
        if (originalArray[i].match(string1ToCheck)) {
          //consoleLog("originalArray[i] - " + originalArray[i]);
          if (originalArray[i + 1].match(string2ToCheck)) {
            //consoleLog("originalArray[i+1] - " + originalArray[i + 1]);
            var temp1 = originalArray[i].split(separatorChar)[return1Index];
            //consoleLog("temp1 - " + temp1);
            pairDataArray.push(temp1);
            if (temp1!=undefined && temp1.trim()=="DOWN") {
              temp1 = originalArray[i - 1].split(separatorChar)[return2Index];
            }else{
            temp1 = originalArray[i - 2].split(separatorChar)[return2Index];
            }
            //consoleLog("temp1 - " + temp1);
            pairDataArray.push(temp1);
            break;
          }
        }
      }
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "loopAndGetPairdata()");
    return pairDataArray;
  }
  /* function callLoadTunnel() {
    callLoadTunnel(null);
  } */
  /* function callLoadTunnel(cryptoCLIOutputValue) {
    //consoleLogMethodDetailsStart("configureVPN.js", "callLoadTunnel()");
    var cliArr = "", status = "", tunnel = "", pairDataArray,errorBlock=false;
    utmDashboard.terminateCliWorker();
    try {
      if (cryptoCLIOutputValue != null && cryptoCLIOutputValue != undefined && cryptoCLIOutputValue !="") {
        cliArr = cryptoCLIOutputValue.split("\n");
      } else{
        cliArr = deviceCommunicator.getExecCmdOutput("show crypto session interface tunnel 0").split("\n");
      }
      pairDataArray = loopAndGetPairData(cliArr, /^Session status/, " " + peerOrHubAddress + " ", 2, 1, " ");
    } catch (error) {
      cliArr = "";
      errorBlock=true;
    }
    if (cliArr != "" && pairDataArray != undefined && pairDataArray != null && pairDataArray.length > 0) {
      //status = cliArr[4].split(" ")[2],
      //tunnel = cliArr[2].split(" ")[1];
      status = pairDataArray[0];
      tunnel = pairDataArray[1];
    }else if (errorBlock && cliArr=="") {
      //code
      status ="notconfig";
        tunnel = "notconfig";
    }
    else if (cliArr=="" || cliArr==undefined) {
        //
        status ="down";
        tunnel = "Tunnel0";
      }
    myStatus = setInterval(function() {
      try {
        cliArr = deviceCommunicator.getExecCmdOutput("show crypto session interface tunnel 0").split("\n");
        pairDataArray = loopAndGetPairData(cliArr, /^Session status/, " " + peerOrHubAddress + " ", 2, 1, " ");
      } catch (error) {
        cliArr = "error";
      }
      if (cliArr != "" ||cliArr!="error" && pairDataArray != undefined && pairDataArray != null && pairDataArray.length > 0) {
        //status = cliArr[4].split(" ")[2],
        //tunnel = cliArr[2].split(" ")[1];
        status = pairDataArray[0];
        tunnel = pairDataArray[1];
      }
      else if (errorBlock && cliArr=="") {
      //code
      status ="notconfig";
        tunnel = "notconfig";
    }
      else if (cliArr=="" || cliArr==undefined) {
        //
        status ="down";
        tunnel = "Tunnel0";
      }
    }, 30000);
    myTunnel = setInterval(function() {
      loadTunnel(status, tunnel);
    }, 500);
    //consoleLog("status - " + status + "   tunnel - " + tunnel);
    //consoleLogMethodDetailsEnd("configureVPN.js", "callLoadTunnel()");
  } */

  function getWildCardMask(netmask) {
    //consoleLogMethodDetailsStart("configureVPN.js", "getWildCardMask()");
    var splitMaskArr = netmask.split("\.");
    var i = 24;
    var netmaskNumeric = 0;
    for (var n = 0; n < splitMaskArr.length; n++) {
      var value = parseInt(splitMaskArr[n], 10);

      netmaskNumeric += value << i;
      i -= 8;
    }
    var wildcardMask = netmaskNumeric ^ 0xffffffff;
    var wildcardMaskValue = "";
    for (var shift = 24; shift > 0; shift -= 8) {
      wildcardMaskValue = wildcardMaskValue.concat((wildcardMask >>> shift) & 0xff);
      wildcardMaskValue = wildcardMaskValue.concat('.');
    }
    wildcardMaskValue = wildcardMaskValue.concat((wildcardMask & 0xff).toString());
    //consoleLogMethodDetailsEnd("configureVPN.js", "getWildCardMask()");
    return wildcardMaskValue;
  }
  function getDmVpnInterfaceDetails(xml, xmldoc) {
    //consoleLogMethodDetailsStart("configureVPN.js", "getDmVpnInterfaceDetails()");
    var transportAddr = "", tunnelAddr = "", tunnelIp = "", tunnelMask = "";
    var iprouteArrayprefix = [], iprouteArrayprefixMask = [];
    iprouteArrayprefix.length = 0;
    iprouteArrayprefixMask.length = 0;
    var interfaceArray = [];
    interfaceArray.length = 0;
    var backupTunnelIP = "";
    /*$(xml).find('ConfKeyring-Configuration').each(function () {
     $(this).find('pre-shared-key').each(function () {
     $("#dmvpnPSK").val($(this).find('UnencryptedUserPassword').text());
     });
     });*/

    $(xmldoc).find('Interface').each(function() {
      var intfc = $(this).text().split("\n")[0];
      if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
        transportAddr = $(this).find('IPv4Address').text();
        tunnelAddr = $(this).find('ProtocolIPAddressNHS').text();
        //$("#dmvpnAutonomousId").val(autonomousKey);
        $(this).find('ip').each(function() {
          //if(tunnelIp==""){
          tunnelIp = $(this).find('IPAddress').text();
          tunnelMask = $(this).find('IPSubnetMask').text();
          //}
          return false;
        });
      } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
        $(this).find('ip').each(function() {
          backupTunnelIP = $(this).find('IPAddress').text();
          return false;
        });
      }
    });


    //networkArr[0] = configureFirewall.getNetworkAddress($('#tunnelIp').val(),$('#tunnelMask').val());
    var remote_subnet;
    if (vpnLoadingClubbedCLIOutputAvailable) {
      remote_subnet = vpnLoadingClubbedCLIOutputArray[2].split("\n");
    }
    else{
      remote_subnet = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets").split("\n");
    }
    var dest = "", mask = "";
    for (i = 1; i < remote_subnet.length; i++) {
      dest = remote_subnet[i].split(" ")[1];
      mask = remote_subnet[i].split(" ")[2];
      iprouteArrayprefix[iprouteArrayprefix.length] = dest;
      iprouteArrayprefixMask[iprouteArrayprefixMask.length] = mask;
      //$('.dmvpnMultipleDestMaskdiv').append('<div class="multipleDestdiv">' + dest + '</div><div class="dmVpnMultipleMaskdiv">' + mask +
      //                      '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass626"  /></div>');
    }

    /*$(xmldoc).find('route').each(function () {
     if ($(this).html().toString().indexOf("Tunnel0") > -1) {
     iprouteArrayprefix[iprouteArrayprefix.length]=$(this).find('DestinationPrefix').text().trim();
     iprouteArrayprefixMask[iprouteArrayprefixMask.length]=$(this).find('DestinationPrefixMask').text().trim();
     }
     });*/
    $(xml).find('interface').each(function() {
      oldxml = $(this);
      if ($(this).find('Param').html() != null) {
        // alert($(this).find('Param').html());
        if ($(this).find('Param').html().indexOf("Tunnel0") > -1) {

          $(oldxml).find('tunnel').each(function() {

            if ($(this).find('Param').text().length > 0) {

              interfaceArray[interfaceArray.length] = $(this).find('Param').text().trim();


            }

          });

        } else if ($(this).find('Param').html().indexOf("Tunnel1") > -1) {
          $(oldxml).find('tunnel').each(function() {
            if ($(this).find('Param').text().length > 0) {
              //code
              interfaceArray[interfaceArray.length] = $(this).find('Param').text().trim();
            }

          });
        }
      }
    });

    //consoleLogMethodDetailsEnd("configureVPN.js", "getDmVpnInterfaceDetails()");

    return {
      interfaceArray: interfaceArray,
      transportAddr: transportAddr,
      tunnelAddr: tunnelAddr,
      tunnelIp: tunnelIp,
      tunnelMask: tunnelMask,
      iprouteArrayprefix: iprouteArrayprefix,
      iprouteArrayprefixMask: iprouteArrayprefixMask,
      backupTunnelIP: backupTunnelIP

    };
  }
  function getvpnInterfaceTunnel(xml, rawxml) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "getvpnInterfaceTunnel()");

    interfaceArray = [];
    peerAddressArray = "";
    iprouteArrayprefix = [];
    iprouteArrayprefixMask = [];
    siteToSiteTunnelIp = "";
    siteToSiteTunnelMask = "";
    siteToSiteBackupTunnelIp = "";




    $(rawxml).find('Interface').each(function() {
      var intfc = $(this).text().split("\n")[0];
      if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
        $(this).find('ip').each(function() {
          siteToSiteTunnelIp = $(this).find('IPAddress').text();
          siteToSiteTunnelMask = $(this).find('IPSubnetMask').text();
          return false;
        });
      } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
        $(this).find('ip').each(function() {
          siteToSiteBackupTunnelIp = $(this).find('IPAddress').text();
          return false;
        });
      }
    });
    /* $(xml).find('route').each(function () {
     if ($(this).html().toString().indexOf("Tunnel0") > -1) {
     // bflag = true;
     iprouteArrayprefix[iprouteArrayprefix.length]=$(this).find('DestinationPrefix').text().trim();
     iprouteArrayprefixMask[iprouteArrayprefixMask.length]=$(this).find('DestinationPrefixMask').text().trim();
     //$('.multipleDestMaskdiv').append('<div class="multipleDestdiv">' + $(this).find('DestinationPrefix').text() + '</div><div class="multipleMaskdiv">' + $(this).find('DestinationPrefixMask').text() +
     //                                      '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass627"  /></div>');
     }
     //}
     });*/

    var remote_subnet;
    if (vpnLoadingClubbedCLIOutputAvailable) {
      remote_subnet = vpnLoadingClubbedCLIOutputArray[2].split("\n");
    }
    else{
      remote_subnet = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets").split("\n");
    }
    var dest = "", mask = "";
    for (i = 1; i < remote_subnet.length; i++) {
      dest = remote_subnet[i].split(" ")[1];
      mask = remote_subnet[i].split(" ")[2];
      iprouteArrayprefix[iprouteArrayprefix.length] = dest;
      iprouteArrayprefixMask[iprouteArrayprefixMask.length] = mask;
      //$('.multipleDestMaskdiv').append('<div class="multipleDestdiv">' + dest + '</div><div class="multipleMaskdiv">' + mask +
      //                                 '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass628"  /></div>');
    }


    $(xml).find('interface').each(function() {
      oldxml = $(this);
      if ($(this).find('Param:first').text() != null) {
        if ($(this).find('Param:first').text().indexOf("Tunnel0") > -1) {
          oldxml.find('tunnel').each(function() {
            if ($(this).find('Param:first').text().length > 0) {
              interfaceArray[interfaceArray.length] = $(this).find('Param:first').text().trim();
            }
            if ($(this).find('IPAddressHostName').text().length > 0) {
              peerAddressArray = $(this).find('IPAddressHostName').text().trim();
            }
          });

        } else if ($(this).find('Param:first').text().indexOf("Tunnel1") > -1) {
          oldxml.find('tunnel').each(function() {
            if ($(this).find('Param:first').text().length > 0) {
              interfaceArray[interfaceArray.length] = $(this).find('Param:first').text().trim();
            }
            if ($(this).find('IPAddressHostName').text().length > 0) {
              peerAddressArray = $(this).find('IPAddressHostName').text().trim();
            }
          });
        }
      }
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "getvpnInterfaceTunnel()");

    return {
      interfaceArray: interfaceArray,
      peerAddressArray: peerAddressArray,
      iprouteArrayprefix: iprouteArrayprefix,
      iprouteArrayprefixMask: iprouteArrayprefixMask,
      siteToSiteTunnelIp: siteToSiteTunnelIp,
      siteToSiteTunnelMask: siteToSiteTunnelMask,
      siteToSiteBackupTunnelIp: siteToSiteBackupTunnelIp

    };
  }
  function addVpnIkev1InterfaceTunnel(primayWanList, destArr, maskArr, peerAddress, siteToSiteTunnelIp, siteToSiteTunnelMask, siteToSiteBackupTunnelIp) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "addVpnIkev1InterfaceTunnel()");

    var ipRouteString = "";
    var objGroupdIpRoute = "";
    var ipAddressString = "";
    var interfaceTunnelName = "";
    var wildCardMask = "";
    var interfaceTunnelArr = [];
    var whiteListArr = [];
    var backupTunnel = "";
    for (var j = 0; j < primayWanList.length; j++) {
      ipRouteString = "";
      for (var i = 0; i < destArr.length; i++) {
        interfaceTunnelName = " tunnel " + j;

        if (j == 1) {
          //code
          backupTunnel = "";
          ipAddressString = "ip address " + siteToSiteBackupTunnelIp + " " + siteToSiteTunnelMask;
          ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName + " " + "200";
          objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
        }
        else {
          if (primayWanList.length > 1) {
            backupTunnel = "backup interface tunnel " + (j + 1);
          }
          ipAddressString = "ip address " + siteToSiteTunnelIp + " " + siteToSiteTunnelMask;
          ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
          objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
        }
      }

      interfaceTunnelArr.push({
        name: "interfaceTunnelName",
        value: interfaceTunnelName
      }, {
        name: "tunnelSourceName",
        value: primayWanList[j]
      }, {
        name: "peerAddress",
        value: peerAddress
      }, {
        name: "ipRouteString",
        value: ipRouteString

      }, {
        name: "backupTunnel",
        value: backupTunnel
      }, {
        name: "ipAddressString",
        value: ipAddressString
      }, {
        name: "objGroupdIpRoute",
        value: objGroupdIpRoute

      });

      response = deviceCommunicator.configureCommandsFromTemplate("vpnIkev1InterfaceTunnel.txt", interfaceTunnelArr, false);
      interfaceTunnelArr.length = 0;
      for (var i = 0; i < destArr.length; i++) {
        wildCardMask = getWildCardMask(maskArr[i]);
        whiteListArr.push({
          name: "destAddresss",
          value: destArr[i]
        }, {
          name: "wildCardMask",
          value: wildCardMask
        });

        response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
        whiteListArr.length = 0;
      }
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "addVpnIkev1InterfaceTunnel()");

  }
  function deleteObjectGroup() {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "deleteObjectGroup()");
    var interfaceTunnelArr = [];
    // var interfaceTunnelName="";
    var xmlObjectGroup = [], rowsobjecGroup = [];
    deleteobjGroupIdRoute = "";
    var reg = new RegExp("[,\\n]");

    if (vpnLoadingClubbedCLIOutputAvailable) {
      xmlObjectGroup = vpnLoadingClubbedCLIOutputArray[2];
    }
    else{
      xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets");
    }

    rowsobjecGroup = xmlObjectGroup.split(reg);
    for (j = 0; j < rowsobjecGroup.length; j++) {
      if ((rowsobjecGroup[j].indexOf("Network object group vpn_remote_subnets") <= -1)) {
        if ((rowsobjecGroup[j].trim().length > 0)) {
          deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
        }
      }
    }
    interfaceTunnelArr.push({
      name: "deleteobjGroupIdRoute",
      value: deleteobjGroupIdRoute

    });


    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnObjectGroup.txt", interfaceTunnelArr, false);
    interfaceTunnelArr.length = 0;
    //consoleLogMethodDetailsEnd("configureVPN.js", "deleteObjectGroup()");

  }
  var errMsgStr = "";
  function deleteVpnIkev1InterfaceTunnel(primayWanList) {
    //consoleLogMethodDetailsStart("configureVPN.js", "deleteVpnIkev1InterfaceTunnel()");

    try {
      var interfaceTunnelArr = [];
      var interfaceTunnelName = "";
      var xmlObjectGroup = [], rowsobjecGroup = [];
      deleteobjGroupIdRoute = "";
      var reg = new RegExp("[,\\n]");
      if (vpnLoadingClubbedCLIOutputAvailable) {
        xmlObjectGroup = vpnLoadingClubbedCLIOutputArray[2];
      }
      else{
        xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets");
      }
      rowsobjecGroup = xmlObjectGroup.split(reg);
      for (var j = 0; j < rowsobjecGroup.length; j++) {
        if ((rowsobjecGroup[j].indexOf("Network object group vpn_remote_subnets") <= -1)) {
          if ((rowsobjecGroup[j].trim().length > 0)) {
            deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
          }
        }
      }
      for (var j = 0; j < primayWanList.length; j++) {
        interfaceTunnelName = " tunnel " + j;
        if ((j + 1) == primayWanList.length) {
          //code
          interfaceTunnelArr.push({
            name: "interfaceTunnelName",
            value: interfaceTunnelName
          }, {
            name: "deleteobjGroupIdRoute",
            value: deleteobjGroupIdRoute

          });
        }
        else {
          interfaceTunnelArr.push({
            name: "interfaceTunnelName",
            value: interfaceTunnelName
          }, {
            name: "deleteobjGroupIdRoute",
            value: ""

          });
        }
        response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1InterfaceTunnel.txt", interfaceTunnelArr, false);
        interfaceTunnelArr.length = 0;
      }
    } catch (error) {
      if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
        errMsgStr = $.i18n.prop("invalidInputDetected");
      }
      else {
        errMsgStr = error.errorResponse;
      }
      $('#confvpnErrorMessage').html(errMsgStr);
      //$('#confvpnErrorMessage').html(error.errorResponse);
      $('#confvpnError').show();
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "deleteVpnIkev1InterfaceTunnel()");

  }
  function addVpnIkev2InterfaceTunnel(primayWanList, destArr, maskArr, peerAddress, siteToSiteTunnelIp, siteToSiteTunnelMask, siteToSiteBackupTunnelIp) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "addVpnIkev2InterfaceTunnel()");
    var ipRouteString = "";
    var objGroupdIpRoute = "";
    var ipAddressString = "";
    var interfaceTunnelName = "";
    var wildCardMask = "";
    var interfaceTunnelArr = [];
    var whiteListArr = [];
    var backupTunnel = "";
    for (var j = 0; j < primayWanList.length; j++) {
      ipRouteString = "";
      for (var i = 0; i < destArr.length; i++) {
        interfaceTunnelName = " tunnel " + j;

        if (j == 1) {
          //code
          backupTunnel = "";
          ipAddressString = "ip address " + siteToSiteBackupTunnelIp + " " + siteToSiteTunnelMask;
          ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName + " " + "200";
          objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
        }
        else {
          if (primayWanList.length > 1) {
            backupTunnel = "backup interface tunnel " + (j + 1);
          }
          ipAddressString = "ip address " + siteToSiteTunnelIp + " " + siteToSiteTunnelMask;
          ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
          objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
        }
      }

      interfaceTunnelArr.push({
        name: "interfaceTunnelName",
        value: interfaceTunnelName
      }, {
        name: "tunnelSourceName",
        value: primayWanList[j]
      }, {
        name: "peerAddress",
        value: peerAddress
      }, {
        name: "ipRouteString",
        value: ipRouteString

      }, {
        name: "backupTunnel",
        value: backupTunnel
      }, {
        name: "ipAddressString",
        value: ipAddressString
      }, {
        name: "objGroupdIpRoute",
        value: objGroupdIpRoute

      });

      response = deviceCommunicator.configureCommandsFromTemplate("vpnIkev2InterfaceTunnel.txt", interfaceTunnelArr, false);
      interfaceTunnelArr.length = 0;
      for (var i = 0; i < destArr.length; i++) {
        wildCardMask = getWildCardMask(maskArr[i]);
        whiteListArr.push({
          name: "destAddresss",
          value: destArr[i]
        }, {
          name: "wildCardMask",
          value: wildCardMask
        });

        response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
        whiteListArr.length = 0;
      }
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "addVpnIkev2InterfaceTunnel()");

  }


  function deleteVpnIkev2InterfaceTunnel(primayWanList) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "deleteVpnIkev2InterfaceTunnel()");
    interfaceTunnelArr = [];
    try {
      var xmlObjectGroup = [], rowsobjecGroup = [];
      deleteobjGroupIdRoute = "";
      var reg = new RegExp("[,\\n]");
      if (vpnLoadingClubbedCLIOutputAvailable) {
        xmlObjectGroup = vpnLoadingClubbedCLIOutputArray[2];
      }
      else{
        xmlObjectGroup = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets");
      }
      rowsobjecGroup = xmlObjectGroup.split(reg);
      for (var j = 0; j < rowsobjecGroup.length; j++) {
        if ((rowsobjecGroup[j].indexOf("Network object group vpn_remote_subnets") <= -1)) {
          if ((rowsobjecGroup[j].trim().length > 0)) {
            deleteobjGroupIdRoute = deleteobjGroupIdRoute + "\n" + "no " + rowsobjecGroup[j];
          }
        }
      }
      for (var j = 0; j < primayWanList.length; j++) {
        interfaceTunnelName = " tunnel " + j;
        if ((j + 1) == primayWanList.length) {
          //code
          interfaceTunnelArr.push({
            name: "interfaceTunnelName",
            value: interfaceTunnelName
          }, {
            name: "deleteobjGroupIdRoute",
            value: deleteobjGroupIdRoute

          });
        }
        else {
          interfaceTunnelArr.push({
            name: "interfaceTunnelName",
            value: interfaceTunnelName
          }, {
            name: "deleteobjGroupIdRoute",
            value: ""

          });
        }
        response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2InterfaceTunnel.txt", interfaceTunnelArr, false);
        interfaceTunnelArr.length = 0;
      }
    } catch (error) {
      //$('#confvpnErrorMessage').html(error.errorResponse);
      if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
        errMsgStr = $.i18n.prop("invalidInputDetected");
      }
      else {
        errMsgStr = error.errorResponse;
      }
      $('#confvpnErrorMessage').html(errMsgStr);
      $('#confvpnError').show();
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "deleteVpnIkev2InterfaceTunnel()");
  }

  function addDmVpnTunnelInterface(primayWanList, tunnelIp, tunnelMask, transportAddr, tunnelAddr, destArr, maskArr, backupTunnelIP, ipsec_profile) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "addDmVpnTunnelInterface()");
    var arr = [], response;
   /*  var interfaceTunnelArr = [];
    var whiteListArr = [];
    var wildCardMask = "";
    var networkIp = "";
    var countDest = 0,
      countMask = 0;
    var ikevIPRoute = "", */
    var interfaceTunnelName = "";
    var objGroupdIpRoute = "";
    var backupTunnel = "";
    tunnelConf = "ip address " + tunnelIp + " " + tunnelMask;
    for (var j = 0; j < primayWanList.length; j++) {
      for (var i = 0; i < destArr.length; i++) {



        interfaceTunnelName = " tunnel " + j;




        if (j == 1) {
          //code
          backupTunnel = "";
          //ikevIPRoute = ikevIPRoute + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName+" "+"200";
          objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
          tunnelConf = "ip address " + backupTunnelIP + " " + tunnelMask;
        } else {
          if (primayWanList.length > 1) {
            backupTunnel = "backup interface tunnel" + (j + 1);
          }
          //ikevIPRoute = ikevIPRoute + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
          objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
        }


      }
      arr.push({
        name: "interfaceTunnelName",
        value: interfaceTunnelName
      }, {
        name: "tunnelConf",
        value: tunnelConf
      }, {
        name: "transportAddr",
        value: transportAddr
      }, {
        name: "tunnelAddr",
        value: tunnelAddr
      }, {
        name: "networkId",
        value: 10
      }, {
        name: "wanInterfaceName",
        value: primayWanList[j]
      }, {
        name: "objGroupdIpRoute",
        value: objGroupdIpRoute
      }, {
        name: "backupTunnel",
        value: backupTunnel
      }, {
        name: "ipsec_profile",
        value: ipsec_profile
      });
      /*if (ipsec_profile == 'test_profile') {
       //Changes for iAndC.js if ipsec_profile is test_profile then its IKEV2
       arr.push({
       name: "ipnhrpshortcutDmvpn",
       value: "ip nhrp shortcut"
       });
       } else {
       //Changes for iAndC.js if ipsec_profile is test_profile then its IKEV2
       arr.push({
       name: "ipnhrpshortcutDmvpn",
       value: " "
       });
       }*/

      response = deviceCommunicator.configureCommandsFromTemplate("tunnelConfiguration.txt", arr, false);
      arr.length = 0;
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "addDmVpnTunnelInterface()");
  }
  function fadeOutTextBox() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeOutTextBox()");
    $("#peerAddr").attr('disabled', true);
    $("#preSharedKey").attr('disabled', true);
    $("#destAddr").attr('disabled', true);
    $("#destMask").attr('disabled', true);
    $("#s2sTunnelIP").attr('disabled', true);
    $("#s2sBackupIP").attr('disabled', true);
    $("#s2sTunnelMask").attr('disabled', true);
    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeOutTextBox()");
  }

  function fadeInTextBox() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeInTextBox()");
    $("#peerAddr").attr('disabled', false);
    $("#preSharedKey").attr('disabled', false);
    $("#destAddr").attr('disabled', false);
    $("#destMask").attr('disabled', false);
    $("#s2sTunnelIP").attr('disabled', false);
    $("#s2sBackupIP").attr('disabled', false);
    $("#s2sTunnelMask").attr('disabled', false);
    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeInTextBox()");
  }

  function fadeInTextBoxDmVPN() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeInTextBoxDmVPN()");
    $('.wizard > .steps').find("li").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });
    $("#tunnelIp").attr('disabled', false);
    $("#tunnelMask").attr('disabled', false);
    $("#transportAddr").attr('disabled', false);
    $("#tunnelAddr").attr('disabled', false);
    $("#dmvpnDestAddr").attr('disabled', false);
    $("#dmvpnDestMask").attr('disabled', false);
    $("#authenticationKey").attr('disabled', false);
    $("#dmvpnPSK").attr('disabled', false);
    $("#dmvpnAutonomousId").attr('disabled', false);
    $("#backupTunnelIP").attr('disabled', false);
    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeInTextBoxDmVPN()");
  }

  function fadeOutTextBoxDmVPN() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeOutTextBoxDmVPN()");
    $('.wizard > .steps').find("li").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });
	$('.wizard > .content').find("input").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });
    //validator.resetForm();
    $("#tunnelIp").attr('disabled', true);
    $("#tunnelMask").attr('disabled', true);
    $("#transportAddr").attr('disabled', true);
    $("#tunnelAddr").attr('disabled', true);
    $("#dmvpnDestAddr").attr('disabled', true);
    $("#dmvpnDestMask").attr('disabled', true);
    $("#authenticationKey").attr('disabled', true);
    $("#dmvpnPSK").attr('disabled', true);
    $("#dmvpnAutonomousId").attr('disabled', true);
    $("#backupTunnelIP").attr('disabled', true);
    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeOutTextBoxDmVPN()");
  }
    function fadeInTextBoxDmVPNhub() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeInTextBoxDmVPN()");
    $('.wizard > .steps').find("li").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });
    $("#dmvpnTunnelIp").attr('disabled', false);
    $("#dmvpnHubTunnelMask").attr('disabled', false);
    $("#dmvpnKey").attr('disabled', false);
    $("#dmvpnEigrp").attr('disabled', false);
    $("#hubBackupIP").attr('disabled', false);
    $("#spokeIP").attr('disabled', false);
    $("#spokeMask").attr('disabled', false);
    $("#localLanIp").attr('disabled', false);
    $("#localLanMask").attr('disabled', false);

    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeInTextBoxDmVPN()");
  }
  function fadeOutTextBoxDmVPNhub() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeOutTextBoxDmVPN()");
    $('.wizard > .steps').find("li").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });
    //validator.resetForm();
    $("#dmvpnTunnelIp").attr('disabled', true);
    $("#dmvpnHubTunnelMask").attr('disabled', true);
    $("#dmvpnKey").attr('disabled', true);
    $("#dmvpnEigrp").attr('disabled', true);
    $("#hubBackupIP").attr('disabled', true);
    $("#spokeIP").attr('disabled', true);
    $("#spokeMask").attr('disabled', true);
    $("#localLanIp").attr('disabled', true);
    $("#localLanMask").attr('disabled', true);
    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeOutTextBoxDmVPN()");
  }

    function fadeInTextBoxRemAccVpn() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeInTextBoxRemAccVpn()");
    $('.wizard > .steps').find("li").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });

    $("#remoteTunnelName").attr('disabled', false);
    $("#remoteAddressPoolFrom").attr('disabled', false);
    $("#remoteAddressPoolTo").attr('disabled', false);
    $("#preSharedKeyRemote").attr('disabled', false);
    $("#remoteConfigInterface").attr('disabled', false);

    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeInTextBoxRemAccVpn()");
  }

  function fadeOutTextBoxRemAccVpn() {
    //consoleLogMethodDetailsStart("configureVPN.js", "fadeOutTextBoxRemAccVpn()");
    $('.wizard > .steps').find("li").each(function() {
      if ($(this).hasClass("error")) {
        $(this).removeClass("error");
        //alert("java");
        //code
      }
    });
    //validator.resetForm();
    $("#remoteTunnelName").attr('disabled', true);
    $("#remoteAddressPoolFrom").attr('disabled', true);
    $("#remoteAddressPoolTo").attr('disabled', true);
    $("#preSharedKeyRemote").attr('disabled', true);
    $("#remoteConfigInterface").attr('disabled', true);
    //consoleLogMethodDetailsEnd("configureVPN.js", "fadeOutTextBoxRemAccVpn()");
  }

  function updateIkev1Data(xml) {
    //consoleLogMethodDetailsStart("configureVPN.js", "updateIkev1Data()");
    $(xml).find('ConfKeyring-Configuration').each(function() {
      $(this).find('pre-shared-key').each(function() {
        oldPeerAddress = $(this).find('AddressPrefix').text();
        oldKey = $(this).find('UnencryptedUserPassword').text();
      });
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "updateIkev1Data()");
  }
  function vpnIkve1() {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "vpnIkve1()");
    formElementEmpty();
    fadeOutTextBox();
    //enableVPN replaced with enableIPSecVPN
    $("#enableIPSecVPN").removeAttr('checked');
    $("#addDest").hide();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    if (checkValuesDMVPN(xml)) {
    isEmptyBlock=true;
    } else if (checkValuesIkve1(xml) && checkTunnel0(xml) && !checkValuesIkve2(xml)) {
      //enableVPN replaced with enableIPSecVPN
      $("#enableIPSecVPN").attr('checked', 'checked');
      $("#ipsecButtonBar").show();

      $("#addDest").show();
      $('.wizard > .actions').show();
      fadeInTextBox();
      $(xml).find('ConfKeyring-Configuration').each(function() {
        $(this).find('pre-shared-key').each(function() {
          $("#peerAddr").val($(this).find('AddressPrefix').text());
          $("#preSharedKey").val($(this).find('UnencryptedUserPassword').text());
        });
      });
      $(xml).find('Interface').each(function() {
        var intfc = $(this).text().split("\n")[0];
        if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#s2sTunnelIP").val($(this).find('IPAddress').text());
            $("#s2sTunnelMask").val($(this).find('IPSubnetMask').text());
            return false;
          });
        } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#s2sBackupIP").val($(this).find('IPAddress').text());
            return false;
          });
        }
      });
      $(xml).find('route').each(function() {
        if ($(this).html().toString().indexOf("Tunnel0") > -1) {
          bflag = true;
          $('.multipleDestMaskdiv').append('<div class="multipleDestdiv">' +
                                           $(this).find('DestinationPrefix').text() +
                                           '</div><div class="multipleMaskdiv">' +
                                           $(this).find('DestinationPrefixMask').text() +
                                           '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass629"  /></div>');
        }
        //}
      });
    }
    $("#destAddr").val("");
    $("#destMask").val("");
    $("#destAddr").focusout();
    $("#destMask").focusout();
    //consoleLogMethodDetailsEnd("configureVPN.js", "vpnIkve1()");
  }

  function vpnIkve2() {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "vpnIkve2()");
    formElementEmpty();
    fadeOutTextBox();
    //enableVPN replaced with enableIPSecVPN
    $("#enableIPSecVPN").removeAttr('checked');
    $("#addDest").hide();
    $('.wizard > .actions').hide();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;

    if (checkValuesDMVPN(xml)) {
  isEmptyBlock=true;
    } else if (checkValuesIkve2(xml)) {
      //enableVPN replaced with enableIPSecVPN
      $("#enableIPSecVPN").attr('checked', 'checked');
      $("#ipsecButtonBar").show();

      $("#addDest").show();
      $('.wizard > .actions').show();
      fadeInTextBox();
      $(xml).find('ConfigIkev2Keyring-Configuration').each(function() {
        $(this).find('ConfigIkev2KeyringPeer-Configuration').each(function() {
          $("#preSharedKey").val($(this).find('UnencryptedUserPassword').text());
          $(this).find('identity').each(function() {
            $("#peerAddr").val($(this).find('IPv4Address').text());
          });
        });
      });
      $(xml).find('Interface').each(function() {
        var intfc = $(this).text().split("\n")[0];
        if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#s2sTunnelIP").val($(this).find('IPAddress').text());
            $("#s2sTunnelMask").val($(this).find('IPSubnetMask').text());
            return false;
          });
        } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#s2sBackupIP").val($(this).find('IPAddress').text());
            return false;
          });
        }
      });
      var remote_subnet=[];

      if (vpnLoadingClubbedCLIOutputAvailable) {
        remote_subnet = vpnLoadingClubbedCLIOutputArray[2].trim().split("\n");
      }
      else{
        remote_subnet = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets").split("\n");
      }
      var dest = "", mask = "";
      for (i = 1; i < remote_subnet.length; i++) {
        dest = remote_subnet[i].split(" ")[1];
        mask = remote_subnet[i].split(" ")[2];
        $('.multipleDestMaskdiv').append('<div class="multipleDestdiv">' + dest +
                                         '</div><div class="multipleMaskdiv">' + mask +
                                         '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass630"  /></div>');
      }
    }
    $("#destAddr").val("");
    $("#destMask").val("");
    $("#destAddr").focusout();
    $("#destMask").focusout();
    //consoleLogMethodDetailsEnd("configureVPN.js", "vpnIkve2()");
  }
  function dmvpnIkve1() {
    //consoleLogMethodDetailsStart("configureVPN.js", "dmvpnIkve1()");
    formDmvpnEmpty();
    fadeOutTextBoxDmVPN();
    $("#enableDmVPN").removeAttr('checked');
    $("#dmvpnAddDest").hide();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    var autonomousKey = "";
    var networkArr = [], i = 0, bflag = false, networkval = "";
	var lanIpArr=[];
	var lanMaskArr=[];
    if (checkValuesDMVPN(xml)) {
      if (checkValuesIkve1(xml) && checkTunnel0(xml) && !checkValuesIkve2(xml)) {
        fadeInTextBoxDmVPN();
        $("#enableDmVPN").attr('checked', 'checked');
        $("#dmvpnAddDest").show();
        $("#dmVPNsubnetPopupButton").show();
        $(xml).find('ConfKeyring-Configuration').each(function() {
          $(this).find('pre-shared-key').each(function() {
            $("#dmvpnPSK").val($(this).find('UnencryptedUserPassword').text());
          });
        });
        $(xml).find('Interface').each(function() {
          var intfc = $(this).text().split("\n")[0];
          if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
            $("#transportAddr").val($(this).find('IPv4Address').text());
            $("#tunnelAddr").val($(this).find('ProtocolIPAddressNHS').text());
            $(this).find('ip').each(function() {
              $("#tunnelIp").val($(this).find('IPAddress').text());
              $("#tunnelMask").val($(this).find('IPSubnetMask').text());
              return false;
            });
          } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
            $(this).find('ip').each(function() {
              $("#backupTunnelIP").val($(this).find('IPAddress').text());
              return false;
            });
          }
        });
        networkArr[0] = configureFirewall.getNetworkAddress($('#tunnelIp').val(), $('#tunnelMask').val());
        var remote_subnet;

        if (vpnLoadingClubbedCLIOutputAvailable) {
          remote_subnet = vpnLoadingClubbedCLIOutputArray[2].trim().split("\n");
        }
        else{
          remote_subnet = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets").split("\n");
        }
        var dest = "", mask = "";
		$(xml).find('ConfigExtNacl-Configuration').each(function() {
        $(this).find('permit').each(function() {
        $(this).find('ip').each(function() {
        $(this).find('any').each(function() {
        lanIpArr.push($(this).find('DestinationAddress').text());
		lanMaskArr.push($(this).find('DestinationWildcardBits').text());
        });
        });
        });
		});
		for(i=0;i<lanIpArr.length;i++){
			if((lanIpArr[i].length>7 && lanIpArr[i] !== undefined )&&(lanMaskArr[i].length>7 && lanMaskArr[i] !== undefined)){
			$('.dmvpnMultipleDestMaskdiv').append('<div class="multipleDestdiv">' +
			lanIpArr[i] +
			'</div><div class="dmVpnMultipleMaskdiv">' +
			lanMaskArr[i] +
			'&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass631"  /></div>');
			}
		}
        var lanzoneSubnet;
        if (vpnLoadingClubbedCLIOutputAvailable) {
          lanzoneSubnet = vpnLoadingClubbedCLIOutputArray[3].trim().split("\n");
        }
        else{
          lanzoneSubnet = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets").split("\n");
        }
        for (i = 1; i < lanzoneSubnet.length; i++) {
          networkArr[i] = lanzoneSubnet[i].split(" ")[1];
        }

        //i=0;
        $(xml).find('router').each(function() {
          $(this).find('eigrp').each(function() {
            $(this).find('AutonomousSystem').each(function() {
              eigrp = $(this).text();
            });
            $(this).find('ConfigRouter-Configuration').each(function() {
              $(this).find('network').each(function() {
                $(this).find('NetworkNumber').each(function() {
                  if ($(this).find('EIGRPWildCardBits').text()) {
          isEmptyBlock=true;
                  } else {
                    networkval = $(this).text();
                    if (networkArr[0] == networkval) {
                      bflag = true;
                    } else {
          isEmptyBlock=true;
                    }
                    //bflag = false;
                    //i++;
                  }
                });
              });
              if (bflag){
                autonomousKey = eigrp;
        }
            });
          });
        });
      }
    }
    $("#dmvpnAutonomousId").val(autonomousKey);
    $("#dmvpnDestAddr").val("");
    $("#dmvpnDestMask").val("");
    $("#dmvpnDestAddr").focusout();
    $("#dmvpnDestMask").focusout();
    //consoleLogMethodDetailsEnd("configureVPN.js", "dmvpnIkve1()");
  }
  function dmvpnIkve2() {
    //consoleLogMethodDetailsStart("configureVPN.js", "dmvpnIkve2()");
    formDmvpnEmpty();
    fadeOutTextBoxDmVPN();
    $("#enableDmVPN").removeAttr('checked');
  $("#dmvpnAddDest").hide();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    var autonomousKey = "";
    var networkArr = [], i = 0, bflag = false, networkval = "";
	var lanIpArr=[];
	var lanMaskArr=[];
    if (checkValuesDMVPN(xml)) {
      if (checkValuesIkve2(xml)) {
        fadeInTextBoxDmVPN();
        $("#enableDmVPN").attr('checked', 'checked');
        $("#dmvpnAddDest").show();
        $("#dmVPNsubnetPopupButton").show();
        $(xml).find('ConfigIkev2Keyring-Configuration').each(function() {
          $(this).find('ConfigIkev2KeyringPeer-Configuration').each(function() {
            $("#dmvpnPSK").val($(this).find('UnencryptedUserPassword').text());
          });
        });
        $(xml).find('Interface').each(function() {
          var intfc = $(this).text().split("\n")[0];
          if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
            $("#transportAddr").val($(this).find('IPv4Address').text());
            $("#tunnelAddr").val($(this).find('ProtocolIPAddressNHS').text());
            $(this).find('ip').each(function() {
              $("#tunnelIp").val($(this).find('IPAddress').text());
              $("#tunnelMask").val($(this).find('IPSubnetMask').text());
              return false;
            });
          } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
            $(this).find('ip').each(function() {
              $("#backupTunnelIP").val($(this).find('IPAddress').text());
              return false;
            });
          }
        });
        networkArr[0] = configureFirewall.getNetworkAddress($('#tunnelIp').val(), $('#tunnelMask').val());
        var remote_subnet;
        if (vpnLoadingClubbedCLIOutputAvailable) {
          remote_subnet = vpnLoadingClubbedCLIOutputArray[2].trim().split("\n");
        }
        else{
          remote_subnet = deviceCommunicator.getExecCmdOutput("show object-group vpn_remote_subnets").split("\n");
        }
        var dest = "", mask = "";
		$(xml).find('ConfigExtNacl-Configuration').each(function() {
        $(this).find('permit').each(function() {
        $(this).find('ip').each(function() {
        $(this).find('any').each(function() {
        lanIpArr.push($(this).find('DestinationAddress').text());
		lanMaskArr.push($(this).find('DestinationWildcardBits').text());
        });
        });
        });
		});
		for(i=0;i<lanIpArr.length;i++){
			if((lanIpArr[i].length>7 && lanIpArr[i] !== undefined )&&(lanMaskArr[i].length>7 && lanMaskArr[i] !== undefined)){
			$('.dmvpnMultipleDestMaskdiv').append('<div class="multipleDestdiv">' +
			lanIpArr[i] +
			'</div><div class="dmVpnMultipleMaskdiv">' +
			lanMaskArr[i] +
			'&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass631"  /></div>');
			}
		}
        var lanzoneSubnet;
        if (vpnLoadingClubbedCLIOutputAvailable) {
          lanzoneSubnet = vpnLoadingClubbedCLIOutputArray[3].trim().split("\n");
        }
        else{
          lanzoneSubnet = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets").split("\n");
        }
        for (i = 1; i < lanzoneSubnet.length; i++) {
          networkArr[i] = lanzoneSubnet[i].split(" ")[1];
        }
        //i=0;
        $(xml).find('router').each(function() {
          $(this).find('eigrp').each(function() {
            $(this).find('AutonomousSystem').each(function() {
              eigrp = $(this).text();
            });
            $(this).find('ConfigRouter-Configuration').each(function() {
              $(this).find('network').each(function() {
                $(this).find('NetworkNumber').each(function() {
                  if ($(this).find('EIGRPWildCardBits').text()) {
          isEmptyBlock=true;
                  } else {
                    networkval = $(this).text();
                    if (networkArr[0] == networkval) {
                      bflag = true;
                    } else {
          isEmptyBlock=true;
                    }
                    //bflag = false;
                    //i++;
                  }
                });
              });
              if (bflag){
                autonomousKey = eigrp;
        }
            });
          });
        });
      }
    }
    $("#dmvpnAutonomousId").val(autonomousKey);
    $("#dmvpnDestAddr").val("");
    $("#dmvpnDestMask").val("");
    $("#dmvpnDestAddr").focusout();
    $("#dmvpnDestMask").focusout();
    //consoleLogMethodDetailsEnd("configureVPN.js", "dmvpnIkve2()");
  }


  function loadHubIkev1(){
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "vpnIkve1()");
    $("#addLocalLan").show();
	$("#localLANPopupButton").show();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
	var lanIpArr=[];
	var lanMaskArr=[];
    $('.wizard > .actions').show();
      fadeInTextBoxDmVPNhub();
      $(xml).find('ConfKeyring-Configuration').each(function() {
        $(this).find('pre-shared-key').each(function() {
          $("#dmvpnHubKey").val($(this).find('UnencryptedUserPassword').text());
        });
      });
      $(xml).find('Interface').each(function() {
        var intfc = $(this).text().split("\n")[0];
        if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#dmvpnTunnelIp").val($(this).find('IPAddress').text());
            $("#dmvpnHubTunnelMask").val($(this).find('IPSubnetMask').text());
            return false;
          });
        } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#hubBackupIP").val($(this).find('IPAddress').text());
            return false;
          });
        }
      });
    $("#dmvpnHubIKEv1Radio").prop('checked', true);
    $("#dmvpnHubIKEv2Radio").prop('checked', false);
    var oldEigrp=findOldEigrp(xml);
    $("#dmvpnHubEigrp").val(oldEigrp);

	$(xml).find('ConfigExtNacl-Configuration').each(function() {
        $(this).find('permit').each(function() {
        $(this).find('ip').each(function() {
        $(this).find('any').each(function() {
        lanIpArr.push($(this).find('DestinationAddress').text());
		lanMaskArr.push($(this).find('DestinationWildcardBits').text());
        });
        });
        });
    });
	for(i=0;i<lanIpArr.length;i++){
		if((lanIpArr[i].length>7 && lanIpArr[i] !== undefined )&&(lanMaskArr[i].length>7 && lanMaskArr[i] !== undefined)){
		$('.localLanTable').append('<div class="dmvpnHubDestDiv">' +
		lanIpArr[i] +
		'</div><div class="dmvpnHubMaskDiv">' +
		lanMaskArr[i] +
		'&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteSpoke" class="utmSprite close deleteSpoke ccpexpCSSReplaceClass634"/></div>');
		}
	}
    }


  function loadHubIkev2(){
        //code
    //consoleLogMethodDetailsStart("configureVPN.js", "vpnIkve1()");
    $("#addLocalLan").show();
	$("#localLANPopupButton").show();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
	var lanIpArr=[];
	var lanMaskArr=[];
    $('.wizard > .actions').show();
      fadeInTextBoxDmVPNhub();
      $(xml).find('ConfigIkev2Keyring-Configuration').each(function() {
          $(this).find('ConfigIkev2KeyringPeer-Configuration').each(function() {
            $("#dmvpnHubKey").val($(this).find('UnencryptedUserPassword').text());
          });
        });
      $(xml).find('Interface').each(function() {
        var intfc = $(this).text().split("\n")[0];
        if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#dmvpnTunnelIp").val($(this).find('IPAddress').text());
            $("#dmvpnHubTunnelMask").val($(this).find('IPSubnetMask').text());
            return false;
          });
        } else if (intfc.toLowerCase() == "Tunnel1".toLowerCase()) {
          $(this).find('ip').each(function() {
            $("#hubBackupIP").val($(this).find('IPAddress').text());
            return false;
          });
        }
      });
    $("#dmvpnHubIKEv1Radio").prop('checked', false);
    $("#dmvpnHubIKEv2Radio").prop('checked', true);
    var oldEigrp=findOldEigrp(xml);
    $("#dmvpnHubEigrp").val(oldEigrp);
    $(xml).find('ConfigExtNacl-Configuration').each(function() {
        $(this).find('permit').each(function() {
        $(this).find('ip').each(function() {
        $(this).find('any').each(function() {
        lanIpArr.push($(this).find('DestinationAddress').text());
		lanMaskArr.push($(this).find('DestinationWildcardBits').text());
        });
        });
        });
    });
	for(i=0;i<lanIpArr.length;i++){
		if((lanIpArr[i].length>7 && lanIpArr[i] !== undefined )&&(lanMaskArr[i].length>7 && lanMaskArr[i] !== undefined)){
		$('.localLanTable').append('<div class="dmvpnHubDestDiv">' +
		lanIpArr[i] +
		'</div><div class="dmvpnHubMaskDiv">' +
		lanMaskArr[i] +
		'&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteSpoke" class="utmSprite close deleteSpoke ccpexpCSSReplaceClass634"/></div>');
		}
	}
  }

  function formElementEmpty() {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "formElementEmpty()");
    $('.multipleDestMaskdiv').find('div').each(function(index) {
      $(this).remove();
    });

    $("#peerAddr").val("");
    $("#preSharedKey").val("");
    $("#destAddr").val("");
    $("#destMask").val("");
    $("#s2sTunnelIP").val("");
    $("#s2sBackupIP").val("");
    $("#s2sTunnelMask").val("");
    //consoleLogMethodDetailsEnd("configureVPN.js", "formElementEmpty()");
  }
  function formDmvpnEmpty() {
    // code
    //consoleLogMethodDetailsStart("configureVPN.js", "formDmvpnEmpty()");
    $('.dmvpnMultipleDestMaskdiv').find('div').each(function(index) {
      $(this).remove();
    });

    $("#tunnelIp").val("");
    $("#tunnelMask").val("");
    $("#dmvpnDestAddr").val("");
    $("#dmvpnDestMask").val("");
    $("#transportAddr").val("");
    $("#tunnelAddr").val("");
    $("#authenticationKey").val("");
    $("#dmvpnPSK").val("");
    $("#dmvpnAutonomousId").val("");
    $("#backupTunnelIP").val("");
    //consoleLogMethodDetailsEnd("configureVPN.js", "formDmvpnEmpty()");
  }

    function formDmvpnHubEmpty() {
    $('.localLanTable').html("");

    $("#dmvpnTunnelIp").val("");
    $("#dmvpnHubTunnelMask").val("");
    $("#dmvpnKey").val("");
    $("#dmvpnEigrp").val("");
    $("#hubBackupIP").val("");
    /* $("#spokeIP").val("");
    $("#spokeMask").val(""); */
    $("#localLanIp").val("");
    $("#localLanMask").val("");

  }
  
  function checkIpSecVPNisIKEV2() {
    var isIKev2 = true;
    try {
      var tempString = deviceCommunicator.getExecCmdOutput("sh run | i crypto ikev2 keyring key");
      if (tempString!= null && tempString != undefined && tempString.trim() != "" && tempString.trim().indexOf("crypto ikev2 keyring key")>-1) {
	isIKev2 = true;
      } else {
	isIKev2 = false;
      }
    } catch (e) {
      isIKev2 = false;
    }
    return isIKev2;
  }
  
  function loadVpn() {
	$("#siteTositeDialog").hide();
	$("#subnetPopupButton").hide();
	selectedTunnDetails = "";
	//$("#site-table").hide();
	//$("#noDataIpsecMessage").hide();

    isIpSecVPNProfileIKev2 = checkIpSecVPNisIKEV2();
    
    $('#ipsecForm').resetForm();
    validatorIpsec.resetForm();
    
    loadIpsectable();
    //blockPage("Loading");
    //consoleLogMethodDetailsStart("configureVPN.js", "loadVpn()");
    $('#confvpnError').hide();
    //enableVPN replaced with enableIPSecVPN
    $("#enableIPSecVPN").attr('checked', 'checked');
    $("#ipsecButtonBar").show();
    fadeInTextBox();
    $("#addDest").show();
    $(".multipleDestMaskdiv").show();
    $('.wizard > .actions').show();
    validator.resetForm();
    if ($("#ipAddrErrorSpan").hasClass('hint--top')) {
      $("#ipAddrErrorSpan").removeAttr("data-hint");
      $("#ipAddrErrorSpan").removeClass("hint--top");
      $("#destAddr").removeClass("highlightTextBox");
    }
    if ($("#maskErrorSpan").hasClass('hint--top')) {
      $("#maskErrorSpan").removeAttr("data-hint");
      $("#maskErrorSpan").removeClass("hint--top");
      $("#destMask").removeClass("highlightTextBox");
    }
    if (isNano&&advsecurity) {
      //$("#dmvpnSpoke").hide();
      $("#vpnDMVPNTitle").hide();
      //$("#dmVPN").hide();
      //$('#siteTosite').hide();
      $('#vpnSiteTitle').hide();
    }
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    hubConfigured=checkDmvpnHub(xml);
    if(hubConfigured=="hub-ikev1" || hubConfigured=="hub-ikev2"){
    loadDmVPNhub(hubConfigured);
    }else if (checkValuesDMVPN(xml)) {
      peerOrHubAddress = $("#transportAddr").val();
      dmvpnflag = true;
      $("#vpnIKEv2Radio").prop('checked', true);
      formElementEmpty();
      fadeOutTextBox();
      //enableVPN replaced with enableIPSecVPN
      $("#enableIPSecVPN").removeAttr('checked');
      $("#addDest").hide();
      $('.wizard > .actions').hide();
      $("#destAddr").focusout();
      $("#destMask").focusout();
      //return false;
    } else if (checkValuesIkve1(xml) && checkTunnel0(xml) && !checkValuesIkve2(xml)) {
      dmvpnflag = false;
      /* vpnIkve1();
      $("#vpnIKEv1Radio").prop('checked', true); */
      peerOrHubAddress = $("#peerAddr").val();

    } else if (checkValuesIkve2(xml)) {
      dmvpnflag = false;
      /* vpnIkve2();
      $("#vpnIKEv2Radio").prop('checked', true); */
      peerOrHubAddress = $("#peerAddr").val();

    } else {
      dmvpnflag = false;
      $("#vpnIKEv2Radio").prop('checked', true);
      formElementEmpty();
      fadeOutTextBox();
      //enableVPN replaced with enableIPSecVPN
      //$("#enableIPSecVPN").removeAttr('checked');
    $("#addDest").hide();
     $('.wizard > .actions').hide();
      $("#destAddr").focusout();
      $("#destMask").focusout();
      peerOrHubAddress = $("#peerAddr").val();
    }
    //consoleLog("configureVPN.js", "loadVpn() - peerOrHubAddress-" + peerOrHubAddress);
    //$.unblockUI();
    //consoleLogMethodDetailsEnd("configureVPN.js", "loadVpn()");
  //Hide apply button unless VPN is enabled
      //enableVPN replaced with enableIPSecVPN
      //var vpnStatus = $("#enableIPSecVPN");
      //if(vpnStatus.is(':checked'))
      //{
      //   $( "#applyVpn" ).button({
      //    disabled: false
      //    });
      //}
      //else{
      //  $( "#applyVpn" ).button({
      //    disabled: true
      //    });
      //}
      ////enableVPN replaced with enableIPSecVPN
      //$("#enableIPSecVPN").click(function(){
      //  if(vpnStatus.is(':checked'))
      //  {
      //    $( "#applyVpn" ).button({
      //      disabled: false
      //      });
      //  }
      //  else{
      //    $( "#applyVpn" ).button({
      //      disabled: true
      //      });
      //  }
      //});


  //$("#applyVpn").button().click(function(e) {
  //  e.preventDefault();
  //});

   $('#vpnType option[value="siteTosite"]').attr("selected", "selected");

   $("#addSite").button().click(function(event){
    $('.wizard > .actions').show();
    fadeInTextBox();
    $("#addDest").show();
    $("#destAddr").removeClass("highlightTextBox");
    $("#destMask").removeClass("highlightTextBox");
    $("#ipAddrErrorSpan").removeAttr("data-hint");
    $("#ipAddrErrorSpan").removeClass("hint--top");

    if (vpnConfigPresent) {
      editingSite=false;
      $("#vpnIKEv1Radio").attr('disabled',false);
      $("#vpnIKEv2Radio").attr('disabled',false);
      var xml=deviceCommunicator.getExecCmdOutput("sh run");
      if(xml.indexOf("crypto ikev2 keyring key")>-1){
	$("#vpnIKEv1Radio").attr('disabled',true);
	$("#vpnIKEv2Radio").attr('checked', true);
      } else if(xml.indexOf("keyring isakmp-keyring")>-1) {
	$("#vpnIKEv2Radio").attr('disabled',true);
        $("#vpnIKEv1Radio").attr('checked', true);
      }
    } else {
        $("#vpnIKEv1Radio").attr('disabled',false);
        $("#vpnIKEv2Radio").attr('disabled',false);
	$("#vpnIKEv2Radio").attr('checked', true);
    }
    formElementEmpty();
	$("#destAddr").val('');
	$("#destAddr").removeClass("highlightTextBox");
	$("#destMask").val('');
	$("#destMask").removeClass("highlightTextBox");
    for (j = 0; j < 3; j++) {
      $('#wizardSiteToSite').steps("previous");
    }
    $("#siteTositeDialog").dialog("open");
    event.preventDefault();
  });


    $("#refreshSite").button().click(function(event){
    /* $("#refreshIpsec").trigger("click"); */
	refreshTable();
	event.preventDefault();
    });


  }

  function refreshTable(){
    blockPage("Loading");
    setTimeout(function(){
	$('#confvpnError').hide();
	loadIpsectable();
    },500);
  }

function removeIpsecVpn(){
	blockPage("Applying");
    setTimeout(function() {
	try{
	ipsecExists=false;
	var tunnelRemoveString="";
	var showRunOut=deviceCommunicator.getExecCmdOutput("show run");
	var showCryptoOut=deviceCommunicator.getExecCmdOutput("show crypto session");
	var tunnelArr=[];
	var shRunArr=showRunOut.split("\n");
	var shCryptoArr=showCryptoOut.split("\n");
    var arr=[];
	var noPreSharedKeyArr=[];
	var noMatchIdentityArr=[];
	var noPeerKeyArr=[];
	var noPreSharedKey="";
	var noMatchIdentity="";
	var noPeerKey="";
	for(i=0;i<shCryptoArr.length;i++){
		if(shCryptoArr[i].indexOf("Interface: Tunnel")>-1){
		tunnelArr.push(shCryptoArr[i].replace("Interface: ","").trim());
		}
	}
	for(i=0;i<shRunArr.length;i++){
	    var confLine=shRunArr[i];
		if(confLine.indexOf("pre-shared-key")>-1){
		noPreSharedKeyArr.push(confLine);
		}
	    if(confLine.indexOf("match identity")>-1){
		noMatchIdentityArr.push(confLine);
		}
		if(confLine.indexOf("peer SITE-KEY-")>-1){
		noPeerKeyArr.push(confLine);
		}
	}
	for(j=0;j<tunnelArr.length;j++){
	tunnelRemoveString=tunnelRemoveString+"no interface "+tunnelArr[j]+"\n";
    }
	for(j=0;j<noPreSharedKeyArr.length;j++){
	noPreSharedKey=noPreSharedKey+"no "+noPreSharedKeyArr[j]+"\n";
    }
	for(j=0;j<noMatchIdentityArr.length;j++){
	noMatchIdentity=noMatchIdentity+"no "+noMatchIdentityArr[j]+"\n";
    }
	for(j=0;j<noPeerKeyArr.length;j++){
	noPeerKey=noPeerKey+"no "+noPeerKeyArr[j]+"\n";
    }
	if(showRunOut.indexOf("crypto ikev2 profile prof")>-1){
	 arr.push({
        name: "tunnelName",
        value: tunnelRemoveString
        }, {
        name: "noPeerText",
        value: noPeerKey
      }, {
        name: "noMatchIdentity",
        value: noMatchIdentity
      });
     response = deviceCommunicator.configureCommandsFromTemplate2("deleteTunnelS2SIkev2.txt", arr, false);
     arr.length = 0;
	 var noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";
	 arr.push({
        name: "noAuthPolicy",
        value: noAuthPolicy
        });
	 response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
	 response=deviceCommunicator.getConfigCmdOutput("no ip access-list extended INTRANET-WHITELIST");
	 checkIpsecTunnelDeleteIkev2();
	 //refreshTable();
	}else{
      arr.push({
        name: "tunnelName",
        value: tunnelRemoveString
        }, {
        name: "noPreSharedKey",
        value: noPreSharedKey
      }, {
        name: "noMatchIdentity",
        value: noMatchIdentity
      });
     response = deviceCommunicator.configureCommandsFromTemplate2("deleteTunnelS2S.txt", arr, false);
     arr.length = 0;
	 var noAuthPolicy = "";
	 arr.push({
        name: "noAuthPolicy",
        value: noAuthPolicy
        });
	 response = deviceCommunicator.configureCommandsFromTemplate2("deleteIpsecIkev1.txt", arr, false);
	 response=deviceCommunicator.getConfigCmdOutput("no ip access-list extended INTRANET-WHITELIST");
	 checkIpsecTunnelDelete();
	 //refreshTable();
	}
	}catch(error){
	      //$('#confvpnErrorMessage').html(error.errorResponse);
      if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
        errMsgStr = $.i18n.prop("invalidInputDetected");
      }
      else {
        errMsgStr = error.errorResponse;
      }
      $('#confvpnErrorMessage').html(errMsgStr);
      $('#confvpnError').show();
	}
    }
	, 10000);
    return false;
}

  function isTunnelStatusUp(statusString) {
    var retBoolVal = false;
    if (statusString!=null && statusString!=undefined && statusString.trim()!= "" && statusString.trim().toLowerCase().indexOf("up")> -1) {
      retBoolVal = true;
    }
    return retBoolVal;
  }

  function loadIpsectable(){
    var ipsecConfig=deviceCommunicator.getExecCmdOutput("show crypto session");
	isIpSecVPNProfileIKev2 = checkIpSecVPNisIKEV2();
    xml=deviceCommunicator.getExecCmdOutput("show run");
    var interfaceArr=[];
    var interfaceArrTwo=[];
    var statusArr=[];
	var statusArrTwo=[];
    var destIpArr=[];
    var destIpArrTwo=[];
    var sourceIpArr=[];
    var sourceIpArrTwo=[];
    var peerArr=[];
    var intArr=[];
    var interfaceBackupArr=[];
    var interfacePrimaryArr=[];
    var ipsecArr=ipsecConfig.split("\n");
    var configLine="";
    var sourceIpAdd="";
    var interfaceName="";
    var interfaceIndex="";
    var tableID="ipsecTable1";
    editingSite=false;
    $("#ipsecTable1").remove();
    $("#ipsecTable").append("<tbody id='" + tableID  + "'change='false'></tbody>");
    for(i=0;i<ipsecArr.length;i++){
      configLine=ipsecArr[i];
      if((configLine.indexOf("Interface:")>-1)&&(configLine.indexOf("Tunnel")>-1)){
	interfaceArr.push(configLine.replace("Interface: ",""));
      }else if(configLine.indexOf("Session status")>-1){
	statusArr.push(configLine.replace("Session status: ",""));
      }else if(configLine.indexOf("Peer: ")>-1){
	var sIndex=configLine.indexOf("Peer: ");
	var eIndex=configLine.indexOf("port");
	destIpArr.push(configLine.substring(sIndex,eIndex).replace("Peer:",""));
      }else if(configLine.indexOf("SA: local")>-1){
	var stIndex=configLine.indexOf("SA: local");
	configLine=configLine.substring(stIndex,40);
	var enIndex=configLine.indexOf("/");
	sourceIpAdd=configLine.substring(stIndex+1,enIndex);
	if (sourceIpAdd === undefined && sourceIpAdd == null) {
	  sourceIpAdd = "";
	}
	sourceIpArr.push(sourceIpAdd);
      }
    }
    for(i=0;i<interfaceArr.length;i++){
      interfaceName=interfaceArr[i];
      if(interfaceName.indexOf("Tunnel")>-1){
	interfaceIndex=interfaceName.replace("Tunnel","").trim();
      }
      intArr.push(interfaceIndex);
    }
    maxInterfaceIndex=0;
    for(i=0;i<intArr.length;i++){
      if(maxInterfaceIndex<intArr[i]){
	maxInterfaceIndex=intArr[i];
      }
    }
    if(interfaceArr.length>0){
      for(i=0;i<interfaceArr.length;i++){
	if(xml.indexOf(interfaceArr[i])>-1){
	  interfaceArrTwo.push(interfaceArr[i]);
	  statusArrTwo.push(statusArr[i]);
	  destIpArrTwo.push(destIpArr[i]);
	  
	}
      }
    }

    for(i=0;i<interfaceArrTwo.length;i++){
      var tunnelName=interfaceArrTwo[i];	
      var backupCheck=deviceCommunicator.getExecCmdOutput("sh run interface "+tunnelName);
      var backupCheckLine=backupCheck.split("\n");
      for(j=0;j<backupCheckLine.length;j++){
	if(backupCheckLine[j].indexOf("backup interface")>-1){
	  interfaceBackupArr.push(backupCheckLine[j].replace("backup interface","").trim());
	  interfacePrimaryArr.push(tunnelName);
	}
      }
    }

    if(interfaceArrTwo.length>0){
	ipsecExists=true;
	vpnConfigPresent = true;
	$("#site-table").show();
	$("#noDataIpsecMessage").hide();
	var ipsecTunnelStatusUPDiv = '&nbsp;<div class="utmSprite enable ipsecTunnelDivClass" value="enable"></div>';
	var ipsecTunnelStatusDOWNDiv = '&nbsp;<div class="utmSprite disable ipsecTunnelDivClass" value="disable"></div>';
        var ipsecTunnelStatusDiv1='';
        var ipsecTunnelStatusDiv2='';
	
	for(i=0;i<interfaceArrTwo.length;i++){
	    if (isTunnelStatusUp(statusArrTwo[i])) {
	      ipsecTunnelStatusDiv1=ipsecTunnelStatusUPDiv;
	    } else {
	      ipsecTunnelStatusDiv1=ipsecTunnelStatusDOWNDiv; 
	    }	  if(interfaceBackupArr!=undefined && interfaceBackupArr.length>0){
	    for(j=0;j<interfacePrimaryArr.length;j++){
	      if(interfaceArrTwo[i]==interfacePrimaryArr[j]){
		if (isTunnelStatusUp(statusArrTwo[i])) {
		  ipsecTunnelStatusDiv2=ipsecTunnelStatusUPDiv;
		} else {
		  ipsecTunnelStatusDiv2=ipsecTunnelStatusDOWNDiv; 
		}
	        $("#ipsecTable " +"tbody#" + tableID).append('<tr class="appended" id="'+interfaceArrTwo[i]+'-'+interfaceBackupArr[j]+'">'+'<td>' + destIpArrTwo[i] + '</td><td>' +interfaceArrTwo[i] + ipsecTunnelStatusDiv1+"   "+interfaceBackupArr[j]+ ipsecTunnelStatusDiv2 + '</td><td>' + getIpSecOverallTunnelStatus(statusArrTwo[i],statusArrTwo[i]) + '</td></tr>');	
	      }	
	    }      
	  } else {
	    $("#ipsecTable " +"tbody#" + tableID).append('<tr class="appended" id="'+interfaceArrTwo[i]+'">'+'<td>' + destIpArrTwo[i] + '</td><td>' +interfaceArrTwo[i]+ ipsecTunnelStatusDiv1+'</td><td>' + getIpSecOverallTunnelStatus(statusArrTwo[i],statusArrTwo[i]) + '</td></tr>');	
	  }
	}
    }else{
	$("#site-table").hide();
	$("#noDataIpsecMessage").show();
    }
    if(interfacePrimaryArr.length==1){
	firstRow=true;
    }else{
	firstRow=false;
    }
    addTableColumn("ipsecTable", "ipsecEdit", "ipsecDelete");
    $.unblockUI();
  }
 
  
  $('#ipsecTable tbody tr').live('dblclick', function() {
      $this = $(this).closest("tr");
      triggerIpsecEdit($this);
    });

    $(".ipsecEdit").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerIpsecEdit($this);
    });

    $(".ipsecDelete").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerIpsecDelete($this);
    });


    function triggerIpsecEdit($this) {
      selectedTunnDetails = "";
      $('.wizard > .actions').show();
      fadeInTextBox();
      $('#ipsecTable input:checkbox').removeAttr('checked');
      $("#ipsecTable tbody tr").removeClass('hilite');
      $("#destAddr").removeClass("highlightTextBox");
      $("#destMask").removeClass("highlightTextBox");
      $("#ipAddrErrorSpan").removeAttr("data-hint");
      $("#ipAddrErrorSpan").removeClass("hint--top");
	  $("#subnetPopupButton").show();
      $this.find('input:checkbox').eq(0).prop("checked", true);
      var selectedRows = $("#ipsecTable tbody input:checkbox:checked").length;
      if (selectedRows == 1 && $this.hasClass('disabledObjectGroup') === false) {
	  $this.addClass("hilite");
	}else {
	  isEmptyBlock=true;
	}
	if ($this.hasClass('disabledObjectGroup')) {
	  $('#ipsecTable input:checkbox').removeAttr('checked');
	}
	$tr = $('#ipsecTable tr.hilite').closest('tbody').children('tr:first').children('td');
	$td = $('#ipsecTable tr.hilite').closest('tr').children('td');
	selectedTunnel=$this.attr('id');
	var tunnelNameArr=selectedTunnel.split("-");
	var tunnelToEditName=tunnelNameArr[0];
	var backupTunnelName = tunnelNameArr[1];
	peerIp=$td.eq(1).text();
	editingSite = true;
	selectedTunnDetails = "";
    selectedTunnDetails = getIpSecTunnelDetails(tunnelToEditName, backupTunnelName, peerIp, true);
	var count = $('#ipsecTable1').children('tr').length;
	if(count==1){
    firstRow=true;
	}
	isEdit=true;
        /* console.log("Edit Tunnel Details\n"+ JSON.stringify(selectedTunnDetails)); */
    
	editTunnel(tunnelToEditName,backupTunnelName,peerIp);
      }


    function triggerIpsecDelete($this) {
      blockPage("Applying");
      setTimeout(function() {
	$('#ipsecTable input:checkbox').removeAttr('checked');
	$("#ipsecTable tbody tr").removeClass('hilite');
	$this.find('input:checkbox').eq(0).prop("checked", true);
	var selectedRows = $("#ipsecTable tbody input:checkbox:checked").length;
	if (selectedRows == 1 && $this.hasClass('disabledObjectGroup') === false) {
	    $this.addClass("hilite");
	}else {
	    isEmptyBlock=true;
	}
	if ($this.hasClass('disabledObjectGroup')) {
	    $('#ipsecTable input:checkbox').removeAttr('checked');
	}
  
  
	$tr = $('#ipsecTable tr.hilite').closest('tbody').children('tr:first').children('td');
	$td = $('#ipsecTable tr.hilite').closest('tr').children('td');
	selectedTunnel=$this.attr('id');
	var peerIp=$td.eq(1).text();
	editingSite = false;
	
	selectedTunnDetails = "";
	var tunnelName, backupTunnelName;
	var tunnelNameArr=selectedTunnel.split("-");
	if (tunnelNameArr != undefined) {
	  tunnelArrayLength = tunnelNameArr.length;
	  if(tunnelArrayLength != undefined){
	    if(tunnelArrayLength==1 && tunnelNameArr[0] != undefined){	
	      tunnelName = tunnelNameArr[0].trim();
	    }
	    if (tunnelArrayLength>1 && tunnelNameArr[1] != undefined && tunnelNameArr[1].trim() != "") {
		  tunnelName = tunnelNameArr[0].trim(); 
	      backupTunnelName = tunnelNameArr[1].trim();
	    }
	  }
	}
	selectedTunnDetails = getIpSecTunnelDetails(tunnelName, backupTunnelName, peerIp, true);
	var count = $('#ipsecTable1').children('tr').length;
	    if(count==1){
		  firstRow=true;
	    }
	    isEdit=false;
	deleteTunnel(selectedTunnel,peerIp);
      }, 200);
      //vpnConfigPresent = false;
  }

  function getIpSecOverallTunnelStatus(primaryStatus, backupStatus) {
    var finalStatus = $.i18n.prop("downStr"), overallStatusUp = false;
    if ((primaryStatus!=undefined && primaryStatus.toLowerCase().indexOf("up")>-1) ||
	(backupStatus!=undefined && backupStatus.toLowerCase().indexOf("up")>-1) ) {
      overallStatusUp = true;
    }
    if (overallStatusUp) {
      finalStatus = $.i18n.prop("upStr");
    }
    return finalStatus;
  }

  function getIpSecTunnelDetails(tunnelName, backupTunnelName, destinationIP, isEdit) {
    var ipsecTunnelDetailsArr = [], preSharedKey = "", matchIdentity = "", siteKey, lanSubnets = [], tunnelIp = "", backupTunnelIp = "",tunnelMask = "", temp;
    try {
      var resp1, resp2, resp3, resp4;
      siteKey = "SITE-KEY-"+tunnelName.replace("Tunnel","").trim();
      if (isIpSecVPNProfileIKev2)
      {
        resp1 = deviceCommunicator.getExecCmdOutput("show run | sec peer "+siteKey);
        //split after pre-shared-key and get the Pre-shared key value.
      }
      else {
        resp1 = deviceCommunicator.getExecCmdOutput("show run | i "+destinationIP);
        //split after pre-shared-key and get the Pre-shared
      }
      if (resp1 != undefined) {
	temp = resp1.split("\n");
	if (temp != undefined && temp.length != undefined && temp.length > 0) {
          var temptunnelIpMask;
	  for (var i=0; i<temp.length; i++) {
	    /* console.log("resp1 - temp[i] = "+ temp[i]); */
	    temptunnelIpMask = "";
	    if (temp[i].trim().indexOf("pre-shared-key ")>-1)
	    {
	      /* console.log("resp1 - temp[i] found = "+ temp[i]); */
	      if (isIpSecVPNProfileIKev2) {
		//pre-shared-key test123
	        temptunnelIpMask = temp[i].split("pre-shared-key ");
	      } else {
		//pre-shared-key address 10.10.10.1 key test123
		temptunnelIpMask = temp[i].split(" key ");
	      }
	      if (temptunnelIpMask[1] != undefined) {
		preSharedKey = temptunnelIpMask[1].trim();
		/* console.log("resp1 - temp[i] preSharedKey = "+ preSharedKey); */
		break;
	      }
	    }
	  }
	}
      }


      resp4 = deviceCommunicator.getExecCmdOutput("show run | i "+destinationIP);
      temp = resp4.split("\n");
      if (resp4 != undefined) {
	temp = resp4.split("\n");
	if (temp != undefined && temp.length != undefined && temp.length > 0) {
	  for (var i=0; i<temp.length; i++) {
	    //console.log("resp1 - temp[i] = "+ temp[i]);
	    if (temp[i].trim().indexOf("match identity ")>-1)
	    {
	      matchIdentity = "no " + temp[i];
	    }
	  }
	}
      }

      resp2 = deviceCommunicator.getExecCmdOutput("show run | i " + tunnelName);
      temp = resp2.split("\n");
      if (temp != undefined && temp.length != undefined && temp.length > 0) {
	for (var i=0; i<temp.length; i++) {
	    //console.log("resp2 - temp[i] = "+ temp[i]);
	    if (temp[i].trim().indexOf("ip route ")>-1 && temp[i].trim().indexOf(tunnelName.trim())>-1) {
	      //console.log("resp2- temp[i] found = "+ temp[i]);
	      var temptunnelIpMask = temp[i].split(" ");
	      //console.log("resp2- temp[i] values] = "+ temptunnelIpMask[2]+"-"+temptunnelIpMask[3]);
		  if(temptunnelIpMask[2] != undefined && temptunnelIpMask[2].trim() != "")
		  {
	        lanSubnets.push(temptunnelIpMask[2].trim()+" "+temptunnelIpMask[3].trim());
		  }
	    }
	}
      }
      
      if (isEdit) {
        resp3 = deviceCommunicator.getExecCmdOutput("show run interface "+tunnelName);
	temp = resp3.split("\n");
	if (temp != undefined && temp.length != undefined && temp.length > 0) {
	  for (var i=0; i<temp.length; i++) {
            //console.log("resp3- temp[i] = "+ temp[i]);
	    if (temp[i].trim().indexOf("ip address ")>-1) {
	      //console.log("resp3- temp[i] found = "+ temp[i]);
	      var temptunnelIpMask = temp[i].split("ip address ");
	      if (temptunnelIpMask[1] != undefined) {
	        //console.log("resp3- temp[i] temptunnelIpMask[1] = "+ temptunnelIpMask[1]);
	        temptunnelIpMask = temptunnelIpMask[1].split(" ");
	        tunnelIp = temptunnelIpMask[0].trim();
	        tunnelMask = temptunnelIpMask[1].trim();
	        break;
	      }
	    }
	  }
	}
	if (backupTunnelName !=  undefined && backupTunnelName.trim() != "") {
	  resp3 = deviceCommunicator.getExecCmdOutput("show run interface "+backupTunnelName);
	  temp = resp3.split("\n");
	  if (temp != undefined && temp.length != undefined && temp.length > 0) {
	    for (var i=0; i<temp.length; i++) {
	      if (temp[i].trim().indexOf("ip address ")>-1) {
		var temptunnelIpMask = temp[i].split("ip address ");
		if (temptunnelIpMask[1] != undefined) {
		  temptunnelIpMask = temptunnelIpMask[1].split(" ");
		  backupTunnelIp = temptunnelIpMask[0].trim();
		  break;
		}
	      }
	    }
	  }
	}     
      }

      ipsecTunnelDetailsArr.push(
	{
	  name: "tunnelName",
	  value: tunnelName.trim()
	},
	{
	  name: "siteKey",
	  value: siteKey
	},
	{
	  name: "preSharedKey",
	  value: preSharedKey
	},
	{
	  name: "noMatchIdentity",
	  value: matchIdentity
	},
	{
	  name: "lanSubnets",
	  value: lanSubnets
	},
	{
	  name: "tunnelIp",
	  value: tunnelIp
	},
	{
	  name: "backupTunnelIp",
	  value: backupTunnelIp
	},
	{
	  name: "tunnelMask",
	  value: tunnelMask
	}
      );

    } catch(e) {
      console.log(e);
    }
    return ipsecTunnelDetailsArr;
  }

  function deleteTunnel(tunnelName,peerIp){
    //blockPage("Applying");
    var primTunnelId="", backupTunnelId = "", tunnelArrayLength = 0;
    var tunnelId="";
    var tunnelNameArr=tunnelName.split("-");
    if (tunnelNameArr != undefined) {
      tunnelArrayLength = tunnelNameArr.length;
      if(tunnelArrayLength != undefined){
	if(tunnelArrayLength==1 && tunnelNameArr[0] != undefined){	
	  primTunnelId = tunnelNameArr[0].trim();
	  tunnelId="no Interface "+primTunnelId+" \n";
	}
	if (tunnelArrayLength>1 && tunnelNameArr[1] != undefined && tunnelNameArr[1].trim() != "") {
	  primTunnelId = tunnelNameArr[0].trim();
	  tunnelId="no Interface "+primTunnelId+" \n";	
	  backupTunnelId = tunnelNameArr[1].trim();
	  tunnelId = tunnelId+"no Interface "+backupTunnelId+" \n";
	}
      }
      /* console.log("Tunnel Delete - tunnelId-> " + tunnelId); */
    }

    var tunnDetails = selectedTunnDetails;
    /* console.log("Inside Tunnel Delete - tunnDetails-> " + JSON.stringify(tunnDetails)); */
      
    //var showRunOut=deviceCommunicator.getExecCmdOutput("show run");
    //var shRunArr=showRunOut.split("\n");
    var arr=[];
    var peer="";
    var noPreSharedKey="";
    var noMatchIdentity="";
    //var tunnelNameArr=tunnelName.split("-");

    /*
    for(i=0;i<shRunArr.length;i++){
	var confLine=shRunArr[i];
	    if((confLine.indexOf(peerIp)>-1)&&(confLine.indexOf("pre-shared-key address")>-1)){
	    noPreSharedKey=confLine;
	    }
	if((confLine.indexOf(peerIp)>-1)&&(confLine.indexOf("match identity")>-1)){
	    noMatchIdentity=confLine;
	    }
    }
    */
    //loadIpsectable();
    var noPeerText="no peer " + tunnDetails[1]['value'];//add site key to the end
    noMatchIdentity=tunnDetails[3]['value'];//take from array
    noPreSharedKey="no pre-shared-key ";
    if (isIpSecVPNProfileIKev2) {
      noPreSharedKey=noPreSharedKey+tunnDetails[2]['value'];
    } else {
      noPreSharedKey=noPreSharedKey+" address "+peerIp.trim()+" key "+tunnDetails[2]['value'];
    }
    arr.push({
        name: "tunnelName",
        value: tunnelId
        }, {
        name: "noPeerText",
        value: noPeerText
      }, {
        name: "noPreSharedKey",
        value: noPreSharedKey
      }, {
        name: "noMatchIdentity",
        value: noMatchIdentity
    });
    /* console.log("Tunnel Delete - arr-> " + JSON.stringify(arr)); */
    //setTimeout(function() {	
      if(firstRow && !editingSite){
	/* console.log("Tunnel Delete - is firstRow and !editingSite"); */
	removeIpsecVpn();
      }else{
	/* console.log("Tunnel Delete - NOT firstRow and editingSite"); */
	  /* console.log("Tunnel Delete - Starting"); */
	  if(isIpSecVPNProfileIKev2){
	    /* console.log("Tunnel Delete - isIpSecVPNProfileIKev2 ->calling deleteTunnelS2SIkev2.txt"); */
    
	    response = deviceCommunicator.configureCommandsFromTemplate2("deleteTunnelS2SIkev2.txt", arr, false);
	    arr.length = 0;
	  }else{
	    /* console.log("Tunnel Delete - !isIpSecVPNProfileIKev2 -> calling deleteTunnelS2S.txt"); */
	    response = deviceCommunicator.configureCommandsFromTemplate2("deleteTunnelS2S.txt", arr, false);
	    arr.length = 0;
	  }
	  verifyTunnelDelete(peerIp);
      }
    //}, 200);
    //console.log("Delete finished");
  }

  function editTunnel(tunnelName,backupTunnelName,peerIp){
    editingSite=true;
    tunnelToEdit=tunnelName.trim();
    //blockPage("Applying");
    /* console.log("in editTunnel - "+tunnelToEdit); */
    $("#peerAddr").val(peerIp.trim());
    //Load all values for the fields here

    if (isIpSecVPNProfileIKev2) {
      $("#vpnIKEv2Radio").attr('disabled', false);
      $("#vpnIKEv2Radio").attr('checked', true);
      $("#vpnIKEv1Radio").attr('disabled', true);
    } else
    {
      $("#vpnIKEv1Radio").attr('disabled', false);
      $("#vpnIKEv1Radio").attr('checked', true);
      $("#vpnIKEv2Radio").attr('disabled', true);
    }
    if (selectedTunnDetails != null) {
      $("#s2sTunnelIP").val(selectedTunnDetails[5]['value']);
      $("#s2sBackupIP").val(selectedTunnDetails[6]['value']);
      $("#s2sTunnelMask").val(selectedTunnDetails[7]['value']);
      $("#preSharedKey").val(selectedTunnDetails[2]['value']);
	  $("#destAddr").val('');
      $("#destAddr").removeClass("highlightTextBox");
      $("#destMask").val('');
      $("#destMask").removeClass("highlightTextBox");
      //Popupate the local lan subnets here
      $("#subnetDialog").html("");
      
      var subnetList = selectedTunnDetails[4]['value'];
      if (subnetList != null && subnetList.length != undefined && subnetList.length >0) {
        for(var i=0; i<subnetList.length;i++)
	{
	  var temp = subnetList[i].trim().split(" ");
	  /* console.log("Adding Subnets ->"+temp[0]+" - "+temp[1]); */
	  if(temp[0] != undefined && temp[0].trim() != "")
	  {
                $('#subnetDialog').append('<div class="multipleDestdiv">' +
                                           temp[0] +
                                           '</div><div class="multipleMaskdiv">' +
                                           temp[1] +
                                           '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass629"  /></div>');
      }

	}
      }
    }
    
    $("#siteTositeDialog").dialog("open");
  }

  function remoteAccessVPNEnabled() {
    var remAccVPNCmdOutput = deviceCommunicator.getExecCmdOutput("show running-config | i DYN_MAP");
    if (remAccVPNCmdOutput!= null && remAccVPNCmdOutput!= undefined && remAccVPNCmdOutput != "") {
      remoteAccessVpnConfigured = true;
    }
    return remoteAccessVpnConfigured;
  }

  function loadRemoteAccessVpn() {
    //blockPage("Loading");
    //consoleLogMethodDetailsStart("configureVPN.js", "loadDmVPN()");
    $('.wizard > .actions').hide();
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    $(xml).find('ip').each(function() {
      //<ip><local><pool><CreateNamedLocalAddressPool>
      if ($(this).find('CreateNamedLocalAddressPool').text().length > 0) {
        $("#remoteTunnelName").val($(this).find('CreateNamedLocalAddressPool').text().trim());
      }
      //<ip><local><pool><FirstIPAddressRange>
      if ($(this).find('FirstIPAddressRange').text().length > 0) {
        $("#remoteAddressPoolFrom").val($(this).find('FirstIPAddressRange').text().trim());
      }
      //<ip><local><pool><LastIPAddressRange>
      if ($(this).find('LastIPAddressRange').text().length > 0) {
        $("#remoteAddressPoolTo").val($(this).find('LastIPAddressRange').text().trim());
      }
    });

    //<ConfigIsakmpGroup-Configuration><key><UnencryptedUserPassword>cisco123</UnencryptedUserPassword></key>
    $(xml).find('ConfKeyring-Configuration').each(function() {
      $(this).find('key').each(function() {
        $("#preSharedKeyRemote").val($(this).find('UnencryptedUserPassword').text());
      });
    });

    //<interface><Param>Virtual-Template1</Param><ConfigIf-Configuration><ip><unnumbered><Param>Loopback0</Param></unnumbered>
    $(xml).find('interface').each(function() {
      if ($(this).find('Param').text().trim() == "Virtual-Template1") {
        $(this).find('unnumbered').each(function() {
          var intfcRemAcc = $(this).find('Param').text();
          $('#remoteConfigInterface option[value="'+intfcRemAcc+'"]').attr("selected", "selected");
        });
      }
    });
  }

  function loadDmVPN() {
    //blockPage("Loading");
    //consoleLogMethodDetailsStart("configureVPN.js", "loadDmVPN()");
    $('#confvpnError').hide();
    //enableVPN replaced with enableIPSecVPN
    $("#enableIPSecVPN").removeAttr('checked');
  $("#addDest").hide();
  $(".dmvpnMultipleDestMaskdiv").hide();
  $('.wizard > .actions').hide();
    if ($("#ipAddrErrorSpan").hasClass('hint--top')) {
      $("#ipAddrErrorSpan").removeAttr("data-hint");
      $("#ipAddrErrorSpan").removeClass("hint--top");
      $("#dmvpnDestAddr").removeClass("highlightTextBox");
    }
    if ($("#maskErrorSpan").hasClass('hint--top')) {
      $("#maskErrorSpan").removeAttr("data-hint");
      $("#maskErrorSpan").removeClass("hint--top");
      $("#dmvpnDestMask").removeClass("highlightTextBox");
    }
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    hubConfigured=checkDmvpnHub(xml);
    if(hubConfigured=="hub-ikev1" || hubConfigured=="hub-ikev2"){
    loadDmVPNhub(hubConfigured);
    }else if (checkValuesDMVPN(xml)) {
      dmvpnflag = true;
      if (checkValuesIkve1(xml) && checkTunnel0(xml) && !checkValuesIkve2(xml)) {
        dmvpnIkve1();
        $("#dmvpnIKEv1Radio").attr('checked', true);
      } else if (checkValuesIkve2(xml)) {
        dmvpnIkve2();
        $("#dmvpnIKEv2Radio").attr('checked', true);
      } else {
        $("#dmvpnIKEv2Radio").attr('checked', true);
        formDmvpnEmpty();
        fadeOutTextBoxDmVPN();
        $("#enableDmVPN").removeAttr('checked');
    $("#dmvpnAddDest").hide();
        $("#dmvpnDestAddr").focusout();
        $("#dmvpnDestMask").focusout();

      }
      for (j = 0; j < 3; j++) {
        $('#wizard').steps("previous");
      }
      peerOrHubAddress = $("#transportAddr").val();

    } else {
      dmvpnflag = false;
      $("#dmvpnIKEv2Radio").attr('checked', true);
      formDmvpnEmpty();
      fadeOutTextBoxDmVPN();
      $("#enableDmVPN").removeAttr('checked');
    $("#dmvpnAddDest").hide();
      $("#dmvpnDestAddr").focusout();
      $("#dmvpnDestMask").focusout();
    }
    //$.unblockUI();
    //consoleLog("configureVPN.js", "loadDmVPN() - peerOrHubAddress-" + peerOrHubAddress);
    //consoleLogMethodDetailsEnd("configureVPN.js", "loadDmVPN()");
  }

  function checkValuesIkve1(xml) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "checkValuesIkve1()");
    var bflag = false;
    $(xml).find('ConfKeyring-Configuration').each(function() {
      $(this).find('pre-shared-key').each(function() {
        //$("#peerAddr").val($(this).find('AddressPrefix').text());
        if ($(this).find('UnencryptedUserPassword').text().trim().length > 0) {
          bflag = true;
        }
      });
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "checkValuesIkve1()");
    return bflag;
  }

  function checkValuesIkve2(xml) {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "checkValuesIkve2()");
    var bflag = false;
    $(xml).find('ConfigIkev2Keyring-Configuration').each(function() {
      $(this).find('ConfigIkev2KeyringPeer-Configuration').each(function() {
        //$("#preSharedKey").val($(this).find('UnencryptedUserPassword').text());
        $(this).find('identity').each(function() {
          if ($(this).find('IPv4Address').text().trim().length > 0) {
            bflag = true;
          }
        });
      });
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "checkValuesIkve2()");
    return bflag;
  }
  function checkValuesDMVPN(xml) {
    //consoleLogMethodDetailsStart("configureVPN.js", "checkValuesDMVPN()");
    var bflag = false;
    $(xml).find('interface').each(function() {
      var intfc = $(this).text().split("\n")[0];
      if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
        $(this).find('nhrp').each(function() {
          if ($(this).find('ProtocolIPAddressNHS').text().trim().length > 0) {
            bflag = true;
          }
        });
      }
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "checkValuesDMVPN()");
    return bflag;
  }
  function checkTunnel0(xml) {
    //consoleLogMethodDetailsStart("configureVPN.js", "checkTunnel0()");
    var bflag = false;
    $(xml).find('interface').each(function() {
      var intfc = $(this).text().split("\n")[0];
      if (intfc.toLowerCase() == "Tunnel0".toLowerCase()) {
        bflag = true;
      }
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "checkTunnel0()");
    return bflag;
  }
  function remoteSubnetValidDmvpn() {
    //consoleLogMethodDetailsStart("configureVPN.js", "remoteSubnetValidDmvpn()");
    // code
    var check = false;
    if ($("#enableDmVPN").is(':checked')) {

      if ($('.dmvpnMultipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
        // if (($("#dmvpnDestAddr").val().trim().length > 0) && ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) && (($("#dmvpnDestMask").val().trim().length > 0) && ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase()))) {
        if (($("#dmvpnDestAddr").val().trim().length > 0) &&
            ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) &&
            (($("#dmvpnDestMask").val().trim().length > 0) &&
             ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase()))) {
          check = true;
        } else {
          if (includeWildIPaddress($("#dmvpnDestAddr").val().trim())) {
            // code
            if (isValidSubnetMask($("#dmvpnDestMask").val().trim())) {
              // code
              if (isPrefixAndPrefixMaskDmvpn($("#dmvpnDestMask").val().trim())) {
                // code
                check = true;
              } else {
                $("#dmMaskErrorSpan").addClass("hint--top");
                $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#dmvpnDestMask").addClass("highlightTextBox");
              }
            } else {
              $("#dmMaskErrorSpan").addClass("hint--top");
              $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
              $("#dmvpnDestMask").addClass("highlightTextBox");
            }
          } else {
            $("#dmIpAddrErrorSpan").addClass("hint--top");
            $("#dmIpAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
            $("#dmvpnDestAddr").addClass("highlightTextBox");
          }
        }
      } else {
        if (($("#dmvpnDestAddr").val().trim().length > 0) &&
            ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
          //if (($("#dmvpnDestAddr").val().trim().length > 0) && ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
          $("#dmIpAddrErrorSpan").addClass("hint--top");
          $("#dmIpAddrErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#dmvpnDestAddr").addClass("highlightTextBox");
        }
        if (($("#dmvpnDestMask").val().trim().length > 0) &&
            ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
          $("#dmMaskErrorSpan").addClass("hint--top");
          $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#dmvpnDestMask").addClass("highlightTextBox");
        }
        if (($("#dmvpnDestAddr").val().trim().length > 0) && ($("#dmvpnDestAddr").val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
          if (($("#dmvpnDestMask").val().trim().length > 0 && ($("#dmvpnDestMask").val().trim().toLowerCase()) != $.i18n.prop("StaticSubnetMask").toLowerCase())) {
            if (includeWildIPaddress($("#dmvpnDestAddr").val().trim())) {
              // code
              if (isValidSubnetMask($("#dmvpnDestMask").val().trim())) {
                // code
                if (isPrefixAndPrefixMaskDmvpn($("#dmvpnDestMask").val().trim())) {
                  // code
                  check = true;
                } else {
                  $("#dmMaskErrorSpan").addClass("hint--top");
                  $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                  $("#dmvpnDestMask").addClass("highlightTextBox");
                }
              } else {
                $("#dmMaskErrorSpan").addClass("hint--top");
                $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#dmvpnDestMask").addClass("highlightTextBox");
              }
            } else {
              $("#dmIpAddrErrorSpan").addClass("hint--top");
              $("#dmIpAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
              $("#dmvpnDestAddr").addClass("highlightTextBox");
            }
          }
        } else if (($("#dmvpnDestMask").val().trim().length > 0) &&
                   ($("#dmvpnDestMask").val().trim().toLowerCase() != $.i18n.prop("StaticSubnetMask").toLowerCase())) {
          if ($("#dmvpnDestAddr").val().trim().length > 0 &&
              ($(dmvpnDestAddr).val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
            if (includeWildIPaddress($("#dmvpnDestAddr").val().trim())) {
              // code
              if (isValidSubnetMask($("#dmvpnDestMask").val().trim())) {
                // code
                if (isPrefixAndPrefixMaskDmvpn($("#dmvpnDestMask").val().trim())) {
                  // code
                  check = true;
                } else {
                  $("#dmMaskErrorSpan").addClass("hint--top");
                  $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                  $("#dmvpnDestMask").addClass("highlightTextBox");
                }
              } else {
                $("#dmMaskErrorSpan").addClass("hint--top");
                $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#dmvpnDestMask").addClass("highlightTextBox");
              }

            } else {
              $("#dmIpAddrErrorSpan").addClass("hint--top");
              $("#dmIpAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
              $("#dmvpnDestAddr").addClass("highlightTextBox");
            }

          }

        }

      }
    }
    else {
      check = true;
    }
    return check;
  }
  function remoteSubnetValid() {
    // code
    //consoleLogMethodDetailsStart("configureVPN.js", "remoteSubnetValid()");
    var check = false;
    //enableVPN replaced with enableIPSecVPN
    if ($("#enableIPSecVPN").is(':checked')) {
      if ($('.multipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
        if (($("#destAddr").val().trim().length > 0) &&
            ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) &&
            (($("#destMask").val().trim().length > 0) &&
             ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase()))) {
          check = true;
        } else {
          if (includeWildIPaddress($("#destAddr").val().trim())) {
            //code
            if (isValidSubnetMask($("#destMask").val().trim())) {
              //code
              if (isPrefixAndPrefixMask($("#destMask").val().trim())) {
                //code
                check = true;
              } else {
                $("#maskErrorSpan").addClass("hint--top");
                $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#destMask").addClass("highlightTextBox");
              }
            } else {
              $("#maskErrorSpan").addClass("hint--top");
              $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
              $("#destMask").addClass("highlightTextBox");
            }
          } else {
            $("#ipAddrErrorSpan").addClass("hint--top");
            $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
            $("#destAddr").addClass("highlightTextBox");
          }
        }
      } else {
        if (($("#destAddr").val().trim().length > 0) &&
            ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
       $("#ipAddrErrorSpan").addClass("hint--top");
       $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
       $("#destAddr").addClass("highlightTextBox");
        }
        if (($("#destMask").val().trim().length > 0) &&
            ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
             $("#maskErrorSpan").addClass("hint--top");
             $("#maskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
             $("#destMask").addClass("highlightTextBox");
        }
        if (($("#destAddr").val().trim().length > 0) &&
            ($("#destAddr").val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
          if (($("#destMask").val().trim().length > 0 &&
               ($("#destMask").val().trim().toLowerCase()) != $.i18n.prop("StaticSubnetMask").toLowerCase())) {
            if (includeWildIPaddress($("#destAddr").val().trim())) {
              //code
              if (isValidSubnetMask($("#destMask").val().trim())) {
                //code
                if (isPrefixAndPrefixMask($("#destMask").val().trim())) {
                  //code
                  check = true;
                } else {
                  $("#maskErrorSpan").addClass("hint--top");
                  $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                  $("#destMask").addClass("highlightTextBox");
                }
              } else {
                $("#maskErrorSpan").addClass("hint--top");
                $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#destMask").addClass("highlightTextBox");
              }
            } else {
              $("#ipAddrErrorSpan").addClass("hint--top");
              $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
              $("#destAddr").addClass("highlightTextBox");
            }
          }
        } else if (($("#destMask").val().trim().length > 0) &&
                   ($("#destMask").val().trim().toLowerCase() != $.i18n.prop("StaticSubnetMask").toLowerCase())) {
          if ($("#destAddr").val().trim().length > 0 &&
              ($("#destAddr").val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
            if (includeWildIPaddress($("#destAddr").val().trim())) {
              //code
              if (isValidSubnetMask($("#destMask").val().trim())) {
                //code
                if (isPrefixAndPrefixMask($("#destMask").val().trim())) {
                  //code
                  check = true;
                } else {
                  $("#maskErrorSpan").addClass("hint--top");
                  $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                  $("#destMask").addClass("highlightTextBox");
                }
              } else {
                $("#maskErrorSpan").addClass("hint--top");
                $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#destMask").addClass("highlightTextBox");
              }
            } else {
              $("#ipAddrErrorSpan").addClass("hint--top");
              $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
              $("#destAddr").addClass("highlightTextBox");
            }
          }
        }
      }
    }
    else {
      check = true;
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "remoteSubnetValid()");
    return check;
  }
  
  function remoteSubnetAdded(){
	if($(".multipleDestdiv").text().length>0 && $(".multipleMaskdiv").text().length>0){
	return true;	
	}else{
	return false;	
	} 
  }
  
  function restPlugin() {
    //code
    //consoleLogMethodDetailsStart("configureVPN.js", "restPlugin()");
    $("#wizard").steps("destroy");
    $("#wizard").steps({
      headerTag: "h2",
      bodyTag: "section",
      transitionEffect: "slideLeft"
    });
    //consoleLogMethodDetailsEnd("configureVPN.js", "restPlugin()");
  }
  function confVpnLoading() {
    //consoleLogMethodDetailsStart("configureVPN.js", "confVpnLoading()");
    $("#wizard").steps({
      headerTag: "h2",
      bodyTag: "section",
      transitionEffect: "slideLeft"
    });
    $('.wizard > .actions').hide();
    //loadAndDisplayVpnLanguages();
    validator = $('#utmForm').validate({
      ignore: ".ignore",
      errorElement: "div",
      errorPlacement: function(error, element) {
        //error.insertAfter(element.parent());
        error.insertAfter(element.parent());
      }
    });
	validatorIpsec = $('#ipsecForm').validate({
      ignore: ".ignore",
      errorElement: "div",
      errorPlacement: function(error, element) {
        //error.insertAfter(element.parent());
        error.insertAfter(element.parent());
      }
    });
    $("#wizardSiteToSite").steps({
      headerTag: "h2",
      bodyTag: "section",
      transitionEffect: "slideLeft"
    });
  $("#wizardDmvpnHub").steps({
      headerTag: "h2",
      bodyTag: "section",
      transitionEffect: "slideLeft"
    });
  $("#wizardRemoteAccess").steps({
      headerTag: "h2",
      bodyTag: "section",
      transitionEffect: "slideLeft"
    });
  $("#dmvpnHubDiv").hide();
  $("#remoteAccessDiv").hide();
    // loadVpn();
    $(".gotoSecurity").click(function(e) {
      $('div#utmTabs ul.ui-tabs-nav li#top-active-tab a').trigger("click");
      return false;
    });
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    /* $(".alive").hide();
    $(".down").hide();
    $(".idle").show();
    $(".flat a:nth-child(2)").addClass("activeIdle");
    $(".flat a:nth-child(3)").addClass("activeIdle");
    $(".flat a:nth-child(4)").addClass("activeIdle"); */

    if (checkValuesDMVPN(xml)) {
      //$(".tunnelImage").css("padding-left","230px");
      $("#ipsecVPN").hide();
    } else {
      $("#dmVPN").hide();
      //$(".tunnelImage").css("padding-left","285px");
    }
    $('#dhcpCheck').hide();
    tunnelMaskAddrLoading();
    addSecondryField();
    var count = 0;
    $(".multipleDestMaskdiv").on('click', '.deleteDestAddrMask', function() {
      $(this).parent('div').prev('div').remove();
      $(this).parent('div').remove();
      return false;
    });
    $(".dmvpnMultipleDestMaskdiv").on('click', '.deleteDestAddrMask', function() {
      $(this).parent('div').prev('div').remove();
      $(this).parent('div').remove();
      if (count <= 3){
        $(".wizard .content").css({'min-height': '-=20px'});
    }
      count -= 1;
      return false;
    });
  $("#policyDialog").dialog({
    autoOpen: false,
    height: 200,
    width: 400,
    modal: true,
    buttons: [{
      text: $.i18n.prop("apply"),
      click: function(e) {
        var policyarr = [];
        if(!defaultPolicyExists){
          deviceCommunicator.configureCommandsFromTemplate("createDefaultDmvpnPolicy.txt",policyarr, false);
        }
        $(this).dialog("close");
        onwizardapply(e);
        }
      }, {
        text: $.i18n.prop("cancel"),
        click: function() {
        $(this).dialog("close");
        }
      }],
      close: function() {
        $(this).dialog("close");
      }
  });
  $("#dmvpnHubpDialog").dialog({
    autoOpen: false,
    height: 200,
    width: 400,
    modal: true,
    buttons: [{
      text: $.i18n.prop("apply"),
      click: function(e) {
        var policyarr = [];
        if(!defaultPolicyExists){
          deviceCommunicator.configureCommandsFromTemplate("createDefaultDmvpnPolicy.txt",policyarr, false);
        }
        applyDMVPNhub(e);
        $(this).dialog("close");
        }
      }, {
        text: $.i18n.prop("cancel"),
        click: function() {
        $(this).dialog("close");
        }
      }],
      close: function() {
        $(this).dialog("close");
      }
  });
  $("#subnetDialog").dialog({
    autoOpen: false,
    height: 300,
    width: 480,
    modal: true,
      close: function() {
        $(this).dialog("close");
      }
  });
  $("#dmVPNsubnetDialog").dialog({
    autoOpen: false,
    height: 300,
    width: 480,
    modal: true,
      close: function() {
        $(this).dialog("close");
      }
  });
  $("#spokesAdded").dialog({
    autoOpen: false,
    height: 300,
    width: 480,
    modal: true,
      close: function() {
        $(this).dialog("close");
      }
  });
  $("#localLanDialog").dialog({
    autoOpen: false,
    height: 300,
    width: 480,
    modal: true,
      close: function() {
        $(this).dialog("close");
      }
  });
    $("#deleteDialog").dialog({
      title: $.i18n.prop("removeConfiguration"),
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      //  buttons: {
      //     "Apply": function(e) {
      buttons: [{
          text: $.i18n.prop("apply"),
          click: function(e) {
            $("#enableDmVPN").removeAttr('checked');
      $("#dmvpnAddDest").hide();
            $('.wizard > .actions').hide();
            for (j = 0; j < 3; j++) {
              $('#wizard').steps("previous");
            }
            callFinish(e);
            $("#enableDmVPN").attr('checked', 'checked');
      $("#dmvpnAddDest").show();
            $(this).dialog("close");
            dmvpnflag = false;
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $("#enableDmVPN").attr('checked', 'checked');
      $("#dmvpnAddDest").show();
            $('.wizard > .actions').show();
            fadeInTextBoxDmVPN();
            $(this).dialog("close");
            //cancelLdap();
          }
        }],
      close: function() {
        $("#enableDmVPN").attr('checked', 'checked');
    $("#dmvpnAddDest").show();
        $('.wizard > .actions').show();
        fadeInTextBoxDmVPN();
        $(this).dialog("close");
      }
    });


	  $("#deleteIPSecVPNDialog").dialog({
	  title: $.i18n.prop("removeConfiguration"),
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      //  buttons: {
      //     "Apply": function(e) {
      buttons: [{
          text: $.i18n.prop("apply"),
          click: function(e) {
			$("#addDest").hide();
			$('.wizard > .actions').hide();
			fadeOutTextBox();
			$("#ipsecButtonBar").hide();
			toggleEnableDisableVpnConfigurationList(true);
			removeIpsecVpn();
			vpnConfigPresent = false;
            $(this).dialog("close");
			$("#enableIPSecVPN").removeAttr('checked');
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
			$("#enableIPSecVPN").attr('checked', 'checked');
            $(this).dialog("close");
          }
        }],
      close: function() {
		    $("#enableIPSecVPN").attr('checked', 'checked');
            $(this).dialog("close");
      }
    });

    $("#deleteHubDialog").dialog({
	  title: $.i18n.prop("removeConfiguration"),
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      //  buttons: {
      //     "Apply": function(e) {
      buttons: [{
          text: $.i18n.prop("apply"),
          click: function(e) {
            $("#enableDmvpnHub").removeAttr('checked');
            $("#addLocalLan").hide();
            $('.wizard > .actions').hide();
            removeDmvpnHub(e);
            $(this).dialog("close");
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $("#enableDmvpnHub").attr('checked', 'checked');
            $('.wizard > .actions').show();
            $(this).dialog("close");
          }
        }],
      close: function() {
            $("#enableDmvpnHub").attr('checked', 'checked');
            $('.wizard > .actions').show();
            $(this).dialog("close");
      }
    });

    $("#deleteRemoteAccessVPNDialog").dialog({
      title: $.i18n.prop("removeConfiguration"),
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      //  buttons: {
      //     "Apply": function(e) {
      buttons: [{
          text: $.i18n.prop("apply"),
          click: function(e) {
            $("#enableRemAccess").removeAttr('checked');
            //$("#addLocalLan").hide();
            $('.wizard > .actions').hide();
            removeRemoteAccessVPN(e);
            toggleEnableDisableVpnConfigurationList(false);
            vpnConfigPresent = false;
            $(this).dialog("close");
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            $("#enableRemAccess").attr('checked', 'checked');
            $('.wizard > .actions').show();
	    fadeInTextBoxRemAccVpn();
	    toggleEnableDisableVpnConfigurationList(false);
	    $(this).dialog("close");
          }
        }],
      close: function() {
            $("#enableRemAccess").attr('checked', 'checked');
            $('.wizard > .actions').show();
	    fadeInTextBoxRemAccVpn();
	    toggleEnableDisableVpnConfigurationList(false);
            $(this).dialog("close");
      }
    });


	  $("#siteTositeDialog").dialog({
      title:$.i18n.prop("wizConfig"),
      autoOpen: false,
      height: 468,
      width: 928,
      modal: true,
      //  buttons: {
      //     "Apply": function(e) {
      close: function() {
	    for (j = 0; j < 3; j++) {
              $('#wizardSiteToSite').steps("previous");
            }
	    
	    $("#subnetPopupButton").hide();
            $(this).dialog("close");
      }
    });

    $('#destAddr').on('focusout', function() {
      if ($(this).val().length == 0) {
        $(this).css('color', 'gray');
        $(this).val($.i18n.prop("ipAddress"));
      }
    });
    $('#destAddr').on('focus', function() {
      if ($(this).val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) {
        $(this).css('color', 'black');
        $(this).val('');
      }
    });
    $('#destMask').on('focusout', function() {
      if ($(this).val().length == 0) {
        $(this).css('color', 'gray');
        $(this).val($.i18n.prop("StaticSubnetMask"));
      }
    });
    $('#dmvpnDestAddr').on('focusout', function() {
      if ($(this).val().length == 0) {
        $(this).css('color', 'gray');
        $(this).val($.i18n.prop("localLANLabel"));
      }
    });
    $('#dmvpnDestAddr').on('focus', function() {
      if ($(this).val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) {
        $(this).css('color', 'black');
        $(this).val('');
      }
    });
    $('#dmvpnDestMask').on('focusout', function() {
      if ($(this).val().length == 0) {
        $(this).css('color', 'gray');
        $(this).val($.i18n.prop("wildcardMask"));
      }
    });
    $('#dmvpnDestMask').on('focus', function() {
      if ($(this).val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase()) {
        $(this).css('color', 'black');
        $(this).val('');
      }
    });
    $('#destAddr').on('keyup', function() {
      if ($("#ipAddrErrorSpan").hasClass('hint--top')) {
        $("#ipAddrErrorSpan").removeAttr("data-hint");
        $("#ipAddrErrorSpan").removeClass("hint--top");
        $("#destAddr").removeClass("highlightTextBox");
      }


    });
    $('#destMask').on('keyup', function() {

      if ($("#maskErrorSpan").hasClass('hint--top')) {
        $("#maskErrorSpan").removeAttr("data-hint");
        $("#maskErrorSpan").removeClass("hint--top");
        $("#destMask").removeClass("highlightTextBox");
      }

    });
    $('#destMask').on('focus', function() {

      if ($(this).val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase()) {
        //code
        $(this).css('color', 'black');
        $(this).val('');
      }

    });
    $('#dmvpnDestAddr').on('keyup', function() {
      if ($("#dmIpAddrErrorSpan").hasClass('hint--top')) {
        $("#dmIpAddrErrorSpan").removeAttr("data-hint");
        $("#dmIpAddrErrorSpan").removeClass("hint--top");
        $("#dmvpnDestAddr").removeClass("highlightTextBox");
      }
    });
    $('#dmvpnDestMask').on('keyup', function() {
      if ($("#dmMaskErrorSpan").hasClass('hint--top')) {
        $("#dmMaskErrorSpan").removeAttr("data-hint");
        $("#dmMaskErrorSpan").removeClass("hint--top");
        $("#dmvpnDestMask").removeClass("highlightTextBox");
      }
    });
  $('#localLanIp').on('keyup', function() {
      if ($("#localIpAddrErrorSpan").hasClass("hint--top")) {
        $("#localIpAddrErrorSpan").removeAttr("data-hint");
        $("#localIpAddrErrorSpan").removeClass("hint--top");
        $("#localLanIp").removeClass("highlightTextBox");
      }
    });
    $('#localLanMask').on('keyup', function() {
      if ($("#localMaskErrorSpan").hasClass("hint--top")) {
        $("#localMaskErrorSpan").removeAttr("data-hint");
        $("#localMaskErrorSpan").removeClass("hint--top");
        $("#localLanMask").removeClass("highlightTextBox");
      }
    });
  $('#localLanIp').on('focusout', function() {
      if ($(this).val().length == 0) {
        $(this).css('color', 'gray');
        $(this).val($.i18n.prop("localLANLabel"));
      }
    });
    $('#localLanIp').on('focus', function() {
      if ($(this).val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) {
        $(this).css('color', 'black');
        $(this).val('');
      }
    });
    $('#localLanMask').on('focusout', function() {
      if ($(this).val().length == 0) {
        $(this).css('color', 'gray');
        $(this).val($.i18n.prop("wildcardMask"));
      }
    });
    $('#localLanMask').on('focus', function() {
      if ($(this).val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase()) {
        $(this).css('color', 'black');
        $(this).val('');
      }
    });
    $("#addDest").on('click', function(e) {
      chekFlag = false;
      if (($("#destAddr").val().trim().length > 0) && ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
        $("#ipAddrErrorSpan").addClass("hint--top");
        $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#destAddr").addClass("highlightTextBox");

      }
      if (($("#destMask").val().trim().length > 0) && ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {

        $("#maskErrorSpan").addClass("hint--top");
        $("#maskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#destMask").addClass("highlightTextBox");
      }
      if (($("#destAddr").val().trim().length > 0) && ($("#destAddr").val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
        if (($("#destMask").val().trim().length > 0 && ($("#destMask").val().trim().toLowerCase()) != $.i18n.prop("StaticSubnetMask").toLowerCase())) {

          if (includeWildIPaddress($("#destAddr").val().trim())) {
            //code
            if (isValidSubnetMask($("#destMask").val().trim())) {
              //code
              if (isPrefixAndPrefixMask($("#destMask").val().trim())) {
                //code
                chekFlag = true;
              } else {
                $("#maskErrorSpan").addClass("hint--top");
                $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#destMask").addClass("highlightTextBox");

              }
            } else {
              $("#maskErrorSpan").addClass("hint--top");
              $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
              $("#destMask").addClass("highlightTextBox");
            }

          } else {
            $("#ipAddrErrorSpan").addClass("hint--top");
            $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
            $("#destAddr").addClass("highlightTextBox");
          }




        }

      } else if (($("#destMask").val().trim().length > 0) && ($("#destMask").val().trim().toLowerCase() != $.i18n.prop("StaticSubnetMask").toLowerCase())) {
        if ($("#destAddr").val().trim().length > 0 && ($("#destAddr").val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
          if (includeWildIPaddress($("#destAddr").val().trim())) {
            //code
            if (isValidSubnetMask($("#destMask").val().trim())) {
              //code
              if (isPrefixAndPrefixMask($("#destMask").val().trim())) {
                //code
                chekFlag = true;
              } else {
                $("#maskErrorSpan").addClass("hint--top");
                $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
                $("#destMask").addClass("highlightTextBox");

              }
            } else {
              $("#maskErrorSpan").addClass("hint--top");
              $("#maskErrorSpan").attr("data-hint", $.i18n.prop("prefixNotMatched"));
              $("#destMask").addClass("highlightTextBox");
            }

          } else {
            $("#ipAddrErrorSpan").addClass("hint--top");
            $("#ipAddrErrorSpan").attr("data-hint", $.i18n.prop("notValidPrefixIp"));
            $("#destAddr").addClass("highlightTextBox");
          }

        }

      }

      if (chekFlag) {
		$("#subnetPopupButton").show();
		$("#ipAddrErrorSpan").removeAttr("data-hint");
        $("#ipAddrErrorSpan").removeClass("hint--top");
        $("#destAddr").removeClass("highlightTextBox");
		$("#maskErrorSpan").removeAttr("data-hint");
        $("#maskErrorSpan").removeClass("hint--top");
        $("#destMask").removeClass("highlightTextBox");
        $('.multipleDestMaskdiv').append('<div class="multipleDestdiv">' +
                                         $('#destAddr').val() + '</div><div class="multipleMaskdiv">' +
                                         $('#destMask').val() +
                                         '&nbsp; &nbsp; &nbsp;<a class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass633"  /></div>');
        $("#destAddr").val('');
        $("#destAddr").removeClass("highlightTextBox");
        $("#destMask").val('');
        $("#destMask").removeClass("highlightTextBox");
        $("#destAddr").focusout();
        $("#destMask").focusout();
      } else {
     isEmptyBlock=true;
      }

      e.preventDefault();
      return false;
    });
  $("#subnetPopupButton").click(function(e){
   $('#subnetDialog').dialog("open");
   $("#subnetDialog").dialog("option", "title", $.i18n.prop("subnetDialogTitle"));
     e.preventDefault();
  });
  $("#dmVPNsubnetPopupButton").click(function(e){
   $('#dmVPNsubnetDialog').dialog("open");
   $("#dmVPNsubnetDialog").dialog("option", "title", $.i18n.prop("localLanSubnets"));
   e.preventDefault();
  });
  $("#spokePopupButton").click(function(e){
   $('#spokesAdded').dialog("open");
   $("#spokesAdded").dialog("option", "title", $.i18n.prop("spokes"));
   e.preventDefault();
  });
  $("#localLANPopupButton").click(function(e){
  $('#localLanDialog').dialog("open");
  $("#localLanDialog").dialog("option", "title", $.i18n.prop("localLanSubnets"));
   e.preventDefault();
  });
    $("#dmvpnAddDest").on('click', function(e) {
      chekFlag = false;
      if (($("#dmvpnDestAddr").val().trim().length > 0) && ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
        //if (($("#dmvpnDestAddr").val().trim().length > 0) && ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
        $("#dmIpAddrErrorSpan").addClass("hint--top");
        $("#dmIpAddrErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#dmvpnDestAddr").addClass("highlightTextBox");
      }
      if (($("#dmvpnDestMask").val().trim().length > 0) && ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
        $("#dmMaskErrorSpan").addClass("hint--top");
        $("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#dmvpnDestMask").addClass("highlightTextBox");
      }
      if (($("#dmvpnDestAddr").val().trim().length > 0) && ($("#dmvpnDestAddr").val().trim().toLowerCase() != $.i18n.prop("ipAddress").toLowerCase())) {
        if (($("#dmvpnDestMask").val().trim().length > 0 && ($("#dmvpnDestMask").val().trim().toLowerCase()) != $.i18n.prop("StaticSubnetMask").toLowerCase())) {
        if(isValidMaskAddr($("#dmvpnDestMask").val().trim())){
			chekFlag=true;
		  }else{
			$("#dmMaskErrorSpan").addClass("hint--top");
			$("#dmMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"));
			$("#dmvpnDestMask").addClass("highlightTextBox");
		  }
        }
      }
      if (chekFlag) {
		$("#dmvpnDestMask").removeClass("highlightTextBox");
		$("#dmvpnDestAddr").removeClass("highlightTextBox");
        $('.dmvpnMultipleDestMaskdiv').append('<div class="multipleDestdiv">' +
                                              $('#dmvpnDestAddr').val() +
                                              '</div><div class="dmVpnMultipleMaskdiv">' +
                                              $('#dmvpnDestMask').val() +
                                              '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteDestAddrMask class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass634"  /></div>');
        if (count <= 3){
        $(".wizard .content").css({'min-height': '+=20px'});
    }
        $("#dmvpnDestAddr").val('');
        $("#dmvpnDestMask").val('');
        $("#dmvpnDestAddr").focusout();
        $("#dmvpnDestMask").focusout();
        $("#dmVPNsubnetPopupButton").show();
      } else {
      isEmptyBlock=true;
      }

      e.preventDefault();
      return false;
    });
    $('#dmvpnDeleteDestAddrMask').on('click', function() {
      $(".wizard .content").css({'min-height': '-=20px'});
    });

  $('#addSpoke').on('click', function(e) {
    flag=false;
    if (($("#spokeIP").val().trim().length > 0) && ($("#spokeIP").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase())) {
      $("#dmvpnHubIpAddrErrorSpan").addClass("hint--top");
      $("#dmvpnHubIpAddrErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
      $("#spokeIP").addClass("highlightTextBox");
        }
        if (($("#spokeMask").val().trim().length > 0) && ($("#spokeMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
      $("#dmvpnHubMaskErrorSpan").addClass("hint--top");
      $("#dmvpnHubMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
      $("#spokeMask").addClass("highlightTextBox");
        }

    if(($("#spokeIP").val().trim().length > 0) && ($("#spokeIP").val().trim().toLowerCase() !== $.i18n.prop("ipAddress").toLowerCase())){
      if(($("#spokeMask").val().trim().length > 0) && ($("#spokeMask").val().trim().toLowerCase() !== $.i18n.prop("StaticSubnetMask").toLowerCase())){
        flag=true;
      }
    }

    if(flag){
         $(".dmvpnHubSpokesAdded").append('<div class="spokeDestDiv">' +
                                              $('#spokeIP').val() +
                                              '</div><div class="spokeMaskDiv">' +
                                              $('#spokeMask').val() +
                                              '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteSpoke" class="utmSprite close deleteSpoke ccpexpCSSReplaceClass634"  /></div>');
           $("#spokeIP").val('');
           $("#spokeMask").val('');
           $("#spokeIP").focusout();
           $("#spokeMask").focusout();
           $("#spokePopupButton").show();
    }
    e.preventDefault();
    });
$("#addLocalLan").on('click', function(e) {
      var checkFlag = false;
      if (($("#localLanIp").val().trim().length > 0) && ($("#localLanIp").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase())) {
        $("#localIpAddrErrorSpan").addClass("hint--top");
        $("#localIpAddrErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#localLanIp").addClass("highlightTextBox");
      }
      if (($("#localLanMask").val().trim().length > 0) && ($("#localLanMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
        $("#localMaskErrorSpan").addClass("hint--top");
        $("#localMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#localLanMask").addClass("highlightTextBox");
      }
      if (($("#localLanIp").val().trim().length > 0) && ($("#localLanIp").val().trim().toLowerCase() != $.i18n.prop("localLANLabel").toLowerCase())) {
        if (($("#localLanMask").val().trim().length > 0 && ($("#localLanMask").val().trim().toLowerCase()) != $.i18n.prop("wildcardMask").toLowerCase())) {

		if(isValidMaskAddr($("#localLanMask").val().trim())){
			checkFlag=true;
		  }else{
			$("#localMaskErrorSpan").addClass("hint--top");
            $("#localMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"));
            $("#localLanMask").addClass("highlightTextBox");
		  }

        }else{
        $("#localMaskErrorSpan").addClass("hint--top");
        $("#localMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#localLanMask").addClass("highlightTextBox");
        }
      }
      if (checkFlag) {
        $('.localLanTable').append('<div class="dmvpnHubDestDiv">' +
        $('#localLanIp').val() +
        '</div><div class="dmvpnHubMaskDiv">' +
        $('#localLanMask').val() +
        '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteSpoke" class="utmSprite close deleteSpoke ccpexpCSSReplaceClass634"/></div>');
        $("#localLanIp").val('');
        $("#localLanMask").val('');
        $("#localLanIp").focusout();
        $("#localLanMask").focusout();
        $("#localIpAddrErrorSpan").removeClass("hint--top");
        $("#localIpAddrErrorSpan").removeAttr("data-hint");
        $("#localLanIp").removeClass("highlightTextBox");
        $("#localMaskErrorSpan").removeClass("hint--top");
        $("#localMaskErrorSpan").removeAttr("data-hint");
        $("#localLanMask").removeClass("highlightTextBox");
        $("#localLANPopupButton").show();
        } else {
        isEmptyBlock=true;
        }

      e.preventDefault();
      return false;
    });
	function isValidMaskAddr(ip) {
    var reg = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/;
    if (reg.test(ip)) {
      return true;
    }
    else {
      return false;
    }
    }

  $(".dmvpnHubSpokesAdded").on('click', '.deleteSpoke', function() {
      $(this).parent('div').prev('div').remove();
      $(this).parent('div').remove();
      return false;
    });
  $(".localLanTable").on('click', '.deleteSpoke', function() {
      $(this).parent('div').prev('div').remove();
      $(this).parent('div').remove();
      return false;
    });
  $("#vpnType").change(function () {
    if ($("#vpnType").val() == 'siteTosite') {
      blockPage("Loading");
      setTimeout(function() {
        formElementEmpty();
        fadeOutTextBox();
        $("#vpnIKEv1Radio").prop('checked', true);
        /* vpnIkve1(); */
        siteTositeLoad();
        //enableVPN replaced with enableIPSecVPN
        if ($("#enableIPSecVPN").is(':checked')) {
          $('.wizard > .actions').show();
          $("#addDest").show();
	  $("#ipsecButtonBar").show();
          fadeInTextBox();
        } else {
          $('.wizard > .actions').hide();
	  $("#ipsecButtonBar").hide();
          $("#addDest").hide();
          fadeOutTextBox();
        }
        $.unblockUI();
      }, 100);
    }

    if ($("#vpnType").val() == 'dmvpnSpoke') {
      blockPage("Loading");
      setTimeout(function() {
        formElementEmpty();
        fadeOutTextBoxDmVPN();
        /* $("#vpnIKEv2Radio").prop('checked', true);
        vpnIkve2(); */
        dmvpnSpokeLoad();
        if ($("#enableDmVPN").is(':checked')) {
          $('.wizard > .actions').show();
          $("#dmvpnAddDest").show();
          fadeInTextBoxDmVPN();
        } else {
          $('.wizard > .actions').hide();
          $("#dmvpnAddDest").hide();
          fadeOutTextBoxDmVPN();
        }
        $.unblockUI();
      }, 100);
    }
    if ($("#vpnType").val() == 'dmvpnHub') {
      /* console.log(dmvpnHubflag); */
      blockPage("Loading");
      setTimeout(function() {
        formElementEmpty();
        dmvpnHubLoad();
        $.unblockUI();
      }, 100);
    }
    if ($("#vpnType").val() == 'remoteAccess') {
      blockPage("Loading");
      setTimeout(function() {
        formElementEmpty();
        remAccessLoad();
        if ($("#enableRemAccess").is(':checked')) {
          $('.wizard > .actions').show();
          $("#dmvpnAddDest").show();
          fadeInTextBoxRemAccVpn();
        } else {
          $('.wizard > .actions').hide();
          $("#dmvpnAddDest").hide();
          fadeOutTextBoxRemAccVpn();
        }
        $.unblockUI();
      }, 100);
    }
    //enableVPN replaced with enableIPSecVPN
    if ($("#enableIPSecVPN").is(':checked'))
    {
      $("#addDest").show();
      $('.wizard > .actions').show();
      $("#ipsecButtonBar").show();

    }
    else
    {
      $("#addDest").hide();
      $('.wizard > .actions').hide();
      $("#ipsecButtonBar").hide();

    }
  });

    $('#dmvpnIKEv1Radio').on('click', function() {
      //formDmvpnEmpty();
      $("#dmvpnIKEv1Radio").attr('checked', true);
      //dmvpnIkve1();
    });
    $('#dmvpnIKEv2Radio').on('click', function() {
      //formDmvpnEmpty();
      $("#dmvpnIKEv2Radio").attr('checked', true);
      //dmvpnIkve2();

    });

    $('#enableDmVPN').on('click', function() {
      var s2s;
      if ($("#vpnType").val() == 'siteTosite'){
        s2s = true;
      }
      else{
        s2s = false;
      }

      if ($("#enableDmVPN").is(':checked')) {
        validator.resetForm();
        if(s2s)
        {
          $('#vpnType option[value="siteTosite"]').attr("selected", "selected");
        }
        else{
          $('#vpnType option[value="dmvpnSpoke"]').attr("selected", "selected");
          fadeInTextBoxDmVPN();
          $("#enableDmVPN").attr('checked', 'checked');
          $("#dmvpnAddDest").show();
          $('.wizard > .actions').show();
          for (j = 0; j < 3; j++) {
              $('#wizard').steps("previous");
          }
        }
        toggleEnableDisableVpnConfigurationList(false);
      } else {
        if(s2s)
        {
          $('#vpnType option[value="siteTosite"]').attr("selected", "selected");
        }
        else{
          $('#vpnType option[value="dmvpnSpoke"]').attr("selected", "selected");
        }
        $("#enableDmVPN").removeAttr('checked');
        $("#dmvpnAddDest").hide();
        if ($("#dmIpAddrErrorSpan").hasClass("hint--top")) {
            $("#dmIpAddrErrorSpan").removeAttr("data-hint");
            $("#dmIpAddrErrorSpan").removeClass("hint--top");
            $("#dmvpnDestAddr").removeClass("highlightTextBox");
        }
        if ($("#dmMaskErrorSpan").hasClass("hint--top")) {
            $("#dmMaskErrorSpan").removeAttr("data-hint");
            $("#dmMaskErrorSpan").removeClass("hint--top");
            $("#dmvpnDestMask").removeClass("highlightTextBox");
        }
        $('.wizard > .actions').hide();
        fadeOutTextBoxDmVPN();
        if (dmvpnflag) {
          $('#deleteMessage').html($.i18n.prop("dmvPnConfig"));
          $('#deleteDialog').dialog("open");
        } else {
          validator.resetForm();
          if(s2s)
          {
            $('#vpnType option[value="siteTosite"]').attr("selected", "selected");
          }
          else{
            $('#vpnType option[value="dmvpnSpoke"]').attr("selected", "selected");
          }
        }
        toggleEnableDisableVpnConfigurationList(true);
      }
    });

  $('#enableDmvpnHub').on('click', function() {
    if ($("#enableDmvpnHub").is(':checked')) {
      fadeInTextBoxDmVPNhub();
      $('.wizard > .actions').show();
      for (j = 0; j < 3; j++) {
        $('#wizardDmvpnHub').steps("previous");
      }
      $("#addSpoke").show();
      $("#addLocalLan").show();
      toggleEnableDisableVpnConfigurationList(false);
    } else {
        if (dmvpnHubflag) {
          $('#deleteHubMessage').html($.i18n.prop("dmvPnConfig"));
          $('#deleteHubDialog').dialog("open");
        } else {
          validator.resetForm();
          $('#vpnType option[value="dmvpnHub"]').attr("selected", "selected");
          if ($("#localIpAddrErrorSpan").hasClass("hint--top")) {
            $("#localIpAddrErrorSpan").removeAttr("data-hint");
            $("#localIpAddrErrorSpan").removeClass("hint--top");
            $("#localLanIp").removeClass("highlightTextBox");
          }
          if ($("#localMaskErrorSpan").hasClass("hint--top")) {
            $("#localMaskErrorSpan").removeAttr("data-hint");
            $("#localMaskErrorSpan").removeClass("hint--top");
            $("#localLanMask").removeClass("highlightTextBox");
          }
          formDmvpnHubEmpty();
          fadeOutTextBoxDmVPNhub();
          toggleEnableDisableVpnConfigurationList(true);
          $('.wizard > .actions').hide();
          $("#addSpoke").hide();
          $("#addLocalLan").hide();
        }
    }
  });

  $('#enableRemAccess').on('click', function() {
      if ($("#enableRemAccess").is(':checked')) {
        $('.wizard > .actions').show();
        for (j = 0; j < 3; j++) {
          $('#wizardRemoteAccess').steps("previous");
        }
        toggleEnableDisableVpnConfigurationList(false);
        fadeInTextBoxRemAccVpn();
      } else {
        if (remoteAccessVpnConfigured) {
          $('#deleteRemAccVPNMessage').html($.i18n.prop("remoteAccessVPNRemoveConfigMsg"));
          $('#deleteRemoteAccessVPNDialog').dialog("open");
        } else {
          validator.resetForm();
          $('.wizard > .actions').hide();
          toggleEnableDisableVpnConfigurationList(true);
          fadeOutTextBoxRemAccVpn();
        }
      }
    });

  $('#enableIPSecVPN').on('click', function() {
      if ($("#enableIPSecVPN").is(':checked')) {
        $('.wizard > .actions').show();
        $("#addDest").show();
        fadeInTextBox();
        $("#ipsecButtonBar").show();
        toggleEnableDisableVpnConfigurationList(false);
      } else {
        if (vpnConfigPresent ) {
		  $('#deleteIPSecVPNMessage').html($.i18n.prop("ipsecVPNRemoveConfigMsg"));
          $('#deleteIPSecVPNDialog').dialog("open");
        }else{
		$("#addDest").hide();
        $('.wizard > .actions').hide();
        fadeOutTextBox();
        $("#ipsecButtonBar").hide();
        toggleEnableDisableVpnConfigurationList(true);
		}
      }
    });


  function siteTositeLoad(){
      $(".fullMeshImage").show();
      $(".tunnelImage").hide();
      $("#dmVPN").hide();
      $("#dmvpnHubDiv").hide();
      $("#remoteAccessDiv").hide();
      $("#ipsecVPN").show();
      validator.resetForm();
      $("#dmvpnSpokeToHubLabel").text(" ");
      //enableVPN replaced with enableIPSecVPN
      if ($("#enableIPSecVPN").is(':checked')){
        $("#addDest").show();
        $('.wizard > .actions').show();
        fadeInTextBox();
        $("#ipsecButtonBar").show();
        toggleEnableDisableVpnConfigurationList(false);
      }
      else{
        $("#addDest").hide();
        $('.wizard > .actions').hide();
        fadeOutTextBox();
        $("#ipsecButtonBar").hide();
	toggleEnableDisableVpnConfigurationList(true);
      }
      //$("#dmvpnSpokeToHubLabel").hide()
      //$(".tunnelImage").css("padding-left","285px");
      utmDashboard.terminateCliWorker();
      loadVpn();

        /* if (checkValuesDMVPN(xml)) {
          utmDashboard.terminateCliWorker();
          $(".flat a:nth-child(2)").removeClass("active");
          $(".flat a:nth-child(3)").removeClass("active");
          $(".flat a:nth-child(4)").removeClass("active");
          $(".flat a:nth-child(2)").removeClass("activeIdle");
          $(".flat a:nth-child(3)").removeClass("activeIdle");
          $(".flat a:nth-child(4)").removeClass("activeIdle");
          $(".flat a:nth-child(2)").removeClass("activeDown");
          $(".flat a:nth-child(3)").removeClass("activeDown");
          $(".flat a:nth-child(4)").removeClass("activeDown");
          $(".alive").hide();
          $(".down").hide();
          $(".idle").show();
          $(".flat a:nth-child(2)").addClass("activeIdle");
          $(".flat a:nth-child(3)").addClass("activeIdle");
          $(".flat a:nth-child(4)").addClass("activeIdle");
        } else {
          callLoadTunnel();
        } */
     $('#vpnType option[value="siteTosite"]').attr("selected", "selected");
  }
  function dmvpnSpokeLoad(){
      $(".tunnelImage").hide();
      $(".fullMeshImage").show();
      $("#ipsecVPN").hide();
      $("#dmvpnHubDiv").hide();
      $("#remoteAccessDiv").hide();
      $("#dmVPNsubnetPopupButton").hide();
          $("#dmvpnSpokeToHubLabel").text($.i18n.prop("vpnSpoke") + " - " + $.i18n.prop("spokeHub"));
          $("#dmVPN").show();
          validator.resetForm();
          utmDashboard.terminateCliWorker();
          loadDmVPN();
          if ($("#enableDmVPN").is(':checked')) {
            $('.wizard > .actions').show();
      $("#dmvpnAddDest").show();
          } else {
            $('.wizard > .actions').hide();
      $("#dmvpnAddDest").hide();

          }
          $('.wizard > .steps').find("li").each(function() {
            if ($(this).hasClass("error")) {
              $(this).removeClass("error");
            }
          });
          for (j = 0; j < 3; j++) {
            $('#wizard').steps("previous");

        }
        /* if (!checkValuesDMVPN(xml)) {
          utmDashboard.terminateCliWorker();
          $(".flat a:nth-child(2)").removeClass("active");
          $(".flat a:nth-child(3)").removeClass("active");
          $(".flat a:nth-child(4)").removeClass("active");
          $(".flat a:nth-child(2)").removeClass("activeIdle");
          $(".flat a:nth-child(3)").removeClass("activeIdle");
          $(".flat a:nth-child(4)").removeClass("activeIdle");
          $(".flat a:nth-child(2)").removeClass("activeDown");
          $(".flat a:nth-child(3)").removeClass("activeDown");
          $(".flat a:nth-child(4)").removeClass("activeDown");
          $(".alive").hide();
          $(".down").hide();
          $(".idle").show();
          $(".flat a:nth-child(2)").addClass("activeIdle");
          $(".flat a:nth-child(3)").addClass("activeIdle");
          $(".flat a:nth-child(4)").addClass("activeIdle");
        } else {
          callLoadTunnel();
        } */
    $('#vpnType option[value="dmvpnSpoke"]').attr("selected", "selected");
  }

  function dmvpnHubLoad(){
      if(dmvpnHubflag){
      $("#enableDmvpnHub").attr('checked', 'checked');
      }else{
      $("#enableDmvpnHub").removeAttr('checked');
      }
      $(".fullMeshImage").show();
      $(".tunnelImage").hide();
      $("#addSpoke").hide();
      $("#spokesAdded").hide();
      $("#spokePopupButton").hide();
      $("#localLANPopupButton").hide();
      $("#localLanDialog").hide();
      $("#ipsecVPN").hide();
      $("#dmVPN").hide();
      $("#dmvpnHubDiv").show();
      $("#remoteAccessDiv").hide();
          $("#dmvpnSpokeToHubLabel").text($.i18n.prop("vpnSpoke") + " - " + $.i18n.prop("spokeHub"));
          validator.resetForm();
          utmDashboard.terminateCliWorker();
      if ($("#dmvpnHubIpAddrErrorSpan").hasClass('hint--top')) {
      $("#dmvpnHubIpAddrErrorSpan").removeAttr("data-hint");
      $("#dmvpnHubIpAddrErrorSpan").removeClass("hint--top");
      $("#spokeIP").removeClass("highlightTextBox");
      }
      if ($("#dmvpnHubMaskErrorSpan").hasClass('hint--top')) {
      $("#dmvpnHubMaskErrorSpan").removeAttr("data-hint");
      $("#dmvpnHubMaskErrorSpan").removeClass("hint--top");
      $("#spokeMask").removeClass("highlightTextBox");
      }
      if ($("#enableDmvpnHub").is(':checked')) {
      $('.wizard > .actions').show();
      $("#addSpoke").show();
      $("#addLocalLan").show();
      } else {
      $('.wizard > .actions').hide();
      $("#addSpoke").hide();
      $("#addLocalLan").hide();
          }
          $('.wizard > .steps').find("li").each(function() {
            if ($(this).hasClass("error")) {
              $(this).removeClass("error");
            }
          });
          for (j = 0; j < 3; j++) {
            $('#wizard').steps("previous");
          }
    $('#vpnType option[value="dmvpnHub"]').attr("selected", "selected");

    if(hubConfigured=="hub-ikev1"){
    fadeInTextBoxDmVPNhub();
    loadHubIkev1();
    }else if(hubConfigured=="hub-ikev2"){
    fadeInTextBoxDmVPNhub();
    loadHubIkev2();
    }else {
    formDmvpnHubEmpty();
    fadeOutTextBoxDmVPNhub();
    $("#enableDmvpnHub").removeAttr('checked');
    }
    /* $("#addSpokeButton").button().click(function(e){
    $("#dmVpnHubSpokeTable").show();
    e.preventDefault();
    }); */
  }

  function remAccessLoad(){
      $(".tunnelImage").hide();
      $(".fullMeshImage").show();
      $("#ipsecVPN").hide();
      $("#dmVPN").hide();
      $("#dmvpnHubDiv").hide();
      $("#remoteAccessDiv").show();
      //$("#dmvpnSpokeToHubLabel").text($.i18n.prop("vpnSpoke") + " - " + $.i18n.prop("spokeHub"));
          validator.resetForm();
          utmDashboard.terminateCliWorker();
           if ($("#enableRemAccess").is(':checked')) {
            $('.wizard > .actions').show();
            toggleEnableDisableVpnConfigurationList(false);
            fadeInTextBoxRemAccVpn();
          } else {
            $('.wizard > .actions').hide();
            toggleEnableDisableVpnConfigurationList(true);
            fadeOutTextBoxRemAccVpn();
          }
          $('.wizard > .steps').find("li").each(function() {
            if ($(this).hasClass("error")) {
              $(this).removeClass("error");
            }
        });
          for (j = 0; j < 3; j++) {
            $('#wizard').steps("previous");
          }
        $('#vpnType option[value="remoteAccess"]').attr("selected", "selected");
  }

    $('#dmvpnDhcpCheck').on('click', function() {
      blockPage("Loading");
      setTimeout(function() {
        if ($('#dmvpnDhcpCheck').is(':checked')) {
          $(".wizard .content").css({
            'min-height': '-=100px'
          });
          $('#tip').hide();
          $('#tmask').hide();
        } else {
          $(".wizard .content").css({
            'min-height': '+=100px'
          });
          $('#tip').show();
          $('#tmask').show();
        }
        $.unblockUI();
      }, 500);
    });

      if ($("#enableIPSecVPN").is(':checked') ||
          $("#enableDmVPN").is(':checked') ||
          $("#enableDmvpnHub").is(':checked') ||
          $("#enableRemAccess").is(':checked'))
      {
        toggleEnableDisableVpnConfigurationList(false);
	if ($("#enableIPSecVPN").is(':checked'))
	{
	  $("#ipsecButtonBar").show();
	} else {
	  $("#ipsecButtonBar").hide();
	}
      } else {
        toggleEnableDisableVpnConfigurationList(true);
	if (!$("#enableIPSecVPN").is(':checked'))
	{
	  $("#ipsecButtonBar").hide();
	}
      }
    //consoleLogMethodDetailsEnd("configureVPN.js", "confVpnLoading()");

  }
  function tunnelMaskAddrLoading() {
    //consoleLogMethodDetailsStart("configureVPN.js", "confVpnLoading()");
    if ($('#dmvpnDhcpCheck').is(':checked')) {
      $('#tip').hide();
      $('#tmask').hide();
    } else {
      $(".wizard .content").css({'min-height': '+=100px'});
      $('#tip').show();
      $('#tmask').show();
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "confVpnLoading()");
  }

  function callFinish(e) {
    //consoleLogMethodDetailsStart("configureVPN.js", "callFinish()");
    //if (($('#utmForm').valid()) && (remoteSubnetValidDmvpn())) {
    blockPage("Applying");
    setTimeout(function() {
      var arr = [], eigrpArr,response;
/*     var delDmvpnPolicyArr = [];
      var destArr = [],
        maskArr = [];
      var interfaceTunnelArr = []; */
      var whiteListArr = [];
      var autonomousVal = $("#dmvpnAutonomousId").val();
      var primayWanList = configureFirewall.getInterfacesInZone("WAN");


      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;
      var noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";
      eigrpArr = [{name: "autonomousVal", value: autonomousVal}];
      try {
        utmDashboard.terminateCliWorker();
        if ($("#dmvpnIKEv1Radio").is(':checked')) {
          if (checkValuesIkve1(xml) && checkTunnel0(xml)) {
            response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
			var response=deviceCommunicator.getConfigCmdOutput("interface tunnel0"+"\n"+"no tunnel protection ipsec profile ipsec-profile"+"\n"+"exit");
            deleteVpnIkev1InterfaceTunnel(primayWanList);
            response = deviceCommunicator.configureCommandsFromTemplate2("deleteSpokeVpnIkev1.txt", arr, false);
          }
        } else if ($("#dmvpnIKEv2Radio").is(':checked')) {
          if (checkValuesIkve2(xml)) {
            if (checkValuesDMVPN(xml)) {
              noAuthPolicy = "";
            }
            arr.push({
              name: "noAuthPolicy",
              value: noAuthPolicy
            });
            response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
            deleteVpnIkev2InterfaceTunnel(primayWanList);
            response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
          }
        }
        var cliArr = "", status = "", tunnel = "", pairDataArray;
        try {
          cliArr = deviceCommunicator.getExecCmdOutput("show crypto session interface tunnel 0").split("\n");
          pairDataArray = loopAndGetPairData(cliArr, /^Session status/, " " + peerOrHubAddress + " ", 2, 1, " ");
        } catch (error) {
          cliArr = "";
        }
        if (cliArr != "" && pairDataArray != undefined && pairDataArray != null && pairDataArray.length > 0) {
          //status = cliArr[4].split(" ")[2],
          //tunnel = cliArr[2].split(" ")[1];
          status = pairDataArray[0];
          tunnel = pairDataArray[1];
        }
        /* loadTunnel(status, tunnel); */
        deviceCommunicator.configureCommandsFromTemplate("deleteEigrp.txt", eigrpArr, false);
		//fix for CSCvc26980
		if ($("#dmvpnIKEv1Radio").is(':checked')) {
		checkTunnelDelete();
		}
		//
        deviceCommunicator.doWriteMemory();
        iAndC.createAccessListforNAT(licenseCheck, xml);
        formDmvpnEmpty();
        fadeInTextBoxDmVPN();
        $('.wizard > .actions').show();
		//fix for CSCvc26980
		if ($("#dmvpnIKEv2Radio").is(':checked')) {
		checkTunnelDeleteIkev2();
		}
      } catch (error) {
        //$('#confvpnErrorMessage').html(error.errorResponse);
        if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
          errMsgStr = $.i18n.prop("invalidInputDetected");
        }
        else {
          errMsgStr = error.errorResponse;
        }
        $('#confvpnErrorMessage').html(errMsgStr);
        $('#confvpnError').show();
        $.unblockUI();
        return false;
      }
      e.preventDefault();
    }, 10000);
    vpnConfigPresent = true;
    return false;
  }
   function checkTunnelDelete(){
	xmlCrypto=deviceCommunicator.getExecCmdOutput("show crypto session");
	if(xmlCrypto.indexOf("isakmp-profile")<0){
	var response=deviceCommunicator.getConfigCmdOutput("no crypto isakmp profile isakmp-profile");
	response=deviceCommunicator.getConfigCmdOutput("no crypto  keyring isakmp-keyring");
	vpnOverallLoading();
	vpnConfigPresent = false;
	$.unblockUI();
	}else{
	setTimeout(checkTunnelDelete,2000);
	}
  }
  function checkTunnelDeleteIkev2(){
	xmlCrypto=deviceCommunicator.getExecCmdOutput("show crypto session");
	if(xmlCrypto.indexOf("Interface:")<0){
	vpnOverallLoading();
	vpnConfigPresent = false;
	$.unblockUI();
	}else{
	setTimeout(checkTunnelDeleteIkev2,2000);
	}
  }
  function checkIpsecTunnelDeleteIkev2(){
	xmlCrypto=deviceCommunicator.getExecCmdOutput("show crypto session");
	if(xmlCrypto.indexOf("Interface:")<0){
	vpnConfigPresent = false;
	//refreshTable();
	deleteFinished=true;
	$("#ipsecButtonBar").hide();
	$("#enableIPSecVPN").prop("checked", false);
	toggleEnableDisableVpnConfigurationList(true);
	//$.unblockUI();
    loadIpsectable();
	}else{
	setTimeout(checkIpsecTunnelDeleteIkev2,2000);
	}
  }
   function checkIpsecTunnelDelete(){
	xmlCrypto=deviceCommunicator.getExecCmdOutput("show crypto session");
	if(xmlCrypto.indexOf("isakmp-profile")<0){
	var response=deviceCommunicator.getConfigCmdOutput("no crypto isakmp profile isakmp-profile"+"\n"+"no crypto keyring isakmp-keyring");
	response=deviceCommunicator.getConfigCmdOutput("no crypto keyring isakmp-keyring");
	vpnConfigPresent = false;
	deleteFinished=true;
	//refreshTable();
	$("#ipsecButtonBar").hide();
	$("#enableIPSecVPN").prop("checked", false);
	toggleEnableDisableVpnConfigurationList(true);
	//$.unblockUI();
    loadIpsectable();
	}else{
	setTimeout(checkIpsecTunnelDelete,2000);
	}
  }
   function verifyTunnelDelete(peerIp){
	var peerIpAdd=peerIp.trim();	
	xmlCrypto=deviceCommunicator.getExecCmdOutput("show crypto session remote "+peerIpAdd);
	if(xmlCrypto.indexOf(peerIpAdd)<0){
	  refreshTable();
	  //$.unblockUI();
	}else{
	  setTimeout(verifyTunnelDelete(peerIpAdd),4000);
	}	
	/* var shCry="";
	for(i=0;;i++){
	  setTimeout(function(){
	    shCry=deviceCommunicator.getExecCmdOutput("sh crypto session remote "+peerIpAdd);
	  },200);
	  if(shCry.indexOf(peerIpAdd)<0){
	  loadIpsectable();
	  break;	
	  }
	} */
  }
  function onFinish(e) {
    if ($('#utmForm').valid()) {
      if (defaultPolicyExists) {
          onwizardapply(e);
      } else {
        $('#policyMessage').html($.i18n.prop("applyPolicyMessage"));
        $('#policyDialog').dialog("open");
      }
    }
  }
  function onFinishDmvpnHub(e) {
    if ($('#utmForm').valid()) {
      if (defaultPolicyExists) {
        applyDMVPNhub(e);
      } else {
      $('#dmvpnHubpDialogText').html($.i18n.prop("applyPolicyMessage"));
      $('#dmvpnHubpDialog').dialog("open");
      }
    }
  }

  function ipsecOnFinish(e){
    if($("#preSharedKey").valid()){
      console.log("ipsecOnFinish ipsecExists->"+ipsecExists); 
      console.log("ipsecOnFinish editingSite->"+editingSite); 
      $("#subnetPopupButton").hide();
      $("#siteTositeDialog").dialog("close");
      blockPage("Applying");
      setTimeout(function() {
	if(ipsecExists){
	  if(editingSite){
	    console.log("ipsecOnFinish stage 1 deleteTunnel & deleteBeforeEdit to follow");
	    deleteTunnel(selectedTunnel,peerIp);
	    deleteBeforeEdit();
	    e.preventDefault();
	  }else{
	    console.log("ipsecOnFinish stage 2 addSiteToSite to follow");
	    addSiteToSite();  
	  }
	  //refreshTable();
	}else{
	  if(editingSite){
	    console.log("ipsecOnFinish stage 3 deleteTunnel & deleteBeforeEdit to follow");
	    deleteTunnel(selectedTunnel,peerIp);
	    deleteBeforeEdit();
	    e.preventDefault();
	  }else{
	    console.log("ipsecOnFinish stage 4 applySiteToSite to follow");
	    applySiteToSite();  
	  }
	  $("#subnetPopupButton").hide();
	  $("#siteTositeDialog").dialog("close");
	  //refreshTable();
	}
      },200);
    }else{
      isEmptyBlock=true;
    }
  }

  function deleteBeforeEdit(){
	var shCry=deviceCommunicator.getExecCmdOutput("sh crypto session");
	var tunnelToEdit=selectedTunnel.split("-")[0];
	if(shCry.indexOf(tunnelToEdit)<0){
	if(ipsecExists){
	  console.log("ipsecOnFinish stage 5 addSiteToSite to follow");
	  addSiteToSite();
	}else{
	  console.log("ipsecOnFinish stage 6 applySiteToSite to follow");
	  applySiteToSite();	
	}	
	}else{
	setTimeout(deleteBeforeEdit,3000);
	}
	
  }

    function applySiteToSite(e) {
        if (($('#utmForm').valid()) && (remoteSubnetAdded())) {
          blockPage("Applying");
          setTimeout(function() {
            var arr = [], /* rows = [], */
              response;
            var destArr = [],
              maskArr = [];
            /* var emptyArr = [];
            var reg = new RegExp("[,\\n]"); */
            var interfaceTunnelArr = [];
            var lanList = [];
            var whiteListArr = [];

            var wildCardMask = "";
            var countDest = 0,
              countMask = 0;
            var ipRouteString = "";
            /* var deleteobjGroupIdRoute = ""; */
            var objGroupdIpRoute = "";
            var routeInterfaceString = "";
            peerAddress = $("#peerAddr").val();
            peerOrHubAddress = peerAddress;
            key = $("#preSharedKey").val();
            lanList = configureFirewall.getInterfacesInZone("LAN");
            primayWanList = configureFirewall.getInterfacesInZone("WAN");
            backupTunnel = "";
            ipAddressString = "";
            s2sTunnelIP = $("#s2sTunnelIP").val();
            s2sBackupIP = $("#s2sBackupIP").val();
            s2sTunnelMask = $("#s2sTunnelMask").val();
            var aaaAuthNetwork = "aaa authorization network local-group-author-list local",
              authPolicy = "",
              authNetworkPolicy = "aaa authorization group psk list local-group-author-list authpolicy1",
              noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";
            //destAddress=$("#destAddr").val();
            //destMask=$("#destMask").val();
            /*var ipAndMaskList=[];
             var lanIP=[];
             var lansubmask=[];
             var outValue=[];
             ipAndMaskList.length=0;
             lanIP.length=0;
             lansubmask.length=0;
             for(i=0;i<lanList.length;i++){
             xmlLan=deviceCommunicator.getExecCmdOutput("show running-config interface "+lanList[i]);

             rows = xmlLan.split(reg);
             for(j=0;j<rows.length;j++){
             if((rows[j].indexOf("no ip address") <= -1)){
             if((rows[j].indexOf($.i18n.prop("ipAddress")) > -1)){
             outValue.length=0;
             outValue = rows[j].trim().split(" ");
             lanIP[lanIP.length]=outValue[2].trim();
             lansubmask[lansubmask.length]=outValue[3].trim();

             }
             }
             }
             }
             var networkAddress=getNetworkAddress(lanIP[0],lansubmask[0]);*/

            if (!shRunFormatLatest) {
              shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
              shRunFormatLatest = true;
            }
            xml = shRunFormatOutput;

            //xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
            if (xml.indexOf("Building configuration...") !== -1) {
              xml = xml.substring(25, xml.length);
              xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
            }
            xml = xml.substring(xml.indexOf("<?xml"), xml.length);
            regEx = new RegExp("&#x03;", "g");
            xml = xml.replace(regEx, "");
            try {
              checkDhcp = $.parseXML(xml);
            } catch (error) {
              checkDhcp = xml;
            }
            ConfiguredVpnDetails = getvpnInterfaceTunnel(checkDhcp).interfaceArray;
            ConfiguredPrimaryWanList = ConfiguredVpnDetails;
            try {
              //enableVPN replaced with enableIPSecVPN
              if ($("#enableIPSecVPN").is(':checked')) {
                $('#confvpnError').hide();
                if ($("#vpnIKEv1Radio").is(':checked')) {

                  if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
                    deleteObjectGroup();
                  }

                  if (checkValuesIkve1(xml) && checkTunnel0(xml)  && !checkValuesIkve2(xml)) {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                    deleteVpnIkev1InterfaceTunnel(ConfiguredPrimaryWanList);
                    //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
                  }
                  if (checkValuesIkve2(xml)) {
                    $('#confirmdeleteVpn').dialog("open");
                    if (checkValuesDMVPN(xml)) {
                      noAuthPolicy = "";
                    }
                    arr.push({
                      name: "noAuthPolicy",
                      value: noAuthPolicy
                    });
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                    deleteVpnIkev2InterfaceTunnel(ConfiguredPrimaryWanList);
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);

                  }
                  if ($('.multipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
                    $('.multipleDestMaskdiv').find('div').each(function(index) {
                      if ($(this).hasClass('multipleDestdiv')) {
                        //code
                        destArr[countDest] = $(this).text().trim();
                        countDest++;
                      }
                      if ($(this).hasClass('multipleMaskdiv')) {
                        //code
                        maskArr[countMask] = $(this).text().trim();
                        countMask++;
                      }
                    });

                    if (($("#destAddr").val().trim().length > 0) &&
                        ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
                        ($("#destMask").val().trim().length > 0) &&
                        ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
            isEmptyBlock=true;
                    } else {
                      destArr[countDest] = $("#destAddr").val().trim();
                      maskArr[countMask] = $("#destMask").val().trim();
                      countDest++;
                      countMask++;
                    }

                  } else {
                    if (($("#destAddr").val().trim().length > 0) &&
                        ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
                        ($("#destMask").val().trim().length > 0) &&
                        ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
            isEmptyBlock=true;
                    } else {
                      destArr[countDest] = $("#destAddr").val().trim();
                      maskArr[countMask] = $("#destMask").val().trim();
                      countDest++;
                      countMask++;
                    }
                  }
                  updateIkev1Data(xml);
                  arr.push({
                    name: "peerAddress",
                    value: peerAddress
                  }, {
                    name: "addrPeer",
                    value: peerAddress
                  }, {
                    name: "vpnSubnetMaskIkev1",
                    value: "255.255.255.255"
                  }, {
                    name: "key",
                    value: key
                  }, {
                    name: "oldPeerAddress",
                    value: oldPeerAddress
                  }, {
                    name: "oldKey",
                    value: oldKey
                  });
                  if (checkValuesIkve1(xml)) {
                    response = deviceCommunicator.configureCommandsFromTemplate2("vpnIkev1Modified.txt", arr, false);
                  } else {
                    response = deviceCommunicator.configureCommandsFromTemplate("vpnIKEv1.txt", arr, false);
                  }
                  arr.length = 0;
                  for (var j = 0; j < primayWanList.length; j++) {
                    ipRouteString = "";
                    for (var i = 0; i < destArr.length; i++) {
                      interfaceTunnelName = " tunnel " + j;

                      if (j == 1) {
                        //code
                        backupTunnel = "";
                        ipAddressString = "ip address " + s2sBackupIP + " " + s2sTunnelMask;
                        ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName + " " + "200";
                        objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                      }
                      else {
                        if (primayWanList.length > 1) {
                          backupTunnel = "backup interface tunnel " + (j + 1);
                        }
                        ipAddressString = "ip address " + s2sTunnelIP + " " + s2sTunnelMask;
                        ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
                        objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                      }
                    }

                    interfaceTunnelArr.push({
                      name: "interfaceTunnelName",
                      value: interfaceTunnelName
                    }, {
                      name: "tunnelSourceName",
                      value: primayWanList[j]
                    }, {
                      name: "peerAddress",
                      value: peerAddress
                    }, {
                      name: "ipRouteString",
                      value: ipRouteString

                    }, {
                      name: "backupTunnel",
                      value: backupTunnel
                    }, {
                      name: "ipAddressString",
                      value: ipAddressString
                    }, {
                      name: "objGroupdIpRoute",
                      value: objGroupdIpRoute

                    });

                    response = deviceCommunicator.configureCommandsFromTemplate("vpnIkev1InterfaceTunnel.txt", interfaceTunnelArr, false);
                    interfaceTunnelArr.length = 0;

                    for (var i = 0; i < destArr.length; i++) {
                      wildCardMask = getWildCardMask(maskArr[i]);
                      whiteListArr.push({
                        name: "destAddresss",
                        value: destArr[i]
                      }, {
                        name: "wildCardMask",
                        value: wildCardMask
                      });

                      response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
                      whiteListArr.length = 0;
                    }
                  }
                  formDmvpnEmpty();
                  fadeOutTextBoxDmVPN();
                  $("#enableDmVPN").removeAttr('checked');
          $("#dmvpnAddDest").hide();
                  // loadVpn();
                } else if ($("#vpnIKEv2Radio").is(':checked')) {
                  if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
                    deleteObjectGroup();
                  }
                  if (checkValuesIkve1(xml) && checkTunnel0(xml) && !checkValuesIkve2(xml)) {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                    deleteVpnIkev1InterfaceTunnel(ConfiguredPrimaryWanList);
                    //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
                  }
                  if (checkValuesIkve2(xml)) {
                    if (checkValuesDMVPN(xml)) {
                      noAuthPolicy = "";
                    }
                    arr.push({
                      name: "noAuthPolicy",
                      value: noAuthPolicy
                    });
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                    deleteVpnIkev2InterfaceTunnel(ConfiguredPrimaryWanList);
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
                  }
                  if ($('.multipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
                    $('.multipleDestMaskdiv').find('div').each(function(index) {
                      if ($(this).hasClass('multipleDestdiv')) {
                        //code
                        destArr[countDest] = $(this).text().trim();
                        countDest++;
                      }
                      if ($(this).hasClass('multipleMaskdiv')) {
                        //code
                        maskArr[countMask] = $(this).text().trim();
                        countMask++;
                      }
                    });

                    if (($("#destAddr").val().trim().length > 0) &&
                        ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
                        ($("#destMask").val().trim().length > 0) &&
                        ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
            isEmptyBlock=true;
                    } else {
                      destArr[countDest] = $("#destAddr").val().trim();
                      maskArr[countMask] = $("#destMask").val().trim();
                      countDest++;
                      countMask++;
                    }

                  } else {
                    if (($("#destAddr").val().trim().length > 0) &&
                        ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
                        ($("#destMask").val().trim().length > 0) &&
                        ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
            isEmptyBlock=true;
                    } else {
                      destArr[countDest] = $("#destAddr").val().trim();
                      maskArr[countMask] = $("#destMask").val().trim();
                      countDest++;
                      countMask++;
                    }
                  }
                  for (var i = 0; i < lanList.length; i++) {
                    routeInterfaceString = routeInterfaceString + "\n" + " route set interface " + lanList[i];
                  }
                  authPolicy = "crypto ikev2 authorization policy authpolicy1" + "\n" + routeInterfaceString + "\n" + " route accept any";
                  arr.push({
                    name: "peerAddress",
                    value: peerAddress
                  }, {
                    name: "addressOfPeer",
                    value: peerAddress
                  }, {
                    name: "key",
                    value: key
                  }, {
                    name: "nameOfKey",
                    value: "SITE-KEY-0"
                  }, {
                    name: "peerAddrNew",
                    value: peerAddress
                  }, {
                    name: "siteToSiteSubnetMask",
                    value: "255.255.255.255"
                  }, {
                    name: "aaaAuthNetwork",
                    value: aaaAuthNetwork
                  }, {
                    name: "authPolicy",
                    value: authPolicy
                  }, {
                    name: "authNetworkPolicy",
                    value: authNetworkPolicy
                  });
                  response = deviceCommunicator.configureCommandsFromTemplate("vpnIKEv2.txt", arr, false);
                  arr.length = 0;
                  for (var j = 0; j < primayWanList.length; j++) {
					ipRouteString = "";
                    for (var i = 0; i < destArr.length; i++) {
                      interfaceTunnelName = " tunnel " + j;
                      if (j == 1) {
                        backupTunnel = "";
                        ipAddressString = "ip address " + s2sBackupIP + " " + s2sTunnelMask;
						ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName + " " + "200";
                        objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                      } else {
                        if (primayWanList.length > 1) {
                          backupTunnel = "backup interface tunnel " + (j + 1);
                        }
                        ipAddressString = "ip address " + s2sTunnelIP + " " + s2sTunnelMask;
						ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
                        objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                      }
                    }

                    interfaceTunnelArr.push({
                      name: "interfaceTunnelName",
                      value: interfaceTunnelName
                    }, {
                      name: "tunnelSourceName",
                      value: primayWanList[j]
                    }, {
                      name: "peerAddress",
                      value: peerAddress
                    },{
                      name: "ipRouteString",
                      value: ipRouteString

                    },{
                      name: "backupTunnel",
                      value: backupTunnel
                    }, {
                      name: "ipAddressString",
                      value: ipAddressString
                    }, {
                      name: "objGroupdIpRoute",
                      value: objGroupdIpRoute

                    });

                    response = deviceCommunicator.configureCommandsFromTemplate("vpnIkev2InterfaceTunnel.txt", interfaceTunnelArr, false);
                    interfaceTunnelArr.length = 0;

                    for (var i = 0; i < destArr.length; i++) {
                      wildCardMask = getWildCardMask(maskArr[i]);
                      whiteListArr.push({
                        name: "destAddresss",
                        value: destArr[i]
                      }, {
                        name: "wildCardMask",
                        value: wildCardMask
                      });

                      response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
                      whiteListArr.length = 0;
                    }
                  }
                  formDmvpnEmpty();
                  fadeOutTextBoxDmVPN();
                  $("#enableDmVPN").removeAttr('checked');
                  $("#dmvpnAddDest").hide();
                }
		$("#ipsecButtonBar").show();
              } else {
                if ($("#vpnIKEv1Radio").is(':checked')) {
                  if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
                    deleteObjectGroup();
                  }
                  if (checkValuesIkve1(xml) && checkTunnel0(xml)) {
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                    deleteVpnIkev1InterfaceTunnel(ConfiguredPrimaryWanList);
                    //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
                  }

                } else if ($("#vpnIKEv2Radio").is(':checked')) {
                  if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
                    deleteObjectGroup();
                  }
                  if (checkValuesIkve2(xml)) {
                    if (checkValuesDMVPN(xml)) {
                      noAuthPolicy = "";
                    }
                    arr.push({
                      name: "noAuthPolicy",
                      value: noAuthPolicy
                    });
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                    deleteVpnIkev2InterfaceTunnel(ConfiguredPrimaryWanList);
                    response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
                  }


                }
		$("#ipsecButtonBar").hide();
              }
              deviceCommunicator.doWriteMemory();
              /* if ($("#vpnIKEv1Radio").is(':checked')) {
                vpnIkve1();
              } else {
                vpnIkve2();
              } */
              /* callLoadTunnel(); */
              iAndC.createAccessListforNAT(licenseCheck, xml);
			  loadIpsectable();
            } catch (error) {
              //  $('#confvpnErrorMessage').html(error.errorResponse);
              if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
                errMsgStr = $.i18n.prop("invalidInputDetected");
              } else {
                errMsgStr = error.errorResponse;
              }
              $('#confvpnErrorMessage').html(errMsgStr);
              $('#confvpnError').show();
              $.unblockUI();
              return false;
            }
            //loadVpn();

          }, 2000);
        }
        vpnConfigPresent = true;
        return false;
    }

  function addSiteToSite(e){
    if (($('#utmForm').valid()) && (remoteSubnetAdded())) {
      blockPage("Applying");
      setTimeout(function() {
	var arr = [], /* rows = [], */
	  response;
	var destArr = [], maskArr = [];
	/* var emptyArr = [];
	var reg = new RegExp("[,\\n]"); */
	var interfaceTunnelArr = [];
	var lanList = [];
	var whiteListArr = [];
	var wildCardMask = "";
	var countDest = 0, countMask = 0;
	var ipRouteString = "";
	/* var deleteobjGroupIdRoute = ""; */
	var objGroupdIpRoute = "";
	var routeInterfaceString = "";
	peerAddress = $("#peerAddr").val();
	peerOrHubAddress = peerAddress;
	var key = $("#preSharedKey").val();
	var lanList = configureFirewall.getInterfacesInZone("LAN");
	var primayWanList = configureFirewall.getInterfacesInZone("WAN");
	var backupTunnel = "";
	ipAddressString = "";
	var s2sTunnelIP = $("#s2sTunnelIP").val();
	var s2sBackupIP = $("#s2sBackupIP").val();
	var s2sTunnelMask = $("#s2sTunnelMask").val();
	var interfaceIndex=parseInt(maxInterfaceIndex);
	var aaaAuthNetwork = "aaa authorization network local-group-author-list local";
	var authPolicy = "";
	var authNetworkPolicy = "aaa authorization group psk list local-group-author-list authpolicy1";
	var noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";

	if (!shRunFormatLatest) {
	  shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
	  shRunFormatLatest = true;
	}
	xml = shRunFormatOutput;

	//xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
	if (xml.indexOf("Building configuration...") !== -1) {
	  xml = xml.substring(25, xml.length);
	  xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
	}
	xml = xml.substring(xml.indexOf("<?xml"), xml.length);
	regEx = new RegExp("&#x03;", "g");
	xml = xml.replace(regEx, "");
	try {
	  checkDhcp = $.parseXML(xml);
	} catch (error) {
	  checkDhcp = xml;
	}
	ConfiguredVpnDetails = getvpnInterfaceTunnel(checkDhcp).interfaceArray;
	ConfiguredPrimaryWanList = ConfiguredVpnDetails;
	try {
	  //enableVPN replaced with enableIPSecVPN
	  if ($("#enableIPSecVPN").is(':checked')) {
	    $('#confvpnError').hide();
	    if ($("#vpnIKEv1Radio").is(':checked')) {
	      if ($('.multipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
		$('.multipleDestMaskdiv').find('div').each(function(index) {
		  if ($(this).hasClass('multipleDestdiv')) {
		    //code
		    destArr[countDest] = $(this).text().trim();
		    countDest++;
		  }
		  if ($(this).hasClass('multipleMaskdiv')) {
		    //code
		    maskArr[countMask] = $(this).text().trim();
		    countMask++;
		  }
		});

		/*if (($("#destAddr").val().trim().length > 0) &&
		    ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
		    ($("#destMask").val().trim().length > 0) &&
		    ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
	          isEmptyBlock=true;
		}
		else {
		  destArr[countDest] = $("#destAddr").val().trim();
		  maskArr[countMask] = $("#destMask").val().trim();
		  countDest++;
		  countMask++;
		}*/

	      } else {
		/*if (($("#destAddr").val().trim().length > 0) &&
		    ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
		    ($("#destMask").val().trim().length > 0) &&
		    ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
	          isEmptyBlock=true;
		}
		else {
		  destArr[countDest] = $("#destAddr").val().trim();
		  maskArr[countMask] = $("#destMask").val().trim();
		  countDest++;
		  countMask++;
		}*/
	      }
	      updateIkev1Data(xml);
	      arr.push({
		name: "peerAddress",
		value: peerAddress
	      }, {
		name: "addrPeer",
		value: peerAddress
	      }, {
		name: "vpnSubnetMaskIkev1",
		value: "255.255.255.255"
	      }, {
		name: "key",
		value: key
	      }, {
		name: "oldPeerAddress",
		value: oldPeerAddress
	      }, {
		name: "oldKey",
		value: oldKey
	      });
	      response = deviceCommunicator.configureCommandsFromTemplate2("vpnIKEv1Multi.txt", arr, false);
	      arr.length = 0;
	      if(editingSite)
	      {
		for (var j = 0; j < primayWanList.length; j++)
		{
		  ipRouteString = "";
		  interfaceTunnelName = "interface "+ tunnelToEdit;
		  if(isBackupInterface){
		    backupTunnel = "backup interface " + tunnelToEdit;
		  }
		  for (var i = 0; i < destArr.length; i++) {
		    if (j == 1) {
		      //code
		      backupTunnel = "";
		      ipAddressString = "ip address " + s2sBackupIP + " " + s2sTunnelMask;
		      ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + " "+tunnelToEdit+ " " + "200";
		      objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		    }
		    else {
		      ipAddressString = "ip address " + s2sTunnelIP + " " + s2sTunnelMask;
		      ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] +" "+tunnelToEdit;
		      objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		    }
		  }
		  interfaceTunnelArr.push({
		    name: "interfaceTunnelName",
		    value: interfaceTunnelName
		  }, {
		    name: "tunnelSourceName",
		    value: primayWanList[j]
		  }, {
		    name: "peerAddress",
		    value: peerAddress
		  }, {
		    name: "ipRouteString",
		    value: ipRouteString
  
		  }, {
		    name: "backupTunnel",
		    value: backupTunnel
		  }, {
		    name: "ipAddressString",
		    value: ipAddressString
		  }, {
		    name: "objGroupdIpRoute",
		    value: objGroupdIpRoute
		  });
		  response = deviceCommunicator.configureCommandsFromTemplate2("editVpnIkev1InterfaceTunnel.txt", interfaceTunnelArr, false);
		  interfaceTunnelArr.length = 0;
		  for (var i = 0; i < destArr.length; i++) {
		    wildCardMask = getWildCardMask(maskArr[i]);
		    whiteListArr.push({
		      name: "destAddresss",
		      value: destArr[i]
		    }, {
		      name: "wildCardMask",
		      value: wildCardMask
		    });
		    response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
		    whiteListArr.length = 0;
		  }
		}
	      } else {
		for (var j = 0; j < primayWanList.length; j++) {
		  ipRouteString = "";
		  for (var i = 0; i < destArr.length; i++) {
		    interfaceTunnelName = " tunnel "+(interfaceIndex+1+j);
		    if (j == 1) {
		      //code
		      backupTunnel = "";
		      ipAddressString = "ip address " + s2sBackupIP + " " + s2sTunnelMask;
		      ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName + " " + "200";
		      objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		    }
		    else {
		      if (primayWanList.length > 1) {
			backupTunnel = "backup interface tunnel " + (j+interfaceIndex+2);
		      }
		      ipAddressString = "ip address " + s2sTunnelIP + " " + s2sTunnelMask;
		      ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
		      objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		    }
		  }
		  interfaceTunnelArr.push({
		    name: "interfaceTunnelName",
		    value: interfaceTunnelName
		  }, {
		    name: "tunnelSourceName",
		    value: primayWanList[j]
		  }, {
		    name: "peerAddress",
		    value: peerAddress
		  }, {
		    name: "ipRouteString",
		    value: ipRouteString
		  }, {
		    name: "backupTunnel",
		    value: backupTunnel
		  }, {
		    name: "ipAddressString",
		    value: ipAddressString
		  }, {
		    name: "objGroupdIpRoute",
		    value: objGroupdIpRoute
		  });
  
		  response = deviceCommunicator.configureCommandsFromTemplate("vpnIkev1InterfaceTunnel.txt", interfaceTunnelArr, false);
		  interfaceTunnelArr.length = 0;
  
		  for (var i = 0; i < destArr.length; i++)
		  {
		    wildCardMask = getWildCardMask(maskArr[i]);
		    whiteListArr.push({
		      name: "destAddresss",
		      value: destArr[i]
		    }, {
		      name: "wildCardMask",
		      value: wildCardMask
		    });
		    response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
		    whiteListArr.length = 0;
		  }
		}
	      }
	      formDmvpnEmpty();
	      fadeOutTextBoxDmVPN();
	      $("#enableDmVPN").removeAttr('checked');
	      $("#dmvpnAddDest").hide();
	      // loadVpn();
	    } else if ($("#vpnIKEv2Radio").is(':checked')) {
	      if ($('.multipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
		$('.multipleDestMaskdiv').find('div').each(function(index) {
		  if ($(this).hasClass('multipleDestdiv')) {
		    //code
		    destArr[countDest] = $(this).text().trim();
		    countDest++;
		  }
		  if ($(this).hasClass('multipleMaskdiv')) {
		    //code
		    maskArr[countMask] = $(this).text().trim();
		    countMask++;
		  }
		});

		/*if (($("#destAddr").val().trim().length > 0) &&
		    ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
		    ($("#destMask").val().trim().length > 0) &&
		    ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
	          isEmptyBlock=true;
		} else {
		  destArr[countDest] = $("#destAddr").val().trim();
		  maskArr[countMask] = $("#destMask").val().trim();
		  countDest++;
		  countMask++;
		}*/

	      } else {
		/*if (($("#destAddr").val().trim().length > 0) &&
		    ($("#destAddr").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
		    ($("#destMask").val().trim().length > 0) &&
		    ($("#destMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
	          isEmptyBlock=true;
		} else {
		  destArr[countDest] = $("#destAddr").val().trim();
		  maskArr[countMask] = $("#destMask").val().trim();
		  countDest++;
		  countMask++;
		}*/
	      }
	      for (var i = 0; i < lanList.length; i++) {
		routeInterfaceString = routeInterfaceString + "\n" + " route set interface " + lanList[i];
	      }
	      var siteKey="SITE-KEY-"+(interfaceIndex+1);
	      authPolicy = "crypto ikev2 authorization policy authpolicy1" + "\n" + routeInterfaceString + "\n" + " route accept any";
	      arr.push({
		name: "peerAddress",
		value: peerAddress
	      }, {
		name: "addressOfPeer",
		value: peerAddress
	      }, {
		name: "key",
		value: key
	      }, {
		name: "nameOfKey",
		value: siteKey
	      }, {
		name: "peerAddrNew",
		value: peerAddress
	      }, {
		name: "siteToSiteSubnetMask",
		value: "255.255.255.255"
	      }, {
		name: "aaaAuthNetwork",
		value: aaaAuthNetwork
	      }, {
		name: "authPolicy",
		value: authPolicy
	      }, {
		name: "authNetworkPolicy",
		value: authNetworkPolicy
	      });
	      response = deviceCommunicator.configureCommandsFromTemplate2("vpnIKEv2Multi.txt", arr, false);
	      arr.length = 0;
	      if(editingSite)
	      {
		for (var j = 0; j < primayWanList.length; j++) {
		  for (var i = 0; i < destArr.length; i++) {
		    interfaceTunnelName = "interface "+ tunnelToEdit;
		    if(isBackupInterface){
         	      backupTunnel = "backup interface " + tunnelToEdit;
		    }
		    if (j == 1) {
		      backupTunnel = "";
		      ipAddressString = "ip address " + s2sBackupIP + " " + s2sTunnelMask;
		      objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		    } else {
		      ipAddressString = "ip address " + s2sTunnelIP + " " + s2sTunnelMask;
		      objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		    }
		  }

		  interfaceTunnelArr.push({
		    name: "interfaceTunnelName",
		    value: interfaceTunnelName
		  }, {
		    name: "tunnelSourceName",
		    value: primayWanList[j]
		  }, {
		    name: "peerAddress",
		    value: peerAddress
		  }, {
		    name: "backupTunnel",
		    value: backupTunnel
		  }, {
		    name: "ipAddressString",
		    value: ipAddressString
		  }, {
		    name: "objGroupdIpRoute",
		    value: objGroupdIpRoute
		  });

		  response = deviceCommunicator.configureCommandsFromTemplate2("editVpnIkev2InterfaceTunnel.txt", interfaceTunnelArr, false);
		  interfaceTunnelArr.length = 0;
  
		  for (var i = 0; i < destArr.length; i++) {
		    wildCardMask = getWildCardMask(maskArr[i]);
		    whiteListArr.push({
		      name: "destAddresss",
		      value: destArr[i]
		    }, {
		      name: "wildCardMask",
		      value: wildCardMask
		    });
  
		    response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
		    whiteListArr.length = 0;
		  }
	      }
	    }else{
	      for (var j = 0; j < primayWanList.length; j++) {
		for (var i = 0; i < destArr.length; i++) {
		  interfaceTunnelName = " tunnel " + (interfaceIndex+1+j);
		  if (j == 1) {
		    backupTunnel = "";
		    ipAddressString = "ip address " + s2sBackupIP + " " + s2sTunnelMask;
		    ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName + " " + "200";
		    objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		  } else {
		    if (primayWanList.length > 1) {
		      backupTunnel = "backup interface tunnel " + (interfaceIndex+2+j);
		    }
		    ipAddressString = "ip address " + s2sTunnelIP + " " + s2sTunnelMask;
		    ipRouteString = ipRouteString + "\n" + "ip route " + destArr[i] + " " + maskArr[i] + interfaceTunnelName;
		    objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
		  }
		}

		interfaceTunnelArr.push({
		  name: "interfaceTunnelName",
		  value: interfaceTunnelName
		}, {
		  name: "tunnelSourceName",
		  value: primayWanList[j]
		}, {
		  name: "peerAddress",
		  value: peerAddress
		}, {
		  name: "ipRouteString",
		  value: ipRouteString
		}, {
		  name: "backupTunnel",
		  value: backupTunnel
		}, {
		  name: "ipAddressString",
		  value: ipAddressString
		}, {
		  name: "objGroupdIpRoute",
		  value: objGroupdIpRoute
		});
		response = deviceCommunicator.configureCommandsFromTemplate("vpnIkev2InterfaceTunnel.txt", interfaceTunnelArr, false);
		interfaceTunnelArr.length = 0;

		for (var i = 0; i < destArr.length; i++) {
		  wildCardMask = getWildCardMask(maskArr[i]);
		  whiteListArr.push({
		    name: "destAddresss",
		    value: destArr[i]
		  }, {
		    name: "wildCardMask",
		    value: wildCardMask
		  });

		  response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
		  whiteListArr.length = 0;
		}
	      }
	    }
	    formDmvpnEmpty();
	    fadeOutTextBoxDmVPN();
	    $("#enableDmVPN").removeAttr('checked');
	    $("#dmvpnAddDest").hide();
	    }
	    $("#ipsecButtonBar").show();
	  } else {
	    if ($("#vpnIKEv1Radio").is(':checked')) {
	      if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
		deleteObjectGroup();
	      }
	      if (checkValuesIkve1(xml) && checkTunnel0(xml)) {
		response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
		deleteVpnIkev1InterfaceTunnel(ConfiguredPrimaryWanList);
		//response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
	      }
	    } else if ($("#vpnIKEv2Radio").is(':checked')) {
	      if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
		deleteObjectGroup();
	      }
	      if (checkValuesIkve2(xml)) {
		if (checkValuesDMVPN(xml)) {
		  noAuthPolicy = "";
		}
		arr.push({
		  name: "noAuthPolicy",
		  value: noAuthPolicy
		});
		response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
		deleteVpnIkev2InterfaceTunnel(ConfiguredPrimaryWanList);
		response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
	      }
	    }
	  }
	  deviceCommunicator.doWriteMemory();
	  /* if ($("#vpnIKEv1Radio").is(':checked')) {
	    vpnIkve1();
	  } else {
	    vpnIkve2();
	  } */
	  /* callLoadTunnel(); */
	  iAndC.createAccessListforNAT(licenseCheck, xml);
	  loadIpsectable();
	} catch (error) {
	  //  $('#confvpnErrorMessage').html(error.errorResponse);
	  if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
	    errMsgStr = $.i18n.prop("invalidInputDetected");
	  } else {
	    errMsgStr = error.errorResponse;
	  }
	  $('#confvpnErrorMessage').html(errMsgStr);
	  $('#confvpnError').show();
	  //$.unblockUI();
	  return false;
	}
	//loadVpn();
      }, 1000);
    }
    vpnConfigPresent = true;
    return false;
  }


  function onwizardapply(e){
    //consoleLogMethodDetailsStart("configureVPN.js", "onFinish()");
    if (($('#utmForm').valid())) {
    blockPage("Applying");
    setTimeout(function() {
      var arr = [],
      response;
      var destArr = [],
      maskArr = [];
      var whiteListArr = [];
      var wildCardMask = "";
      var networkIp = "";
      var countDest = 0,
      countMask = 0;
      var interfaceTunnelName = "";
      var objGroupdIpRoute = "";
      tunnelIp = $("#tunnelIp").val();
      tunnelMask = $("#tunnelMask").val();
      tunnelConf = "ip address " + tunnelIp + " " + tunnelMask;
      var tunnelWildMask = getWildCardMask(tunnelMask);
      var tunnelNetworkIp = configureFirewall.getNetworkAddress(tunnelIp, tunnelMask);
      if ($('#dmvpnDhcpCheck').is(':checked')) {
        tunnelConf = "";
      }
        transportAddr = $("#transportAddr").val();
        peerOrHubAddress = transportAddr;
        tunnelAddr = $("#tunnelAddr").val();
        dmvpnPSK = $("#dmvpnPSK").val();
        dmvpnAutonomousId = $("#dmvpnAutonomousId").val();

        backupTunnelIP = $("#backupTunnelIP").val();
        backupTunnel = "";
        primayWanList = configureFirewall.getInterfacesInZone("WAN");
        var aaaAuthNetwork = "", authPolicy = "", authNetworkPolicy = "";

        if (!shRunFormatLatest) {
          shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
          shRunFormatLatest = true;
        }
        xml = shRunFormatOutput;

        noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";

        var lanZoneArr;
        if (vpnLoadingClubbedCLIOutputAvailable) {
          lanZoneArr = vpnLoadingClubbedCLIOutputArray[3].trim().split("\n");
        }
        else{
          lanZoneArr = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets").split("\n");
        }

        var networkLanZone = "", ipsec_profile = "";

        try {
          if ($('#enableDmVPN').is(':checked')) {
            $('#confvpnError').hide();
            if ($("#dmvpnIKEv1Radio").is(':checked')) {
              if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml) )) {
                deleteObjectGroup();
              }
              if (checkValuesIkve1(xml)  && checkTunnel0(xml)  && !checkValuesIkve2(xml)) {
                response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                deleteVpnIkev1InterfaceTunnel(primayWanList);
                //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
              }
			  var oldEigrp=findOldEigrp(xml);
			  if(oldEigrp!==undefined && oldEigrp!==""&&oldEigrp.length>0){
			    response=deviceCommunicator.getConfigCmdOutput("no router eigrp "+oldEigrp);
			  }
              if (checkValuesIkve2(xml)) {
                if (checkValuesDMVPN(xml)) {
                  noAuthPolicy = "";
                }
                arr.push({
                  name: "noAuthPolicy",
                  value: noAuthPolicy
                });
                response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                deleteVpnIkev2InterfaceTunnel(primayWanList);
                response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
              }
              if ($('.dmvpnMultipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
                $('.dmvpnMultipleDestMaskdiv').find('div').each(function(index) {
                  if ($(this).hasClass('multipleDestdiv')) {
                    // code
                    destArr[countDest] = $(this).text().trim();
                    countDest++;
                  }
                  if ($(this).hasClass('dmVpnMultipleMaskdiv')) {
                    // code
                    maskArr[countMask] = $(this).text().trim();
                    countMask++;
                  }
                });
                if (($("#dmvpnDestAddr").val().trim().length > 0) &&
                    ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
                    ($("#dmvpnDestMask").val().trim().length > 0) &&
                    ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
          isEmptyBlock=true;
                } else {
                  destArr[countDest] = $("#dmvpnDestAddr").val().trim();
                  maskArr[countMask] = $("#dmvpnDestMask").val().trim();
                  countDest++;
                  countMask++;
                }
              } else {
                if (($("#dmvpnDestAddr").val().trim().length > 0) &&
                    ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
                    ($("#dmvpnDestMask").val().trim().length > 0) &&
                    ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
          isEmptyBlock=true;
                } else {
                  destArr[countDest] = $("#dmvpnDestAddr").val().trim();
                  maskArr[countMask] = $("#dmvpnDestMask").val().trim();
                  countDest++;
                  countMask++;
                }
              }
              updateIkev1Data(xml);

              arr.push({
                name: "peerAddress",
                value: "0.0.0.0"
              }, {
                name: "addrPeer",
                value: "0.0.0.0 0.0.0.0"
              }, {
                name: "vpnSubnetMaskIkev1",
                value: "0.0.0.0"
              }, {
                name: "key",
                value: dmvpnPSK
              }, {
                name: "oldPeerAddress",
                value: oldPeerAddress
              }, {
                name: "oldKey",
                value: oldKey
              });
              if (checkValuesIkve1(xml) ) {
                response = deviceCommunicator.configureCommandsFromTemplate2("vpnIkev1Modified.txt", arr, false);
              } else {
                response = deviceCommunicator.configureCommandsFromTemplate("vpnIKEv1.txt", arr, false);
              }
              arr.length = 0;

              for (var j = 0; j < primayWanList.length; j++) {
                for (var i = 0; i < destArr.length; i++) {
                  interfaceTunnelName = " tunnel " + j;
                  if (j == 1) {
                    //code
                    backupTunnel = "";
                    /* objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i]; */
                    tunnelConf = "ip address " + backupTunnelIP + " " + tunnelMask;
                  } else {
                    if (primayWanList.length > 1) {
                      backupTunnel = "backup interface tunnel" + (j + 1);
                    }
                    /* objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i]; */
                  }
                }
                ipsec_profile = "ipsec-profile";
                arr.push({
                  name: "interfaceTunnelName",
                  value: interfaceTunnelName
                }, {
                  name: "tunnelConf",
                  value: tunnelConf
                }, {
                  name: "transportAddr",
                  value: transportAddr
                }, {
                  name: "tunnelAddr",
                  value: tunnelAddr
                }, {
                  name: "ipnhrpshortcutDmvpn",
                  value: " "
                }, {
                  name: "networkId",
                  value: 10
                }, {
                  name: "wanInterfaceName",
                  value: primayWanList[j]
                }, {
                  name: "objGroupdIpRoute",
                  value: objGroupdIpRoute
                }, {
                  name: "backupTunnel",
                  value: backupTunnel
                }, {
                  name: "ipsec_profile",
                  value: ipsec_profile
                }
                );
                response = deviceCommunicator.configureCommandsFromTemplate("tunnelConfiguration.txt", arr, false);
                arr.length = 0;

                for (var i = 0; i < destArr.length; i++) {
                  /* wildCardMask = getWildCardMask(maskArr[i]); */
                  whiteListArr.push({
                    name: "destAddresss",
                    value: destArr[i]
                  }, {
                    name: "wildCardMask",
                    value: maskArr[i]
                  });
                  response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
                  whiteListArr.length = 0;
                }
                var localLanString="";
                if (j == 1) {
                  tunnelNetworkIp = configureFirewall.getNetworkAddress(backupTunnelIP, tunnelMask);
                }
                for (var i = 1; i < lanZoneArr.length; i++) {
                  if (lanZoneArr[i].indexOf("any") != -1) {
                    networkLanZone = "";
                    //return false;
                  } else {
                    networkIp = lanZoneArr[i].split(" ")[1];
                    if (networkIp.indexOf("host") != -1) {
                      wildCardMask = getWildCardMask("255.255.255.255");
                      networkIp = lanZoneArr[i].split(" ")[2];
                    } else {
                      wildCardMask = getWildCardMask(lanZoneArr[i].split(" ")[2]);
                    }
                    networkLanZone = networkLanZone + "\n" + "network " + networkIp.trim() + " " + wildCardMask.trim();
                  }
                }
				for (var i = 0; i < destArr.length; i++) {
                localLanString=localLanString+"network "+destArr[i]+" "+maskArr[i]+"\n";
                }
                arr.push({
                  name: "autonomousId",
                  value: dmvpnAutonomousId
                }, {
                  name: "tunnelNetworkIp",
                  value: tunnelNetworkIp
                }, {
                 name: "localLanString",
                 value: localLanString
                }, {
                  name: "tunnelWildMask",
                  value: tunnelWildMask
                }, {
                  name: "networkLanZone",
                  value: networkLanZone
                });
                response = deviceCommunicator.configureCommandsFromTemplate("createEigrp.txt", arr, false);

                arr.length = 0;
              }
              fadeOutTextBox();
              formElementEmpty();
              $("#enableVpn").removeAttr('checked');
            } else if ($("#dmvpnIKEv2Radio").is(':checked')) {
              if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
                deleteObjectGroup();
              }
              if (checkValuesIkve1(xml)  && checkTunnel0(xml)  && !checkValuesIkve2(xml) ) {
                response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                deleteVpnIkev1InterfaceTunnel(primayWanList);
                //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
              }
			  var oldEigrp=findOldEigrp(xml);
			  if(oldEigrp!==undefined && oldEigrp!==""&&oldEigrp.length>0){
			    response=deviceCommunicator.getConfigCmdOutput("no router eigrp "+oldEigrp);
			  }
              if (checkValuesIkve2(xml)) {
                if (checkValuesDMVPN(xml)) {
                  noAuthPolicy = "";
                }
                arr.push({
                  name: "noAuthPolicy",
                  value: noAuthPolicy
                });
                response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
                deleteVpnIkev2InterfaceTunnel(primayWanList);
                response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
              }
              if ($('.dmvpnMultipleDestMaskdiv').find('div').hasClass('multipleDestdiv')) {
                $('.dmvpnMultipleDestMaskdiv').find('div').each(function(index) {
                  if ($(this).hasClass('multipleDestdiv')) {
                    // code
                    destArr[countDest] = $(this).text().trim();
                    countDest++;
                  }
                  if ($(this).hasClass('dmVpnMultipleMaskdiv')) {
                    // code
                    maskArr[countMask] = $(this).text().trim();
                    countMask++;
                  }
                });
                if (($("#dmvpnDestAddr").val().trim().length > 0) &&
                    ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
                    ($("#dmvpnDestMask").val().trim().length > 0) &&
                    ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
          isEmptyBlock=true;
                } else {
                  destArr[countDest] = $("#dmvpnDestAddr").val().trim();
                  maskArr[countMask] = $("#dmvpnDestMask").val().trim();
                  countDest++;
                  countMask++;
                }
              } else {
                if (($("#dmvpnDestAddr").val().trim().length > 0) &&
                    ($("#dmvpnDestAddr").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
                    ($("#dmvpnDestMask").val().trim().length > 0) &&
                    ($("#dmvpnDestMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
            isEmptyBlock=true;
                } else {
                  destArr[countDest] = $("#dmvpnDestAddr").val().trim();
                  maskArr[countMask] = $("#dmvpnDestMask").val().trim();
                  countDest++;
                  countMask++;
                }
              }
              arr.push({
                name: "peerAddress",
                value: "0.0.0.0"
              }, {
                name: "key",
                value: dmvpnPSK
              }, {
                name: "aaaAuthNetwork",
                value: aaaAuthNetwork
              }, {
                name: "nameOfKey",
                value: "ANY"
              }, {
                name: "peerAddrNew",
                value: "0.0.0.0"
              }, {
                name: "addressOfPeer",
                value: "0.0.0.0 0.0.0.0"
              }, {
                name: "siteToSiteSubnetMask",
                value: " "
              }, {
                name: "authPolicy",
                value: authPolicy
              }, {
                name: "authNetworkPolicy",
                value: authNetworkPolicy
              });
              response = deviceCommunicator.configureCommandsFromTemplate("vpnIKEv2.txt", arr, false);
              arr.length = 0;

              for (var j = 0; j < primayWanList.length; j++) {
                for (var i = 0; i < destArr.length; i++) {
                  interfaceTunnelName = " tunnel " + j;
                  if (j == 1) {
                    //code
                    backupTunnel = "";
                    /* objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i]; */
                    tunnelConf = "ip address " + backupTunnelIP + " " + tunnelMask;
                  } else {
                    if (primayWanList.length > 1) {
                      backupTunnel = "backup interface tunnel" + (j + 1);
                    }
                    /* objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i]; */
                  }

                }
                ipsec_profile = "test_profile";

                /*        //Adding extra configuration for DMVPN IKEv2
                 arr.push({
                 name: "ipnhrpshortcutDmvpn",
                 value: "ip nhrp shortcut"
                 });
                 */
                interfaceTunnelName = "tunnel " + j;
                arr.push({
                  name: "interfaceTunnelName",
                  value: interfaceTunnelName
                }, {
                  name: "tunnelConf",
                  value: tunnelConf
                }, {
                  name: "transportAddr",
                  value: transportAddr
                }, {
                  name: "tunnelAddr",
                  value: tunnelAddr
                }, {
                  name: "networkId",
                  value: 10
                }, {
                  name: "wanInterfaceName",
                  value: primayWanList[j]
                }, {
                  name: "objGroupdIpRoute",
                  value: objGroupdIpRoute

                }, {
                  name: "backupTunnel",
                  value: backupTunnel
                }, {
                  name: "ipsec_profile",
                  value: ipsec_profile
                });
                response = deviceCommunicator.configureCommandsFromTemplate("tunnelConfiguration.txt", arr, false);
                arr.length = 0;
                for (var i = 0; i < destArr.length; i++) {
                  /* wildCardMask = getWildCardMask(maskArr[i]); */
                  whiteListArr.push({
                    name: "destAddresss",
                    value: destArr[i]
                  }, {
                    name: "wildCardMask",
                    value: maskArr[i]
                  });
                  response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
                  whiteListArr.length = 0;
                }
                if (j == 1) {
                  tunnelNetworkIp = configureFirewall.getNetworkAddress(backupTunnelIP, tunnelMask);
                }
                var localLanString="";
                for (var i = 1; i < lanZoneArr.length; i++) {
                  if (lanZoneArr[i].indexOf("any") != -1) {
                    networkLanZone = "";
                    //return false;
                  } else {
                    networkIp = lanZoneArr[i].split(" ")[1];
                    if (networkIp.indexOf("host") != -1) {
                      wildCardMask = getWildCardMask("255.255.255.255");
                      networkIp = lanZoneArr[i].split(" ")[2];
                    } else {
                      wildCardMask = getWildCardMask(lanZoneArr[i].split(" ")[2]);
                    }
                    networkLanZone = networkLanZone + "\n" + "network " + networkIp.trim() + " " + wildCardMask.trim();
                  }
                }
				for (var i = 0; i < destArr.length; i++) {
                localLanString=localLanString+"network "+destArr[i]+" "+maskArr[i]+"\n";
                }
                arr.push({
                  name: "autonomousId",
                  value: dmvpnAutonomousId
                },{
                name: "localLanString",
                value: localLanString
                }, {
                  name: "tunnelNetworkIp",
                  value: tunnelNetworkIp
                }, {
                  name: "tunnelWildMask",
                  value: tunnelWildMask
                }, {
                  name: "networkLanZone",
                  value: networkLanZone
                });
                response = deviceCommunicator.configureCommandsFromTemplate("createEigrp.txt", arr, false);

                arr.length = 0;
              }
              fadeOutTextBox();
              formElementEmpty();
              $("#enableVpn").removeAttr('checked');
        $("#addDest").hide();
            } else {
              // Unused block of code
              /*if ($("#dmvpnIKEv1Radio").is(':checked')) {
               if ((checkValuesIkve2(xml) == false)&&(checkValuesIkve1(xml) == false)) {
               deleteObjectGroup();
               }
               if (checkValuesIkve1(xml) == true) {
               response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
               deleteVpnIkev1InterfaceTunnel(primayWanList);
               response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
               }
               } else if ($("#dmvpnIKEv2Radio").is(':checked')) {
               if ((checkValuesIkve2(xml) == false)&&(checkValuesIkve1(xml) == false)) {
               deleteObjectGroup();
               }

               if (checkValuesIkve2(xml) == true) {
               if(checkValuesDMVPN(xml)){
               noAuthPolicy = "";
               }
               arr.push({
               name: "noAuthPolicy",
               value: noAuthPolicy
               });
               response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
               deleteVpnIkev2InterfaceTunnel(primayWanList);
               response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev2.txt", arr, false);
               }
               } */
            }
          } else {
            for (var j = 0; j < primayWanList.length; j++) {
              interfaceTunnelName = "tunnel " + j;
              arr.push({
                name: "interfaceTunnelName",
                value: interfaceTunnelName
              })
              response = deviceCommunicator.configureCommandsFromTemplate("shutdownDmvpn.txt", arr, false);
              arr.length = 0;
            }
          }

          if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
          }
          xml = shRunFormatOutput;
      iAndC.createAccessListforNAT(licenseCheck, xml);
        } catch (error) {
          //$('#confvpnErrorMessage').html(error.errorResponse);
          if ((error.errorResponse).indexOf("Invalid input detected.") >= 0) {
            errMsgStr = $.i18n.prop("invalidInputDetected");
          }
          else {
            errMsgStr = error.errorResponse;
          }
          $('#confvpnErrorMessage').html(errMsgStr);
          $('#confvpnError').show();
          $.unblockUI();
          return false;
        }
        vpnConfigPresent = true;
        vpnOverallLoading();
        //$.unblockUI();
        e.preventDefault();
      }, 1000)
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "onFinish()");

    return false;
  }

function updateHubIkev1Data(xml){
  $(xml).find('ConfKeyring-Configuration').each(function() {
      $(this).find('pre-shared-key').each(function() {
      oldSpokeIPs.push($(this).find('AddressPrefix').text());
      oldSpokeMasks.push($(this).find('AddressPrefixMask').text());
      oldKeys.push($(this).find('UnencryptedUserPassword').text());
    });
  });
}

function findOldEigrp(xml){
var eigrpOld;
$(xml).find('router').each(function() {
    $(this).find('eigrp').each(function() {
    eigrpOld=($(this).find('AutonomousSystem').text());
    });
  });
return eigrpOld;
}
function checkIkev2(xml){
var ikeV2configured=false;
var ikeV2profile="";
  $(xml).find('crypto').each(function() {
    $(this).find('ikev2').each(function() {
    $(this).find('profile').each(function() {
    ikeV2profile=($(this).find('NameIKEv2Profile').text());
    });
    });
  });
  if(ikeV2profile.length>0){
    ikeV2configured=true;
  }
  return ikeV2configured;
}


function checkDmvpnHub(){
    xml=deviceCommunicator.getExecCmdOutput("show running-config | format");
    var ipsecProfile="";
    var ikeV2profile="";
    var hubStatus="";
    $(xml).find('crypto').each(function() {
    $(this).find('ipsec').each(function() {
    $(this).find('profile').each(function() {
    ipsecProfile=($(this).find('ProfileName').text());
    });
    });
  });

  $(xml).find('crypto').each(function() {
    $(this).find('ikev2').each(function() {
    $(this).find('profile').each(function() {
    ikeV2profile=($(this).find('NameIKEv2Profile').text());
    });
    });
  });

  if(ipsecProfile=="DMVPN_hub"){
    if(ikeV2profile=="prof"){
    hubStatus="hub-ikev2";
    }else{
    hubStatus="hub-ikev1";
    }
  }
  return hubStatus;
}

function loadDmVPNhub(hubType){
    $('#confvpnError').hide();
    $('.localLanTable').empty();
    //enableVPN replaced with enableIPSecVPN
    $("#enableIPSecVPN").removeAttr('checked');
    $("#enableDmvpnHub").attr('checked', 'checked');
    $("#addLocalLan").show();
    $("#localLANPopupButton").hide();
    $('.wizard > .actions').hide();
    if ($("#ipAddrErrorSpan").hasClass('hint--top')) {
      $("#ipAddrErrorSpan").removeAttr("data-hint");
      $("#ipAddrErrorSpan").removeClass("hint--top");
      $("#dmvpnDestAddr").removeClass("highlightTextBox");
    }
    if ($("#maskErrorSpan").hasClass('hint--top')) {
      $("#maskErrorSpan").removeAttr("data-hint");
      $("#maskErrorSpan").removeClass("hint--top");
      $("#dmvpnDestMask").removeClass("highlightTextBox");
    }
    if(hubType=="hub-ikev1"){
    loadHubIkev1();
    }else if(hubType=="hub-ikev2"){
    loadHubIkev2();
    }else {
      formDmvpnHubEmpty();
      fadeOutTextBoxDmVPNhub();
    }
}

function applyDMVPNhub(e){
  if(($('#utmForm').valid())){
    blockPage("Applying");
    setTimeout(function() {
          var arr=[];
          var key=$("#dmvpnHubKey").val();
          var tunnelIp=$("#dmvpnTunnelIp").val();
          var tunnelMask=$("#dmvpnHubTunnelMask").val();
          var backupTunnelIP=$("#hubBackupIP").val();
          var eigrp=$("#dmvpnHubEigrp").val();
          var destArr = [];
          var maskArr = [];
          var whiteListArr = [];
//          var spokeDestArr = [];
//          var spokeMaskArr = [];
          var countDest=0;
          var countMask=0;
//          var countSpokeDest=0;
//          var countSpokeMask=0;
          var interfaceTunnelName="";
          var interfaceVar="";
          var objGroupdIpRoute="";
          var response;
          var tunnelConf = "ip address " + tunnelIp + " " + tunnelMask;
          var spokeConf="";
          var spokeMatchId="";
          var ikev2TunnelString="";
          var spokesIdentity="";
      var localLanString="";
          var oldEigrp;
          var spokeKeyName;
          var hub_profile;
          var tunnelWildMask = getWildCardMask(tunnelMask);
          var tunnelNetworkIp = configureFirewall.getNetworkAddress(tunnelIp, tunnelMask);
          primayWanList = configureFirewall.getInterfacesInZone("WAN");
          /* var aaaAuthNetwork = "", authPolicy = "", authNetworkPolicy = ""; */

          if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
          }
          xml = shRunFormatOutput;

          noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";

          var lanZoneArr;
          if (vpnLoadingClubbedCLIOutputAvailable) {
            lanZoneArr = vpnLoadingClubbedCLIOutputArray[3].trim().split("\n");
          }
          else{
            lanZoneArr = deviceCommunicator.getExecCmdOutput("show object-group local_lan_subnets").split("\n");
          }

          var networkLanZone = "";
        //config mapping
          try {
          if ($('#enableDmvpnHub').is(':checked')) {
            $('#confvpnError').hide();

            if ($("#dmvpnHubIKEv1Radio").is(':checked')) {
              hub_profile = "DMVPN_hub";
              if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
              deleteObjectGroup();
              }
              if (checkValuesIkve1(xml)  && checkTunnel0(xml)  && !checkValuesIkve2(xml)) {
              response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
              deleteVpnIkev1InterfaceTunnel(primayWanList);
              //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
              }
              if (checkValuesIkve2(xml)) {
              if (checkValuesDMVPN(xml)) {
                noAuthPolicy = "";
              }
              arr.push({
                name: "noAuthPolicy",
                value: noAuthPolicy
              });
              response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
              deleteVpnIkev2InterfaceTunnel(primayWanList);
              /* response = deviceCommunicator.configureCommandsFromTemplate2("deleteHubVpnIkev2.txt", arr, false); */
              }
            if ($('.localLanTable').find('div').hasClass('dmvpnHubDestDiv')) {
              $('.localLanTable').find('div').each(function(index) {
                if ($(this).hasClass('dmvpnHubDestDiv')) {
                destArr[countDest] = $(this).text().trim();
                countDest++;
                }
                if ($(this).hasClass('dmvpnHubMaskDiv')) {
                maskArr[countMask] = $(this).text().trim();
                countMask++;
                }
              });
              if (($("#localLanIp").val().trim().length > 0) &&
                ($("#localLanIp").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
                ($("#localLanMask").val().trim().length > 0) &&
                ($("#localLanMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
        isEmptyBlock=true;
              } else if (($("#localLanIp").val().trim().length > 0)&&($("#localLanMask").val().trim().length > 0)){
                destArr[countDest] = $("#localLanIp").val().trim();
                maskArr[countMask] = $("#localLanMask").val().trim();
                countDest++;
                countMask++;
              }
            }
            else{
            if (($("#localLanIp").val().trim().length > 0) &&
            ($("#localLanIp").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
            ($("#localLanMask").val().trim().length > 0) &&
            ($("#localLanMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
      isEmptyBlock=true;
            } else if (($("#localLanIp").val().trim().length > 0)&&($("#localLanMask").val().trim().length > 0)){
            destArr[countDest] = $("#localLanIp").val().trim();
            maskArr[countMask] = $("#localLanMask").val().trim();
            countDest++;
            countMask++;
            }
            }

/*             if ($('.dmvpnHubSpokesAdded').find('div').hasClass('spokeDestDiv')) {
              $('.dmvpnHubSpokesAdded').find('div').each(function(index) {
                if ($(this).hasClass('spokeDestDiv')) {
                spokeDestArr[countSpokeDest] = $(this).text().trim();
                countSpokeDest++;
                }
                if ($(this).hasClass('spokeMaskDiv')) {
                spokeMaskArr[countSpokeMask] = $(this).text().trim();
                countSpokeMask++;
                }
              });
              if (($("#spokeIP").val().trim().length > 0) &&
                ($("#spokeIP").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
                ($("#spokeMask").val().trim().length > 0) &&
                ($("#spokeMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
        isEmptyBlock=true;
              } else if(($("#spokeIP").val().trim().length > 0)&&($("#spokeMask").val().trim().length > 0)) {
                spokeDestArr[countSpokeDest] = $("#spokeIP").val().trim();
                spokeMaskArr[countSpokeMask] = $("#spokeMask").val().trim();
                countSpokeDest++;
                countSpokeMask++;
              }
            }
            else{
            if (($("#spokeIP").val().trim().length > 0) &&
            ($("#spokeIP").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
            ($("#spokeMask").val().trim().length > 0) &&
            ($("#spokeMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
      isEmptyBlock=true;
            } else {
            spokeDestArr[countSpokeDest] = $("#spokeIP").val().trim();
            spokeMaskArr[countSpokeMask] = $("#spokeMask").val().trim();
            countSpokeDest++;
            countSpokeMask++;
            }
            } */

          updateHubIkev1Data(xml);
          oldEigrp=findOldEigrp(xml);
          /* console.log(oldEigrp); */

          if (checkValuesIkve1(xml) && oldEigrp != undefined) {
          arr.push({
              name: "eigrp",
              value: oldEigrp
            });
          response = deviceCommunicator.configureCommandsFromTemplate2("removeSpokes.txt", arr, false);
          arr.length=0;
            }

           else  if (checkIkev2(xml) && oldEigrp != undefined){
            arr.push({
              name: "eigrp",
              value: oldEigrp
            });
            response = deviceCommunicator.configureCommandsFromTemplate2("removeSpokesIkev2.txt", arr, false);
            arr.length=0;
            }


          spokeConf="pre-shared-key address 0.0.0.0 0.0.0.0 key "+key+"\n";
          spokeMatchId="match identity address 0.0.0.0 0.0.0.0"+"\n";

          arr.push({
              name: "spokeConf",
              value: spokeConf
            }, {
              name: "spokeMatchId",
              value: spokeMatchId
            }, {
              name: "hub_profile",
              value: hub_profile
            });
            response = deviceCommunicator.configureCommandsFromTemplate2("hubIkev1.txt", arr, false);
            arr.length = 0;
            if(destArr.length>0){
            interfaceVar=destArr.length;
            } else{
            interfaceVar=1;
            }
          for (var j = 0; j < primayWanList.length; j++) {
              for (var i = 0; i < interfaceVar; i++) {
                interfaceTunnelName = " tunnel " + j;
                if (j == 1) {
                //code
                backupTunnel = "";
                objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                tunnelConf = "ip address " + backupTunnelIP + " " + tunnelMask;
                } else {
                if (primayWanList.length > 1) {
                  backupTunnel = "backup interface tunnel" + (j + 1);
                }
                objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                }
              }
              arr.push({
                name: "interfaceTunnelName",
                value: interfaceTunnelName
              }, {
                name: "tunnelConf",
                value: tunnelConf
              }, {
                name: "networkId",
                value: 1
              }, {
                name: "eigrp",
                value: eigrp
              }, {
                name: "wanInterfaceName",
                value: primayWanList[j]
              },{
                name: "hub_profile",
                value: hub_profile
              }
              );
              response = deviceCommunicator.configureCommandsFromTemplate2("hubTunnelConfiguration.txt", arr, false);
              arr.length = 0;
              if(interfaceVar>0){
              for (var i = 0; i < destArr.length; i++) {
                /* wildCardMask = getWildCardMask(maskArr[i]); */
                whiteListArr.push({
                name: "destAddresss",
                value: destArr[i]
                }, {
                name: "wildCardMask",
                value: maskArr[i]
                });
                response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
                whiteListArr.length = 0;
              }
              }

              if (j == 1) {
                tunnelNetworkIp = configureFirewall.getNetworkAddress(backupTunnelIP, tunnelMask);
              }
              for (var i = 1; i < lanZoneArr.length; i++) {
                if (lanZoneArr[i].indexOf("any") != -1) {
                networkLanZone = "";
                //return false;
                } else {
                networkIp = lanZoneArr[i].split(" ")[1];
                if (networkIp.indexOf("host") != -1) {
                  wildCardMask = getWildCardMask("255.255.255.255");
                  networkIp = lanZoneArr[i].split(" ")[2];
                } else {
                  wildCardMask = getWildCardMask(lanZoneArr[i].split(" ")[2]);
                }
                networkLanZone = networkLanZone + "\n" + "network " + networkIp.trim() + " " + wildCardMask.trim();
                }
              }

              if(interfaceVar>0){
                for (var i = 0; i < destArr.length; i++) {
                localLanString=localLanString+"network "+destArr[i]+" "+maskArr[i]+"\n";
                }
              }
              arr.push({
                name: "autonomousId",
                value: eigrp
              }, {
                name: "localLanString",
                value: localLanString
              }, {
                name: "tunnelNetworkIp",
                value: tunnelNetworkIp
              }, {
                name: "tunnelWildMask",
                value: tunnelWildMask
              }, {
                name: "networkLanZone",
                value: networkLanZone
              });
              response = deviceCommunicator.configureCommandsFromTemplate("createEigrp.txt", arr, false);

              arr.length = 0;
              }
              fadeOutTextBoxDmVPNhub();
              formElementEmpty();
              $("#enableVpn").removeAttr('checked');
            }


            else if ($("#dmvpnHubIKEv2Radio").is(':checked')) {
              hub_profile = "DMVPN_hub";
              if (!(checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
              deleteObjectGroup();
              }
              if (checkValuesIkve1(xml)  && checkTunnel0(xml)  && !checkValuesIkve2(xml)) {
              response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
              deleteVpnIkev1InterfaceTunnel(primayWanList);
              //response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnIkev1.txt", arr, false);
              }
              if (checkValuesIkve2(xml)) {

                noAuthPolicy = "";

              arr.push({
                name: "noAuthPolicy",
                value: noAuthPolicy
              });
              response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
              deleteVpnIkev2InterfaceTunnel(primayWanList);
              /* response = deviceCommunicator.configureCommandsFromTemplate2("deleteHubVpnIkev2.txt", arr, false); */
              }
              if ($('.localLanTable').find('div').hasClass('dmvpnHubDestDiv')) {
                $('.localLanTable').find('div').each(function(index) {
                  if ($(this).hasClass('dmvpnHubDestDiv')) {
                  destArr[countDest] = $(this).text().trim();
                  countDest++;
                  }
                  if ($(this).hasClass('dmvpnHubMaskDiv')) {
                  maskArr[countMask] = $(this).text().trim();
                  countMask++;
                  }
                });
                if (($("#localLanIp").val().trim().length > 0) &&
                  ($("#localLanIp").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
                  ($("#localLanMask").val().trim().length > 0) &&
                  ($("#localLanMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
          isEmptyBlock=true;
                } else if (($("#localLanIp").val().trim().length > 0)&&($("#localLanMask").val().trim().length > 0)){
                  destArr[countDest] = $("#localLanIp").val().trim();
                  maskArr[countMask] = $("#localLanMask").val().trim();
                  countDest++;
                  countMask++;
                }
              }
              else{
              if (($("#localLanIp").val().trim().length > 0) &&
              ($("#localLanIp").val().trim().toLowerCase() == $.i18n.prop("localLANLabel").toLowerCase()) ||
              ($("#localLanMask").val().trim().length > 0) &&
              ($("#localLanMask").val().trim().toLowerCase() == $.i18n.prop("wildcardMask").toLowerCase())) {
         isEmptyBlock=true;
              } else if (($("#localLanIp").val().trim().length > 0)&&($("#localLanMask").val().trim().length > 0)){
              destArr[countDest] = $("#localLanIp").val().trim();
              maskArr[countMask] = $("#localLanMask").val().trim();
              countDest++;
              countMask++;
              }
              }

/*               if ($('.dmvpnHubSpokesAdded').find('div').hasClass('spokeDestDiv')) {
                $('.dmvpnHubSpokesAdded').find('div').each(function(index) {
                  if ($(this).hasClass('spokeDestDiv')) {
                  spokeDestArr[countSpokeDest] = $(this).text().trim();
                  countSpokeDest++;
                  }
                  if ($(this).hasClass('spokeMaskDiv')) {
                  spokeMaskArr[countSpokeMask] = $(this).text().trim();
                  countSpokeMask++;
                  }
                });
                if (($("#spokeIP").val().trim().length > 0) &&
                  ($("#spokeIP").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
                  ($("#spokeMask").val().trim().length > 0) &&
                  ($("#spokeMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
        isEmptyBlock=true;
                } else if(($("#spokeIP").val().trim().length > 0)&&($("#spokeMask").val().trim().length > 0)) {
                  spokeDestArr[countSpokeDest] = $("#spokeIP").val().trim();
                  spokeMaskArr[countSpokeMask] = $("#spokeMask").val().trim();
                  countSpokeDest++;
                  countSpokeMask++;
                }
              }
              else{
              if (($("#spokeIP").val().trim().length > 0) &&
              ($("#spokeIP").val().trim().toLowerCase() == $.i18n.prop("ipAddress").toLowerCase()) ||
              ($("#spokeMask").val().trim().length > 0) &&
              ($("#spokeMask").val().trim().toLowerCase() == $.i18n.prop("StaticSubnetMask").toLowerCase())) {
        isEmptyBlock=true;
              } else {
              spokeDestArr[countSpokeDest] = $("#spokeIP").val().trim();
              spokeMaskArr[countSpokeMask] = $("#spokeMask").val().trim();
              countSpokeDest++;
              countSpokeMask++;
              }
              } */
          updateHubIkev1Data(xml);
          oldEigrp=findOldEigrp(xml);
         /*  console.log(oldEigrp); */

          if (checkValuesIkve1(xml) && oldEigrp != undefined) {
          arr.push({
              name: "eigrp",
              value: oldEigrp
            });
          response = deviceCommunicator.configureCommandsFromTemplate2("removeSpokes.txt", arr, false);
          arr.length=0;
            }

           else  if (checkIkev2(xml) && oldEigrp != undefined){
            arr.push({
              name: "eigrp",
              value: oldEigrp
            });
            response = deviceCommunicator.configureCommandsFromTemplate2("removeSpokesIkev2.txt", arr, false);
            arr.length=0;
            }


               /*arr.push({
              name: "peerAddress",
              value: "0.0.0.0"
              }, {
              name: "key",
              value: key
              }, {
              name: "aaaAuthNetwork",
              value: aaaAuthNetwork
              }, {
              name: "nameOfKey",
              value: "ANY"
              }, {
              name: "peerAddrNew",
              value: "0.0.0.0"
              }, {
              name: "addressOfPeer",
              value: "0.0.0.0 0.0.0.0"
              }, {
              name: "siteToSiteSubnetMask",
              value: " "
              }, {
              name: "authPolicy",
              value: authPolicy
              }, {
              name: "authNetworkPolicy",
              value: authNetworkPolicy
              });
              response = deviceCommunicator.configureCommandsFromTemplate("vpnIKEv2.txt", arr, false);
              arr.length = 0; */


              spokeKeyName="Spoke1-KEY";
              ikev2TunnelString="peer "+spokeKeyName+"\n"+" address 0.0.0.0 0.0.0.0"+"\n"+"identity address 0.0.0.0"+"\n";
              spokesIdentity="match identity remote address 0.0.0.0 0.0.0.0"+"\n";

              arr.push({
                  name: "ikev2TunnelString",
                  value: ikev2TunnelString
                }, {
                  name: "key",
                  value: key
                }, {
                  name: "spokesIdentity",
                  value: spokesIdentity
                },{
                  name: "hub_profile",
                  value: hub_profile
                });
                response = deviceCommunicator.configureCommandsFromTemplate2("hubIkev2.txt", arr, false);

                arr.length = 0;
               if(destArr.length>0){
                interfaceVar=destArr.length;
                } else{
                interfaceVar=1;
                }
               for (var j = 0; j < primayWanList.length; j++) {
               for (var i = 0; i < interfaceVar; i++) {
                interfaceTunnelName = " tunnel " + j;
                if (j == 1) {
                //code
                backupTunnel = "";
                objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                tunnelConf = "ip address " + backupTunnelIP + " " + tunnelMask;
                } else {
                if (primayWanList.length > 1) {
                  backupTunnel = "backup interface tunnel" + (j + 1);
                }
                objGroupdIpRoute = objGroupdIpRoute + "\n" + destArr[i] + " " + maskArr[i];
                }
              }
              arr.push({
                name: "interfaceTunnelName",
                value: interfaceTunnelName
              }, {
                name: "tunnelConf",
                value: tunnelConf
              }, {
                name: "networkId",
                value: 1
              }, {
                name: "eigrp",
                value: eigrp
              }, {
                name: "wanInterfaceName",
                value: primayWanList[j]
              },{
                name: "hub_profile",
                value: hub_profile
              }
              );
              response = deviceCommunicator.configureCommandsFromTemplate2("hubTunnelConfiguration.txt", arr, false);
              arr.length = 0;
              if(interfaceVar>0){
              for (var i = 0; i < destArr.length; i++) {
                /* wildCardMask = getWildCardMask(maskArr[i]); */
                whiteListArr.push({
                name: "destAddresss",
                value: destArr[i]
                }, {
                name: "wildCardMask",
                value: maskArr[i]
                });
                response = deviceCommunicator.configureCommandsFromTemplate("vpnWhiteListing.txt", whiteListArr, false);
                whiteListArr.length = 0;
              }
              }

              if (j == 1) {
                tunnelNetworkIp = configureFirewall.getNetworkAddress(backupTunnelIP, tunnelMask);
              }
              for (var i = 1; i < lanZoneArr.length; i++) {
                if (lanZoneArr[i].indexOf("any") != -1) {
                networkLanZone = "";
                //return false;
                } else {
                networkIp = lanZoneArr[i].split(" ")[1];
                if (networkIp.indexOf("host") != -1) {
                  wildCardMask = getWildCardMask("255.255.255.255");
                  networkIp = lanZoneArr[i].split(" ")[2];
                } else {
                  wildCardMask = getWildCardMask(lanZoneArr[i].split(" ")[2]);
                }
                networkLanZone = networkLanZone + "\n" + "network " + networkIp.trim() + " " + wildCardMask.trim();
                }
              }
              if(interfaceVar>0){
                for (var i = 0; i < destArr.length; i++) {
                localLanString=localLanString+"network "+destArr[i]+" "+maskArr[i]+"\n";
                }
              }
              arr.push({
                name: "autonomousId",
                value: eigrp
              }, {
                name: "localLanString",
                value: localLanString
              }, {
                name: "tunnelNetworkIp",
                value: tunnelNetworkIp
              }, {
                name: "tunnelWildMask",
                value: tunnelWildMask
              }, {
                name: "networkLanZone",
                value: networkLanZone
              });
              response = deviceCommunicator.configureCommandsFromTemplate("createEigrp.txt", arr, false);

              arr.length = 0;
              }
              fadeOutTextBox();
              formElementEmpty();
              $("#enableVpn").removeAttr('checked');
              //$("#addDest").hide();
            } else {
              // Unused block of code
            }

            } else {
            for (var j = 0; j < primayWanList.length; j++) {
              interfaceTunnelName = "tunnel " + j;
              arr.push({
              name: "interfaceTunnelName",
              value: interfaceTunnelName
              })
              response = deviceCommunicator.configureCommandsFromTemplate("shutdownDmvpn.txt", arr, false);
              arr.length = 0;
            }
            }

            if (!shRunFormatLatest) {
            shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
            shRunFormatLatest = true;
            }
            xml = shRunFormatOutput;
            iAndC.createAccessListforNAT(licenseCheck, xml);
          } catch (error) {
            //$('#confvpnErrorMessage').html(error.errorResponse);
            //if (/* (error.errorResponse).indexOf("Invalid input detected.") >= 0 */true) {
            errMsgStr = $.i18n.prop("invalidInputDetected");
            console.log(error);
            //}
            //else {
            //errMsgStr = error.errorResponse;
            //}
            $('#confvpnErrorMessage').html(errMsgStr);
            $('#confvpnError').show();
            $.unblockUI();
            return false;
          }
        //end of mappings
	  deviceCommunicator.doWriteMemory();
          dmvpnHubflag=true;
          $("#enableDmvpnHub").attr('checked', 'checked');
          vpnConfigPresent = true;
          vpnOverallLoading();
          //$.unblockUI();
          e.preventDefault();
          for (j = 0; j < 3; j++) {
          $('#wizardDmvpnHub').steps("previous");
          }
    }, 1000);
  }
  return false;
}

function removeDmvpnHub(e){
    blockPage("Applying");
    setTimeout(function() {
try{
      var noAuthPolicy="";
      var arr=[];
      var whiteListArr = [];
      primayWanList = configureFirewall.getInterfacesInZone("WAN");
      if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;

      noAuthPolicy = "no crypto ikev2 authorization policy authpolicy1";


      var networkLanZone = "";
      if ((!checkValuesIkve2(xml)) && (!checkValuesIkve1(xml))) {
      deleteObjectGroup();
      }
      if (checkValuesIkve1(xml)  && checkTunnel0(xml)  && !checkValuesIkve2(xml)) {
      response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
      deleteVpnIkev1InterfaceTunnel(primayWanList);
      }
      if (checkValuesIkve2(xml)) {
      if (checkValuesDMVPN(xml)) {
        noAuthPolicy = "";
      }
      arr.push({
        name: "noAuthPolicy",
        value: noAuthPolicy
      });
      response = deviceCommunicator.configureCommandsFromTemplate("deleteVpnWhiteListing.txt", whiteListArr, false);
      deleteVpnIkev2InterfaceTunnel(primayWanList);
      }
      updateHubIkev1Data(xml);
      var oldEigrp=findOldEigrp(xml);
      /* console.log(oldEigrp); */

      if (checkValuesIkve1(xml)) {
      arr.push({
          name: "eigrp",
          value: oldEigrp
        });
      response = deviceCommunicator.configureCommandsFromTemplate2("removeSpokes.txt", arr, false);
      arr.length=0;
        }

       else  if (checkIkev2(xml)){
        arr.push({
          name: "eigrp",
          value: oldEigrp
        });
        response = deviceCommunicator.configureCommandsFromTemplate2("removeSpokesIkev2.txt", arr, false);
        arr.length=0;
        }
    dmvpnHubflag=false;
    hubConfigured="";
    formDmvpnHubEmpty();
    }catch (error) {
    console.log(error);
    //$.unblockUI();
    }
    deviceCommunicator.doWriteMemory();
    for (j = 0; j < 3; j++) {
    $('#wizardDmvpnHub').steps("previous");
    }
    vpnOverallLoading();
    //$.unblockUI();
    e.preventDefault();
    vpnConfigPresent = false;
   }, 1000);
}

  function isSameValue(ip1,ip2)
  {
    var isValueSame = false;
    if (ip1!=null && ip2!=null && ip1 != undefined && ip2 !=undefined && ip1!="" && ip2!=null) {
      if (ip1.trim() == ip2.trim()) {
          $("#remoteAddressPoolFrom").addClass("error");
          $("#remoteAddressPoolTo").addClass("error");
        isValueSame=true;
      } else
      {
          $("#remoteAddressPoolFrom").removeClass("error");
          $("#remoteAddressPoolTo").removeClass("error");
          isValueSame = false;
      }
    }
    return isValueSame;
  }

  function remoteAccessPoolValidation(ip1,ip2) {
    //consoleLogMethodDetailsStart("configureVPN.js", "remoteAccessPoolValidation()");
    if (ip1 != null && ip1 != undefined && ip1!="" && ip2 != null && ip2 != undefined && ip2!="" ) {
      var ip1Octets = ip1.split(".");
      var ip2Octets = ip2.split(".");
      if (ip1Octets.length == 4 && ip2Octets.length == 4)
      {
        if (parseInt(ip1Octets[0])!= parseInt(ip2Octets[0]) || parseInt(ip1Octets[1])!= parseInt(ip2Octets[1]) || parseInt(ip1Octets[2])!= parseInt(ip2Octets[2])) {
          $("#remoteAddressPoolFrom").addClass("error");
          $("#remoteAddressPoolTo").addClass("error");
          return true;
        } else {
          $("#remoteAddressPoolFrom").removeClass("error");
          $("#remoteAddressPoolTo").removeClass("error");
          return false;
        }
      }
    } else {
      return false;
    }
    return false;
    //consoleLogMethodDetailsEnd("configureVPN.js", "remoteAccessPoolValidation()");
  }

  function remoteAccessFromToValidation(ip1,ip2) {
    //consoleLogMethodDetailsStart("configureVPN.js", "remoteAccessFromToValidation()");
    if (ip1 != null && ip1 != undefined && ip1!="" && ip2 != null && ip2 != undefined && ip2!="" ) {
      var ip1Octets = ip1.split(".");
      var ip2Octets = ip2.split(".");
      if (ip1Octets.length == 4 && ip2Octets.length == 4 &&
	  parseInt(ip1Octets[0])== parseInt(ip2Octets[0]) && parseInt(ip1Octets[1])== parseInt(ip2Octets[1]) && parseInt(ip1Octets[2])== parseInt(ip2Octets[2]))
      {
        if (parseInt(ip1Octets[3])> parseInt(ip2Octets[3])) {
          $("#remoteAddressPoolFrom").addClass("error");
          $("#remoteAddressPoolTo").addClass("error");
          return true;
        } else {
          $("#remoteAddressPoolFrom").removeClass("error");
          $("#remoteAddressPoolTo").removeClass("error");
          return false;
        }
      }
    } else {
      return false;
    }
    return false;
    //consoleLogMethodDetailsEnd("configureVPN.js", "remoteAccessFromToValidation()");
  }

  function isDistintIPAddrDmvpnSpoke(){
    var isDistinctIPAddress = true;
    var ip1SpokeTunnelIP = $("#tunnelIp").val();
    var ip2SpokeBackupTunnelIP = $("#backupTunnelIP").val();
    var ip3HubTransportIP = $("#transportAddr").val();
    var ip4HubRemoteTunnelIP = $("#tunnelAddr").val();

    if (ip1SpokeTunnelIP != null && ip1SpokeTunnelIP != undefined && ip1SpokeTunnelIP != "") {
      if (ip1SpokeTunnelIP == ip2SpokeBackupTunnelIP) {
        $("#tunnelIp").addClass("error");
        $("#backupTunnelIP").addClass("error");
        isDistinctIPAddress = false;
      } else {
        $("#tunnelIp").removeClass("error");
        $("#backupTunnelIP").removeClass("error");
        isDistinctIPAddress = true;
      }
      if (ip1SpokeTunnelIP == ip3HubTransportIP) {
        $("#tunnelIp").addClass("error");
        $("#transportAddr").addClass("error");
        isDistinctIPAddress = false;
      } else {
        $("#tunnelIp").removeClass("error");
        $("#transportAddr").removeClass("error");
        isDistinctIPAddress = true;
      }
      if (ip1SpokeTunnelIP == ip4HubRemoteTunnelIP) {
        $("#tunnelIp").addClass("error");
        $("#tunnelAddr").addClass("error");
        isDistinctIPAddress = false;
      } else {
        $("#tunnelIp").removeClass("error");
        $("#tunnelAddr").removeClass("error");
        isDistinctIPAddress = true;
      }
    }
    if (ip2SpokeBackupTunnelIP != null && ip2SpokeBackupTunnelIP != undefined && ip2SpokeBackupTunnelIP != "") {
      if (ip2SpokeBackupTunnelIP == ip3HubTransportIP) {
        $("#backupTunnelIP").addClass("error");
        $("#transportAddr").addClass("error");
        isDistinctIPAddress = false;
      } else {
        $("#backupTunnelIP").removeClass("error");
        $("#transportAddr").removeClass("error");
        isDistinctIPAddress = true;
      }
      if (ip2SpokeBackupTunnelIP == ip4HubRemoteTunnelIP) {
        $("#backupTunnelIP").addClass("error");
        $("#tunnelAddr").addClass("error");
        isDistinctIPAddress = false;
      } else {
        $("#backupTunnelIP").removeClass("error");
        $("#tunnelAddr").removeClass("error");
        isDistinctIPAddress = true;
      }
    }
    if (ip3HubTransportIP != null && ip3HubTransportIP != undefined && ip3HubTransportIP != "") {
      if (ip3HubTransportIP == ip4HubRemoteTunnelIP) {
        $("#transportAddr").addClass("error");
        $("#tunnelAddr").addClass("error");
        isDistinctIPAddress = false;
      } else {
        $("#transportAddr").removeClass("error");
        $("#tunnelAddr").removeClass("error");
        isDistinctIPAddress = true;
      }
    }

    if ($("#tunnelIp").hasClass("error") ||
        $("#backupTunnelIP").hasClass("error") ||
        $("#transportAddr").hasClass("error") ||
        $("#tunnelAddr").hasClass("error")
        ) {
      isDistinctIPAddress = false;
    } else {
      isDistinctIPAddress = true;
    }

    return isDistinctIPAddress;
  }

  function isInSameSubnet(ip1, ip2, ip3, mask) {
    //consoleLogMethodDetailsStart("configureVPN.js", "isInSameSubnet()");
    ip1Octets = ip1.split(".");
    ip2Octets = ip2.split(".");
    ip3Octets = ip3.split(".");
    subnetOctets = mask.split(".");
    primayWanList = configureFirewall.getInterfacesInZone("WAN");
    for (var i = 0; i < 4; i++) {
      if (primayWanList.length < 2) {
        //enableVPN replaced with enableIPSecVPN
        if ($("#enableIPSecVPN").is(':checked') || $("#enableDmvpnHub").is(':checked')) {
          return true;
        }
        else if ((parseInt(ip1Octets[i]) & parseInt(subnetOctets[i])) != (parseInt(ip2Octets[i]) & parseInt(subnetOctets[i]))) {
          $("#tunnelAddr").addClass("error");
          $("#tunnelMask").addClass("error");
          return false;
        }
      } else {
        //enableVPN replaced with enableIPSecVPN
        if ($("#enableIPSecVPN").is(':checked')) {
          if ((parseInt(ip1Octets[i]) & parseInt(subnetOctets[i])) != (parseInt(ip2Octets[i]) & parseInt(subnetOctets[i]))) {
            $("#s2sTunnelIP").addClass("error");
            $("#s2sBackupIP").addClass("error");
            $("#s2sTunnelMask").addClass("error");
            return false;
          }
        } else if ($("#enableDmvpnHub").is(':checked')) {
          if ((parseInt(ip1Octets[i]) & parseInt(subnetOctets[i])) != (parseInt(ip2Octets[i]) & parseInt(subnetOctets[i]))) {
            $("#dmvpnTunnelIp").addClass("error");
            $("#hubBackupIP").addClass("error");
            $("#dmvpnHubTunnelMask").addClass("error");
            return false;
          }
        } else if ((parseInt(ip1Octets[i]) & parseInt(subnetOctets[i])) != (parseInt(ip2Octets[i]) & parseInt(subnetOctets[i]))) {
          $("#backupTunnelIP").addClass("error");
          $("#tunnelAddr").addClass("error");
          $("#tunnelMask").addClass("error");
          return false;
        } else if ((parseInt(ip1Octets[i]) & parseInt(subnetOctets[i])) != (parseInt(ip3Octets[i]) & parseInt(subnetOctets[i]))) {
          $("#backupTunnelIP").addClass("error");
          $("#tunnelAddr").addClass("error");
          $("#tunnelMask").addClass("error");
          return false;
        } else if ((parseInt(ip2Octets[i]) & parseInt(subnetOctets[i])) != (parseInt(ip3Octets[i]) & parseInt(subnetOctets[i]))) {
          $("#backupTunnelIP").addClass("error");
          $("#tunnelAddr").addClass("error");
          $("#tunnelMask").addClass("error");
          return false;
        }
      }
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "isInSameSubnet()");
    return true;
  }
//  var tunnelCounter = 2;
  /* function loadTunnel(status, tunnel) {
    //////consoleLogMethodDetailsStart("configureVPN.js", "loadTunnel()");

    $(".alive").hide();
    $(".idle").hide();
    $(".down").hide();
    if (tunnel.indexOf("Tunnel") == -1) {
      $(".flat a:nth-child(2)").removeClass("active");
      $(".flat a:nth-child(3)").removeClass("active");
      $(".flat a:nth-child(4)").removeClass("active");
      $(".flat a:nth-child(2)").removeClass("activeDown");
      $(".flat a:nth-child(3)").removeClass("activeDown");
      $(".flat a:nth-child(4)").removeClass("activeDown");
      $(".alive").hide();
      $(".down").hide();
      $(".idle").show();
      $(".flat a:nth-child(2)").addClass("activeIdle");
      $(".flat a:nth-child(3)").addClass("activeIdle");
      $(".flat a:nth-child(4)").addClass("activeIdle");
    } else {
      $(".flat a:nth-child(2)").removeClass("activeIdle");
      $(".flat a:nth-child(3)").removeClass("activeIdle");
      $(".flat a:nth-child(4)").removeClass("activeIdle");
      $(".flat a:nth-child(2)").removeClass("activeDown");
      $(".flat a:nth-child(3)").removeClass("activeDown");
      $(".flat a:nth-child(4)").removeClass("activeDown");
      $(".idle").hide();
      $(".down").hide();
      $(".alive").show();
      if (status.indexOf("DOWN-NEGOTIATING") != -1) {
        $(".flat a:nth-child(" + tunnelCounter + ")").addClass("active");
        tunnelCounter += 1;
      }
      else if (status.indexOf("UP") != -1 || status.indexOf("ACTIVE") != -1) {
        $(".flat a:nth-child(" + tunnelCounter + ")").addClass("active");
        tunnelCounter += 1;
      }
      else {
        $(".flat a:nth-child(2)").removeClass("activeIdle");
        $(".flat a:nth-child(3)").removeClass("activeIdle");
        $(".flat a:nth-child(4)").removeClass("activeIdle");
        $(".flat a:nth-child(2)").removeClass("active");
        $(".flat a:nth-child(3)").removeClass("active");
        $(".flat a:nth-child(4)").removeClass("active");
        $(".alive").hide();
        $(".idle").hide();
        $(".down").show();
        $(".flat a:nth-child(2)").addClass("activeDown");
        $(".flat a:nth-child(3)").addClass("activeDown");
        $(".flat a:nth-child(4)").addClass("activeDown");
      }
    }
    if (tunnelCounter == 6) {
      if (status.indexOf("UP") != -1 || status.indexOf("ACTIVE") != -1) {
        tunnelCounter = 2;
        return false;
      } else {
        $(".flat a").removeClass("active");
        tunnelCounter = 2;
      }
    }
    //////consoleLogMethodDetailsEnd("configureVPN.js", "loadTunnel()");
  } */

    function defPolicyCheck(xml){
      /* var policyMapArr = []; */
      var defPolicy = false;
      var resp = deviceCommunicator.getExecCmdOutput("show running-config policy-map");
      policyMapList = resp.split('policy-map');
      for (var i = 1; i < policyMapList.length; i++) {
        var policyMapName, className = [];
        var policyLines = policyMapList[i].split("\n");

        $.each(policyLines, function(index, value) {
        var splitPolicyLines = value.trim().split(/\s+/);
        if (index == 0) {
          policyMapName = splitPolicyLines[splitPolicyLines.length - 1];
        }
        if (value.indexOf("class type") > -1) {
          if (splitPolicyLines[splitPolicyLines.length - 1].trim().toUpperCase() != "INTERNAL_DOMAIN_FILTER") {
            className.push({name: policyLines[index + 1].trim(), value: splitPolicyLines[splitPolicyLines.length - 1]});
          }
          if((policyMapName == "LAN-WAN-POLICY") && (className[className.length-1].value.toLowerCase() == "web" || className[className.length-1].value.toLowerCase() == "others")){
            defPolicy = true;
          }
        }
        });
      }
      return defPolicy;
    }

  function addSecondryField() {
    //consoleLogMethodDetailsStart("configureVPN.js", "addSecondryField()");
    $("#backupIP").hide();
    $("#dmvpnbackupIP").hide();
    $("#hubBackupIPAddr").hide();
    var wanList = configureFirewall.getInterfacesInZone("WAN");
    if (wanList.length >= 2) {
      $("#backupIP").show();
      $("#dmvpnbackupIP").show();
      $("#hubBackupIPAddr").show();
      $(".wizard .content").css({'min-height': '+=40px'});
    } else if(wanList.length <= 1)
    {
      $("#backupIP").hide();
      $("#dmvpnbackupIP").hide();
      $("#hubBackupIPAddr").hide();
    }
    //consoleLogMethodDetailsEnd("configureVPN.js", "addSecondryField()");

  }

  function toggleEnableDisableVpnConfigurationList(enableFlag) {
    if (!enableFlag) {
      $('#vpnConfigSelect').prop('title', $.i18n.prop("removeConfigurationToEnable"));
      $('#vpnType').attr('disabled', true);
    } else {
      $('#vpnConfigSelect').prop('title', $.i18n.prop("selectVpnTypeToConfigure"));
      $('#vpnType').attr('disabled', false);
    }
  }

  function removeRemoteAccessVPN(e) {
      blockPage("Applying");
      setTimeout(function() {
        var response;
        var primayWanList = configureFirewall.getInterfacesInZone("WAN");
        var selectedInterface;
        var paramArr = [];
        var remoteAccessVpnName = "";
        var remoteAddressPoolFrom = "", remoteAddressPoolTo = "";
        var preSharedKey = "";
        var reverseRoute = "";
        remoteAccessVpnName = $("#remoteTunnelName").val();
        remoteAddressPoolFrom = $("#remoteAddressPoolFrom").val();
        remoteAddressPoolTo = $("#remoteAddressPoolTo").val();
        preSharedKey = $("#preSharedKeyRemote").val();
        selectedInterface = $("#remoteConfigInterface").val();
        //if ($("#remoteVpnReverseRouteCheck").is(':checked')){ reverseRoute = "crypto dynamic-map DynMap"+remoteAccessVpnName+" 1 set reverse-route"; }

        try {
          if (primayWanList!= undefined && primayWanList.length >0) {
            paramArr.push({
                name: "poolName",
                value: remoteAccessVpnName
              }, {
                name: "interfaceName",
                value: selectedInterface
              }, {
                name: "remoteAddressPoolFrom",
                value: remoteAddressPoolFrom
              }, {
                name: "remoteAddressPoolTo",
                value: remoteAddressPoolTo
              }, {
                name: "preSharedKey",
                value: preSharedKey
              }
            );

            if (remoteAccessVpnConfigured) {
              response = deviceCommunicator.configureCommandsFromTemplate2("removeRemoteAccessVPN.txt", paramArr, false);
            }
          }
        } catch(e){
          console.log(e);

        }
	deviceCommunicator.doWriteMemory();
	remoteAccessVpnConfigured = false;

        vpnOverallLoading();
        e.preventDefault();
      }, 1000);
    vpnConfigPresent = false;
    return false;
  }


  function remoteAccessVpnOnFinish(e) {
    if(($('#utmForm').valid())){
      blockPage("Applying");
      setTimeout(function() {
        var response;
        var primayWanList = configureFirewall.getInterfacesInZone("WAN");
        var selectedInterface;
        var paramArr = [];
        var remoteAccessVpnName = "";
        var remoteAddressPoolFrom = "", remoteAddressPoolTo = "";
        var preSharedKey = "";
        var reverseRoute = "";
        remoteAccessVpnName = $("#remoteTunnelName").val();
        remoteAddressPoolFrom = $("#remoteAddressPoolFrom").val();
        remoteAddressPoolTo = $("#remoteAddressPoolTo").val();
        preSharedKey = $("#preSharedKeyRemote").val();
        selectedInterface = $("#remoteConfigInterface").val();
        //if ($("#remoteVpnReverseRouteCheck").is(':checked')){ reverseRoute = "crypto dynamic-map DynMap"+remoteAccessVpnName+" 1 set reverse-route"; }

        try {
          if (primayWanList!= undefined && primayWanList.length >0) {
            paramArr.push({
                name: "poolName",
                value: remoteAccessVpnName
              }, {
                name: "interfaceName",
                value: selectedInterface
              }, {
                name: "remoteAddressPoolFrom",
                value: remoteAddressPoolFrom
              }, {
                name: "remoteAddressPoolTo",
                value: remoteAddressPoolTo
              }, {
                name: "preSharedKey",
                value: preSharedKey
              }
            );

            if (remoteAccessVpnConfigured) {
              try{
              response = deviceCommunicator.configureCommandsFromTemplate2("removeRemoteAccessVPN.txt", paramArr, false);
              } catch(e){
                console.log(e);
              }
            }
            response = deviceCommunicator.configureCommandsFromTemplate2("remoteAccessVPNConfig.txt", paramArr, false);
            remoteAccessVpnConfigured = true;
          }
        } catch(e){
          console.log(e);
          $.unblockUI();
        }
	deviceCommunicator.doWriteMemory();
        vpnOverallLoading();
        $("#enableRemAccess").attr('checked', 'checked');
        for (j = 0; j < 3; j++) {
          $('#wizardRemoteAccess').steps("previous");
        }
        e.preventDefault();
        $.unblockUI();
      }, 1000);
    }
    vpnConfigPresent = true;
    return false;
  }

  //consoleLog("VPN loading completed");

  return {
    confVpnLoading: confVpnLoading,
    vpnOverallLoading: vpnOverallLoading,
    onFinish: onFinish, remoteSubnetValidDmvpn: remoteSubnetValidDmvpn,
    isInSameSubnet: isInSameSubnet,
    isDistintIPAddrDmvpnSpoke:isDistintIPAddrDmvpnSpoke,
    isSameValue: isSameValue,
    remoteAccessPoolValidation:remoteAccessPoolValidation,
    remoteAccessFromToValidation:remoteAccessFromToValidation,
    checkValuesIkve1: checkValuesIkve1,
    checkValuesIkve2: checkValuesIkve2,
    getvpnInterfaceTunnel: getvpnInterfaceTunnel,
    addVpnIkev1InterfaceTunnel: addVpnIkev1InterfaceTunnel,
    deleteVpnIkev2InterfaceTunnel: deleteVpnIkev2InterfaceTunnel,
    deleteVpnIkev1InterfaceTunnel: deleteVpnIkev1InterfaceTunnel,
    addVpnIkev2InterfaceTunnel: addVpnIkev2InterfaceTunnel,
    addDmVpnTunnelInterface: addDmVpnTunnelInterface,
    checkValuesDMVPN: checkValuesDMVPN,
    getDmVpnInterfaceDetails: getDmVpnInterfaceDetails,
    getWildCardMask:getWildCardMask,
  onFinishDmvpnHub:onFinishDmvpnHub,
  ipsecOnFinish:ipsecOnFinish,
  remoteAccessVpnOnFinish:remoteAccessVpnOnFinish
  };
}());var configureWizard = (function() {
  /***********************To do Internationalization***********************************/
  var showIpInt = "";
var avcFlag=false;
  var interfaceDSLArray = [], dslFoundArray = [], platformTypeCheck = "",
  interfaceotherArray = [], switchPortArray = [], onlySwitchPort= [], modemISRData = [], controllerArray = [], cellularInterface = [], serialInterface = [],
    firmwareList = [], primaryCall = 0, backupCall = 0, primaryCallController = 0, backupCallController = 0, simsList = [],bridgeInterface="";
  //var modeprimselect = "", modebackselect = "", callchangeprime = 0, callbackup = 1;
  var ntpArr=['pool.ntp.org','asia.pool.ntp.org','europe.pool.ntp.org','north-america.pool.ntp.org','oceania.pool.ntp.org','south-america.pool.ntp.org'];

  function loadAndDisplayLanguages() {

    languageName();
    var hpDnsTitledhcpDnsHname = $.i18n.prop("hpDnsTitle");
    var srSR = $.i18n.prop("SR");
    var cnsCNS = $.i18n.prop("CNS");
    var troubleshootTroubleshoot = $.i18n.prop("Troubleshoot");

    $("#dhcpDnsHname").text(hpDnsTitledhcpDnsHname);
    $("#SR").text(srSR);
    $("#CNS").text(cnsCNS);
    $("#Troubleshoot").text(troubleshootTroubleshoot);

    var languageLocale = $.i18n.prop("langwage");
    if (languageLocale === "ja") {
      var dhcpdnsArr = hpDnsTitledhcpDnsHname.split(" ");
      $("#dhcpDnsHname").text("DHCP / DNS /");
      $("#dhcpDnsHname1").text(dhcpdnsArr[4]);

      var srArr = srSR.split(" ");
      $("#SR").text(srArr[0]);
      $("#SR1").text(srArr[1]);

      var cnsArr = cnsCNS.split(" ");
      $("#CNS").text(cnsArr[0]);
      $("#CNS1").text(cnsArr[1]);

      var trblshtArr = troubleshootTroubleshoot.split(" ");
      $("#Troubleshoot").text(trblshtArr[0]);
      $("#Troubleshoot1").text(trblshtArr[1]);
    }


    $("#ifcs").text($.i18n.prop("ifcs"));
    $("#HDname").text($.i18n.prop("HDname"));
    $("#UserMngmt").text($.i18n.prop("UserMngmt"));
    $("#DB").text($.i18n.prop("DB"));
    $("#ConfigCLI").text($.i18n.prop("ConfigCLI"));
    $("#Wireless").text($.i18n.prop("Wireless"));
    $("#framesClickForHelp").text($.i18n.prop("clickForHelpStr"));
    $("#framesViewQuickDemo").text($.i18n.prop("viewQuickDemoStr"));

    //New Added
    $("#wizardTitle").text($.i18n.prop("wizardTitle"));
    $("#wizardHeaderTitle").text($.i18n.prop("wizardHeaderTitle"));
    $("#wizardBegin").text($.i18n.prop("wizardBegin"));
    $("#wizardListOne").text($.i18n.prop("wizardListOne"));
    $("#checkList").text($.i18n.prop("checkList"));
    $("#wizardListTwo").text($.i18n.prop("wizardListTwo"));
    $("#wizardListThree").text($.i18n.prop("wizardListThree"));
    $("#wizardListFour").text($.i18n.prop("wizardListFour"));
    $("#wizardListFive").text($.i18n.prop("wizardListFive"));
    $("#wizardListSix").text($.i18n.prop("wizardListSix"));
    $("#wizardListSeven").text($.i18n.prop("wizardListSeven"));
    $("#wizardGetStart").text($.i18n.prop("wizardGetStart"));
    $("#wizardRouterIP").text($.i18n.prop("wizardRouterIP"));
    $("#wizardRouterIPOne").text($.i18n.prop("wizardRouterIPOne"));
    $("#wizardRouterIPTwo").text($.i18n.prop("wizardRouterIPTwo"));
    $("#wizardRouterIPThree").text($.i18n.prop("wizardRouterIPThree"));

    $("#wizardDNS").text($.i18n.prop("wizardDNS") + ':');
    $("#wizardDNSOne").text($.i18n.prop("wizardDNSOne"));
    $("#wizardPPPoE").text($.i18n.prop("wizardPPPoE"));
    $("#wizardPPPoEOne").text($.i18n.prop("wizardPPPoEOne"));
    $('#cellularDnsLegend').text($.i18n.prop("dnsLegend") + " " + $.i18n.prop("csConfig") + " / " + $.i18n.prop("natMsg"));
    $('#cellularDnsLegendBackup').text($.i18n.prop("natMsg"));

    $("#wizardBasic").text($.i18n.prop("wizardBasic"));
    $("#wizardPrimarWAN").text($.i18n.prop("wizardPrimarWAN"));
    $(".wizardBackupWAN").text($.i18n.prop("wizardBackupWAN"));
    $("#wizardSecurity").text($.i18n.prop("securityAndAVC"));
    $("#wizardSecurity").text($.i18n.prop("securityAndAVCFails"));

    $("#wizardConfirmApply").text($.i18n.prop("wizardConfirmApply"));
    $('#autoFirmwareLabel').text($.i18n.prop("autoFirmware"));
    $('#autoFirmwareLabelBackup').text($.i18n.prop("autoFirmware"));
    $('#enableAutoChange').text($.i18n.prop("enableAutoFirmware"));
    $('#enableAutoChangeBackup').text($.i18n.prop("enableAutoFirmware"));

    $("#wizardSmartSet").text($.i18n.prop("wizardSmartSet"));
    $("#wizardBasicSetting").text($.i18n.prop("wizardBasicSetting"));
    $("#wizardRouterName").text($.i18n.prop("wizardRouterName"));
    $("#wizbasicrname").attr("placeholder", $.i18n.prop("wizbasicrname"));
    $("#wizardDomainName").text($.i18n.prop("wizardDomainName"));
    $(".next").val($.i18n.prop("wizardBtnNext"));
    $(".cancel").text($.i18n.prop("cancel"));
    $("#wizbasicdname").attr("placeholder", $.i18n.prop("wizbasicdname"));
    $("#wizardTimeZone").text($.i18n.prop("wizardTimeZone"));
    $("#wizardGetDNS").text($.i18n.prop("wizardGetDNS"));
    $("#wizardGetDNSCellular").text($.i18n.prop("wizardGetDNS"));

    $("#wizardPrimaryDNS").text($.i18n.prop("wizardPrimaryDNS"));
    $("#wizbasicprimdns").attr("placeholder", $.i18n.prop("wizardPrimaryDNS"));
    $("#wizardPrimaryDNSCellular").text($.i18n.prop("wizardPrimaryDNS"));
    $("#wizbasicprimdnscellular").attr("placeholder", $.i18n.prop("wizardPrimaryDNS"));
    $("#wizardSecondaryDNS").text($.i18n.prop("wizardSecondaryDNS"));
    $("#wizardSecondaryDNScellular").text($.i18n.prop("wizardSecondaryDNS"));
    $("#wizardHelpTips").text($.i18n.prop("wizardHelpTips"));
    $("#wizardListMessOne").text($.i18n.prop("wizardListMessOne"));
    $("#wizardListMessOneTwo").text($.i18n.prop("wizardListMessOneTwo"));
    $("#wizardListMessTwo").text($.i18n.prop("wizardListMessTwo"));
    $("#wizardListMessThree").text($.i18n.prop("wizardListMessThree"));
    $("#wizardBtnNext").text($.i18n.prop("wizardBtnNext"));
    $("#wizardWANConfig").text($.i18n.prop("wizardWANConfig"));
    $("#wizardWANConnection").text($.i18n.prop("wizardWANConnection"));
    $(".wizardController").text($.i18n.prop("controller"));
    $("#controllerBackup option:nth-child(1)").text($.i18n.prop("selectController"));
    $("#controllerName option:nth-child(1)").text($.i18n.prop("selectController"));
    $(".wizardMode").text($.i18n.prop("mode"));
    $(".confController").text($.i18n.prop("wizConfig") + " " + $.i18n.prop("wizController"));
    $(".confController").attr("title", $.i18n.prop("wizConfig") + " " + $.i18n.prop("wizController") + " " + $.i18n.prop("wizlistinterface"));


    $("#modeSelection option:nth-child(1)").text($.i18n.prop("selectMode"));
    $("#modeBackup option:nth-child(1)").text($.i18n.prop("selectMode"));
    $(".wizardInterface").text($.i18n.prop("wizardInterface"));
    $(".wizardEnablePer").text($.i18n.prop("wizardEnablePer") + ':');
    $(".yes").text($.i18n.prop("yes"));
    $(".no").text($.i18n.prop("no"));
    $("#wizardGetAutoISP").text($.i18n.prop("wizardGetAutoISP"));
    $(".wizardIPAddress").text($.i18n.prop("wizardIPAddress"));
    $("#wizardIPAndDNSAddress").text($.i18n.prop("wizardIPAndDNSAddress"));
    $(".wizardSubNetMask").text($.i18n.prop("wizardSubNetMask"));
    $("#wizprimaryipaddressbackup").attr("placeholder", $.i18n.prop("wizardIPAddress"));
    $("#wizprimarysubnetbackup").attr("placeholder", $.i18n.prop("wizardSubNetMask"));
    $("#wizardEnableNAT").text($.i18n.prop("wizardEnableNAT"));
    $(".wizardType").text($.i18n.prop("wizardType"));
    $(".wizardEnableIPv6").text($.i18n.prop("wizardEnableIPv6"));
    $(".wizardPrefix").text($.i18n.prop("wizardPrefix"));
    $(".wizardPrefixMask").text($.i18n.prop("wizardPrefixMask"));
    $(".wizardAct").text($.i18n.prop("wizardAct"));
    $(".wizardClock").text($.i18n.prop("wizardClock"));
    $("#decClockRateBackup option:nth-child(1)").text($.i18n.prop("selectClockRate"));
    $(".selectClockRate option:nth-child(1)").text($.i18n.prop("selectClockRate"));
    $(".wizardSerialConfig").text($.i18n.prop("wizardSerialConfig"));
    $(".wizardSynchro").text($.i18n.prop("synchronous"));
    $(".wizardAsynchro").text($.i18n.prop("asynchronous"));
    $(".wizardConnectAuthenti").text($.i18n.prop("ipv4Label")+" "+$.i18n.prop("wizardConnectAuthenti"));
    $(".wizardConnectAuthentiIpv6").text($.i18n.prop("ipv6Label")+" "+$.i18n.prop("wizardConnectAuthenti"));
    $("#wizardAct").text($.i18n.prop("wizardAct"));
    $("#wizardSyncMode").text($.i18n.prop("wizardSyncMode") + ':');
    $("#wizardSynchro").text($.i18n.prop("synchronous"));
    $("#encRow").text($.i18n.prop("encRow"));
    //$(".wizardSlip").text($.i18n.prop("wizardSlip"));
    $(".showAdv").text($.i18n.prop("showAdv"));
    $(".hideAdv").text($.i18n.prop("hideAdv"));
    $("#wizardencapid").text($.i18n.prop("encapid"));
    $("#wizardencapid").attr("placeholder", $.i18n.prop("encapid"));
    $("#encRowBackup").text($.i18n.prop("encRow"));
    $(".wizardMTUSize").text($.i18n.prop("wizardMTUSize"));
    $(".wizardMSSSize").text($.i18n.prop("wizardMSSSize"));
    $("#wizardModemSetting").text($.i18n.prop("wizardModemSetting"));
    $("#wizardModemFirm").text($.i18n.prop("wizardModemFirm"));
    $("#wizardActivModem").text($.i18n.prop("wizardActivateModem"));
    $(".wizardMobileMDN").text($.i18n.prop("wizardMobileMDN") + ":");
    $(".wizardMobileMSID").text($.i18n.prop("wizardMobileMSID") + ":");
    $(".wizardMobileMSL").text($.i18n.prop("wizardMobileMSL") + ":");
    $(".wizardNoteMDN").text($.i18n.prop("wizardNoteMDN"));
    $(".wizardPhoneNo").text($.i18n.prop("wizardPhoneNo"));
    $(".wizardNote").text($.i18n.prop("wizardNote"));
    $("#strApn").text($.i18n.prop("strApna") + ":");
    $("#apn").attr("placeholder", $.i18n.prop("strApna"));
    $("#strPDPType").text($.i18n.prop("strApnPDPType") + ":");
    $("#UP").text($.i18n.prop("UPWizard"));
    $("#strApnAuthentication").text($.i18n.prop("strApnAuthentication") + ":");
    $("#strApnUsername").text($.i18n.prop("username") + ":");
    $("#strApnPassword").text($.i18n.prop("password") + ":");
    $("#wizardSelectSIM").text($.i18n.prop("wizardSelectSIM") + ":");
    $("#wizardSelectSIMTechnology").text($.i18n.prop("wizardSelectSIMTechnology"));
    $("#wizardSelectSIM1Technology").text($.i18n.prop("wizardSelectSIM1Technology"));
    $("#simOneTechnology option:nth-child(1)").text($.i18n.prop("select"));

    $(".wizardHelpTips").text($.i18n.prop("wizardHelpTips"));
    $(".wizardHelpListOneDns").text($.i18n.prop("wizardHelpListOneDNS"));
    $(".wizardHelpListOne").text($.i18n.prop("wizardHelpListOne"));
    $(".wizardHelpListTwo").text($.i18n.prop("wizardHelpListTwo"));
    $(".wizardHelpListThree").text($.i18n.prop("wizardHelpListThree"));
    $(".wizardHelpListFour").text($.i18n.prop("wizardHelpListFour") + " " + $.i18n.prop("enableDNSProxyWarning"));
    $(".wizardHelpListFive").text($.i18n.prop("wizardHelpListFive"));
    $(".wizardCancel").text($.i18n.prop("cancel"));
    $("#wizardBackupWAN").text($.i18n.prop("wizardBackupWAN"));
    $("#wizardEnableBackupWAN").text($.i18n.prop("wizardEnableBackupWAN"));
    $("#wizardWANConnectionType").text($.i18n.prop("wizardWANConnectionType"));
    $(".wizardSubInterface").text($.i18n.prop("wizardSubInterface"));
    $("#interfaceBackup option:nth-child(1)").text($.i18n.prop("selectInterface"));

    $("#ipv6Selectbackup option[value='staticip']").text($.i18n.prop("staticip"));
    $("#ipv6Selectbackup option[value='prefixFromProvider']").text($.i18n.prop("prefixFromProvider"));
    $("#ipv6Selectbackup option[value='autoconfig']").text($.i18n.prop("autoconfig"));

    $(".wizardYes").text($.i18n.prop("yes"));
    $(".wizardNo").text($.i18n.prop("no"));
    $("#devicenotsupportbackup").text($.i18n.prop("devicenotsupportbackup"));
    $("#wizardGetISP").text($.i18n.prop("wizardGetAutoISP"));
    $("#enableNAT").text($.i18n.prop("wizardEnableNAT"));
    $("#wizardEnableIP6 ").text($.i18n.prop("wizardEnableIP6 "));
    $(".wizardDCE").text($.i18n.prop("wizardDCE"));
    $(".wizardEnablePPPoE").text($.i18n.prop("wizardEnablePPPoE"));
    $(".wizardUserName").text($.i18n.prop("username"));
    $(".wizardPassword").text($.i18n.prop("password"));
    $(".wizardConfPass").text($.i18n.prop("ConfirmPswd"));
    $("#Authtype").text($.i18n.prop("wizardType") + ":");
    $(".staticip").text($.i18n.prop("staticIp"));
    $(".prefixFromProvider").text($.i18n.prop("prefixFromProvider"));
    $(".autoconfig").text($.i18n.prop("autoconfig"));
    $("#lanConfig").text($.i18n.prop("lanConfig"));
    $("#lanConfigInfo").text($.i18n.prop("lanConfigInfo"));
    $(".useCCPPool").text($.i18n.prop("useCCPPool"));
    $("#lanNetwork").text($.i18n.prop("lanNetwork"));
    $("#availableIpSize").text($.i18n.prop("availableIpSize"));
    $("#lanInterface").text($.i18n.prop("lanInterface"));
    $("#lanInterface1").text($.i18n.prop("lanInterface"));
    $("#hostRouter").text($.i18n.prop("hostRouter"));
    $("#wizardLanTipOne").text($.i18n.prop("wizardLanTipOne"));
    $("#wizardLanTipTwo").text($.i18n.prop("wizardLanTipTwo"));
    $("#headTextSecurity").text($.i18n.prop("headTextSecurity"));
    $("#enableSecurityFeature").text($.i18n.prop("enableSecurityFeature"));
    $("#routerCapable").text($.i18n.prop("routerCapable"));
    $("#createPolicy").text($.i18n.prop("createPolicy"));
    $("#ciscoRecomSettingsoptionText").text($.i18n.prop("ciscoRecomSettings"));

    $("#wizardSecurityTipOne").text($.i18n.prop("wizardSecurityTipOne"));
    $("#wizardSecurityTipTwo").text($.i18n.prop("wizardSecurityTipTwo"));
    $("#wizardSecurityTipThree").text($.i18n.prop("wizardSecurityTipThree"));

    $("#wizardSummaryTitle").text($.i18n.prop("wizardSummaryTitle"));
    $("#basichead").text($.i18n.prop("basichead"));
    $("#primarywanhead").text($.i18n.prop("primarywanhead"));
    $("#backupwanhead").text($.i18n.prop("backupwanhead"));
    $("#securityhead").text($.i18n.prop("securityAndAVC"));
    $("#previewClip").text($.i18n.prop("previewClip"));
    $("#wizardAlertMessageSubmit").text($.i18n.prop("wizardAlertMessageSubmit"));
    $("#wizardAlertMessageCancel").text($.i18n.prop("wizardAlertMessageCancel"));
    $("#wizardAlertMessage").text($.i18n.prop("wizardAlertMessage"));
    $(".previous").val($.i18n.prop("wizardBtnPrev"));
    $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));
    $(".submit").val($.i18n.prop("wizardBtnSubmit"));
    $(".wizardUserName").attr("placeholder", $.i18n.prop("username"));
    $(".wizardPassword").attr("placeholder", $.i18n.prop("password"));
    $(".wizardConfPass").attr("placeholder", $.i18n.prop("ConfirmPswd"));
    $("#wizbasicsecdns").attr("placeholder", $.i18n.prop("wizbasicsecdns"));
    $("#wizbasicsecdnscellular").attr("placeholder", $.i18n.prop("wizbasicsecdns"));
    $("#wizprimaryipaddress").attr("placeholder", $.i18n.prop("ipAddress"));
    $("#wizprimarysubnet").attr("placeholder", $.i18n.prop("wizardSubNetMask"));
    $("select#connectionWanType option:nth-child(1)").text($.i18n.prop("selectConnType"));
    $("select#connectionTypeBackup option:nth-child(1)").text($.i18n.prop("selectConnType"));
    $("select#interfaceSelection option:nth-child(1)").text($.i18n.prop("selectInterface"));
    $("#priviewCliPopup").attr("title", $.i18n.prop("previewClip"));
    $("#checkListDialog").attr("title", $.i18n.prop("checkListDialogTitle"));

    $('#wizardenableNatCellular').text($.i18n.prop("enableNat"));
    $('#wizardenableNatCellularBackup').text($.i18n.prop("enableNat"));
    $("#modemSettingTitle").text($.i18n.prop("wizardModemSetting"));
    $("#wizardFallBack").text($.i18n.prop("wizardFallBack"));
    $("#wizardManual").text($.i18n.prop("manual"));
    $(".modemFirmware").text($.i18n.prop("modemFirmware"));
    $("#simZeroTechnology option:nth-child(1)").text($.i18n.prop("select"));
    $("#simOneTechnologyBackup option:nth-child(1)").text($.i18n.prop("select"));
    $("#congrats").text($.i18n.prop("congrats"));
    $("#redirect").text($.i18n.prop("redirect"));
    $("#second").text($.i18n.prop("second"));
    $(".testWAN").text($.i18n.prop("testWAN"));
    $("#checkIpAddress").text($.i18n.prop("checkIpAddress"));
    $("#checkDNS").text($.i18n.prop("checkDNS"));
    $("#checkConnection").text($.i18n.prop("checkConnection"));
    $("#checkPing").text($.i18n.prop("checkPing"));
    $(".goTODash").text($.i18n.prop("goTODash"));
    $("#tryAgain").text($.i18n.prop("tryAgain"));
    $(".profileTitle").text($.i18n.prop("profile"));
    $("#strApnBackup").text($.i18n.prop("accessPointNameAPN") + ':');
    $("#apnBackup").attr("placeholder", $.i18n.prop("accessPointNameAPN"));
    $("#strPDPTypeBackup").text($.i18n.prop("strApnPDPType") + ':');
    $("#UPBackup").text($.i18n.prop("UPBackup"));
    $("#strApnAuthenticationBackup").text($.i18n.prop("authentication"));
    $("#strApnUsernameBackup").text($.i18n.prop("username") + ':');
    $("#strApnPasswordBackup").text($.i18n.prop("password") + ':');
    $("#selectSIMForActivat").text($.i18n.prop("wizardSelectSIM") + ':');
    $("#selectSIM0Tech").text($.i18n.prop("wizardSelectSIMTechnology"));
    $("#selectSIM1Tech").text($.i18n.prop("wizardSelectSIM1Technology"));
    $("#simZeroTechnologyBackup option:nth-child(1)").text($.i18n.prop("select"));
    $("#simOneTechnologyBackup option:nth-child(1)").text($.i18n.prop("select"));
    $("#slaCliLegend").text($.i18n.prop("slaConfig"));
    $("#syncRowBackup").text($.i18n.prop("syncRowBackup") + ':');
    $("#wizardencapidbackup").text($.i18n.prop("wizardEncapidKey") + ':');
    $(".wizardencapidKey").attr("placeholder", $.i18n.prop("wizardEncapidKey"));
    $("#activateFirware").attr("value", $.i18n.prop("activateFirware"));
    $("#activateFirwareBackup").attr("value", $.i18n.prop("activateFirware"));

    $("#basicWizardInfo").text($.i18n.prop("basicWizardInfo"));
    $("#basicQuickSetup").text($.i18n.prop("basicQuickSetup"));
    $("#basicQuickSetupInfo").text($.i18n.prop("basicQuickSetupInfo"));
    $("#basicAdvSetup").text($.i18n.prop("basicAdvSetup"));
    $("#basicAdvSetupInfo").text($.i18n.prop("basicAdvSetupInfo"));

    $('.ntpSync').text($.i18n.prop("syncTime"));
    $('#ntpMesg').text($.i18n.prop("ntpEnable"));
    $("#wizardNTPServer").attr("placeholder", $.i18n.prop("domainOrIP"));
    $("#wizardNTPServerText").text($.i18n.prop("ntpServer"));
    $('#wizardLanSettings').text($.i18n.prop("changeNetwork"));
    $('#wizardAddLanSettings').text($.i18n.prop("addNetwork"));
    $('.closeIcon').attr("title",$.i18n.prop("removeNetwork"));
    $('.poolName').text($.i18n.prop("DHCPpoolName"));
    $('.poolSubnet').text($.i18n.prop("DHCPpoolSubnetMask"));
    $('.poolNetwork').text($.i18n.prop("DHCPpoolNetwork"));
    $('.lanInterface').text($.i18n.prop("gatewayInterface"));
    $('.lanIp').text($.i18n.prop("ipAddress"));
    $('#lanIp').text($.i18n.prop("ipAddress"));
    $('#addNewLan').text($.i18n.prop("addNewLan"));
    $('.changeCCPPool').text($.i18n.prop("changeLan"));
    $('.poolName').attr("placeholder",$.i18n.prop("DHCPpoolName"));
    $('#poolNameAdd').attr("placeholder",$.i18n.prop("DHCPpoolName"));
    $('.poolSubnet').attr("placeholder",$.i18n.prop("DHCPpoolSubnetMask"));
    $('#poolSubnetAdd').attr("placeholder",$.i18n.prop("DHCPpoolSubnetMask"));
    $('.poolNetwork').attr("placeholder",$.i18n.prop("network"));
    $('.lanIp').attr("placeholder",$.i18n.prop("ipAddress"));
    $('#lanIp').text($.i18n.prop("ipAddress"));
    $('#lanInterfaceIP').attr("placeholder",$.i18n.prop("ipAddress"));
    $('#wizardChangeLanAlertMessage').text($.i18n.prop("loseConnection"));
    $('#lanChangeTopMsg').text($.i18n.prop("lanChangedTopMsg"));
    $('#lanListOne').text($.i18n.prop("lanListOne"));
    $('#lanListTwo').text($.i18n.prop("lanListTwo"));
    $('#lanListThree').text($.i18n.prop("lanListThree"));
    $('.vlanInterface').text($.i18n.prop("VLANid"));
    $('#associateText').text($.i18n.prop("AssociatePort"));
    $('.vlanInterfaceAssociate').text($.i18n.prop("AssociatePort"));
    $('.vlanInterface').attr("placeholder",$.i18n.prop("VLANid"));
    $('.selectInterfaceLAN').attr("placeholder",$.i18n.prop("selectInterface"));
    $('.createVLAN').attr("placeholder",$.i18n.prop("createVLAN"));
    $('.selectInterfaceLAN').text($.i18n.prop("selectInterface"));
    $('.createVLAN').text($.i18n.prop("createVLAN"));
    $('#copyConfig').attr("title",$.i18n.prop("copyConfig"));
    $('#downloadConfig').attr("title",$.i18n.prop("downloadConfig"));
    $('#headTextAVC').text($.i18n.prop("avcConfigurationAppExp"));
    $('#enableAVCFeature').text($.i18n.prop("enableAVC"));
    $('#headTextRecommend').text($.i18n.prop("recommendSettings"));
    $('#enableSecurityRecommendFeature').text($.i18n.prop("enableRecommendSettings"));
    $('.customErrorDiv').text($.i18n.prop("required"));
    $('.ntpHelpText').text($.i18n.prop("ntpHelpText"));
    $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));

$('#wizbasictimezone option[timeZoneId=1]').text($.i18n.prop('timeZoneId1'));
$('#wizbasictimezone option[timeZoneId=2]').text($.i18n.prop('timeZoneId2'));
$('#wizbasictimezone option[timeZoneId=3]').text($.i18n.prop('timeZoneId3'));
$('#wizbasictimezone option[timeZoneId=4]').text($.i18n.prop('timeZoneId4'));
$('#wizbasictimezone option[timeZoneId=5]').text($.i18n.prop('timeZoneId5'));
$('#wizbasictimezone option[timeZoneId=6]').text($.i18n.prop('timeZoneId6'));
$('#wizbasictimezone option[timeZoneId=7]').text($.i18n.prop('timeZoneId7'));
$('#wizbasictimezone option[timeZoneId=8]').text($.i18n.prop('timeZoneId8'));
$('#wizbasictimezone option[timeZoneId=9]').text($.i18n.prop('timeZoneId9'));
$('#wizbasictimezone option[timeZoneId=10]').text($.i18n.prop('timeZoneId10'));
$('#wizbasictimezone option[timeZoneId=11]').text($.i18n.prop('timeZoneId11'));
$('#wizbasictimezone option[timeZoneId=12]').text($.i18n.prop('timeZoneId12'));
$('#wizbasictimezone option[timeZoneId=13]').text($.i18n.prop('timeZoneId13'));
$('#wizbasictimezone option[timeZoneId=14]').text($.i18n.prop('timeZoneId14'));
$('#wizbasictimezone option[timeZoneId=15]').text($.i18n.prop('timeZoneId15'));
$('#wizbasictimezone option[timeZoneId=16]').text($.i18n.prop('timeZoneId16'));
$('#wizbasictimezone option[timeZoneId=17]').text($.i18n.prop('timeZoneId17'));
$('#wizbasictimezone option[timeZoneId=18]').text($.i18n.prop('timeZoneId18'));
$('#wizbasictimezone option[timeZoneId=19]').text($.i18n.prop('timeZoneId19'));
$('#wizbasictimezone option[timeZoneId=20]').text($.i18n.prop('timeZoneId20'));
$('#wizbasictimezone option[timeZoneId=21]').text($.i18n.prop('timeZoneId21'));
$('#wizbasictimezone option[timeZoneId=22]').text($.i18n.prop('timeZoneId22'));
$('#wizbasictimezone option[timeZoneId=23]').text($.i18n.prop('timeZoneId23'));
$('#wizbasictimezone option[timeZoneId=24]').text($.i18n.prop('timeZoneId24'));
$('#wizbasictimezone option[timeZoneId=25]').text($.i18n.prop('timeZoneId25'));
$('#wizbasictimezone option[timeZoneId=26]').text($.i18n.prop('timeZoneId26'));
$('#wizbasictimezone option[timeZoneId=27]').text($.i18n.prop('timeZoneId27'));
$('#wizbasictimezone option[timeZoneId=28]').text($.i18n.prop('timeZoneId28'));
$('#wizbasictimezone option[timeZoneId=29]').text($.i18n.prop('timeZoneId29'));
$('#wizbasictimezone option[timeZoneId=30]').text($.i18n.prop('timeZoneId30'));
$('#wizbasictimezone option[timeZoneId=31]').text($.i18n.prop('timeZoneId31'));
$('#wizbasictimezone option[timeZoneId=32]').text($.i18n.prop('timeZoneId32'));
$('#wizbasictimezone option[timeZoneId=33]').text($.i18n.prop('timeZoneId33'));
$('#wizbasictimezone option[timeZoneId=34]').text($.i18n.prop('timeZoneId34'));
$('#wizbasictimezone option[timeZoneId=35]').text($.i18n.prop('timeZoneId35'));
$('#wizbasictimezone option[timeZoneId=36]').text($.i18n.prop('timeZoneId36'));
$('#wizbasictimezone option[timeZoneId=37]').text($.i18n.prop('timeZoneId37'));
$('#wizbasictimezone option[timeZoneId=38]').text($.i18n.prop('timeZoneId38'));
$('#wizbasictimezone option[timeZoneId=39]').text($.i18n.prop('timeZoneId39'));
$('#wizbasictimezone option[timeZoneId=40]').text($.i18n.prop('timeZoneId40'));
$('#wizbasictimezone option[timeZoneId=41]').text($.i18n.prop('timeZoneId41'));
$('#wizbasictimezone option[timeZoneId=42]').text($.i18n.prop('timeZoneId42'));
$('#wizbasictimezone option[timeZoneId=43]').text($.i18n.prop('timeZoneId43'));
$('#wizbasictimezone option[timeZoneId=44]').text($.i18n.prop('timeZoneId44'));
$('#wizbasictimezone option[timeZoneId=45]').text($.i18n.prop('timeZoneId45'));
$('#wizbasictimezone option[timeZoneId=46]').text($.i18n.prop('timeZoneId46'));
$('#wizbasictimezone option[timeZoneId=47]').text($.i18n.prop('timeZoneId47'));
$('#wizbasictimezone option[timeZoneId=48]').text($.i18n.prop('timeZoneId48'));
$('#wizbasictimezone option[timeZoneId=49]').text($.i18n.prop('timeZoneId49'));
$('#wizbasictimezone option[timeZoneId=50]').text($.i18n.prop('timeZoneId50'));
$('#wizbasictimezone option[timeZoneId=51]').text($.i18n.prop('timeZoneId51'));
$('#wizbasictimezone option[timeZoneId=52]').text($.i18n.prop('timeZoneId52'));
$('#wizbasictimezone option[timeZoneId=53]').text($.i18n.prop('timeZoneId53'));
$('#wizbasictimezone option[timeZoneId=54]').text($.i18n.prop('timeZoneId54'));
$('#wizbasictimezone option[timeZoneId=55]').text($.i18n.prop('timeZoneId55'));
$('#wizbasictimezone option[timeZoneId=56]').text($.i18n.prop('timeZoneId56'));
$('#wizbasictimezone option[timeZoneId=57]').text($.i18n.prop('timeZoneId57'));
$('#wizbasictimezone option[timeZoneId=58]').text($.i18n.prop('timeZoneId58'));
$('#wizbasictimezone option[timeZoneId=59]').text($.i18n.prop('timeZoneId59'));
$('#wizbasictimezone option[timeZoneId=60]').text($.i18n.prop('timeZoneId60'));
$('#wizbasictimezone option[timeZoneId=61]').text($.i18n.prop('timeZoneId61'));
$('#wizbasictimezone option[timeZoneId=62]').text($.i18n.prop('timeZoneId62'));
$('#wizbasictimezone option[timeZoneId=63]').text($.i18n.prop('timeZoneId63'));
$('#wizbasictimezone option[timeZoneId=64]').text($.i18n.prop('timeZoneId64'));
$('#wizbasictimezone option[timeZoneId=65]').text($.i18n.prop('timeZoneId65'));
$('#wizbasictimezone option[timeZoneId=66]').text($.i18n.prop('timeZoneId66'));
$('#wizbasictimezone option[timeZoneId=67]').text($.i18n.prop('timeZoneId67'));
$('#wizbasictimezone option[timeZoneId=68]').text($.i18n.prop('timeZoneId68'));
$('#wizbasictimezone option[timeZoneId=69]').text($.i18n.prop('timeZoneId69'));
$('#wizbasictimezone option[timeZoneId=70]').text($.i18n.prop('timeZoneId70'));
$('#wizbasictimezone option[timeZoneId=71]').text($.i18n.prop('timeZoneId71'));
$('#wizbasictimezone option[timeZoneId=72]').text($.i18n.prop('timeZoneId72'));
$('#wizbasictimezone option[timeZoneId=73]').text($.i18n.prop('timeZoneId73'));
$('#wizbasictimezone option[timeZoneId=74]').text($.i18n.prop('timeZoneId74'));
$('#wizbasictimezone option[timeZoneId=75]').text($.i18n.prop('timeZoneId75'));
$('#wizbasictimezone option[timeZoneId=76]').text($.i18n.prop('timeZoneId76'));
$('#wizbasictimezone option[timeZoneId=77]').text($.i18n.prop('timeZoneId77'));
$('#wizbasictimezone option[timeZoneId=78]').text($.i18n.prop('timeZoneId78'));
$('#wizbasictimezone option[timeZoneId=79]').text($.i18n.prop('timeZoneId79'));
$('#wizbasictimezone option[timeZoneId=80]').text($.i18n.prop('timeZoneId80'));
$('#wizbasictimezone option[timeZoneId=81]').text($.i18n.prop('timeZoneId81'));
$('#wizbasictimezone option[timeZoneId=82]').text($.i18n.prop('timeZoneId82'));

	//3.3.17 IPV6oE
	$('.enableIpV6Text').text($.i18n.prop("enableIPV6oE"));




	$("#ipv6PrefixNameIpv6oe").attr("placeholder", $.i18n.prop("prefixNameProvider"));
	$("#wizardprimaryPrefixProviderbackup").attr("placeholder", $.i18n.prop("prefixNameProvider"));
	$("#prefixNameIpv6backup").text($.i18n.prop("prefixName"));

	$(".wizardConnectAuthentiIPV6oE").text($.i18n.prop("IPV6OELabel"));
	
        $("#prifixname").text($.i18n.prop("prefixName"));
        localizeIpv6OE("", "");
        localizeIpv6OE("ipv6", "");
        localizeIpv6OE("", "backup");
        localizeIpv6OE("ipv6", "backup");
        $("#wizardprimaryPrefixProvider").attr("placeholder", $.i18n.prop("prefixNameProvider"));
        $("#poolName").attr("placeholder", $.i18n.prop("poolNameHeader"));
        $("#poolSubnet").attr("placeholder", $.i18n.prop("DHCPpoolSubnetMask"));
        $("#lanIP").attr("placeholder", $.i18n.prop("ipAddress"));
    }
    function localizeIpv6OE(ipv6, backup) {
        $("#ipdnsLabel" + ipv6 + backup).text($.i18n.prop("ipdnsLabel"));
        $("#ipv6oeType" + backup).text($.i18n.prop("wizardType") + ":");
        $("#ipv6Interface" + backup).text($.i18n.prop("ipv6Interface"));
        $("#ipv6oeBridge" + backup).text($.i18n.prop("ipv6oeBridge"));
        $("#ipv6oeDHCP" + backup).text($.i18n.prop("ipv6oeDHCP"));
        $("#ipv6PrefixName" + backup).text($.i18n.prop("ipv6PrefixName"));
        $("#ipv6PrefixNameIpv6oe" + backup).attr("placeholder", $.i18n.prop("prefixNameProvider"));
        $("#bridgeInterfaceAlert" + backup).html('<i class="fa fa-check"></i>' + $.i18n.prop("bridgeInterfaceAlert"));
        if (ipv6 === "ipv6") {
            $("#wizardMtuSizeIpv6" + backup).attr("placeholder", $.i18n.prop("wizardMTUSize"));
            $("#wizardMssSizeIpv6" + backup).attr("placeholder", $.i18n.prop("wizardMSSSize"));
        } else {
            $("#wizardMtuSize" + backup).attr("placeholder", $.i18n.prop("wizardMTUSize"));
            $("#wizardMssSize" + backup).attr("placeholder", $.i18n.prop("wizardMSSSize"));
  }

    }
  function setSwitchPortList()
  {
    var switchPortList = "GigabitEthernet";
    if (switchPortArray.length > 0) {
      switchPortList = switchPortArray.sort().join(", ");
    }
    $('#wizardSwitchPortList').html(switchPortList);
  }

  function isAVCSupported() {
    var flag=false;
    try {
      deviceCommunicator.getConfigCmdOutput("ip nbar ?");
    } catch(e) {
        var responsePro = e.errorResponse;
        var respSlit=responsePro.split("\n");
        $.each(respSlit,function(index,value){
        if (value.trim().split(/\s+/)[0]=="http-services") {
                flag=true;
                return false;
            }
        });
    }
    return flag;
  }

  function isInterfaceUP(interfaceName,showIpInt) {
    var flag=false;
    interfaceName=interfaceName.trim().toLowerCase();
    $(xml).find('entry').each(function() {
        if ($(this).find('Interface').text().trim().toLowerCase()==interfaceName) {
            if ($(this).find('Status').text().toLowerCase().trim()=="up" && $(this).find('Protocol').text().toLowerCase().trim()=="up") {
                flag=true;
            }
            return false;
        }
    });
    return flag;
  }
  
  function populateIpv6oeInterface(backup){
    if (backup==undefined) {
      backup="";
    }
    $('#wizardprimaryIpv6Int'+backup).empty();
        var isBridgePosible = false;
    $.each(interfaceotherArray,function(index,value){
        if ($('#interfaceSelection').val()!=value && $('#interfaceBackup').val()!=value) {
	  $('#wizardprimaryIpv6Int'+backup).append('<option value="'+value+'">'+value+'</option>');
                isBridgePosible = true;
	}
    });
        if (!isBridgePosible) {
            blockBridge(backup);
        } else {
            unblocBridge(backup);
  }

    }
    function blockBridge(backup) {
        backup = backup === undefined ? "" : backup;
        $("#dhcpIpv6oe" + backup).prop("checked", true);
        $("#bridgeIpv6oe" + backup).prop("checked", false);
        $("#bridgeIpv6oe" + backup).attr("disabled", true);
    }
    function unblocBridge(backup) {
        backup = backup === undefined ? "" : backup;
        $("#dhcpIpv6oe" + backup).prop("checked", false);
        $("#bridgeIpv6oe" + backup).prop("checked", true);
        $("#bridgeIpv6oe" + backup).removeAttr("disabled");
    }
  function populateLanInterface() {
     $('#lanInt').empty();
     $('#lanIntAdd').empty();
     $('.dropDownListOptions').empty();
     $('#lanIntAdd').append('<option value="">'+$.i18n.prop("select")+'</option>');
     $.each(switchPortArray,function(index,value){
        if (value!=$('#lanInterface').val() && !isInterfaceUP(value,showIpInt)) {
            onlySwitchPort.push(value);
            $('.dropDownListOptions').append('<div class="customdropdownListDiv"><input class="interfaceCheckbox associatePortCheck" type="checkbox" value="'+value+'"> '+value+' </div>');
        }
    });
    $('#lanInt').append('<option value="'+$('#lanInterface').val()+'">'+$('#lanInterface').val()+'</option>');
    $('#lanIntAdd').append('<option value="'+$('#lanInterface').val()+'">'+$('#lanInterface').val()+'</option>');
    $('#lanIntAdd').find('option').prop("disabled",true);
    $.each(interfaceotherArray,function(index,value){
        if ($('#interfaceSelection').val()!=value && $('#interfaceBackup').val()!=value) {
      $('#lanInt').append('<option value="'+value+'">'+value+'</option>');
      $('#lanIntAdd').append('<option value="'+value+'">'+value+'</option>');
  }
    $('.interfaceCheckbox').change(function(){
  var intName="";
        $('#associateText').empty();
        $('.interfaceCheckbox').each(function(){
            if ($(this).is(':checked')) {
                intName=$(this).val();
                return false;
            }
        });
        if (intName!="") {
            $('#associateText').append('<em class="fa fa-check colorFlour ccpexpCSSReplaceClass325 ccpExpressOrderClass54"></em> '+intName+',..');
            $('.customErrorDiv').hide();
        }else{
            $('#associateText').text($.i18n.prop("AssociatePort"));
        }
    });
    });

    $('input[name=lanIntSelection]').change(function(){
        if ($("#lanIntSelectionInterface").is(':checked')) {
            $('#lanIntRow').show();
            $('#vlanIntRow').hide();
            $('#associateIntRow').hide();
        }else{
            $('#lanIntRow').hide();
            $('#vlanIntRow').show();
            $('#associateIntRow').show();
        }
    });
    //var lanIntCount=$('#lanInt').find('option').length;
    var lanIntAddCount=$('#lanIntAdd').find('option').length;
    if (lanIntAddCount==0 || lanIntAddCount==1) {
        if (lanIntAddCount==1 && onlySwitchPort.length>1) {
            $('.addLanNetwork').show();
            $('#vlanIntRow').show();
            $('#associateIntRow').show();
            $('#lanIntRow').hide();
            $('#selectLanRow').hide();
            $('#lanIntSelectionVlan').click();
            $('input[name=lanIntSelection]').change();
        }else if(lanIntAddCount==1 && onlySwitchPort.length==0){
            $('.addLanNetwork').hide();
            $('#vlanIntRow').show();
            $('#associateIntRow').show();
            $('#selectLanRow').show();
            $('#lanIntSelectionInterface').click();
            $('input[name=lanIntSelection]').change();
            if (onlySwitchPort.length==0) {
                $('#selectLanRow').hide();
            }
        }
        else{
            $('.addLanNetwork').hide();
            $('#addLanFieldset').hide();
        }
    }
    else{
            $('.addLanNetwork').show();
            $('#vlanIntRow').show();
            $('#associateIntRow').show();
            $('#selectLanRow').show();
            $('#lanIntSelectionInterface').click();
            $('input[name=lanIntSelection]').change();
            if (onlySwitchPort.length==0) {
                $('#selectLanRow').hide();
            }

    }

    $('#lanInt').change(function(){addRemoveLan("lanInt")});
    $('#lanIntAdd').change(function(){addRemoveLan("lanIntAdd")});
    /*$('.assocaiteIntDropDown').unbind('click').click(function(){
        var $dropDown=$('.dropDownListOptions');
        if ($dropDown.is(':hidden')) {
            $dropDown.show();
        }else{
            $dropDown.hide();
        }
    });*/
    $('.dropDownListOptions').hide();
    $('#lanInt').val($('#lanInterface').val());
    $('#lanInt').change();
  }

  function addRemoveLan(id) {
    if (id=="lanInt") {
        var lanVal=$('#lanInt').val();
        $('#lanIntAdd').find('option').each(function(){$(this).prop("disabled",false);});
        $('#lanIntAdd').find('option').each(function(){
            if (lanVal==$(this).attr("value")) {
                $(this).prop("disabled",true);
            }
        });
    }else{
        var lanAddVal=$('#lanIntAdd').val();
        $('#lanInt').find('option').each(function(){$(this).prop("disabled",false);});
        $('#lanInt').find('option').each(function(){
            if (lanAddVal==$(this).attr("value")) {
                $(this).prop("disabled",true);
            }
        });
    }
  }

  function basicformProcessing() {
    var basicFormArray = [];
    if ($('#basicform').valid()) {
      basicFormArray = $('#basicform').serializeArray();
    }else{
        $target = $('#basicform div.error:not(:hidden)').first();
            $('.fieldsetContent').animate({
                'scrollTop': $target.position().top
            }, 400, 'swing', function () {
        });
    }
    return basicFormArray;
  }

  function primaryformProcessing() {
    var primaryFormArray = [];
    if ($('#primarywanform').valid()) {
      primaryFormArray = $('#primarywanform').serializeArray();
    }else{
        var $targetFieldset,$target;
        $target = $('#primarywanform div.error:not(:hidden)').first();
        if ($target!=undefined) {
            var $targetFieldset=$target.parents('fieldset');
        }
        if ($targetFieldset!=undefined) {
            var scrollPos=$target.position().top+$targetFieldset.position().top;
                $('.fieldsetContent').animate({
                    'scrollTop': scrollPos
                }, 400, 'swing', function () {
            });
        }
    }
    //consoleLog(primaryFormArray);
    return primaryFormArray;
  }

  function lanformProcessing() {
    var lanFormArray = [],vlanPorts=[];
    if ($('#lanIntSelectionVlan').is(':checked')) {
        $('.dropDownListOptions').find('input[type=checkbox]').each(function(){
            if ($(this).is(':checked')) {
                vlanPorts.push($(this).val());
            }
        });
        $('#associatePortVlan').val(vlanPorts.join(","));
    }
    var associatePortflag=false;
        $('#associateText').empty();
        $('.interfaceCheckbox').each(function(){
            if ($(this).is(':checked')) {
                associatePortflag=true;
                return false;
            }
    });
    if (!$('#lanIntSelectionVlan').is(':checked')) {
        associatePortflag=true;
    }else if ($('#addNewLanNetwork').val()=="off") {
        associatePortflag=true;
    }
    if ($('#lanform').valid() && associatePortflag) {
      $('#poolWildCardAdd').val(configureVpn.getWildCardMask($('#poolSubnetAdd').val().trim()));
      $('#poolWildCard').val(configureVpn.getWildCardMask($('#poolSubnet').val().trim()));
      lanFormArray = $('#lanform').serializeArray();
    }else{
        var $targetFieldset,$target;
        if ($('#lanIntSelectionVlan').is(':checked') && !associatePortflag) {
            $('.customErrorDiv').show();
        }
        $target = $('#lanform div.error:not(:hidden)').first();
        if ($target!=undefined) {
            $targetFieldset=$target.parents('fieldset');
        }
        if ($targetFieldset!=undefined) {
            var scrollPos=$target.position().top+$targetFieldset.position().top;
                $('.fieldsetContent').animate({
                    'scrollTop': scrollPos
                }, 400, 'swing', function () {
            });
        }
    }
    $('.interfaceCheckbox').change();
    return lanFormArray;
  }

  function backupformProcessing() {
    var backupFormArray = [];
    if ($('#backupwanform').valid()) {
      backupFormArray = $('#backupwanform').serializeArray();
    }else{
        var $targetFieldset,$target;
        $target = $('#backupwanform div.error:not(:hidden)').first();
        if ($target!=undefined) {
            $targetFieldset=$target.parents('fieldset');
        }
        if ($targetFieldset!=undefined) {
            var scrollPos=$target.position().top+$targetFieldset.position().top;
                $('.fieldsetContent').animate({
                    'scrollTop': scrollPos
                }, 400, 'swing', function () {
            });
        }
    }
    populateLanInterface();
    //consoleLog(backupFormArray);
    return backupFormArray;
  }

  function securityformProcessing() {
    var securityFormArray = [];
    securityFormArray = $('#securityform').serializeArray();
    //consoleLog(securityFormArray);
    return securityFormArray;
  }
  
  function checkEnableIPv6oE(backup) {
    backup=backup===undefined?"":backup;
    var enable=false;
    if($("#wizardprimaryIpv6Int"+backup).find("option").length>0){
	enable=true;
    }
        return enable;
  }

  /*function to check if LAN network is changed*/
  function checkChangeNetwork(){
    var changeCli="",addCli="",fullCli="";
    if ($('#changePoolCheck').is(':checked') && ($('#poolNetwork').val()!="10.10.10.0" || $('#lanInt').val()!=$('#lanInterface').val() || $('#poolSubnet').val()!="255.255.255.128" || $('#lanIP').val()!="10.10.10.1")) {
        var lanInterface=$('#lanInt').val();
        changeCli="interface "+lanInterface+"\n no shutdown\n ip address "+$('#lanIP').val().trim()+" "+$("#poolSubnet").val().trim()+"\n";
    }
    if ($('#addNewLanNetwork').val()=="on") {
        var lanInterface="";
        if ($('#lanIntSelectionInterface').is(':checked')) {
           lanInterface=$('#lanIntAdd').val();
        }else{
            lanInterface="vlan "+$('#vlanIdAdd').val();
        }
        addCli="interface "+lanInterface+"\n no shutdown\n ip address "+$('#lanInterfaceIP').val().trim()+" "+$("#poolSubnetAdd").val().trim()+"\n";
    }
    if ($('#lanInt').val()==$('#lanInterface').val()) {
        fullCli=changeCli+addCli;
    }else if ($('#lanIntAdd').val()==$('#lanInterface').val()){
        fullCli=addCli+changeCli;
    }else{
        fullCli=addCli+changeCli;
        fullCli=fullCli+"interface "+$('#lanInterface').val()+"\n"+"no ip address \n shutdown";
    }
    return fullCli;
  }
  /*Function to set Features configures in Confirm and Apply Screen*/
  function setConfiguredFeatures() {
    $('#basichead').empty();
    $('#primarywanhead').empty();
    $('#lanhead').empty();
    $('#backupwanhead').empty();
    $('#securityhead').empty();
    $('#basiccont').empty();
    $('#primarycont').empty();
    $('#backupcont').empty();
    $('#securitycont').empty();
    $('#lancont').empty();


    $('#basichead').append('<em class="fa fa-check ccpexpCSSReplaceClass635" ></em>&nbsp;&nbsp;' + $.i18n.prop("basichead"));
    var basicdns = "";
    var ntpServer= "";
    var primaryIpv4 = "";
    var priamaryIpv6 = "";
    var primarypppoe = "";
    var primaryNat = "";
    var primaryint = $('#interfaceSelection').val();
    var backupwan = "";
    var persistanceOrPPPoELabelPrimary = "PPPoE: ";
    var persistanceOrPPPoELabelBackup = "PPPoE: ";
    var poolNetwork="10.10.10.0",poolSubnet="255.255.255.128",poolName="ccp-pool",defaultGateway=$('#lanInterface').val() +" (10.10.10.1)",lanString="";


    if (($('#wizbasicdnsserver').is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
        ($('#wizbasicdnsservercellular').is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
      basicdns = $.i18n.prop("automatic");
    } else {
      basicdns = $.i18n.prop("staticStr") + "(" + $('#wizbasicprimdns').val() + ")";
    }
    if ($('#ntpEnable').is(':checked')) {
      ntpServer = $('#wizardNTPServer').val();
    }else{
        ntpServer = $.i18n.prop("disabled");
    }
    if ($('#wizprimarydnsserver').is(':checked') || ($('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
      primaryIpv4 = $.i18n.prop("automatic");
    } else {
      primaryIpv4 = $.i18n.prop("staticStr") + "(" + $('#wizprimaryipaddress').val() + ")";
    }
    if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) || ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
      primaryNat = $.i18n.prop("enabled");
    } else {
      primaryNat = $.i18n.prop("disabled");
    }
    var ciscoSettings,ciscoSettingsLabel,avcSettings,avcSettingsLabel="";
    if ($("#wizardsecurityrecomendenable").is(':checked')) {
      ciscoSettings= $.i18n.prop("enabled");
      ciscoSettingsLabel=$.i18n.prop("ciscoSettingsLabel");
    }else{
      ciscoSettings= $.i18n.prop("disabled");
      ciscoSettingsLabel=$.i18n.prop("ciscoSettingsLabel");
    }
    if ($("#wizardavcenable").is(':checked') && avcFlag) {
      avcSettings= $.i18n.prop("enabled");
      avcSettingsLabel=$.i18n.prop("avcSettingsLabel");
    }else{
      avcSettings= $.i18n.prop("disabled");
      avcSettingsLabel=$.i18n.prop("avcSettingsLabel");
    }
    if ($('#wizprimaryipv6Conf').is(':checked')) {
      priamaryIpv6 = "configured";
    } else {
      priamaryIpv6 = $.i18n.prop("notConfigured");
    }
    if ($('#wizprimarypppoe').is(':checked')) {
      primarypppoe = $.i18n.prop("enabled");
    } else {
      primarypppoe = $.i18n.prop("disabled");
    }
    if (primaryint != undefined && primaryint != null && primaryint != "" && primaryint.match(/^Cellular/))
    {
      persistanceOrPPPoELabelPrimary = "Persistance: ";
      if ($('#yesPersist').is(':checked')) {
        primarypppoe = $.i18n.prop("enabled");
      } else {
        primarypppoe = $.i18n.prop("disabled");
      }
    }
    if (primaryint != undefined && primaryint != null && primaryint != "" && primaryint.match(/^Serial/))
    {
      persistanceOrPPPoELabelPrimary = $.i18n.prop("encapsulation");

      try {
        var changedValue = $('input:radio[name=syncMode]:checked').val();

        var encMode = '';
        if (changedValue === "sync") {
          encMode = $('input:radio[name=syncEnc]:checked').val();
        } else {
          encMode = $('input:radio[name=asyncEnc]:checked').val();
        }
        primarypppoe = encMode;
      } catch (error) {
        primarypppoe = "";
      }

    }
    if ($('#changePoolCheck').is(':checked')) {
        poolNetwork=$('#poolNetwork').val();
        poolSubnet=$('#poolSubnet').val();
        poolName=$('#poolName').val();
        defaultGateway=$('#lanInt').val()+" ("+$('#lanIP').val()+")";
    }
    if ($('#changePoolCheck').is(':checked')) {
        poolNetwork=$('#poolNetwork').val();
        poolSubnet=$('#poolSubnet').val();
        poolName=$('#poolName').val();
        defaultGateway=$('#lanInt').val()+" ("+$('#lanIP').val()+")";
    }
    lanString='<ul class="ccpexpCSSReplaceClass643">' + '<li>' +
                         '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass644" ></em> ' +
                         $.i18n.prop("poolNameHeader") + ': ' + poolName + '</li>' + '<li>' +
                         '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass645" ></em> ' +
                         $.i18n.prop("lanNetwork") + ': ' + poolNetwork + '</li>' + '<li>' +
                         '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass645" ></em> ' +
                         $.i18n.prop("wizardSubNetMask") + ': ' + poolSubnet + '</li>' + '<li>'
                         + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass644"></em> ' +
                         $.i18n.prop("gatewayInterface") + ': ' + defaultGateway + '</li>' + '<ul>';

    if ($('#addNewLanNetwork').val()=="on") {
        poolNetwork=$('#poolNetworkAdd').val();
        poolSubnet=$('#poolSubnetAdd').val();
        poolName=$('#poolNameAdd').val();
        defaultGateway=$('#lanIntAdd').val()+" ("+$('#lanInterfaceIP').val()+")";
        if ($('#lanIntSelectionVlan').is(':checked')) {
            defaultGateway="VLAN "+$('#vlanIdAdd').val()+" ("+$('#lanInterfaceIP').val()+")";
        }
        lanString=lanString+'<h4 class="summaryHeader">'+$.i18n.prop("newLAN")+'<em class="fa fa-info-circle summaryHeaderInfo" ></em></h4>';


                        var summaryHeaderTooltip=$.i18n.prop("poolNameHeader") + ': ' + poolName +", \n"+$.i18n.prop("lanNetwork") + ': ' + poolNetwork +", \n"+ $.i18n.prop("wizardSubNetMask") + ': ' + poolSubnet + ", \n" +$.i18n.prop("gatewayInterface") + ': ' + defaultGateway+"\n";

    }

    $('#basiccont').append('<ul class="ccpexpCSSReplaceClass636">' + '<li>' +
                           '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass637" ></em>&nbsp;&nbsp;' +
                           $.i18n.prop("wizardRouterName") + ':' + $('#wizbasicrname').val() + '</li>' + '<li>' +
                           '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass638" ></em>&nbsp;&nbsp;' +
                           $.i18n.prop("wizardDomainName") + ':' + $('#wizbasicdname').val() + '</li>' + '<li>' +
                           '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass639" ></em>&nbsp;&nbsp;' +
                           $.i18n.prop("wizardTimeZone") + ':' + $('#wizbasictimezone :selected').html() +
                           '</li>' + '<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass640" ></em>&nbsp;&nbsp;' +
                           $.i18n.prop("wizardDNSServer") + ':' + basicdns + '</li>' + '<li>' +
                           '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass640" ></em>&nbsp;&nbsp;' +
                           $.i18n.prop("ntpServer") + ':' + ntpServer + '</li>'+'<ul>');
    $('#primarywanhead').append('<em class="fa fa-check ccpexpCSSReplaceClass641" ></em>&nbsp;&nbsp;' +
                                $.i18n.prop("primarywanhead"));
    $('#lanhead').append('<em class="fa fa-check ccpexpCSSReplaceClass642" ></em>&nbsp;&nbsp;LAN');
    $('#lancont').append(lanString);
    $('.summaryHeaderInfo').css('cursor', 'pointer');
    $('.summaryHeaderInfo').attr("title", summaryHeaderTooltip);


                         $(".summaryHeaderInfo").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    var wanIPv6oETitle = '<li><em class="fa  fa-chevron-right ccpexpCSSReplaceClass651" ></em> IPv6oE: '+$.i18n.prop("enabled") +' </li>';
    var primaryWANIPv6oETitle = "", backupWANIPv6oETitle = "";
    if ($("#wizardprimaryipv6oe").is(':checked')) {
      primaryWANIPv6oETitle = wanIPv6oETitle;
    } else {
      primaryWANIPv6oETitle = "";
    }
    if ($("#wizardprimaryipv6oebackup").is(':checked')) {
      backupWANIPv6oETitle = wanIPv6oETitle;
    } else {
      backupWANIPv6oETitle = "";
    }

    $('#primarycont').append('<ul class="ccpexpCSSReplaceClass646">' + '<li>' +
                             '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass647" ></em> ' +
                             $.i18n.prop("wanInterface") + ': ' + $('#interfaceSelection').val() +
                             '</li>' + '<li>' +
                             '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass648" ></em> Ipv4: ' +
                             primaryIpv4 + '</li>' + '<li>' +
                             '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass649" ></em> Ipv6: ' +
                             priamaryIpv6 + '</li>' + '<li>' +
                             '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass650" ></em> NAT: ' +
                             primaryNat + '</li>' + '<li>' +
                             '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass651" ></em> ' +
                             persistanceOrPPPoELabelPrimary + primarypppoe + '</li>' + primaryWANIPv6oETitle + '<ul>');

    //(' + $('#interfaceSelection').val() + ')
    if ($("#enableBackupWAN").is(':checked')) {
      var primaryIpv4backup = "";
      var priamaryIpv6backup = "";
      var primarypppoebackup = "";
      var primaryNatbackup = "";
      backupwan = $('#interfaceBackup').val();


      if ($('#wizprimarydnsserverbackup').is(':checked') || ($('#interfaceBackup').val().toLowerCase().indexOf("cellular") > -1)) {
        primaryIpv4backup = $.i18n.prop("automatic");
      } else {
        primaryIpv4backup = $.i18n.prop("staticStr") + "(" + $('#wizprimaryipaddressbackup').val() + ")";
      }
      if (($("#wizprimaryenableNatbackup").is(':checked') &&
           $('#interfaceBackup').val().toLowerCase().indexOf("cellular") == -1) ||
          ($("#wizenablenatcellularBackup").is(':checked') &&
           $('#interfaceBackup').val().toLowerCase().indexOf("cellular") > -1)) {
        primaryNatbackup = $.i18n.prop("enabled");
      } else {
        primaryNatbackup = $.i18n.prop("disabled");
      }
      if ($('#wizprimaryipv6Confbackup').is(':checked')) {
        priamaryIpv6backup = $.i18n.prop("configured");
      } else {
        priamaryIpv6backup = $.i18n.prop("notConfigured");
      }
      if ($('#wizprimarypppoebackup').is(':checked')) {
        primarypppoebackup = $.i18n.prop("enabled");
      } else {
        primarypppoebackup = $.i18n.prop("disabled");
      }
      if (backupwan != undefined && backupwan != null && backupwan != "" && backupwan.match(/^Cellular/))
      {
        persistanceOrPPPoELabelBackup = "Persistance: ";
        if ($('#yesPersistBackup').is(':checked')) {
          primarypppoebackup = $.i18n.prop("enabled");
        } else {
          primarypppoebackup = $.i18n.prop("disabled");
        }
      }
      if (backupwan != undefined && backupwan != null && backupwan != "" && backupwan.match(/^Serial/))
      {
        persistanceOrPPPoELabelBackup = $.i18n.prop("encapsulation");
        try {
          var changedValue = $('input:radio[name=syncModeBackup]:checked').val();

          var encMode = '';
          if (changedValue === "sync") {
            encMode = $('input:radio[name=syncEncBackup]:checked').val();
          } else {
            encMode = $('input:radio[name=asyncEncBackup]:checked').val();
          }
          primarypppoebackup = encMode;
        } catch (error) {
          primarypppoebackup = "";
        }
      }
      //$('#backupwanhead').append('<em class="fa fa-check ccpexpCSSReplaceClass652" ></em> Backup WAN');
      //$('#backupcont').append('<ul class="ccpexpCSSReplaceClass653">'+'<li>'+
      //                        '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass654" ></em> Wan Interface: '+backupwan+
      //                        '</li>'+'<li>'+'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass655" ></em> Ipv4: '+primaryIpv4backup+'</li>'+'<li>'+
      //                        '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass656" ></em> Ipv6: '+priamaryIpv6backup+'</li>'+'<li>'+
      //                        '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass657" ></em> NAT: '+primaryNatbackup+'</li>'+'<li>'+
      //                        '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass658" ></em> '+
      //                        persistanceOrPPPoELabelBackup+primarypppoebackup+'</li>'+'<ul>');
      $('#backupwanhead').append('<em class="fa fa-check ccpexpCSSReplaceClass659" ></em>&nbsp;&nbsp;' +
                                 $.i18n.prop("backupwanhead"));
      $('#backupcont').append('<ul class="ccpexpCSSReplaceClass660">' + '<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass661"></em> ' +
                              $.i18n.prop("wanInterface") + ': ' + backupwan + '</li>' + '<li>' +
                              '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass661" ></em> Ipv4: ' +
                              primaryIpv4backup + '</li>' + '<li>' +
                              '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass662" ></em> Ipv6: ' +
                              priamaryIpv6backup + '</li>' + '<li>' +
                              '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass663" ></em> NAT: ' +
                              primaryNatbackup + '</li>' + '<li>' +
                              '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass664" ></em> ' +
                              persistanceOrPPPoELabelBackup + primarypppoebackup + '</li>' + backupWANIPv6oETitle +'<ul>');


      //(' + $('#interfaceBackup').val() + ')</div>;
    } else {
      if (platformTypeCheck.indexOf('867VAE') !== -1 || platformTypeCheck.indexOf('866VAE') !== -1) {
        //$('#backupwanhead').append('<em class="fa fa-exclamation-triangle ccpexpCSSReplaceClass665" ></em> Backup WAN');
        $('#backupwanhead').append('<em class="fa fa-exclamation-triangle ccpexpCSSReplaceClass666" ></em> ' +
                                   $.i18n.prop("backupwanhead"));
        $('#backupcont').append('<ul >' + '<li>' + '<p class="bg-text ccpexpCSSReplaceClass667">Not Supported</p>' + '</li>' + '<ul>');
      } else {
        //$('#backupwanhead').append('<em class="fa fa-times ccpexpCSSReplaceClass668" ></em> Backup WAN');
        //$('#backupcont').append('<ul >'+'<li>'+'<p class="bg-text ccpexpCSSReplaceClass669">Not Configured</p>'+'</li>'+'<ul>');
        $('#backupwanhead').append('<em class="fa fa-times ccpexpCSSReplaceClass670" ></em> ' +
                                   $.i18n.prop("backupwanhead"));
        $('#backupcont').append('<ul class="ccpexpCSSReplaceClass671">' + '<li>' +
                                '<p class="bg-text">' + $.i18n.prop("notConfig") + '</p>' + '</li>' + '<ul>');
      }
    }
    var seccheckflag=false;
    if (!licenseCheck) {

      if (iosk9check == "SecurityEnable") {
        if ($('#wizsecurityenable').is(':checked')||$("#wizardsecurityrecomendenable").is(':checked')||$("#wizardavcenable").is(':checked')) {
          var securityText = $.i18n.prop("securityFeature") + " ";
          var texthtml = "";
          if ($('#wizsecurityenable').is(':checked')) {
            securityText = securityText + '(' + $.i18n.prop("defaultPolicyCreation") + ')';
            //texthtml='<li>'+'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass672" ></em>&nbsp;&nbsp;Default policy creation:'+"(Allow http, https, smtp, pop3, imap, sip, ftp, dns, icmp)"+'</li>';
            texthtml = '<li>' +'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass680" ></em>&nbsp;&nbsp;' +$.i18n.prop("wanZone") + ':' + primaryint + "  " + backupwan + '</li>' + '<li>' +'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass681" ></em>&nbsp;&nbsp;' +$.i18n.prop("lanZone") + ':' +
                                    "Vlan 1 with switch ports GigabitEthernet " + '</li>'+'<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass673" ></em>&nbsp;&nbsp;' +
                      $.i18n.prop("defaultPolicyCreation") + ':' +
                      $.i18n.prop("allow") +
                       '<em class="fa fa-info-circle policyAllowInfo" title="http, https, smtp, pop3, imap, sip, ftp, dns, icmp"></em> </li>';

          }
          if($("#wizardsecurityrecomendenable").is(':checked')){
            texthtml =texthtml+ '<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass673" ></em>&nbsp;&nbsp;' +
                      ciscoSettingsLabel + ':' +ciscoSettings+ '</li>';
                      seccheckflag=true;

            }
            if($("#wizardavcenable").is(':checked') && avcFlag){
            texthtml =texthtml+ '<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass673" ></em>&nbsp;&nbsp;' +
                      avcSettingsLabel+ ':' +avcSettings+ '</li>';
                      seccheckflag=true;

            }else if(!$('#wizsecurityenable').is(':checked')&& !seccheckflag) {
            texthtml = "";
          }
          if (avcFlag) {
            $('#securityhead').append('<em class="fa fa-check ccpexpCSSReplaceClass678" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVC"));
          }else{
            $('#securityhead').append('<em class="fa fa-check ccpexpCSSReplaceClass678" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVCFails"));
          }
          $('#securitycont').append('<ul class="ccpexpCSSReplaceClass679">'+ texthtml + '<ul>');



        } else {
          //$('#securityhead').append('<em class="fa fa-times ccpexpCSSReplaceClass682" ></em> Security');
          //$('#securitycont').append('<ul class="ccpexpCSSReplaceClass683">'+'<li>'+
          //                          '<p class="bg-text">Not Configured</p>'+'</li>'+'<ul>');
         if (avcFlag) {
            $('#securityhead').append('<em class="fa fa-times ccpexpCSSReplaceClass684" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVC"));
          }else{
            $('#securityhead').append('<em class="fa fa-times ccpexpCSSReplaceClass684" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVCFails"));
          }
          $('#securitycont').append('<ul class="ccpexpCSSReplaceClass685">' + '<li>' +
                                    '<p class="bg-text">' + $.i18n.prop("notConfig") + '</p>' + '</li>' + '<ul>');
        }

      } else {
        // $('#securityhead').append('<em class="fa fa-exclamation-triangle ccpexpCSSReplaceClass686" ></em> Security');
        //$('#securitycont').append('<ul class="ccpexpCSSReplaceClass687">'+'<li>'+
        //                          '<p class="bg-text">Not Supported</p>'+'</li>'+'<ul>');
        if (avcFlag) {
            $('#securityhead').append('<em class="fa fa-exclamation-triangle ccpexpCSSReplaceClass688" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVC"));
          }else{
            $('#securityhead').append('<em class="fa fa-exclamation-triangle ccpexpCSSReplaceClass688" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVCFails"));
          }
        $('#securitycont').append('<ul class="ccpexpCSSReplaceClass689">' + '<li>' +
                                  '<p class="bg-text">' +  $.i18n.prop("notSupported") + '</p>' + '</li>' + '<ul>');


      }
    } else {
      if ($('#wizsecurityenable').is(':checked')||$("#wizardsecurityrecomendenable").is(':checked')||$("#wizardavcenable").is(':checked')) {
        var securityText = $.i18n.prop("securityFeature") + " ";
        var texthtml = "";
        if ($('#wizsecurityenable').is(':checked')) {
          securityText = securityText + '(' + $.i18n.prop("defaultPolicyCreation") + ')';
          //texthtml='<li>'+'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass690" ></em>&nbsp;&nbsp;Default policy creation:'+"(Allow http, https, smtp, pop3, imap, sip, ftp, dns, icmp)"+'</li>'
          texthtml = '<li>' +'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass680" ></em>&nbsp;&nbsp;' +$.i18n.prop("wanZone") + ':' + primaryint + "  " + backupwan + '</li>' + '<li>' +'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass681" ></em>&nbsp;&nbsp;' +$.i18n.prop("lanZone") + ':' +
                                    "Vlan 1 with switch ports GigabitEthernet " + '</li>'+'<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass691" ></em>&nbsp;&nbsp;' +
                    $.i18n.prop("defaultPolicyCreation") + ':' +
                      $.i18n.prop("allow") +
                       '<em class="fa fa-info-circle policyAllowInfo" title="http, https, smtp, pop3, imap, sip, ftp, dns, icmp"></em> </li>';
        }if($("#wizardsecurityrecomendenable").is(':checked')){
            texthtml =texthtml+ '<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass673" ></em>&nbsp;&nbsp;' +
                      ciscoSettingsLabel + ':' +ciscoSettings+ '</li>';
                      seccheckflag=true;

            }if($("#wizardavcenable").is(':checked') && avcFlag){
            texthtml =texthtml+ '<li>' + '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass673" ></em>&nbsp;&nbsp;' +
                      avcSettingsLabel+ ':' +avcSettings+ '</li>';
                      seccheckflag=true;

            }else if(!$('#wizsecurityenable').is(':checked')&& !seccheckflag) {
            texthtml = "";
          }
        //$('#securityhead').append('<em class="fa fa-check ccpexpCSSReplaceClass692" ></em> Security');
        //$('#securitycont').append('<ul class="ccpexpCSSReplaceClass693">'+'<li>'+
        //                          '<em class="fa  fa-chevron-right ccpexpCSSReplaceClass694" ></em>&nbsp;&nbsp;Wan Zone:'+primaryint+"  "+backupwan+
        //                          '</li>'+'<li>'+'<em class="fa  fa-chevron-right ccpexpCSSReplaceClass695" ></em>&nbsp;&nbsp;Lan Zone:'+
        //                          "Vlan 1 with switch ports GigabitEthernet "+'</li>'+texthtml+'<ul>');
        if (avcFlag) {
            $('#securityhead').append('<em class="fa fa-check ccpexpCSSReplaceClass696" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVC"));
          }else{
            $('#securityhead').append('<em class="fa fa-check ccpexpCSSReplaceClass696" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVCFails"));
          }
        $('#securitycont').append('<ul class="ccpexpCSSReplaceClass697">' + texthtml + '<ul>');



      } else {
        //$('#securityhead').append('<em class="fa fa-times ccpexpCSSReplaceClass700" ></em> Security');
        //$('#securitycont').append('<ul class="ccpexpCSSReplaceClass701">'+'<li>'+
        //                          '<p class="bg-text">Not Configured</p>'+'</li>'+'<ul>');
        if (avcFlag) {
            $('#securityhead').append('<em class="fa fa-times ccpexpCSSReplaceClass702" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVC"));
          }else{
            $('#securityhead').append('<em class="fa fa-times ccpexpCSSReplaceClass702" ></em>&nbsp;&nbsp;' +$.i18n.prop("securityAndAVCFails"));
          }
        $('#securitycont').append('<ul class="ccpexpCSSReplaceClass703">' + '<li>' +
                                  '<p class="bg-text">' + $.i18n.prop("notConfig") + '</p>' + '</li>' + '<ul>');
      }
    }
     $('.policyAllowInfo').css('cursor', 'pointer');


                         $(".policyAllowInfo").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
  }

  function loadDsl(controllerArray, showIpInt) {
    xml = showIpInt;
    shipIntBrief = xml;
    var checkFlag = 0;
    interfaceDSLArray.length = 0;
    interfaceotherArray.length = 0;
    $(xml).find('entry').each(function() {
      try {
        var interfaceName = $(this).find('Interface').text(),
          status = $(this).find('Status').text();
          //ipAddress = $(this).find('IP-Address').text(),
          //re = new RegExp("/", "g")
          //id = interfaceName.replace(re, ""),
          //statusImage, interfaceType;
        if (checkFlag == 0) {
          //code
          var editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName, true);
          checkFlag = 1;
        }
        var platformType = deviceCommunicator.getPlatformType();
        platformTypeCheck = platformType;
        if (platformType.indexOf('867VAE') !== -1 || platformType.indexOf('866VAE') !== -1) {
          $('#enableBackupWAN').prop('disabled', true);
          $('#enableBackupWAN').prop('checked', false);
          $('#devicenotsupportbackup').show();
          $('#wanModeFound').val("wan mode");
        } else {
          $('#enableBackupWAN').prop('disabled', false);
          $('#devicenotsupportbackup').hide();
          $('#wanModeFound').val("");

        }

        if (status.indexOf('deleted') === -1) {
          if (controllerArray.length > 0) {
            if (interfaceName.indexOf('ATM') !== -1 || (interfaceName.indexOf('Ethernet') !== -1) &&
                interfaceName.indexOf('FastEthernet') === -1 && interfaceName.indexOf('GigabitEthernet') === -1) {
              $.each(controllerArray, function(key, valuedsl) {
                if (interfaceName.indexOf('ATM') !== -1) {
                  interfaceTag = interfaceName.replace(/ATM/, "");
                  if (valuedsl.indexOf('VDSL') !== -1) {
                    controllerTag = valuedsl.replace(/VDSL/, "").trim();
                    if (interfaceTag.indexOf(controllerTag) !== -1) {
                      interfaceDSLArray.push(interfaceName);
                    }
                  } else if (valuedsl.indexOf('ADSL') !== -1) {
                    controllerTag = valuedsl.replace(/ADSL/, "").trim();
                    if (interfaceTag.indexOf(controllerTag) !== -1) {
                      interfaceDSLArray.push(interfaceName);
                    }
                  } else if (valuedsl.indexOf('SHDSL') !== -1) {
                    controllerTag = valuedsl.replace(/SHDSL/, "").trim();
                    if (interfaceTag.indexOf(controllerTag) !== -1) {
                      interfaceDSLArray.push(interfaceName);
                    }
                  }
                } else if (interfaceName.indexOf('Ethernet') !== -1) {
                  interfaceTag = interfaceName.replace(/Ethernet/, "");
                  if (valuedsl.indexOf('SHDSL') !== -1) {
                    controllerTag = valuedsl.replace(/SHDSL/, "").trim();
                    if (interfaceTag.indexOf(controllerTag) !== -1) {
                      interfaceDSLArray.push(interfaceName);
                    }
                  } else if (valuedsl.indexOf('VDSL') !== -1) {
                    controllerTag = valuedsl.replace(/VDSL/, "").trim();
                    if (interfaceTag.indexOf(controllerTag) !== -1) {
                      interfaceDSLArray.push(interfaceName);
                    }
                  }
                }
              });
            } else {
              var editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName);
              if (editInterfaceType == 6 || editInterfaceType == 5) {
                switchPortArray.push(interfaceName);
              }
              if (interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 &&
                  interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1 &&
                  editInterfaceType !== 1 && editInterfaceType !== 4 && editInterfaceType !== 2 &&
                  editInterfaceType !== 539 && editInterfaceType !== 538 && editInterfaceType !== 503 &&
                  editInterfaceType !== 504 && editInterfaceType !== 532 && editInterfaceType !== 1012 &&
                  editInterfaceType !== 6 && editInterfaceType !== 5) {
                platformTypeCheck = platformType;
              } else {
                if ((interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 &&
                     interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1) &&
                    (editInterfaceType != 6))
                {
                  var xmlswitchport = deviceCommunicator.getExecCmdOutput("show interfaces " + interfaceName + " switchport");
                  var checkswichport = false;
                  var switchDetails = xmlswitchport.split("\r\n");
                  for (i = 0; i < switchDetails.length; i++) {
                    value = switchDetails[i].split(":");
                    if (value[0].trim() == "Switchport") {
                      checkswichport = true;
                    }
                  }
                  if (checkswichport) {
                    if (editInterfaceType !== 5) {
                      switchPortArray.push(interfaceName);
                    }
                  } else {
                    interfaceotherArray.push(interfaceName);
                  }
                }
              }
            }


          } else {
            var editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName);
            var wzSPPushed = false;
            if (editInterfaceType == 6 || editInterfaceType == 5) {
              switchPortArray.push(interfaceName);
              wzSPPushed = true;
            }
            if ((interfaceName.indexOf('ATM') !== -1 || (interfaceName.indexOf('Ethernet') !== -1)) &&
                (interfaceName.indexOf('FastEthernet') === -1 && interfaceName.indexOf('GigabitEthernet') === -1)) {

              if (interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 &&
                  interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1 &&
                  editInterfaceType !== 1 && editInterfaceType !== 4 && editInterfaceType !== 2 &&
                  editInterfaceType !== 539 && editInterfaceType !== 538 && editInterfaceType !== 503 &&
                  editInterfaceType !== 504 && editInterfaceType !== 532 && editInterfaceType !== 1012 &&
                  editInterfaceType !== 6 && editInterfaceType !== 5) {
                checkswichport = false;
              } else {
                if ((interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 &&
                     interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1) &&
                    (editInterfaceType != 6)) {
                  var xmlswitchport = deviceCommunicator.getExecCmdOutput("show interfaces " + interfaceName + " switchport");
                  var checkswichport = false;
                  var switchDetails = xmlswitchport.split("\r\n");
                  for (i = 0; i < switchDetails.length; i++) {
                    value = switchDetails[i].split(":");
                    if (value[0].trim() == "Switchport") {
                      checkswichport = true;
                    }
                  }
                  if (checkswichport) {
                    if (!wzSPPushed && editInterfaceType !== 5) {
                      switchPortArray.push(interfaceName);
                    }
                  } else {
                    interfaceotherArray.push(interfaceName);
                  }
                }
              }


            } else {
              //var editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName);

              if (interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 &&
                  interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1 &&
                  editInterfaceType !== 1 && editInterfaceType !== 4 && editInterfaceType !== 2 &&
                  editInterfaceType !== 539 && editInterfaceType !== 538 && editInterfaceType !== 503 &&
                  editInterfaceType !== 504 && editInterfaceType !== 532 && editInterfaceType !== 1012 &&
                  editInterfaceType !== 6 && editInterfaceType !== 5) {
                checkswichport = false;
              } else {

                if ((interfaceName.indexOf('DSL') === -1 && interfaceName.indexOf('Cellular') === -1 &&
                     interfaceName.indexOf('Loopback') === -1 && interfaceName.indexOf('Vlan') === -1) &&
                    (editInterfaceType != 6 && editInterfaceType != 5)) {
                  var xmlswitchport = deviceCommunicator.getExecCmdOutput("show interfaces " + interfaceName + " switchport");
                  var checkswichport = false;
                  var switchDetails = xmlswitchport.split("\r\n");
                  for (i = 0; i < switchDetails.length; i++) {
                    value = switchDetails[i].split(":");
                    if (value[0].trim() == "Switchport") {
                      checkswichport = true;
                    }
                  }
                  if (checkswichport) {
                    if (!wzSPPushed) {
                      switchPortArray.push(interfaceName);
                    }
                  } else {
                    interfaceotherArray.push(interfaceName);
                  }
                }
              }
            }
          }
        }
      } catch (error) {
        checkFlag = 0;
      }
    });
    setSwitchPortList();
    //interfaceotherArray.push("TengigabitEthernet0/0");
    //interfaceotherArray.push("TengigabitEthernet0/1");
    //interfaceotherArray.push("TengigabitEthernet0/2");
  }
  /*Function to activate Sim for cellular Nano device*/
  function activateSim() {
    if ($('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1) {
      var simNo = "", simNumbers = [];
      $.each(simsList, function(index, sims) {
        if (sims.name == $('#interfaceSelection').val()) {
          simNumbers = sims.value;
          if (simNumbers.length > 1) {
            simNo = $('input[name="simType"]:checked').val();
          } else if (simNumbers.length == 1) {
            simNo = simNumbers[0].simNo.toString();
          }
          return false;
        }
      });
      if (simNo.trim() != "") {
        var simActivate = $('#interfaceSelection').val() + " sim activate slot " + simNo;
        try {
          deviceCommunicator.getExecCmdOutput(simActivate);
        } catch (e) {
          errorLogInConsole(e);
        }
      }
    }
    if ($('#enableBackupWAN').is(':checked') && $('#interfaceBackup').val().toLowerCase().indexOf("cellular") > -1) {
      var simNo = "", simNumbers = [];
      $.each(simsList, function(index, sims) {
        if (sims.name == $('#interfaceBackup').val()) {
          simNumbers = sims.value;
          if (simNumbers.length > 1) {
            simNo = $('input[name="simTypeBackup"]:checked').val();
          } else if (simNumbers.length == 1) {
            simNo = simNumbers[0].simNo.toString();
          }
          return false;
        }
      });
      if (simNo.trim() != "") {
        var simActivate = $('#interfaceBackup').val() + " sim activate slot " + simNo;
        try {
          deviceCommunicator.getExecCmdOutput(simActivate);
        } catch (e) {
          errorLogInConsole(e);
        }
      }
    }

  }

  function createProfileISR() {
    var modemDataPrim = [],
      authType = "",
      pdpType = "",
      username = "",
      password = "",
      modemDataBack = [];
    $.each(modemISRData, function(index, modemData) {
      if (modemData.name == $('#interfaceSelection').val()) {
        modemDataPrim = modemData.value;
      }
      if (modemData.name == $('#interfaceBackup').val()) {
        modemDataBack = modemData.value;
      }
    });
    if (modemDataPrim.length > 0) {
      if ($('usernamePwdFromSP').is(':checked')) {
        authType = $('input[name="auth"]:checked').val();
        username = $('#apnUsername').val();
        password = $('#apnPassword').val();
      }
      if (modemDataPrim[0].modemType != "LTE") {
        pdpType = $('input[name="pdpType"]:checked').val();
      }
      createNewProfileISR(modemDataPrim, $('#interfaceSelection').val(), $('#apn').val(), username, password, authType, pdpType,
                          $("#activateModem:checked").val(), $('#mdn').val(), $('#msid').val(), $('#msl').val(), $('#otaspPhoneNo').val());
    } else if (modemDataBack.length > 0) {
      if ($('usernamePwdFromSPBackup').is(':checked')) {
        authType = $('input[name="authBackup"]:checked').val();
        username = $('#apnUsernameBackup').val();
        password = $('#apnPasswordBackup').val();
      }
      if (modemDataBack[0].modemType != "LTE") {
        pdpType = $('input[name="pdpTypeBackup"]:checked').val();
      }
      createNewProfileISR(modemDataBack, $('#interfaceBackup').val(), $('#apnBackup').val(), username, password, authType, pdpType,
                          $("#activateModemBackup:checked").val(), $('#mdnBackup').val(), $('#msidBackup').val(), $('#mslBackup').val(),
                          $('#otaspPhoneNoBackup').val());
    }

  }

  function setConfigStatus(c_name, value) {
    document.cookie = c_name + "=" + escape(value);
  }

  function createNewProfileISR(modemData, interfaceNames, apnName, username, password, authType, pdpType, activateModem,
                               manual_mdn, manual_msid, manual_msl, otasp_aan) {
    var chatScriptName = "",
      profileType = "",
      response;
    var re = new RegExp("/", "g");
    var id = interfaceNames.replace(" ", "").replace(re, "");
    if (modemData[0].modemType === "HSPA+R7") {
      chatScriptName = "hspa-R7";
    } else if (modemData[0].modemType === "LTE") {
      chatScriptName = "lte";
    }
    if (modemData[0].modemType === "LTE") {
      profileType = "lte";
    } else {
      profileType = "gsm";
    }
    if (modemData[0].modemType === "LTE" && modemData[0].serviceProvider === "ATT" &&
        $("#accessPointName").is(':checked')) {
        var command = interfaceNames + " " + profileType + " profile create 1" + " " + apnName;
        response = deviceCommunicator.getExecCmdOutput(command);
        setConfigStatus(id, response);
    }
    if (modemData[0].modemType === "LTE" && modemData[0].serviceProvider === "Verizon" &&
        $("#accessPointName").is(':checked')) {
        var command = interfaceNames + " " + profileType + " profile create 3" + " " + apnName;
        response = deviceCommunicator.getExecCmdOutput(command);
        setConfigStatus(id, response);
    }
    if (modemData[0].modemType === "GSM" || modemData[0].modemType === "HSPA+R7" || modemData[0].modemType === "HSPA") {
      if (!$("#usernamePwdFromSP").is(":checked")) {
        var command = interfaceNames + " " + profileType + " profile create 1" + " " + apnName;
        response = deviceCommunicator.getExecCmdOutput(command);
      } else {
        try {
          var command = interfaceNames + " " + profileType + " profile create 1" + " " + apnName + " " + authType + " " + username + " " + password + " " + pdpType;
          response = deviceCommunicator.getExecCmdOutput(command);
        } catch (ex1) {
          // if the cli "cellularxx gsm profile create 1 apn username pwd ipv4" fails try "cellularxx gsm profile create 1 apn ipv4 username pwd "
          try {
            var command = interfaceNames + " " + profileType + " profile create 1" + " " + apnName + " " + pdpType + " " + authType + " " + username + " " + password;
            response = deviceCommunicator.getExecCmdOutput(command);
          } catch (ex2) {
            var command = interfaceNames + " " + profileType + " profile create 1" + " " + apnName + " " + authType + " " + username + " " + password;
            response = deviceCommunicator.getExecCmdOutput(command);
          }
        }
      }
      setConfigStatus(id, response);
    }
    if (activateModem !== undefined) {
      if ((modemData[0].serviceProvider === "Sprint" && modemData[0].modemNo < 5727)) {
        var command = interfaceNames + " cdma activate manual " + manual_mdn + " " + manual_msid + " " + manual_msl;
        response = deviceCommunicator.getExecCmdOutput(command);
      } else if ((modemData[0].serviceProvider === "Sprint" && modemData[0].modemNo >= 5727) ||
                 (modemData[0].serviceProvider === "BSNL") || (modemData[0].serviceProvider === "Global")) {
        activationMethod = $('input:radio[name=activationMethod]:checked').val();
        if (activationMethod === "manual") {
          var command = interfaceNames + " cdma activate manual " + manual_mdn + " " + manual_msid + " " + manual_msl;
          response = deviceCommunicator.getExecCmdOutput(command);
        } else {
          var command = interfaceNames + " cdma activate oma-dm device-config";
          response = deviceCommunicator.getExecCmdOutput(command);
        }
      } else if (modemData[0].serviceProvider === "Verizon") {
        var command = interfaceNames + " cdma activate otasp " + otasp_aan;
        response = deviceCommunicator.getExecCmdOutput(command);
      }
      setConfigStatus(id, response);
    }
  }

  function profileCreation() {
    if ($('#primaryModemMode').val() != "CDMA") {
      if ($('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1) {
        if (!$('#usernamePwdFromSP').is(':checked')) {
          interfaceAndConnection.createProfile($('#interfaceSelection').val(), "1", $('#apn').val(), "", "", "none");
        } else {
          interfaceAndConnection.createProfile($('#interfaceSelection').val(), "1", $('#apn').val(),
                                               $('#apnUsername').val(), $('#apnPassword').val(), $('input[name="auth"]:checked').val());
        }
      }
      if ($('#enableBackupWAN').is(':checked') && $('#interfaceBackup').val().toLowerCase().indexOf("cellular") > -1) {
        if (!$('#usernamePwdFromSPBackup').is(':checked')) {
          interfaceAndConnection.createProfile($('#interfaceBackup').val(), "1", $('#apnBackup').val(), "", "", "none");
        } else {
          interfaceAndConnection.createProfile($('#interfaceBackup').val(), "1", $('#apnBackup').val(),
                                               $('#apnUsernameBackup').val(), $('#apnPasswordBackup').val(), $('input[name="authBackup"]:checked').val());
        }
      }
    }
  }
  var careerStr = "";
  function populateFirmwareDropDown(interfaceName, formName) {
    var dropDown = "";
    if (formName == "primary"){
      dropDown = "firwareList";
    }
    else{
      dropDown = "firwareListBackup";
    }

    $.each(firmwareList, function(index, firmware) {
      if (firmware.name == interfaceName) {
        var currentDropDown = $('#' + dropDown);
        currentDropDown.empty();
        $.each(firmware.value, function(index, value) {
          if (value.carrier == "Generic") {
            careerStr = $.i18n.prop("genericStr");
          }
          else {
            careerStr = value.carrier;
          }

          if (value.status == "ACTIVE") {
            currentDropDown.append('<option value="' + value.id + '"> ' + careerStr + ' - ' + value.technology + '</option>');
            currentDropDown.attr("active", value.id);
            currentDropDown.attr("technology", value.technology);
          } else {
            currentDropDown.append('<option value="' + value.id + '">' + careerStr + ' - ' + value.technology + '</option>');
          }
        });
      }
    });
    if (dropDown == "firwareList") {
      $('#firwareList').val($('#firwareList').attr("active"));
      $('#primaryModemMode').val($('#firwareList').attr("technology"));
      if ($('#primaryModemMode').val() == "CDMA") {
        $(".profileSectionModem").hide();
      } else {
        $(".profileSectionModem").show();
      }
      $('#firwareList').change();
    } else {
      $('#firwareListBackup').val($('#firwareListBackup').attr("active"));
      $('#backupModemMode').val($('#firwareListBackup').attr("technology"));
      if ($('#backupModemMode').val() == "CDMA") {
        $(".profileSectionModemBackup").hide();
      } else {
        $(".profileSectionModemBackup").show();
      }
      $('#firwareListBackup').change();
    }
  }

  function getSimInfo(interfaceName, formName) {

    $('#cellularSimErrorMsg').remove();
    $('#cellularSimErrorMsgBackup').remove();
    if (formName == "primary") {
      $('#simZeroRow').hide();
      $('#simOneRow').hide();
    } else {
      $('#simZeroRowBackup').hide();
      $('#simOneRowBackup').hide();
    }
    $.each(simsList, function(index, sims) {
      if (sims.name == interfaceName) {
        var interfaceSim = sims.value;
        if (interfaceSim.length == 0) {
          if (formName == "primary") {
            // $('#simDiv').append('<div class="alert alert-danger ccpexpCSSReplaceClass704" id="cellularSimErrorMsg" >'+
            //                     '<em class="fa fa-exclamation-triangle"></em><span> No SIMs detected. </span></div>');
            $('#simDiv').append('<div class="alert alert-danger ccpexpCSSReplaceClass705" id="cellularSimErrorMsg" >'+
                                '<em class="fa fa-exclamation-triangle"></em><span> ' +
                                $.i18n.prop("noSimDetected") + '</span></div>');
            $('#simConfigTable').hide();
            $('#simPrimaryNo').val("-1");
          } else {
            //$('#simDivBackup').append('<div class="alert alert-danger ccpexpCSSReplaceClass706" id="cellularSimErrorMsgBackup" >'+
            //                          '<em class="fa fa-exclamation-triangle"></em><span> No SIMs detected. </span></div>');
            $('#simDivBackup').append('<div class="alert alert-danger ccpexpCSSReplaceClass707" id="cellularSimErrorMsgBackup" >'+
                                      '<em class="fa fa-exclamation-triangle"></em><span> ' +
                                      $.i18n.prop("noSimDetected") + ' </span></div>');
            $('#simConfigTableBackup').hide();
            $('#simBackupNo').val("-1");
          }
        } else if (interfaceSim.length == 1) {
          if (formName == "primary") {
            //$('#simDiv').append('<div id="cellularSimErrorMsg" class="ccpexpCSSReplaceClass708">'+
            //                    '<em  class="fa fa-check ccpexpCSSReplaceClass709"></em><span> SIM ' + interfaceSim[0].simNo + ' selected for activation. </span></div>');
            $('#simDiv').append('<div id="cellularSimErrorMsg" class="ccpexpCSSReplaceClass710">'+
                                '<em  class="fa fa-check ccpexpCSSReplaceClass711"></em><span> SIM ' + interfaceSim[0].simNo + ' ' +
                                $.i18n.prop("simSelectedForActivation") + ' </span></div>');

            $('#simConfigTable').hide();
            $('#simPrimaryNo').val(interfaceSim[0].simNo);
          } else {
            //$('#simDivBackup').append('<div id="cellularSimErrorMsgBackup" class="ccpexpCSSReplaceClass712">'+
            //                          '<em  class="fa fa-check ccpexpCSSReplaceClass713"></em><span> SIM ' + interfaceSim[0].simNo +
            //                          ' selected for activation. </span></div>');
            $('#simDivBackup').append('<div id="cellularSimErrorMsgBackup" class="ccpexpCSSReplaceClass714">'+
                                      '<em  class="fa fa-check ccpexpCSSReplaceClass715"></em><span> SIM ' + interfaceSim[0].simNo + ' ' +
                                      $.i18n.prop("simSelectedForActivation") + ' </span></div>');
            $('#simConfigTableBackup').hide();
            $('#simBackupNo').val(interfaceSim[0].simNo);
          }
        } else if (interfaceSim.length == 2) {
          if (formName == "primary") {
            $('#simZeroRow').show();
            $('#simOneRow').show();
          } else {
            $('#simZeroRowBackup').show();
            $('#simOneRowBackup').show();
          }
          $(".switchUI").attr("active-sim", "0");
          if (interfaceSim[0].active) {
            if (interfaceSim[0].simNo.toString() == "0") {
              if (formName == "primary") {
                if ($('#simPrimaryNo').attr("simSelected") == "false") {
                  $("#modeSimOne").prop('checked', 'true');
                  $('#simPrimaryNo').val("0");
                  $('#simActiveInfoMsg').text("SIM 0");
                }
              }
              else {
                if ($('#simBackupNo').attr("simSelected") == "false") {
                  $("#modeSimOneBackup").prop('checked', 'true');
                  $('#simBackupNo').val("0");
                  $('#simActiveInfoMsgBackup').text("SIM 0");
                }
              }
            } else {
              if (formName == "primary") {
                if ($('#simPrimaryNo').attr("simSelected") == "false") {
                  $("#modeSimTwo").prop('checked', 'true');
                  $('#simPrimaryNo').val("1");
                  $('#simActiveInfoMsg').text("SIM 1");
                }
              }
              else {
                if ($('#simBackupNo').attr("simSelected") == "false") {
                  $("#modeSimTwoBackup").prop('checked', 'true');
                  $('#simBackupNo').val("1");
                  $('#simActiveInfoMsgBackup').text("SIM 1");
                }
              }
            }
          }
          if (interfaceSim[1].active) {
            $(".switchUI").attr("active-sim", "1");
            if (interfaceSim[1].simNo.toString() == "0") {
              if (formName == "primary") {
                if ($('#simPrimaryNo').attr("simSelected") == "false") {
                  $("#modeSimOne").prop('checked', 'true');
                  $('#simPrimaryNo').val("0");
                  $('#simActiveInfoMsg').text("SIM 0");
                }
              }
              else {
                if ($('#simBackupNo').attr("simSelected") == "false") {
                  $("#modeSimOneBackup").prop('checked', 'true');
                  $('#simBackupNo').val("1");
                  $('#simActiveInfoMsgBackup').text("SIM 0");
                }
              }
            } else {
              if (formName == "primary") {
                if ($('#simPrimaryNo').attr("simSelected") == "false") {
                  $("#modeSimTwo").prop('checked', 'true');
                  $('#simPrimaryNo').val("0");
                  $('#simActiveInfoMsg').text("SIM 1");
                }
              }
              else {
                if ($('#simBackupNo').attr("simSelected") == "false") {
                  $("#modeSimTwoBackup").prop('checked', 'true');
                  $('#simBackupNo').val("1");
                  $('#simActiveInfoMsgBackup').text("SIM 1");
                }
              }
            }
          }
        }
      }
    });

  }

  function loadSerialInterfaces() {
    $('#connectionWanType').append("<option value='Serial'>"+$.i18n.prop("wizardWanTypeSerial")+"</option>");
    $('#connectionTypeBackup').append("<option value='Serial'>"+$.i18n.prop("wizardWanTypeSerial")+"</option>");

  }

  function hideAllIntialBackup() {
    $("#ipcpRowbackup").hide();
    $("#ipv6oeCheckboxbackup").hide();
    $("#prefixRowIpv6backup").hide();
    $('#wizardMTUSizeTrIpv6backup').hide();
    $('#wizardMSSSizeTrIpv6backup').hide();
    $('#controllerBackupRow').hide();
    $('#cellularDnsBackup').hide();
    $('#interfaceRowBackup').hide();
    $('#modeRowBackup').hide();
    $('#controllerRowBackup').hide();
    $('#interfaceRowBackup').hide();
    $('#ipAddressFieldsetBackup').hide();
    //$('#wizprimarypppoebackup').hide();
    $('#wizprimarypppoerowBackup').hide();
    $('#dceCableBackup').hide();
    $('#dceClockRateBackup').hide();
    $('#serialModeFieldSetBackup').hide();
    $('#cellularNanoFieldsetBackup').hide();
    $('#connectionAuthenticationFieldsetBackup').hide();
    $('#connectionAuthenticationFieldsetIpv6backup').hide();
    $('#slaFiledsetbackup').hide();
    $('#wizardprimaryvpiRowBackup').hide();
    $('#wizardencapRowBackup').hide();
    $('#persistanceRowBackup').hide();
    //$('#wizardvpibackup').hide();
    $('#hideAdvBackup').hide();
    $('#wizardMTUSizeBackupTr').hide();
    $('#wizardMSSSizeBackupTr').hide();
    $('#ipv6ConfTypeTrbackup').hide();
    $('#ipv6PrefixTrbackup').hide();
    $('#ipv6PrefixMaskTrbackup').hide();
    $('#ipv6DHCPClintTrbackup').hide();
    //$('#wizprimaryipv6Confbackup').attr('checked', false);
    //$('#dhcpClientbackup').attr('checked', false);
    $('#ipv6Prefixbackup').val("");
    $('#ipv6MaskBackup').val("");
    //$("#wizardprimaryipv6oebackup").prop("checked",false);
  }
  //This will call on change of connection type as Serial in Backup config
  function populateSerialByConnectionTypeInBackup() {
    $('#interfaceBackup').empty();
    var primaryInterface = $('#interfaceSelection').val();
    for (var i = 0; i < serialInterface.length; i++) {
      if (serialInterface[i] !== primaryInterface) {
        $('#interfaceBackup').append("<option value='" + serialInterface[i] + "'>" + serialInterface[i] + "</option>");
      }
    }
    $('#interfaceRowBackup').show();

    $('#ipAddressFieldsetBackup').show();
    $('#serialModeFieldSetBackup').show();
    $('#slaFiledsetbackup').show();
    $('#showAdvBackup').show();
    var sysncModeDoc = $('input:radio[name=syncModeBackup]');
    sysncModeDoc.filter('[value=sync]').attr('checked', true);
    $('input[name=syncModeBackup]').change();


    $('#interfaceBackup').val($("#interfaceBackup option").eq(1).val());
    $('#interfaceBackup').change();
  }

  function populateIpv6ConfByType(wantype) {
    var ipv6ConfigType = $('#ipv6Select' + wantype).val();
    $('#ipv6PrefixTr' + wantype).hide();
    $("div[for=wizardprimaryPrefixProvider]").hide();
    $('#ipv6PrefixMaskTr' + wantype).hide();
    $('#ipv6DHCPClintTr' + wantype).hide();
    if (ipv6ConfigType === 'staticip' || ipv6ConfigType === 'prefixFromProvider') {
      $('#ipv6PrefixTr' + wantype).show();
      $('#ipv6PrefixMaskTr' + wantype).show();
    } else if (ipv6ConfigType === 'autoconfig') {
      $('#ipv6DHCPClintTr' + wantype).show();
    }
    if (ipv6ConfigType === 'staticip') {
      $("#prefixRowIpv6" + wantype).hide();
      $("#showMandatePrefix"+wantype).hide();
    }else{
      if ($('#dhcpClient' + wantype).is(":checked") || ipv6ConfigType === 'prefixFromProvider') {
	$("#prefixRowIpv6" + wantype).show();
	if (ipv6ConfigType === 'prefixFromProvider') {
	  $("#showMandatePrefix"+wantype).hide();
	  $("#wizardprimaryPrefixProvider"+wantype).removeClass("required");
	}else{
	  $("#showMandatePrefix"+wantype).show();
	  $("#wizardprimaryPrefixProvider"+wantype).addClass("required");
	}
      }else{
	$("#prefixRowIpv6" + wantype).hide();
      }
    }
  }

  function populateIpv6(wantype) {
    if ($("#wizprimaryipv6Conf" + wantype).is(':checked')) {
      $('#ipv6ConfTypeTr' + wantype).show();
      $('#ipv6Select' + wantype).change();
      
    } else {
      $('#ipv6ConfTypeTr' + wantype).hide();
      $('#ipv6PrefixTr' + wantype).hide();
      $('#ipv6PrefixMaskTr' + wantype).hide();
      $('#ipv6DHCPClintTr' + wantype).hide();
      $("#prefixRowIpv6"+wantype).hide();
    }
  }

  function populateClockRate(interface1, decClockRatePrimary) {
    var isDCE = false;
    var serialControlerOutPut = deviceCommunicator.getExecCmdOutput("show controllers " + interface1);

    var indexOfNoSerial = serialControlerOutPut.indexOf("No serial");
    var indexOfDCE = serialControlerOutPut.indexOf("DCE");
    if (indexOfNoSerial === -1 && indexOfDCE !== -1) {
      isDCE = true;
      $('#' + decClockRatePrimary).empty();
      try {
        var arr = [];
        arr.push({
          name: "interfaceName",
          value: interface1
        });
        deviceCommunicator.configureCommandsFromTemplate2("getClockRateValues.txt", arr, false);
      } catch (error) {
        var outPut = error.errorResponse;
        var arr = outPut.split("\n");
        for (var i = 0; i < arr.length; i++) {
          var value = $.trim(arr[i]);
          if ($.isNumeric(value)) {
            $('#' + decClockRatePrimary).append("<option value='" + value + "'>" + value + "</option>");
          }
          //consoleLog(arr[i]);
        }

      }

    }
    return isDCE;
  }

  function hideAllIntial() {
    $("#prefixRowIpv6").hide();
    $("#ipv6oeFieldset").hide();
    $("#ipv6oeCheckbox").hide();
    $("#ipcpRow").hide();
    $('.customErrorDiv').hide();
    $('#lanFieldset').hide();
    $('#addLanFieldset').hide();
    $('#controllerRow').hide();
    $('#modeRow').hide();
    $('#cellularDns').hide();
    $('#interfaceRow').hide();
    $('#ipAddressFieldset').hide();
    $('#wizprimarypppoerow').hide();
    $('#dceCable').hide();
    $('#dceClockRate').hide();
    $('#serialModeFieldSet').hide();
    $('#cellularNanoFieldset').hide();
    $('#connectionAuthenticationFieldset').hide();
    $('#connectionAuthenticationFieldsetIpv6').hide();
    $('#wizprimarypppoerow').hide();
    $('#wizardencapRow').hide();
    $('#wizardprimaryvpiRow').hide();
    $('#serialAuthMethod').hide();
    $('#hideAdv').hide();
    $('#wizardMTUSizeTr').hide();
    $('#wizardMSSSizeTr').hide();
    $('#wizardMTUSizeTrIpv6').hide();
    $('#wizardMSSSizeTrIpv6').hide();
    $('#persistanceRow').hide();
    $('#ipv6ConfTypeTr').hide();
    $('#ipv6PrefixTr').hide();
    $('#ipv6PrefixMaskTr').hide();
    $('#ipv6DHCPClintTr').hide();
    //$('#wizprimaryipv6Conf').attr('checked', false);
    //$('#dhcpClient').attr('checked', false);
    $('#ipv6Prefix').val("");
    $('#ipv6Mask').val("");
  }

  function onPppoeChangeForSerialBackup(encapsulation) {
    if (encapsulation === 'ppp') {

      $('#connectionAuthenticationFieldsetBackup').show();
    } else {
      $('#connectionAuthenticationFieldsetBackup').hide();
    }
    $("#connectionAuthenticationFieldsetIpv6backup").hide();

  }

  function onPppoeChangeForSerial(encapsulation) {
    if (encapsulation === 'ppp') {

      $('#connectionAuthenticationFieldset').show();
    } else {
      $('#connectionAuthenticationFieldset').hide();
    }
    $('#connectionAuthenticationFieldsetIpv6').hide();

  }


  //This will call on change of connection type as Serial in primary config

  function populateSerialByConnectionType() {
    $('#interfaceSelection').empty();
    for (var i = 0; i < serialInterface.length; i++) {
      $('#interfaceSelection').append("<option value='" + serialInterface[i] + "'>" + serialInterface[i] + "</option>");
    }
    $('#interfaceRow').show();
    $('#ipAddressFieldset').show();
    $('#serialModeFieldSet').show();
    var sysncModeDoc = $('input:radio[name=syncMode]');
    sysncModeDoc.filter('[value=sync]').attr('checked', true);
    $('input[name=syncMode]').change();
    $('#interfaceSelection').val($("#interfaceSelection option").eq(1).val());
    $('#interfaceSelection').change();


  }

  /*Function to get validate IP Addres
   *@return boolean
   */
  function checkIPAddress(output) {
    var primaryWanIP = "";
    if (output.trim() !== "") {
      var interfaceLines = output.split("\n");
      $.each(interfaceLines, function(index, iLines) {
        if ((iLines.indexOf("Internet address") > -1)) {
          var iLinesSplit = iLines.trim().split(/\s+/);
          primaryWanIP = iLinesSplit[iLinesSplit.length - 1].split("/")[0];
          return false;
        }
      });
      if (validateIpv4Address(primaryWanIP)) {
        return primaryWanIP;
      } else {
        return "";
      }
    } else {
      return "";
    }
  }
  /*Function to get dns servers IP
   *@return string (IP Address)
   */
  function getDnsServers(output) {
    var dnsArr = [];
    if (output.trim() !== "") {
      var interfaceLines = output.split("\n");
      $.each(interfaceLines, function(index, iLines) {
        if ((iLines.toLowerCase().indexOf("domain name-servers:") > -1)) {
          if (validateIpv4Address(interfaceLines[index + 1].trim())){
            dnsArr.push(interfaceLines[index + 1].trim());
          }
          if (validateIpv4Address(interfaceLines[index + 2].trim())){
            dnsArr.push(interfaceLines[index + 2].trim());
          }
          return false;
        }
      });
    }
    return dnsArr;
  }
  /*Function to parse ping output
   *@return string (percentage for success)
   */
  function checkPingStatus(output) {
    var percent = 0;
    if (output.trim() !== "") {
      var interfaceLines = output.split("\n");
      $.each(interfaceLines, function(index, iLines) {
        if ((iLines.toLowerCase().indexOf("success rate is") > -1)) {
          var tmp = iLines.split('percent')[0];
          var tempPercentArr = tmp.trim().split(/\s+/);
          percent = parseInt(tempPercentArr[tempPercentArr.length - 1]);
          return false;
        }
      });
    }
    return percent;
  }

  /*To get primary and backup WAN interfaces*/
  function getPrimaryBackup() {
    var xml = "", xmlDoc = "", primaryBackup = [];
    xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
    if (xml.indexOf("Building configuration...") !== -1) {
      xml = xml.substring(25, xml.length);
      xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
    }
    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
    regEx = new RegExp("&#x03;", "g");
    xml = xml.replace(regEx, "");
    try {
      xmlDoc = $.parseXML(xml);
    } catch (error) {
      xmlDoc = xml;
    }

    $(xmlDoc).find('interface').each(function() {
      var interfaceName = $(this).find('Param:first').text();
      var interfaceXml = this;
      var description = $(interfaceXml).find('description').text();
      //var encapsulation = "";
      var dialerPoolNumber = "", dialerGroupNumber = "", dialer = "";
      dialerPoolNumber = $(interfaceXml).find('DialerPoolNumber').text();
      dialerGroupNumber = $(this).find('DialerListNumber').text();
      if (dialerPoolNumber.length > 0) {
        $(xmlDoc).find('interface').each(function() {
          var interName = "";
          interName = $(this).find('Param:first').text();
          if ($(this).find('DialerPoolNumber').text() === dialerPoolNumber && interName.indexOf("Dialer") !== -1) {
            dialer = interName;
            dialerGroupNumber = $(this).find('DialerListNumber').text();
            return false;
          }
        });
      }



      if (description.indexOf("PrimaryWANDesc") != -1 && interfaceName.toLowerCase().indexOf("dialer") == -1) {
        if (dialer.length > 0) {
          primaryBackup.push({type: "primary", intName: interfaceName, dialer: true, dialerInt: dialer});
        } else {
          primaryBackup.push({type: "primary", intName: interfaceName, dialer: false, dialerInt: ""});
        }
      }
      else if (description.indexOf("BackupWANDesc") != -1 && interfaceName.toLowerCase().indexOf("dialer") == -1) {
        if (dialer.length > 0) {
          primaryBackup.push({type: "backup", intName: interfaceName, dialer: true, dialerInt: dialer});
        } else {
          primaryBackup.push({type: "backup", intName: interfaceName, dialer: false, dialerInt: ""});
        }
      }
    });
    //consoleLog(primaryBackup);
  }
  /*To Test Wan connection using Web Workers*/
  function checkWanConnection() {
    $('#tryPingButton').unbind("click");
    $('#ipAddressChecker').find('.bulletList').hide();
    $('#ipAddressChecker').find('.three-quarters').css("display", "inline-block");
    $('#statusPing').html($.i18n.prop("obtainingIPAddress") + "...");
    worker = new Worker('../js/connectionWorker.js');
    var wanInterface = $('#interfaceSelection').val();

    if ((($('#yesPersist').is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1) ||
         ($('#wizprimarypppoe').is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1)) &&
        $('#interfaceSelection').val().toLowerCase().indexOf("serial") == -1) {
      wanInterface = "Dialer 1";
    }
    if ($('#connectionWanType').val() === "DSL" &&
       !$('#wizprimarypppoe').is(':checked')) {
        if ($('#interfaceSelection').val().toLowerCase().indexOf("ethernet") > -1) {
          if ($('#wizardencapId').val() != "") {
            wanInterface = $('#interfaceSelectionsub').val();
          } else {
            wanInterface = $('#interfaceSelection').val();
          }
        } else if ($('#interfaceSelection').val().toLowerCase().indexOf("atm") > -1) {
          wanInterface = $('#interfaceSelectionsub').val();
        }

    }
    $(".cliWindow").append("router#" + "show interfaces " + wanInterface + "<br/>");
    $(".netConnector").addClass("netConnectorBlink");
    var messagePost = [{
        "name": "shinterface",
        "data": wanInterface
      }];
    worker.postMessage(JSON.stringify(messagePost));
    worker.onmessage = function(event) {
      var resp = JSON.parse(event.data);
      if (resp[0]['cliName'] == "shInterace") {
        $(".cliWindow").append(resp[0]['output'].replace(/\n/g, '<br/>'));
        var ip = checkIPAddress(resp[0]['output']);
        $('.cliWindow').scrollTop($('.cliWindow')[0].scrollHeight);
        $('#ipAddressChecker').find('.three-quarters').hide();
        if (ip != "") {
          $('#ipAddressChecker').prepend('<em class="fa fa-check ccpexpCSSReplaceClass716" ></em>');
          //$('#checkIpAddress').text("IP Address configured - "+ip);
          $('#checkIpAddress').text($.i18n.prop("ipAddConfigured") + " - " + ip);
          $('#statusPing').empty();
          //$('#statusPing').html("Checking DNS Servers...");
          $('#statusPing').html($.i18n.prop("checkingDNS") + "...");
          $('#dnsChecker').find('.bulletList').hide();
          $('#dnsChecker').find('.three-quarters').css("display", "inline-block");
          // $(".cliWindow").append("router#show interfaces ip dns view <br/>");
          $(".cliWindow").append($.i18n.prop("routerShowDNS") + " <br/>");
          var nextPost = [{
              "name": "shdns",
              "data": ""
            }];
          worker.postMessage(JSON.stringify(nextPost));
          //consoleLog(ip + "ip");
        } else {
          $('#ipAddressChecker').prepend('<em class="fa fa-times ccpexpCSSReplaceClass717" ></em>');
          $(".netConnector").removeClass("netConnectorBlink");
          $(".netConnector").addClass("netFail");
          $('#statusPing').empty();
          //$('#statusPing').html('<em class="fa fa-times-circle ccpexpCSSReplaceClass718" ></em> &nbsp;IP address has not been assigned by ISP yet. Please try again');
          $('#statusPing').html('<em class="fa fa-times-circle ccpexpCSSReplaceClass719" ></em> &nbsp;' +
                                $.i18n.prop("ipNotAssigned"));
          worker.terminate();
          addClickToTry();
        }
      } else if (resp[0]['cliName'] == "shIpDns") {
        $(".cliWindow").append(resp[0]['output'].replace(/\n/g, '<br/>'));
        var dnsArr = getDnsServers(resp[0]['output']);

        $('.cliWindow').scrollTop($('.cliWindow')[0].scrollHeight);
        $('#dnsChecker').find('.three-quarters').hide();
        if (dnsArr.length > 0) {
          var dnsIps = "";
          $('#dnsChecker').prepend('<em class="fa fa-check ccpexpCSSReplaceClass720" ></em>');
          if (dnsArr.length == 2) {
            dnsIps = dnsArr[0] + ", " + dnsArr[1];
          } else {
            dnsIps = dnsArr[0];
          }
          //  $('#checkDNS').text("DNS configured - "+dnsIps);
          $('#checkDNS').text($.i18n.prop("dnsConfigured") + " - " + dnsIps);
          $('#statusPing').empty();
          $('#statusPing').html("Pinging www.cisco.com...");
          $('#pingChecker').find('.bulletList').hide();
          $('#pingChecker').find('.three-quarters').css("display", "inline-block");
          $(".cliWindow").append("<br/>router#ping www.cisco.com source " + wanInterface + "<br/>");
          var nextPost = [{
              "name": "ping",
              "data": wanInterface
            }];
          worker.postMessage(JSON.stringify(nextPost));
          //consoleLog(dnsArr + "dns");
        } else {
          $('#dnsChecker').prepend('<em class="fa fa-times ccpexpCSSReplaceClass721" ></em>');
          $('#statusPing').empty();
          //$('#statusPing').html('<em class="fa fa-times-circle ccpexpCSSReplaceClass722" ></em> &nbsp;DNS not assigned by ISP yet. Please try again');
          $('#statusPing').html('<em class="fa fa-times-circle ccpexpCSSReplaceClass723" ></em> &nbsp;' +
                                $.i18n.prop("dnsNotAssignedDNS"));
          $(".netConnector").removeClass("netConnectorBlink");
          $(".netConnector").addClass("netFail");
          worker.terminate();
          addClickToTry();
        }
      } else if (resp[0]['cliName'] == "ping") {
        $(".cliWindow").append(resp[0]['output'].replace(/\n/g, '<br/>'));
        var pingPercent = checkPingStatus(resp[0]['output']);
        $('.cliWindow').scrollTop($('.cliWindow')[0].scrollHeight);
        $('#pingChecker').find('.three-quarters').hide();
        if (pingPercent > 0) {
          $('#pingChecker').prepend('<em class="fa fa-check ccpexpCSSReplaceClass724" ></em>');
          //$('#checkPing').text("Ping Successful with success rate "+pingPercent+"%");
          $('#statusPing').empty();
          $('#checkPing').text($.i18n.prop("pingSuccessRate") + ": " + pingPercent + "%");
          $('#statusPing').append('<em class="fa fa-check-circle ccpexpCSSReplaceClass725" ></em> &nbsp;' +
                                  $.i18n.prop("youHaveActiveInternetConn"));
          //$('#checkConnection').text($.i18n.prop("connectedToInternet"));
          $(".netConnector").removeClass("netConnectorBlink");
          $(".netConnector").removeClass("netFail");
          $(".netConnector").addClass("netSuccess");
          worker.terminate();
          addClickToTry();
          //$('#statusPing').empty();
          //$('#statusPing').html("Checking if you are connected...");
          // $('#statusPing').html($.i18n.prop("checkingIfConnected") + "...");
          //$('#browserChecker').find('.bulletList').hide();
          //$('#browserChecker').find('.three-quarters').css("display", "inline-block");
          /*var nextPost = [{
           "name": "pingDomain",
           "data": ""
           }];
           worker.postMessage(JSON.stringify(nextPost));
           //consoleLog(pingPercent + "ping");*/
        } else {
          $('#pingChecker').prepend('<em class="fa fa-times ccpexpCSSReplaceClass726" ></em>');
          $('#statusPing').empty();
          // $('#statusPing').html('<em class="fa fa-times-circle ccpexpCSSReplaceClass727" ></em> &nbsp;Failed to ping www.google.com');
          $('#statusPing').html('<em class="fa fa-times-circle ccpexpCSSReplaceClass728" ></em> &nbsp;' +
                                $.i18n.prop("failedToPing") + ' www.cisco.com');
          $(".netConnector").removeClass("netConnectorBlink");
          $(".netConnector").addClass("netFail");
          worker.terminate();
          addClickToTry();
        }
      } /*else if (resp[0]['cliName'] == "pingDomain") {
       $('#browserChecker').find('.three-quarters').hide();
       if (resp[0]['output'] == "true") {
       $('#browserChecker').prepend('<em class="fa fa-check ccpexpCSSReplaceClass729" ></em>');
       $('#statusPing').empty();
       // $('#statusPing').append('<em class="fa fa-check-circle ccpexpCSSReplaceClass730" ></em> &nbsp;You have an active internet connection');
       // $('#checkConnection').text("Connected to the Internet");
       $('#statusPing').append('<em class="fa fa-check-circle ccpexpCSSReplaceClass731" ></em> &nbsp;' + $.i18n.prop("youHaveActiveInternetConn"));
       $('#checkConnection').text($.i18n.prop("connectedToInternet"));
       $(".netConnector").removeClass("netConnectorBlink");
       $(".netConnector").removeClass("netFail");
       $(".netConnector").addClass("netSuccess");
       worker.terminate();
       addClickToTry();
       } else {
       $('#browserChecker').prepend('<em class="fa  fa-exclamation-triangle ccpexpCSSReplaceClass732" ></em>');
       $('#statusPing').empty();
       $('#statusPing').append('<em class="fa  fa-exclamation-triangle ccpexpCSSReplaceClass733" >'+
                               '</em> &nbsp;Internet is not accessible yet. <br>'+
                               '<a href="http://www.cisco.com" target="_blank" class="ccpexpCSSReplaceClass734">Click here to open www.cisco.com in a new tab</a>');
       worker.terminate();
       $(".netConnector").removeClass("netConnectorBlink");
       $(".netConnector").addClass("netFail");
       addClickToTry();
       }

       }*/
    };


  }

  function addClickToTry() {
    $('#tryPingButton').unbind("click").click(function() {
      $('.pingLister').each(function() {
        $(this).find('.fa-check').remove();
        $(this).find('.fa-times').remove();
        $(this).find('.fa-exclamation-triangle').remove();
        $(this).find('.bulletList').show();

      });
      $(".netConnector").removeClass("netFail");
      $(".netConnector").removeClass("netSuccess");
      $('.cliWindow').empty();
      $('#checkIpAddress').text($.i18n.prop("checkingIpAddr"));
      $('#checkDNS').text($.i18n.prop("checkingDnsInfo"));
      $('#checkPing').text($.i18n.prop("pingPublicDomain"));
      //$('#checkConnection').text($.i18n.prop("checkingIfConnected") + "...");
      checkWanConnection();
    });


  }


  function loadCellularNano() {
    $('#connectionWanType').append("<option value='3g'>"+$.i18n.prop("wizardWanType3G4G")+"</option>");
    $('#connectionTypeBackup').append("<option value='3g'>"+$.i18n.prop("wizardWanType3G4G")+"</option>");
    if (isNano) {
      $.each(cellularInterface, function(index, cellularInterfaces) {
        firmwareList.push({
          name: cellularInterfaces,
          value: interfaceAndConnection.getAvailableFirmware(cellularInterfaces)
        });
        simsList.push({
          name: cellularInterfaces,
          value: interfaceAndConnection.getSimInfo(cellularInterfaces)
        });
      });
      $('#activateFirwareBackup').unbind('click').click(function() {
        blockPage("Applying");
        setTimeout(function() {
          var activeFlag = true;
          var resp = interfaceAndConnection.activateSelectedFirmware($("#firwareListBackup").val(), $('#interfaceBackup').val());
          if (resp.toLowerCase().indexOf("failed") > -1) {
            activeFlag = false;
            //$("#activationFailed").dialog("open");
          } else {
            try {
              deviceCommunicator.getConfigCmdOutput("service internal");
              deviceCommunicator.getExecCmdOutput("test " + $('#interfaceBackup').val() + " modem-power-cycle");
              $.unblockUI();
            } catch (e) {
              $.unblockUI();
            }
          }
          var newFirmwareOuput = interfaceAndConnection.getAvailableFirmware($('#interfaceBackup').val());
          $.each(firmwareList, function(index, firmware) {
            if (firmware['name'] == $('#interfaceBackup').val()) {
              firmware['value'] = newFirmwareOuput;
            }
          });
          populateFirmwareDropDown($('#interfaceBackup').val(), "backup");
          $.unblockUI();
          if (activeFlag) {
            createToast("success", $.i18n.prop("firmwareSuccess"), "fa-location-arrow", 5000);
          } else {
            createToast("fail", $.i18n.prop("firmwareActivationFailed"), "fa-location-arrow", 5000);
          }
        }, 1000);

      });
      $('#activateFirware').unbind('click').click(function() {
        blockPage("Applying");
        setTimeout(function() {
          var activeFlag = true;
          var resp = interfaceAndConnection.activateSelectedFirmware($("#firwareList").val(), $('#interfaceSelection').val());
          if (resp.toLowerCase().indexOf("failed") > -1) {
            //$("#activationFailed").dialog("open");
            activeFlag = false;
          } else {
            try {
              deviceCommunicator.getConfigCmdOutput("service internal");
              deviceCommunicator.getExecCmdOutput("test " + $('#interfaceSelection').val() + " modem-power-cycle");
              $.unblockUI();
            } catch (e) {
              $.unblockUI();
            }
          }
          var newFirmwareOuput = interfaceAndConnection.getAvailableFirmware($('#interfaceSelection').val());
          $.each(firmwareList, function(index, firmware) {
            if (firmware['name'] == $('#interfaceSelection').val()) {
              firmware['value'] = newFirmwareOuput;
            }
          });
          populateFirmwareDropDown($('#interfaceSelection').val(), "primary");
          $.unblockUI();
          if (activeFlag) {
            createToast("success", $.i18n.prop("firmwareSuccess"), "fa-location-arrow", 5000);
          } else {
            createToast("fail", $.i18n.prop("firmwareActivationFailed"), "fa-location-arrow", 5000);
          }

        }, 1000);
      });
      //var firmwareList=interfaceAndConnection.getAvailableFirmware(cellularInterface);


      if ($('#firwareList').attr("technology") == "CDMA") {
        $("#profileSection").hide();
        $("#profileSection").next().hide();
      }

      if ($('#firwareListBackup').attr("technology") == "CDMA") {
        $("#profileSectionBackup").hide();
        $("#profileSectionBackup").next().hide();
      }

      $('#firwareList').change(function() {
        if ($('#firwareList').val() != $('#firwareList').attr("active")) {
          $('#activateFirware').show();
          $('#cellularProfileSelMsg').hide();
          $('#msgSpan').text("");
        } else {
          $('#activateFirware').hide();
          $('#cellularProfileSelMsg').show();
          // $('#msgSpan').text($('#firwareList option:selected').text() + " is currently active.");
          $('#msgSpan').text($('#firwareList option:selected').text() + " " + $.i18n.prop("isCurrentlyActive"));
        }
      });
      $('#firwareListBackup').change(function() {
        if ($('#firwareListBackup').val() != $('#firwareListBackup').attr("active")) {
          $('#activateFirwareBackup').show();
          $('#cellularProfileSelMsgBackup').hide();
          $('#msgSpanBackup').text("");
        } else {
          $('#activateFirwareBackup').hide();
          $('#cellularProfileSelMsgBackup').show();
          //  $('#msgSpanBackup').text($('#firwareListBackup option:selected').text() + " is currently active.");
          $('#msgSpanBackup').text($('#firwareListBackup option:selected').text() + " " + $.i18n.prop("isCurrentlyActive"));
        }

      });
    } else {
      $.each(cellularInterface, function(index, cellularInterfaces) {
        modemISRData.push({
          name: cellularInterfaces,
          value: getCellularISRModemInfo(cellularInterfaces.replace(" ", ""))
        });
      });
      //consoleLog(modemISRData);

    }
    //interfaceAndConnection.populateFirmwareTable(cellularInterface,firmwareList);

    $("#usernamePwdFromSP").click(function() {
      if (!$(this).is(':checked')) {
        $('.authType').each(function() {
          $(this).hide();
        });
        $('#apnPassword').hide();
        $('#apnUsername').hide();
        $('#apnPAP').hide();
        $('#apnCHAP').hide();
      } else {
        $('.authType').each(function() {
          $(this).show();
        });
        $('#apnPassword').show();
        $('#apnUsername').show();
        $('#apnPAP').show();
        $('#apnCHAP').show();
      }
    });
    $("#usernamePwdFromSP").prop('checked', false);
    $('.authType').each(function() {
      $(this).hide();
    });
    $('#apnPassword').hide();
    $('#apnUsername').hide();
    $('#apnPAP').hide();
    $('#apnCHAP').hide();
    $('#apnPasswordBackup').hide();
    $('#apnUsernameBackup').hide();
    $('#apnPAPBackup').hide();
    $('#apnCHAPBackup').hide();

    $("#usernamePwdFromSPBackup").click(function() {
      if (!$(this).is(':checked')) {
        $('.authTypeBackup').each(function() {
          $(this).hide();
        });
        $('#apnPasswordBackup').hide();
        $('#apnUsernameBackup').hide();
        $('#apnPAPBackup').hide();
        $('#apnCHAPBackup').hide();
      } else {
        $('.authTypeBackup').each(function() {
          $(this).show();
        });
        $('#apnPasswordBackup').show();
        $('#apnUsernameBackup').show();
        $('#apnPAPBackup').show();
        $('#apnCHAPBackup').show();
      }
    });
    $("#usernamePwdFromSPBackup").prop('checked', false);
    $('.authTypeBackup').each(function() {
      $(this).hide();
    });

    /*$(".selectFirmware").click(function(){
     $("#cellularNanoAccordian").accordion({
     active: 1
     });
     $(".fieldsetcontentmain:not(:hidden)").animate({scrollTop: $("#profileSection").offset().top}, 'slow');
     });*/
  }

  function dslFound() {
    var controllers, lines, controllerName, i;
    //var xml, enableImage, disableImage, xmlDoc, regEx, shipIntBrief;
    controllers = deviceCommunicator.getExecCmdOutput("sh runn | i controller");
    lines = controllers.split(/\r\n|\r|\n/);
    var j = 0;
    for (i = 0; i < lines.length; i++) {
      if (lines[i].indexOf('controller') !== -1 && lines[i].indexOf('Cellular') == -1 && lines[i].indexOf('DSL') !== -1 && lines[i].indexOf('commands') === -1) {
        controllerName = lines[i].replace(/^controller\s(.\S+)/, '$1');
        $('#controllerName').append("<option value='" + controllerName + "'class='cntrlr'>" + controllerName + "</option>");
        controllerArray[j] = controllerName;
        j = j + 1;
      }
    }
    return controllerArray;
  }

  function checkLanInterface() {
    var tempArr = [];
    $.each(interfaceotherArray, function(index, value) {
      if (value.trim() != $('#lanInterface').val().trim()) {
        tempArr.push(value);
      }
    });
    interfaceotherArray = tempArr;
  }

  function populateWanConnection(showIpInt) {
    var cellularFound = false;
    var serialFound = false;
    var regEx = new RegExp("Cellular", "");
    $(showIpInt).find('entry').each(function() {
      ////consoleLog($(this).find('IP-Address').html());
      var thisInterface = $(this).find('Interface').text().trim();
      if (thisInterface.indexOf("Cellular") !== -1) {
        cellularFound = true;
        var srArray = thisInterface.split(regEx);
        cellularInterface.push("Cellular " + srArray[1]);
        //return false;
      } else if (thisInterface.indexOf("Serial") !== -1) {
        serialFound = true;
        serialInterface.push(thisInterface);
      } else if ($(this).find('IP-Address').text().trim() == "10.10.10.1" && (thisInterface.toLowerCase().indexOf('ethernet') > -1 ||
                                                                              thisInterface.toLowerCase().indexOf('vlan') > -1)) {
        $('#lanInterface').val(thisInterface);
        switchPortArray.push(thisInterface);
      }
    });
    if (serialFound) {
      loadSerialInterfaces();
    }
    if (cellularFound) {
      loadCellularNano();
    }

    //$('#connectionTypeBackup').prop('disabled',true);
    //$('#interfaceBackup').prop('disabled',true);
    dslFoundArray = dslFound();
    loadDsl(dslFoundArray, showIpInt);
    checkLanInterface();
    if (interfaceDSLArray.length > 0 || controllerArray.length > 0) {
      $('#connectionWanType').append("<option value='DSL'>"+$.i18n.prop("wizardWanTypeBroadband")+"</option>");
      $('#connectionTypeBackup').append("<option value='DSL'>"+$.i18n.prop("wizardWanTypeBroadband")+"</option>");
    }
    if (interfaceotherArray.length > 0) {
      $('#connectionWanType').append("<option value='Ethernet'>"+$.i18n.prop("wizardWanTypeEthernet")+"</option>");
      $('#connectionTypeBackup').append("<option value='Ethernet'>"+$.i18n.prop("wizardWanTypeEthernet")+"</option>");
    }
    $('#enableBackupWAN').change();
    $('#interfaceRow').hide();
    $('#interfaceRowBackup').hide();
  }

  function getControllerType(name) {
    var output, lines, i;
    output = deviceCommunicator.getExecCmdOutput("show controllers " + name);
    lines = output.split(/\r\n|\r|\n/);
    for (i = 0; i < lines.length; i++) {
      if (lines[i].indexOf('EHWIC-4SHDSL-EA') !== -1) {
        return "EFMATM";
      } else if (lines[i].indexOf('HWIC-4SHDSL-E') !== -1) {
        return "EFM";
      } else if (lines[i].indexOf('HWIC-2SHDSL') !== -1) {
        return "auto";
      }
    }
    return "platform";
  }

  function addValidationPAPCHAP(ipv6,backup) {
    if (backup==undefined) {
      backup="";
    }
    if ($("#papSelect"+ipv6+backup).is(':checked') || $("#chapSelect"+ipv6+backup).is(':checked')) {
      $("#wizardpapChapUsername"+ipv6+backup).rules("add", {
        required: true,
        minlength: 1
      });
      $("#wizardpapChapPassword"+ipv6+backup).rules("add", {
        required: true,
        minlength: 1
      });
      $("#wizardconfirmPassword"+ipv6+backup).rules("add", {
        required: true,
        minlength: 1,
        equalTo: $('#wizardpapChapPassword'+ipv6+backup)
      });
      $("#wizardpapChapUsername"+ipv6+backup).removeAttr("disabled");
      $("#wizardpapChapPassword"+ipv6+backup).removeAttr("disabled");
      $("#wizardconfirmPassword"+ipv6+backup).removeAttr("disabled");
      $('#wizardAuthUserNameReq'+ipv6+backup).show();
      $('#wizardAuthPasswordReq'+ipv6+backup).show();
      $('#wizardConfirmPswdReq'+ipv6+backup).show();
    } else {
      $("#wizardpapChapUsername"+ipv6+backup).rules("remove");
      $("#wizardpapChapPassword"+ipv6+backup).rules("remove");
      $("#wizardconfirmPassword"+ipv6+backup).rules("remove");
      $("#wizardpapChapUsername"+ipv6+backup).prop("disabled", true);
      $("#wizardpapChapPassword"+ipv6+backup).prop("disabled", true);
      $("#wizardconfirmPassword"+ipv6+backup).prop("disabled", true);
      $('#wizardAuthUserNameReq'+ipv6+backup).hide();
      $('#wizardAuthPasswordReq'+ipv6+backup).hide();
      $('#wizardConfirmPswdReq'+ipv6+backup).hide();
    }
  }

  function addValidationMtuAndMss(backup,ipv6) {
    try {
      if ($("#advAuthSetting" + backup+ipv6).is(':checked')) {
        $("#wizardMtuSize" + backup+ipv6).rules("add", {
          required: true,
          minlength: 1,
          min: 68,
          max: 1500
        });
        $("#wizardMssSize" + backup+ipv6).rules("add", {
          required: true,
          minlength: 1,
          min: 500,
          max: 1460
        });
      } else {
        $("#wizardMtuSize" + backup+ipv6).rules("remove");
        $("#wizardMssSize" + backup+ipv6).rules("remove");
      }
    } catch (error) {
      errorLogInConsole(error);
    }
  }

  function addValidationPAPCHAPBackup() {
    try {
      if ($("#papSelectbackup").is(':checked') || $("#chapSelectbackup").is(':checked')) {
        $("#wizardpapChapUsernamebackup").rules("add", {
          required: true,
          minlength: 1
        });
        $("#wizardpapChapPasswordbackup").rules("add", {
          required: true,
          minlength: 1
        });
        $("#wizardconfirmPasswordbackup").rules("add", {
          required: true,
          minlength: 1,
          equalTo: $('#wizardpapChapPasswordbackup')
        });
        $("#wizardpapChapUsernamebackup").removeAttr("disabled");
        $("#wizardpapChapPasswordbackup").removeAttr("disabled");
        $("#wizardconfirmPasswordbackup").removeAttr("disabled");
        $('#wizardAuthUserNamebackupReq').show();
        $('#wizardAuthPasswordbackupReq').show();
        $('#wizardConfirmPswdbackupReq').show();
      } else {
        $("#wizardpapChapUsernamebackup").rules("remove");
        $("#wizardpapChapPasswordbackup").rules("remove");
        $("#wizardconfirmPasswordbackup").rules("remove");
        $("#wizardpapChapUsernamebackup").prop("disabled", true);
        $("#wizardpapChapPasswordbackup").prop("disabled", true);
        $("#wizardconfirmPasswordbackup").prop("disabled", true);
        $('#wizardAuthUserNamebackupReq').hide();
        $('#wizardAuthPasswordbackupReq').hide();
        $('#wizardConfirmPswdbackupReq').hide();
      }
    } catch (error) {
      errorLogInConsole(error);
    }
  }


  function addRemoveInterface() {
    /*if ($('#connectionWanType').val()=="3g") {
     if (cellularInterface.length>1) {
     $("#interfaceBackup option[value='"+$('#interfaceSelection').val()+"']").remove();
     }else{
     $('#connectionTypeBackup option[value="3g"]').remove();
     }
     }*/

  }

  function getCellularISRModemInfo(interfaceName) {
    var modemISR = [];
    var modemTempData = iAndC.getModemDetails(interfaceName);
    var modemNumber = modemTempData[3];
    modemNumber = parseInt(modemNumber, 10);
    modemISR.push({
      modemType: modemTempData[1],
      serviceProvider: modemTempData[2],
      modemNo: modemNumber
    });
    return modemISR;
  }

  function addOperatingModeWizard(name, id) {
    var arr = [],
      response, mode;
    try {
      var cliInput = "controller " + name + "\n" + "operating mode ?";
      response = deviceCommunicator.getConfigCmdOutput(cliInput);
    } catch (error) {
      response = error.errorResponse;
      //$("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
      $("#" + id).append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
      arr = response.split("\n");
      for (var i = 0; i < arr.length; i++) {
        mode = arr[i].toString().trim().split(" ")[0];
        $("#" + id).append("<option id=" + mode + id + " value=" + mode + ">" + mode + "</option>");
      }
      arr.length = 0;
      var check = 0;
      if (check == 1) {
        //code
      } else {
        //$("#" + "auto"+id).attr('selected', 'selected');
      }
    }
  }

  function setShowInterface() {
    var xml;
    xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
    showIpInt = xml;
  }

  function loadDashboard() {
    window.location.replace(window.location.href.split("wizard.html")[0] + "frames.html?feature=routerdiagonstics");
  }
  
  function setClockTimeZoneWizard(){
   var clockTimeZoneValue="0";
    if($.i18n.prop('langwage') == "en"){
      clockTimeZoneValue = "5.30";			
    }
    else{
      clockTimeZoneValue = "9"; 
    }
   return clockTimeZoneValue;
  }
  function configureWizardLoading() {
    loadAndDisplayLanguages();
    $('#wizbasictimezone').val(setClockTimeZoneWizard());
    
    $("#ipandsubnetmask").hide();
    $("#subnetMask").hide();
    $("#ipandsubnetmaskbackup").hide();
    $("#subnetMaskbackup").hide();
    $('#wizprimarypppoerowBackup').hide();
    $('#finishDiv').show();
    $('#pingDiv').hide();
    $('#simPrimaryNo').attr("simSelected", "false");
    $('#simBackupNo').attr("simSelected", "false");
    $('.utilToolbar').show();

    var arrval = [], ccpexpVersion;
    if (ccpExpressVersionValue!= "ccpexpressTextversion") {
      ccpexpVersion = ccpExpressVersionValue;
    } else {
      readVal = deviceCommunicator.readFromTemplate("version.txt", arrval, true);
      versionText = readVal.split(/\s+/);
      ccpexpVersion = versionText[2];
    }
    //$('.popUpMenuVersion').text(($.i18n.prop("version") + " " + ccpexpVersion));
    $('#versionText').text($.i18n.prop("version"));
    $('#versionNoText').text(ccpexpVersion);

    $('#isNano').val(isNano.toString());
    avcFlag=isAVCSupported();
    if (avcFlag) {
      $("#wizardSecurity").text($.i18n.prop("securityAndAVC"));
      $('#wizardAVCEnabled').val("yes");
      $('#wizardSecurityTipThree').show();
    }else{
      $("#wizardSecurity").text($.i18n.prop("securityAndAVCFails"));
      $('#wizardAVCEnabled').val("no");
      $('#headTextAVC').hide();
      $('#wizardavcenablediv').hide();
      $('#wizardSecurityTipThree').hide();
    }

    $('#dashboardButton').click(function() {
      if (redirectInterval != undefined) {
        clearInterval(redirectInterval);
      }
      loadDashboard();
    });
    $('#dasboardPingButton').click(function() {
      loadDashboard();
      if (redirectInterval != undefined) {
        clearInterval(redirectInterval);
      }
    });

    $("#wizardciscoRecomSettingsoption").show();
    $('#wizardsecurityfeatureoption').show();

    function getFormattedDate() {
                var date = new Date();
                var str = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +  date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();

                return str;
    }

    function createConfig(configData){
                // download stuff
                        $('#tempDownload').remove();
                        var fileName = "Day_0_config_"+getFormattedDate()+".cfg";
                        var buffer = configData;
                        var blob = new Blob([buffer], {
                                "type": "text/plain;charset=utf8;"
                        });
                        var link = document.createElement("a");
                        // feature detection
                        if(link.download !== undefined) {
                                // Browsers that support HTML5 download attribute
                                link.setAttribute("href", window.URL.createObjectURL(blob));
                                link.setAttribute("download", fileName);
                        }
                        else if(navigator.msSaveBlob) {
                          // IE 10+
                          navigator.msSaveBlob(blob, fileName);
                        }
                        else {
                                // it needs to implement server side export
                                //alert("Download not supported on your browser");
                        }
                        link.innerHTML = "Export to CFG";
                        link.style.display='none';
                        link.setAttribute("id", "tempDownload");
                        document.body.appendChild(link);
                        link.click();
        }
    function copyClipboard(){
        var cli=mergedCli + "\n" + formatedEM+"\n"+lanCli;
        $("#temp").val(cli);
        var copyDiv = document.getElementById('temp');
        copyDiv.focus();
        document.execCommand('SelectAll');
        document.execCommand("Copy", false, null);
    }
    document.getElementById("copyConfig").onclick = copyClipboard;
    /*$('#copyConfig').click(function(){

    });*/

    $('#downloadConfig').click(function(){
        var cli=mergedCli + "\n" + formatedEM+"\n"+lanCli;
        createConfig(cli);
    });

    //var ntpList=[];
    $.each(ntpArr,function(index,value){
        $('#ntp-list').append('<option>'+value+'</option>');
    });

    $('#wizbasictimezone').change(function(){
        var selectedVal=$('#wizbasictimezone option:selected').text();;
        $('#wizbasictimezone option').each(function(){
            if ($(this).text()==selectedVal) {
                var $curr=$(this);
                if ($('#wizardNTPServer').val().trim()=="") {
                    $('#wizardNTPServer').val($(this).attr("ntp-server"));
                }else{
                    $.each(ntpArr,function(index,value){
                        if (value==$('#wizardNTPServer').val().trim()) {
                            $('#wizardNTPServer').val($curr.attr('ntp-server'));
                        }
                    });
                }
                return false;
            }
        });

    });

    /*$('#priviewCliPopup').hover(function(){
            $('.utilToolbar').fadeIn(100);
        },
        function(){
            $('.utilToolbar').fadeOut(100);
        }
    );*/

    $('body').click(function(e){
        var target = $(e.target).parent();
        if (target.hasClass('dropSelectClass') || target.hasClass("dropDownListOptions") ||target.hasClass("customdropdownListDiv") || target.hasClass("assocaiteIntDropDown") || $(e.target).hasClass("dropDownListOptions") || $(e.target).hasClass("assocaiteIntDropDown")) {
                if ((target.hasClass("assocaiteIntDropDown") || target.hasClass("dropSelectClass")) && !$('.dropDownListOptions').is(':hidden')) {
                    $('.dropDownListOptions').hide();
                }else{
                    $('.dropDownListOptions').show();
                }

        }else{
            $('.dropDownListOptions').hide();
        }
    });

    $('#checkWanButton').click(function() {
      $('#finishDiv').hide();
      $('#pingDiv').show();
      setTimeout(function() {
        checkWanConnection();
      }, 500);
      if (redirectInterval != undefined) {
        clearInterval(redirectInterval);
      }
    });

    //$("#natrow").hide();
    $('#hideAll').css('display', 'none');
    //***********basicTab Page Loading Starts**********
    validatorWizardBasicPage = $('#basicform').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    validatorWizardPrimaryWanPage = $('#primarywanform').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    validatorWizardLanPage = $('#lanform').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    validatorWizardSecondryWanPage = $('#backupwanform').validate({
      errorElement: "div",
      wrapper: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });
    $('#wizprimarypppoerow').hide();
    $('#ipAddressFieldset').hide();
    $('#connectionAuthenticationFieldset').hide();
    $('#connectionAuthenticationFieldsetIpv6').hide();
    $('#primaryDnstablerow').hide();
    $('#secondarytablerow').hide();

    $('#wizbasicdnsserver').click(function() {
      if ($(this).is(':checked')) {
        var hideAndShowArry_DnsServerISPdns = ["#ipandsubnetmask"];
        hideAndShowArry_DnsServerISPdns.push("#subnetMask");
        wizardformElementHide(hideAndShowArry_DnsServerISPdns);
        $("#wizprimarydnsserver").prop("checked", true);
        $("#wizprimarydnsserverbackup").prop("checked", true);
        var hideAndShowArry_DnsServerISPdnsback = ["#ipandsubnetmaskbackup"];
        hideAndShowArry_DnsServerISPdnsback.push("#subnetMaskbackup");
        wizardformElementHide(hideAndShowArry_DnsServerISPdnsback);
        $("#wizprimaryipaddressbackup").rules("remove");
        $("#wizprimarysubnetbackup").rules("remove");
        $("#wizprimaryipaddress").rules("remove");
        $("#wizprimarysubnet").rules("remove");
        $('#primaryDnstablerow').hide();
        $('#secondarytablerow').hide();
      } else {
        $('#primaryDnstablerow').show();
        $('#secondarytablerow').show();
      }

    });
    $('#wizbasicdnsservercellular').click(function() {
      if ($(this).is(':checked')) {
        $('#primaryDnstablerowcellular').hide();
        $('#secondarytablerowcellular').hide();
        $("#wizprimarydnsserver").prop("checked", true);
        $("#wizprimarydnsserverbackup").prop("checked", true);
        $("#wizbasicdnsserver").prop("checked", true);
        var hideAndShowArry_DnsServerISPdnsback = ["#ipandsubnetmaskbackup"];
        hideAndShowArry_DnsServerISPdnsback.push("#subnetMaskbackup");
        wizardformElementHide(hideAndShowArry_DnsServerISPdnsback);
        $("#wizprimaryipaddressbackup").rules("remove");
        $("#wizprimarysubnetbackup").rules("remove");
        $("#wizprimaryipaddress").rules("remove");
        $("#wizprimarysubnet").rules("remove");
        $('#primaryDnstablerow').hide();
        $('#secondarytablerow').hide();

      } else {
        $('#primaryDnstablerowcellular').show();
        $('#secondarytablerowcellular').show();
        $("#wizprimarydnsserver").prop("checked", false);
        $("#wizprimarydnsserverbackup").prop("checked", false);
        $("#wizbasicdnsserver").prop("checked", false);
        var hideAndShowArry_DnsServerISPdnsback = ["#ipandsubnetmaskbackup"];
        hideAndShowArry_DnsServerISPdnsback.push("#subnetMaskbackup");
        wizardformElementShow(hideAndShowArry_DnsServerISPdnsback);
        wizardformElementShow(hideAndShowArry_DnsServerISPdnsback);
        $("#wizprimaryipaddressbackup").rules("add", {
          "ipv4": true,
          required: true
        });
        $("#wizprimarysubnetbackup").rules("add", {
          "validPrefixMaskAddress": true,
          required: false
        });
        $('#secondarytablerow').show();
        //$("#wizprimarydnsserverbackup").prop("checked", true);
      }

    });
    $('input[name=selectLanNetwork]').change(function(){
        if ($('#ccpPoolCheck').is(":checked")){
            $('#lanInfoTable').show();
            $('#lanFieldset').hide();
        }else{
            $('#lanInfoTable').hide();
            $('#lanFieldset').show();
            $("#wizardChangeLanAlert").dialog("open");
        }
    });
    $('.closeIcon').click(function(){
        $('.addLanNetwork').click();
    });
    $('.addLanNetwork').click(function(){
        var checker=$(this).find('.checker');
        if(checker.hasClass('fa-square-o')){
            checker.removeClass('fa-square-o');
            checker.addClass('fa-check-square-o');
            $('#addNewLanNetwork').val("on");
            $('#addLanFieldset').show();
            $target = $('#addLanFieldset');
            $('.fieldsetContent').animate({
                'scrollTop': $target.offset().top
            }, 400, 'swing', function () {
            });
        }else{
            checker.addClass('fa-square-o');
            checker.removeClass('fa-check-square-o');
            $('#addLanFieldset').hide();
            $('#addNewLanNetwork').val("off");
        }
    });
    /*$('#wizbasicdnsservercellularBackup').click(function() {
     if ($(this).is(':checked')) {
     $('#primaryDnstablerowcellularBackup').hide();
     $('#secondarytablerowcellularBackup').hide();
     } else {
     $('#primaryDnstablerowcellularBackup').show();
     $('#secondarytablerowcellularBackup').show();
     }

     });*/

    var current_date = new Date();
    var gmt_string = current_date.toString().split(" ")[5];
    $("#wizbasicprimdns").rules("add", {
      "ipv4oripv6": true,
      required: true
    });
    $("#wizbasicsecdns").rules("add", {
      "ipv4oripv6": true,
      required: false
    });
    $("#wizprimaryipaddress").rules("add", {
      "ipv4": true,
      required: true
    });
    //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});

    $("#wizprimarysubnet").rules("add", {
      "validPrefixMaskAddress": true,
      required: false
    });
    $("#wizbasictimezone option").each(function(i) {
      //alert($(this).text() + " : " + $(this).val());
      if (gmt_string == $(this).attr("gmtAdjustment")) {
        $(this).attr("selected", true);
      }
    });
    $('#wizbasictimezone').change();
    
    $("#wizardprimaryipv6oe").on('change', function() {
	if($(this).is(":checked")){
                // $("#wizardprimaryipv6oebackup").prop("checked", false);
                //  $("#ipv6oeCheckboxbackup").hide();
	  $("#ipv6oeFieldset").show();
	}else{
	  if ($("#wizprimarypppoebackup").is(":checked") && !$("#wizprimaryipv6Confbackup").is(':checked')) {
	    $("#ipv6oeCheckboxbackup").show();
	  }
	  $("#ipv6oeFieldset").hide();
	  addEthernet('connectionTypeBackup');
	}
	$("input[name=Ipv6oe]").change();
    });
    $("#wizardprimaryipv6oebackup").on('change', function() {
	if($(this).is(":checked")){
                // $("#wizardprimaryipv6oe").prop("checked", false);
                //  $("#ipv6oeCheckbox").hide();
	  $("#ipv6oeFieldsetbackup").show();
	}else{
	  if ($("#wizprimarypppoe").is(":checked") && !$("#wizprimaryipv6Conf").is(':checked')) {
	    $("#ipv6oeCheckbox").show();
	  }
	  $("#ipv6oeFieldsetbackup").hide();
	  addEthernet('connectionWanType');
	}
	$("input[name=Ipv6oebackup]").change();
    });
    $("#wizprimarypppoe").on('click', function() {
      if ($('#connectionWanType').val() == "Ethernet") {
        //code
        var hideAndShowArry_Connection = ["#connectionAuthenticationFieldset"];
      } else {
        var hideAndShowArry_Connection = [".pppoeoptionrow"];
      }
      $("#ipv6oeFieldset").hide();
      if ($("#wizprimarypppoe").is(':checked')) {
	if ($("#connectionWanType").val()=="Ethernet") {
	  $("#ipcpRow").show();
                    if (!$("#wizprimaryipv6Conf").is(":checked")) {
	    $("#ipv6oeCheckbox").show();
	  }
	}else{
	  $("#ipcpRow").hide();
	  $("#ipv6oeFieldset").hide();
	  $("#wizardprimaryipv6oe").prop("checked",false);
	}
	if ($("#wizprimaryipv6Conf").is(':checked') && $("#connectionWanType").val()=="Ethernet") {
	    $("#connectionAuthenticationFieldsetIpv6").show();
	}else{
	    $("#connectionAuthenticationFieldsetIpv6").hide();
	}
        wizardformElementShow(hideAndShowArry_Connection);

      } else {
	$("#ipv6oeCheckbox").hide();
        wizardformElementHide(hideAndShowArry_Connection);
	$("#connectionAuthenticationFieldsetIpv6").hide();
	$("#ipcpRow").hide();
	$("#wizardprimaryipv6oe").prop("checked",false);

        //$("#wizprimaryipaddress").rules("add", {"ipv4": true, required: true});
        //$("#wizprimarysubnet").rules("add", {"validPrefixMaskAddress": true, required: false});
        //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});
      }
      $("#wizardprimaryipv6oe").change();
    });
    $("#wizprimarypppoebackup").on('click', function() {
      if ($('#connectionTypeBackup').val() == "Ethernet") {
        var hideAndShowArry_Connection = ["#connectionAuthenticationFieldsetBackup"];
      } else {
        var hideAndShowArry_Connection = [".pppoeoptionrowBackup"];
      }
      $("#ipv6oeFieldsetbackup").hide();
      if ($("#wizprimarypppoebackup").is(':checked')) {
	if ($("#connectionTypeBackup").val()=="Ethernet") {
	  $("#ipcpRowbackup").show();
                    if ($('#connectionTypeBackup').val() === "Ethernet" && !$("#wizprimaryipv6Confbackup").is(":checked")) {
	    $("#ipv6oeCheckboxbackup").show();
	  }
	}else{
	  $("#ipcpRowbackup").hide();
	  $("#ipv6oeFieldsetbackup").hide();
	  $("#wizardprimaryipv6oebackup").prop("checked",false);
	}
	if ($("#wizprimaryipv6Confbackup").is(':checked') && $("#connectionTypeBackup").val()=="Ethernet") {
	    $("#connectionAuthenticationFieldsetIpv6backup").show();
	}else{
	    $("#connectionAuthenticationFieldsetIpv6backup").hide();
	}
        wizardformElementShow(hideAndShowArry_Connection);

      } else {
        wizardformElementHide(hideAndShowArry_Connection);
	$("#connectionAuthenticationFieldsetIpv6backup").hide();
	$("#wizardprimaryipv6oebackup").prop("checked",false);
	$("#ipcpRowbackup").hide();
	$("#ipv6oeCheckboxbackup").hide();
	if ($('#connectionWanType').val() == "Ethernet" && $("#wizprimarypppoe").is(":checked") && !$("#wizprimaryipv6Conf").is(":checked")) {
	    $("#ipv6oeCheckbox").show();
	}

        //$("#wizprimaryipaddress").rules("add", {"ipv4": true, required: true});
        //$("#wizprimarysubnet").rules("add", {"validPrefixMaskAddress": true, required: false});
        //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});
      }
      $("#wizardprimaryipv6oebackup").change();
    });
    $(".inputnotallowspace").on("keypress", function(e) {
      if (e.which === 32){
        e.preventDefault();
      }
    });

    $("#wizsecurityenable").on('click', function() {
      var hideAndShowArry_Security = ["#wizardsecurityfeatureoption"];
      if ($("#wizsecurityenable").is(':checked')) {

        wizardformElementShow(hideAndShowArry_Security);
        $("#wizseczone").prop("checked", false);

      } else {
        wizardformElementHide(hideAndShowArry_Security);

        //$("#wizprimaryipaddress").rules("add", {"ipv4": true, required: true});
        //$("#wizprimarysubnet").rules("add", {"validPrefixMaskAddress": true, required: false});
        //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});
      }
    });
    $("#wizardsecurityrecomendenable").on('click', function() {
      var hideAndShowArry_Security = ["#wizardciscoRecomSettingsoption"];
      if ($("#wizardsecurityrecomendenable").is(':checked')) {

        wizardformElementShow(hideAndShowArry_Security);
        //$("#wizseczone").prop("checked", false);

      } else {
        wizardformElementHide(hideAndShowArry_Security);

        //$("#wizprimaryipaddress").rules("add", {"ipv4": true, required: true});
        //$("#wizprimarysubnet").rules("add", {"validPrefixMaskAddress": true, required: false});
        //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});
      }
    });

    $("#wizardAlert").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#wizardChangeLanAlert").dialog({
      autoOpen: false,
      height: 220,
      width: 500,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#wizardAlertCancel").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yesStr"),
          click: function() {
            location.href = "basicwizard.html";
            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("noStr"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $(".cancelHome").on('click', function(e) {
      $("#wizardAlertCancel").dialog("open");
      e.preventDefault();
    });

    $("#wizprimarydnsserver").on('click', function(e) {
      var hideAndShowArry_DnsServerISP = ["#ipandsubnetmask"];
      hideAndShowArry_DnsServerISP.push("#subnetMask");
      if ($("#wizprimarydnsserver").is(':checked')) {

        wizardformElementHide(hideAndShowArry_DnsServerISP);
        $("#wizprimaryipaddress").rules("remove");
        $("#wizprimarysubnet").rules("remove");

      } else {
        if ($("#wizbasicdnsserver").is(':checked')) {
          //$("#wizardAlertMessage").html("DNS Server is opted to be configured automatically by Service Provider hence this needs Automatic IP address option. If static is to be configured then provide static DNS Server info in Basic screen.");
          $("#wizardAlertMessage").html($.i18n.prop("wizardAlertMessage"));
          $("#wizardAlert").dialog("open");
          e.preventDefault();

        } else {
          wizardformElementShow(hideAndShowArry_DnsServerISP);
          $("#wizprimaryipaddress").rules("add", {
            "ipv4": true,
            required: true
          });
          $("#wizprimarysubnet").rules("add", {
            "validPrefixMaskAddress": true,
            required: false
          });
          //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});
        }
      }
    });
    $("#wizprimaryenableNatbackup").on('click', function(e) {

      if ($("#wizprimaryenableNatbackup").is(':checked')) {
        if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
            ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
          //$("#wizardAlertMessage").html("NAT will be enabled on both Primary and Backup WAN interfaces. Do you wish to continue?");
          //$("#wizardAlert").dialog("open");
          //e.preventDefault();

        } else {
          $("#wizardAlertMessage").html($.i18n.prop("wizardNATMessage"));
          $("#wizardAlert").dialog("open");
          e.preventDefault();
        }


      } else {
        if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
            ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
          $("#wizardAlertMessage").html($.i18n.prop("wizardNATMessage"));
          $("#wizardAlert").dialog("open");
          e.preventDefault();

        }
        //else {
        //
        //}
      }
    });

    $("#wizenablenatcellularBackup").on('click', function(e) {

      if ($("#wizenablenatcellularBackup").is(':checked')) {
        if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
            ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
          //$("#wizardAlertMessage").html("NAT will be enabled on both Primary and Backup WAN interfaces. Do you wish to continue?");
          //$("#wizardAlert").dialog("open");
          //e.preventDefault();

        } else {
          $("#wizardAlertMessage").html($.i18n.prop("wizardNATMessage"));
          $("#wizardAlert").dialog("open");
          e.preventDefault();
        }


      } else {
        if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
            ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
          $("#wizardAlertMessage").html($.i18n.prop("wizardNATMessage"));
          $("#wizardAlert").dialog("open");
          e.preventDefault();

        }
        //else {
        //
        //}
      }
    });


    $("#wizprimaryenableNat").on('change', function(e) {

      if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
          ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
        $("#wizprimaryenableNatbackup").attr("checked", true);
        $("#wizenablenatcellularBackup").attr("checked", true);


      } else {
        //$("#wizardAlertMessage").html("NAT will be disabled on both Primary and Backup WAN interfaces. Do you wish to continue?");
        $("#wizprimaryenableNatbackup").attr("checked", false);
        $("#wizenablenatcellularBackup").attr("checked", false);
      }
    });

    $("#wizenablenatcellular").on('change', function(e) {

      if (($("#wizprimaryenableNat").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") == -1) ||
          ($("#wizenablenatcellular").is(':checked') && $('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1)) {
        $("#wizprimaryenableNatbackup").attr("checked", true);
        $("#wizenablenatcellularBackup").attr("checked", true);


      } else {
        //$("#wizardAlertMessage").html("NAT will be disabled on both Primary and Backup WAN interfaces. Do you wish to continue?");
        $("#wizprimaryenableNatbackup").attr("checked", false);
        $("#wizenablenatcellularBackup").attr("checked", false);
      }
    });

    $('#checkList').on('click', function() {
      $('#checkListDialog').dialog("open");
    });

    $("#wizprimarydnsserverbackup").on('click', function(e) {
      var hideAndShowArry_DnsServerISP = ["#ipandsubnetmaskbackup"];
      hideAndShowArry_DnsServerISP.push("#subnetMaskbackup");
      if ($("#wizprimarydnsserverbackup").is(':checked')) {

        wizardformElementHide(hideAndShowArry_DnsServerISP);
        $("#wizprimaryipaddressbackup").rules("remove");
        $("#wizprimarysubnetbackup").rules("remove");
      } else {
        wizardformElementShow(hideAndShowArry_DnsServerISP);
        $("#wizprimaryipaddressbackup").rules("add", {
          "ipv4": true,
          required: true
        });
        $("#wizprimarysubnetbackup").rules("add", {
          "validPrefixMaskAddress": true,
          required: false
        });

        //$("#wizprimarydefaultgateway").rules("add", {"ipv4": true, required: true});
      }
    });

    /*$("#cellularNanoAccordian").accordion({
     autoHeight: false,
     header: 'h3',
     heightStyle: "content"
     });*/
    function backupChangeFunction(nameParameter) {
      //code
      var connectionTypeBackup = $('#connectionTypeBackup').val();
      var interfaceSelection = $('#interfaceSelection').val();
      var interfaceBackupSelection = $('#interfaceBackup').val();
      var intefaceBackupMode = $('#modeBackup').val();



      if (connectionTypeBackup === "3g") {
        $('#interfaceBackup').empty();
        hideAllIntialBackup();
        $('#interfaceBackup').empty();

        $.each(cellularInterface, function(index, value) {
          $('#interfaceBackup').append("<option value='" + value + "'>" + value + "</option>");
        });
        $('#interfaceBackup option[value="' + interfaceSelection + '"]').remove();
        if (cellularInterface.length < 2) {
          //code
          $('#interfaceSelection option[value="3g"]').remove();
          //$('#connectionTypeBackup').append("<option value='DSL'>Broadband (ADSL/VDSL/SHDSL)</option>");
        }
        if (interfaceBackupSelection != "") {
          //code
          $('#interfaceBackup option[value="' + interfaceBackupSelection + '"]').attr("selected", "selected");
        }
        if ($('select#interfaceBackup option').length >= 2) {
          if (backupCall == 0) {
            //code
            $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
          }
          else {
            $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          }

        }
        if ($("#interfaceBackup").val() !== "") {
          $('#cellularNanoFieldsetBackup').show();
          if (!isNano) {
            $('.firmwareSectionModemBackup').hide();
            $('.simSectionModemBackup').hide();
          } else {
            $('.firmwareSectionModemBackup').show();
            $('.simSectionModemBackup').show();
          }
          $('#persistanceRowBackup').show();
          $('#wizardencapRowBackup').hide();
          $('#interfaceRowBackup').show();
          $('#modeRowBackup').hide();
          $('#interfaceBackup').change();
          $('#ipAddressFieldsetBackup').hide();
          $('#slaFiledsetbackup').show();
          $('#wizardencapRowBackup').hide();
          $('#wizardprimaryvpiRowBackup').hide();
          $('#connectionAuthenticationFieldsetBackup').hide();
          $('#ipAddressFieldsetBackup').hide();
          $('#wizprimarypppoerowBackup').hide();
          $('#enableAutoFimrwareSwitchBackup').trigger("change");
	   $("#connectionAuthenticationFieldsetIpv6backup").hide();

        } else {
          $('#interfaceRowBackup').show();
        }

      } else if (connectionTypeBackup === "Ethernet") {
        hideAllIntialBackup();
	$('#interfaceBackup').empty();
	populateIpv6oeInterface("backup");
        for (var i = 0; i < interfaceotherArray.length; i++) {
          //if($('#connectionWanType').val().split(" ")[1].indexOf(interfaceDSLArray[i])){
          var intfQSWValue, intfQSWDescription;
          if (interfaceotherArray[i] == 'DSL') {
            intfQSWValue="DSL";
            intfQSWDescription = $.i18n.prop("wizardWanTypeBroadband");
          } else if (interfaceotherArray[i] == 'Ethernet') {
            intfQSWValue="Ethernet";
            intfQSWDescription = $.i18n.prop("wizardWanTypeEthernet");
          } else if (interfaceotherArray[i] == 'Serial') {
            intfQSWValue="Serial";
            intfQSWDescription = $.i18n.prop("wizardWanTypeSerial");
          } else if (interfaceotherArray[i] == '3g') {
            intfQSWValue="DSL";
            intfQSWDescription = $.i18n.prop("wizardWanType3G4G");
          } else {
            intfQSWValue=interfaceotherArray[i];
            intfQSWDescription = interfaceotherArray[i];
          }
          $('#interfaceBackup').append("<option value='" + intfQSWValue + "'>" + intfQSWDescription + "</option>");
          //}
        }
        $('#interfaceBackup option[value="' + interfaceSelection + '"]').remove();
	if ($("#connectionWanType").val()=="Ethernet" && $("#wizprimarypppoe").is(":checked") && $("#wizardprimaryipv6oe").is(":checked") && $("#bridgeIpv6oe").is(":checked")) {
	  bridgeInterface=$("#wizardprimaryIpv6Int").val();
	  $('#interfaceBackup option[value="' + bridgeInterface + '"]').remove();
	}
        if (interfaceBackupSelection != "") {
          //code
          $('#interfaceBackup option[value="' + interfaceBackupSelection + '"]').attr("selected", "selected");
        }
        if ($('select#interfaceBackup option').length >= 2) {
          if (backupCall == 0) {
            //code
            $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
          }
          else {
            $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          }

        }
        if ($("#interfaceBackup").val() !== "") {
          $('#interfaceRowBackup').show();
	  $("#ipcpRowbackup").show();
          $('#wizprimarypppoerowBackup').show();
          $('#modeRowBackup').hide();
          $('#wizprimarypppoebackup').show();
          if ($("#wizprimarypppoebackup").is(':checked')) {
	    $('#showAdvIpv6backup').show();
	    if ($("#connectionTypeBackup").val()=="Ethernet") {
	      populateIpv6oeInterface("backup");
	      $("#ipcpRowbackup").show();
	      $("#wizprimaryipv6Confbackup").change();
	      $("#wizardprimaryipv6oebackup").change();
	//      if ($("#wizprimaryipv6Confbackup").is(':checked')) {
	//	$("#connectionAuthenticationFieldsetIpv6backup").show();
	//      }else{
	//	if (checkEnableIPv6oE("backup") && !$("#wizardprimaryipv6oe").is(":checked")) {
	//	  $("#ipv6oeCheckboxbackup").show();
	//	}
	//      }
	    }
            $('#connectionAuthenticationFieldsetBackup').show();
          } else {
            $('#connectionAuthenticationFieldsetBackup').hide();
	     $("#connectionAuthenticationFieldsetIpv6backup").hide();
          }
          $('#ipAddressFieldsetBackup').show();
          $('#wizardprimaryvpiRowbackup').hide();
          $('#persistanceRowBackup').hide();
          $('#wizardencapRowbackup').hide();
          $('#slaFiledsetbackup').show();
          $('#showAdvBackup').show();
          $('#wizardprimaryvpiRowBackup').hide();
          $('#controllerRowBackup').hide();
        } else {
          $('#interfaceRowBackup').show();
        }

      } else if (connectionTypeBackup == "DSL") {
        var ControllermodePrimary = $('#controllerName').val();
        var backupControllerSelect = $('#controllerBackup').val();
        hideAllIntialBackup();
        $('#interfaceBackup').empty();
        $('#controllerBackup').empty();
        for (var i = 0; i < controllerArray.length; i++) {

          $('#controllerBackup').append("<option value='" + controllerArray[i] + "'>" + controllerArray[i] + "</option>");
        }
        if (nameParameter == "DSL") {
          $('#controllerBackup option[value="' + ControllermodePrimary + '"]').remove();
        }
        var nameWAN = $('#controllerBackup').val();
        if (backupControllerSelect != "") {
          //code
          $('#controllerBackup option[value="' + backupControllerSelect + '"]').attr("selected", "selected");
          nameWAN = $('#controllerBackup').val();
        }
        if ($('select#controllerBackup option').length >= 2) {
          if (backupCallController == 0) {
            //code
            $("#controllerBackup").prepend("<option value=''>" + $.i18n.prop("selectController") + "</option>");
            backupCallController = backupCallController + 1;
          } else {
            $("#controllerBackup").prepend("<option value=''>" + $.i18n.prop("selectController") + "</option>");
          }

        }


        if (nameWAN.indexOf('DSL') !== -1) {
          platformType = deviceCommunicator.getPlatformType();
          $("#controllerTypeBackupPlatformType").val(platformType);
          var DeviceType = deviceCommunicator.getDeviceType();
          controllerType = getControllerType(nameWAN);
          $("#controllerTypeBackup").val(controllerType);
          if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
            $("#modeBackup").empty();
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="atm" value="atm">ATM</option>');
          } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
            $("#modeBackup").empty();
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
            if (nameWAN.indexOf('VDSL') !== -1) {
              addOperatingModeWizard(nameWAN, "modeBackup");
            }
          } else if (platformType.indexOf('EA') !== -1) {
            $("#modeBackup").empty();
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="atm" value="atm">ATM</option>');
            $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
            if (nameWAN.indexOf('VDSL') !== -1) {
              addOperatingModeWizard(nameWAN, "modeBackup");
            }
            //addOperatingModeWizard(nameWAN, "modeBackup");
          } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
            $("#modeBackup").empty();
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="auto" value="auto">auto</option>');
            if (nameWAN.indexOf('VDSL') !== -1) {
              addOperatingModeWizard(nameWAN, "modeBackup");
            }
          } else if (DeviceType !== "fixed") {
            if (nameWAN.indexOf('VDSL') !== -1) {
              $("#modeBackup").empty();
              addOperatingModeWizard(nameWAN, "modeBackup");
            } else if (nameWAN.indexOf('SHDSL') !== -1) {
              controllerType = getControllerType(nameWAN);
              $("#controllerTypeBackup").val(controllerType);
              if (controllerType === "EFM") {
                $("#modeBackup").empty();
                $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
                $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
              } else if (controllerType === "EFMATM") {
                $("#modeSelection").empty();
                //addOperatingModeWizard(name);
                $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
                $("#modeBackup").append('<option id="atm" value="atm">ATM</option>');
                $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
              } else if (controllerType === "auto") {
                $("#modeBackup").empty();
                $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
                $("#modeBackup").append('<option id="auto" value="auto">auto</option>');
              }
            }
          }
          if (intefaceBackupMode != "") {
            //code
            $('#modeBackup option[value="' + intefaceBackupMode + '"]').attr("selected", "selected");
          }
          $('#interfaceBackup').empty();
          var splitArray = $('#controllerBackup').val().split(" ");
          var wantypeDslArraycheck = 0;
          for (var i = 0; i < interfaceDSLArray.length; i++) {
            if (splitArray[splitArray.length - 1].trim() != "" &&
                interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                wantypeDslArraycheck = 1;
              }



          }
          $('#interfaceBackup option[value="' + interfaceSelection + '"]').remove();
          if (interfaceBackupSelection != "") {
            //code
            $('#interfaceBackup option[value="' + interfaceBackupSelection + '"]').attr("selected", "selected");
          }
          if ($('select#interfaceBackup option').length >= 2) {
            if (backupCall == 0) {
              //code
              $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
            }
            else {
              $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
            }

          }
          if (($("#interfaceBackup").val() !== "") && ($("#controllerBackup").val() !== "") && ($("#modeBackup").val() !== "")) {
            //code
            if (wantypeDslArraycheck == 1) {
              if ($('#interfaceBackup').val().indexOf("Ethernet") > -1) {
                //code
                $('#wizardencapRowBackup').show();
                $('#wizardprimaryvpiRowBackup').hide();
                $('#interfaceRowBackup').show();
                $('#controllerRowBackup').show();
                $('#modeRowBackup').show();
                $('#wizprimarypppoerowBackup').show();
                if ($("#wizprimarypppoebackup").is(':checked')) {
                  $('#connectionAuthenticationFieldsetBackup').show();
                } else {
                  $('#connectionAuthenticationFieldsetBackup').hide();
		   $("#connectionAuthenticationFieldsetIpv6backup").hide();
                }
                $('#cellularNanoFieldsetBackup').hide();
                $('#ipAddressFieldsetBackup').show();
                $('#persistanceRowBackup').hide();
                var ethernetSubTag = $('#interfaceBackup').val().replace('Ethernet', '') + iAndC.getEthernetSubInterfaceTag($('#interfaceBackup').val());
                $('#interfaceSelectionsubbackup').val("");
                $('#interfaceSelectionsubbackup').val("Ethernet" + ethernetSubTag);
              } else if ($('#interfaceBackup').val().indexOf("ATM") > -1) {
                $('#wizardencapRowBackup').hide();
                $('#wizardprimaryvpiRowBackup').show();
                $('#interfaceRowBackup').show();
                $('#persistanceRowBackup').hide();
                $('#controllerRowBackup').show();
                $('#modeRowBackup').show();
                $('#wizprimarypppoerowBackup').show();
                if ($("#wizprimarypppoebackup").is(':checked')) {
                  $('#connectionAuthenticationFieldsetBackup').show();
                } else {
                  $('#connectionAuthenticationFieldsetBackup').hide();
		   $("#connectionAuthenticationFieldsetIpv6backup").hide();
                }
                $('#cellularNanoFieldsetBackup').hide();
                $('#ipAddressFieldsetBackup').show();
                var atmSubInterfaceTag = $('#interfaceBackup').val().replace('ATM', '') + iAndC.getAtmSubInterfaceTag($('#interfaceBackup').val());
                $('#interfaceSelectionsubbackup').val("");
                $('#interfaceSelectionsubbackup').val("ATM" + atmSubInterfaceTag);
              }
            } else {
              //$('#controllerRow').show();
              $('#wizardprimaryvpiRowBackup').hide();
              $('#interfaceRowBackup').show();
              $('#controllerRowBackup').show();
              $('#modeRowBackup').hide();
              $('#wizprimarypppoerowBackup').hide();
              $('#connectionAuthenticationFieldsetBackup').hide();
	      $("#connectionAuthenticationFieldsetIpv6backup").hide();
              $('#cellularNanoFieldsetBackup').hide();
              $('#ipAddressFieldsetBackup').hide();
              $('#wizardencapRowBackup').hide();
              $('#persistanceRowBackup').hide();
            }

          } else {
            if (($("#controllerBackup").val() !== "")) {
              $('#interfaceRowBackup').hide();
              $('#controllerRowBackup').show();
              $('#modeRowBackup').show();
            } else {
              $('#controllerRowBackup').show();
            }

          }
        }
      } else if (connectionTypeBackup === "Serial") {
        hideAllIntialBackup();
        if (interfaceBackupSelection != "") {
          //code
          $('#interfaceBackup option[value="' + interfaceBackupSelection + '"]').attr("selected", "selected");
        }
        if ($('select#interfaceBackup option').length >= 2) {
          if (backupCall == 0) {
            //code
            $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
          }
          else {
            $("#interfaceBackup").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          }

        }
        //if ($("#interfaceBackup").val()!=="") {
        populateSerialByConnectionTypeInBackup();
        //}
        //else{
        // $('#interfaceRowBackup').show();
        //}

      } else {
        hideAllIntialBackup();
        $('#interfaceBackup').find('option').each(function() {
          if ($(this).val().toLowerCase().indexOf("cellular") > -1){
            $(this).remove();
          }
        });
        $('#persistanceRowBackup').hide();
        //$('#interfaceBackup').hide();
      }
      backupCall = backupCall + 1;
      return false;


    }
    function primaryChange(nameParameter) {
      //code
      var interfaceSelection = $('#interfaceBackup').val();
      var interfacePrimarySelection = $('#interfaceSelection').val();
      var interfacePrimaryMode = $('#modeSelection').val();
      if ($('#connectionWanType').val() == "3g") {
        $("#controllerName").rules("remove");
        $("#modeSelection").rules("remove");
        hideAllIntial();
        $('#interfaceSelection').empty();
        $.each(cellularInterface, function(index, value) {
          $('#interfaceSelection').append("<option value='" + value + "'>" + value + "</option>");
        });
        $('#interfaceSelection option[value="' + interfaceSelection + '"]').remove();
        if (cellularInterface.length < 2) {
          $('#connectionTypeBackup option[value="3g"]').remove();
        }
        if (interfacePrimarySelection != "") {
          //code
          $('#interfaceSelection option[value="' + interfacePrimarySelection + '"]').attr("selected", "selected");
        }
        if ($('select#interfaceSelection option').length >= 2) {
          if (primaryCall == 0) {
            //code
            $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          } else {
            $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          }

        }
        if ($("#interfaceSelection").val() !== "") {
          $('#cellularNanoFieldset').show();
          if (!isNano) {
            $('.firmwareSectionModem').hide();
            $('.simSectionModem').hide();
          } else {
            $('.firmwareSectionModem').show();
            $('.simSectionModem').show();
          }
          $('#modeRow').hide();
          $('#interfaceRow').show();
          $('#controllerRow').hide();
          $('#interfaceSelection').val($("#interfaceSelection option").eq(1).val());
          $('#interfaceSelection').change();
          $('#ipAddressFieldset').hide();
          $('#connectionAuthenticationFieldset').hide();
	  $('#connectionAuthenticationFieldsetIpv6').hide();
          $('#persistanceRow').show();
          $('#wizprimarypppoerow').hide();
          $('#enableAutoFimrwareSwitch').trigger("change");
        }
        else {
          $('#interfaceRow').show();
        }

      } else if ($('#connectionWanType').val() == "Ethernet") {
        hideAllIntial();
        $("#controllerName").rules("remove");
        $("#modeSelection").rules("remove");
        $('#interfaceSelection').empty();
        for (var i = 0; i < interfaceotherArray.length; i++) {
          //if($('#connectionWanType').val().split(" ")[1].indexOf(interfaceDSLArray[i])){
          var intfQSWValue, intfQSWDescription;
          if (interfaceotherArray[i] == 'DSL') {
            intfQSWValue="DSL";
            intfQSWDescription = $.i18n.prop("wizardWanTypeBroadband");
          } else if (interfaceotherArray[i] == 'Ethernet') {
            intfQSWValue="Ethernet";
            intfQSWDescription = $.i18n.prop("wizardWanTypeEthernet");
          } else if (interfaceotherArray[i] == 'Serial') {
            intfQSWValue="Serial";
            intfQSWDescription = $.i18n.prop("wizardWanTypeSerial");
          } else if (interfaceotherArray[i] == '3g') {
            intfQSWValue="DSL";
            intfQSWDescription = $.i18n.prop("wizardWanType3G4G");
          } else {
            intfQSWValue=interfaceotherArray[i];
            intfQSWDescription = interfaceotherArray[i];
          }
          $('#interfaceSelection').append("<option value='" + intfQSWValue + "'>" + intfQSWDescription + "</option>");
          //}
        }

        $('#interfaceSelection option[value="' + interfaceSelection + '"]').remove();
        if (interfaceotherArray.length < 2) {
          $('#connectionTypeBackup option[value="Ethernet"]').remove();
        }
        if (interfacePrimarySelection != "") {
          //code
          $('#interfaceSelection option[value="' + interfacePrimarySelection + '"]').attr("selected", "selected");
        }
        if ($('select#interfaceSelection option').length >= 2) {
          if (primaryCall == 0) {
            //code
            $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
          } else {
            $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          }
          //$("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
        }
        if ($("#interfaceSelection").val() !== "") {
          //code
          $('#showAdv').show();
	  $('#showAdvIpv6').show();
          $('#cellularNanoFieldset').hide();
          $('#modeRow').hide();
          $('#controllerRow').hide();
          $('#interfaceRow').show();
          $('#wizprimarypppoerow').show();
          if ($('#wizprimarypppoe').is(':checked')) {
            $('#connectionAuthenticationFieldset').show();
	    if ($("#connectionWanType").val()=="Ethernet") {
	      populateIpv6oeInterface();
	      $("#ipcpRow").show();
	      $("#wizprimaryipv6Conf").change();
	      $("#wizardprimaryipv6oe").change();
	//      if ($("#wizprimaryipv6Conf").is(':checked')) {
	//	$("#connectionAuthenticationFieldsetIpv6").show();
	//      }else{
	//	if (checkEnableIPv6oE()) {
	//	  $("#ipv6oeCheckbox").show();
	//	}
	//      }
	//      if ($("wizardprimaryipv6oe").is(":checked") && !$("#wizprimaryipv6Conf").is(":checked")) {
	//	$("#ipv6oeFieldset").show();
	//      }else{
	//	$("#ipv6oeFieldset").hide();
	//      }
	    }
          } else {
            $('#connectionAuthenticationFieldset').hide();
	    $('#connectionAuthenticationFieldsetIpv6').hide();
          }


          $('#ipAddressFieldset').show();
          $('#wizardencapRow').show();
          $('#wizardprimaryvpiRow').hide();
          $('#persistanceRow').hide();
          $('#wizardencapRow').hide();
        } else {
          $('#interfaceRow').show();
        }


      } else if ($('#connectionWanType').val() == "DSL") {
        var backupController = $('#controllerBackup').val();
        var primaryController = $('#controllerName').val();
        hideAllIntial();
        $('#interfaceSelection').empty();
        $('#controllerName').empty();
        $("#controllerName").rules("add", {
          required: true});
        $("#modeSelection").rules("add", {
          required: true});

        $("#interfaceSelection").rules("add", {
          required: true});

        for (var i = 0; i < controllerArray.length; i++) {

          $('#controllerName').append("<option value='" + controllerArray[i] + "'>" + controllerArray[i] + "</option>");
        }
        if (nameParameter == "DSL") {
          $('#controllerName option[value="' + backupController + '"]').remove();
        }
        var nameWAN = $('#controllerName').val();
        if (controllerArray.length >= 2) {
          //code
          $('#controllerBackup option[value="' + nameWAN + '"]').remove();
        } else {
          $('#connectionTypeBackup option[value="DSL"]').remove();
        }
        if (primaryController != "") {
          //code
          $('#controllerName option[value="' + primaryController + '"]').attr("selected", "selected");
          nameWAN = $('#controllerName').val();
        }
        if ($('select#controllerName option').length >= 2) {
          if (primaryCallController == 0) {
            //code
            $("#controllerName").prepend("<option value=''>" + $.i18n.prop("selectController") + "</option>").val('');
            primaryCallController = primaryCallController + 1;
          } else {
            $("#controllerName").prepend("<option value=''>" + $.i18n.prop("selectController") + "</option>");
          }

        }


        if (nameWAN.indexOf('DSL') !== -1) {
          platformType = deviceCommunicator.getPlatformType();
          controllerType = getControllerType(nameWAN);
          $("#controllerTypePrimary").val(controllerType);
          $("#controllerTypePlatformType").val(platformType);
          var DeviceType = deviceCommunicator.getDeviceType();
          if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
            $("#modeSelection").empty();
            $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeSelection").append('<option id="atm" value="atm">ATM</option>');
          } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
            $("#modeSelection").empty();
            $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
            if (nameWAN.indexOf('VDSL') !== -1) {
              addOperatingModeWizard(nameWAN, "modeSelection");
            }
          } else if (platformType.indexOf('EA') !== -1) {
            $("#modeSelection").empty();
            $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeSelection").append('<option id="atm" value="atm">ATM</option>');
            $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
            if (nameWAN.indexOf('VDSL') !== -1) {
              addOperatingModeWizard(nameWAN, "modeSelection");
            }

          } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
            $("#modeSelection").empty();
            if (nameWAN.indexOf('VDSL') !== -1) {
              addOperatingModeWizard(nameWAN, "modeSelection");
            }
          } else if (DeviceType !== "fixed") {
            if (nameWAN.indexOf('VDSL') !== -1) {
              $("#modeSelection").empty();
              addOperatingModeWizard(nameWAN, "modeSelection");
            } else if (nameWAN.indexOf('SHDSL') !== -1) {
              controllerType = getControllerType(nameWAN);
              $("#controllerTypePrimary").val(controllerType);

              if (controllerType === "EFM") {
                $("#modeSelection").empty();
                $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
                $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
              } else if (controllerType === "EFMATM") {
                $("#modeSelection").empty();
                //addOperatingModeWizard(name);
                $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
                $("#modeSelection").append('<option id="atm" value="atm">ATM</option>');
                $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
              } else if (controllerType === "auto") {
                $("#modeSelection").empty();
                $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
                $("#modeSelection").append('<option id="auto" value="auto">auto</option>');
              }
            }
          }
          if (interfacePrimaryMode != "") {
            //code
            $('#modeSelection option[value="' + interfacePrimaryMode + '"]').attr("selected", "selected");
          }
          $('#interfaceSelection').empty();
          var splitArray = $('#controllerName').val().split(" ");
          var wantypeDslArraycheck = 0;
          for (var i = 0; i < interfaceDSLArray.length; i++) {
            if (splitArray[splitArray.length - 1].trim() != "" &&
                interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                wantypeDslArraycheck = 1;
              }
          }
          $('#interfaceSelection option[value="' + interfaceSelection + '"]').remove();
          if (interfacePrimarySelection != "") {
            //code
            $('#interfaceSelection option[value="' + interfacePrimarySelection + '"]').attr("selected", "selected");
          }
          if ($('select#interfaceSelection option').length >= 2) {
            if (primaryCall == 0) {
              //code
              $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
            }
            else {
              $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
            }
            //$("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
          }
          if (($("#interfaceSelection").val() !== "") && ($("#controllerName").val() !== "") && ($("#modeSelection").val() !== "")) {
            if (wantypeDslArraycheck == 1) {
              if ($('#interfaceSelection').val().indexOf("Ethernet") > -1) {
                //code
                $('#wizardencapRow').show();
                $('#wizardprimaryvpiRow').hide();
                $('#interfaceRow').show();
                $('#controllerRow').show();
                $('#modeRow').show();
                $('#wizprimarypppoerow').show();
                if ($('#wizprimarypppoe').is(':checked')) {
                  $('#connectionAuthenticationFieldset').show();
		  //if ($("#wizprimaryipv6Conf").is(':checked') && $("#connectionWanType").val()=="Ethernet") {
		  //  $("#connectionAuthenticationFieldsetIpv6").show();
		  //}
                } else {
                  $('#connectionAuthenticationFieldset').hide();
		  $('#connectionAuthenticationFieldsetIpv6').hide();
                }
                $('#cellularNanoFieldset').hide();
                $('#ipAddressFieldset').show();
                $('#persistanceRow').hide();
                var ethernetSubTag = $('#interfaceSelection').val().replace('Ethernet', '') +
                iAndC.getEthernetSubInterfaceTag($('#interfaceSelection').val());
                $('#interfaceSelectionsub').val("");
                $('#interfaceSelectionsub').val("Ethernet" + ethernetSubTag);
              } else if ($('#interfaceSelection').val().indexOf("ATM") > -1) {
                $('#wizardencapRow').hide();
                $('#wizardprimaryvpiRow').show();
                $('#interfaceRow').show();
                $('#persistanceRow').hide();
                $('#controllerRow').show();
                $('#modeRow').show();
                $('#wizprimarypppoerow').show();
                if ($('#wizprimarypppoe').is(':checked')) {
                  $('#connectionAuthenticationFieldset').show();
		  if ($("#wizprimaryipv6Conf").is(':checked') && $("#connectionWanType").val()=="Ethernet") {
		    $("#connectionAuthenticationFieldsetIpv6").show();
		  }
                } else {
                  $('#connectionAuthenticationFieldset').hide();
		  $('#connectionAuthenticationFieldsetIpv6').hide();
                }
                $('#cellularNanoFieldset').hide();
                $('#ipAddressFieldset').show();
                var atmSubInterfaceTag = $('#interfaceSelection').val().replace('ATM', '') +
                iAndC.getAtmSubInterfaceTag($('#interfaceSelection').val());
                $('#interfaceSelectionsub').val("");
                $('#interfaceSelectionsub').val("ATM" + atmSubInterfaceTag);
              }
              //else {
              //}

            } else {
              //$('#controllerRow').show();
              $('#wizardprimaryvpiRow').hide();
              $('#interfaceRow').show();
              $('#controllerRow').show();
              $('#modeRow').hide();
              $('#wizprimarypppoerow').hide();
              $('#connectionAuthenticationFieldset').hide();
	      $('#connectionAuthenticationFieldsetIpv6').hide();
              $('#cellularNanoFieldset').hide();
              $('#ipAddressFieldset').hide();
              $('#wizardencapRow').hide();
              $('#persistanceRow').hide();
            }
          } else {
            if ($("#controllerName").val() !== "") {
              $('#controllerRow').show();
              $('#modeRow').show();
              $('#interfaceRow').hide();
            } else {
              $('#controllerRow').show();
            }


          }


        }
      } else if ($('#connectionWanType').val() == "Serial") {
        $("#controllerName").rules("remove");
        $("#modeSelection").rules("remove");
        hideAllIntial();
        if (interfacePrimarySelection != "") {
          //code
          $('#interfaceSelection option[value="' + interfacePrimarySelection + '"]').attr("selected", "selected");
        }
        if ($('select#interfaceSelection option').length >= 2) {
          if (primaryCall == 0) {
            //code
            $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
          }
          else {
            $("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>");
          }

          //$("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>").val('');
        }
        //if ($("#interfaceSelection").val()!=="") {
        populateSerialByConnectionType();

        //}

      } else {
        hideAllIntial();
        $('#interfaceSelection').empty();
        $('#controllerName').empty();
        $('#controllerRow').hide();
        $('#modeRow').hide();
        $('#interfaceRow').hide();
        $('#cellularNanoFieldset').hide();
        $('#wizprimarypppoerow').hide();
        $('#wizardprimaryvpiRow').hide();
        $('#connectionAuthenticationFieldset').hide();
	$('#connectionAuthenticationFieldsetIpv6').hide();
        //$('#controllerName').change();
        $('#wizardencapRow').hide();
        $('#ipAddressFieldset').hide();

      }
      primaryCall = primaryCall + 1;


      return false;
    }
    $('#connectionWanType').change(function() {
      var WanSelection = $("#connectionWanType").val();
      var WanSelectionbackup = $('#connectionTypeBackup').val();
      if (interfaceDSLArray.length > 0 || controllerArray.length > 0) {
        if ($("#connectionWanType option[value='DSL']").length == 0) {
          $('#connectionWanType').append("<option value='DSL'>"+$.i18n.prop("wizardWanTypeBroadband")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='DSL']").length == 0) {
          $('#connectionTypeBackup').append("<option value='DSL'>"+$.i18n.prop("wizardWanTypeBroadband")+"</option>");
        }
      }
      if (interfaceotherArray.length > 0) {
        if ($("#connectionWanType option[value='Ethernet']").length == 0) {
          $('#connectionWanType').append("<option value='Ethernet'>"+$.i18n.prop("wizardWanTypeEthernet")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='Ethernet']").length == 0) {
          $('#connectionTypeBackup').append("<option value='Ethernet'>"+$.i18n.prop("wizardWanTypeEthernet")+"</option>");
        }
      }
      if (cellularInterface.length > 0) {
        if ($("#connectionWanType option[value='3g']").length == 0) {
          $('#connectionWanType').append("<option value='3g'>"+$.i18n.prop("wizardWanType3G4G")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='3g']").length == 0) {
          $('#connectionTypeBackup').append("<option value='3g'>"+$.i18n.prop("wizardWanType3G4G")+"</option>");
        }

      }
      if (serialInterface.length > 0) {
        if ($("#connectionWanType option[value='Serial']").length == 0) {
          $('#connectionWanType').append("<option value='Serial'>"+$.i18n.prop("wizardWanTypeSerial")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='Serial']").length == 0) {
          $('#connectionTypeBackup').append("<option value='Serial'>"+$.i18n.prop("wizardWanTypeSerial")+"</option>");
        }
      }
      if ($('#connectionWanType').val() == "DSL") {
        if (controllerArray.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }
        //code
      } else if ($('#connectionWanType').val() == "Ethernet") {
        if (interfaceotherArray.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }

        //code
      } else if ($('#connectionWanType').val() == "3g") {

        if (cellularInterface.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }

      } else if ($('#connectionWanType').val() == "Serial") {
        if (serialInterface.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }

      }
      if ($('#connectionTypeBackup').val() == "DSL") {
        if (controllerArray.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }
        //code
      } else if ($('#connectionTypeBackup').val() == "Ethernet") {
        if (interfaceotherArray.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }

        //code
      } else if ($('#connectionTypeBackup').val() == "3g") {

        if (cellularInterface.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }

      } else if ($('#connectionTypeBackup').val() == "Serial") {
        if (serialInterface.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }

      }
      primaryChange($('#connectionTypeBackup').val());
      backupChangeFunction($('#connectionWanType').val());
    });
    $("#modeAlertPrimary").dialog({
      autoOpen: false,
      height: 200,
      width: 600,
      title: "Controller",
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog('close');
            //$(this).dialog('close');
            blockPage("Applying");
            setTimeout(function() {
              var name = $("#modeSelection").val();
              platformType = deviceCommunicator.getPlatformType();
              var deviceType = deviceCommunicator.getDeviceType();
              var controllerType = getControllerType($("#controllerName").val());
              //var controllerMode = $("#modeSelection").val();
              var cliInput = "controller " + $("#controllerName").val();
              if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
                cliInput = cliInput + "\n mode " + $("#modeSelection").val();
              } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
                cliInput = cliInput + "\n" + "dsl-group pairs 0-3 efm-bond";
              } else if (platformType.indexOf('EA') !== -1) {
                cliInput = cliInput + "\n no dsl-group auto";
                cliInput = cliInput + "\n mode " + $("#modeSelection").val();
                cliInput = cliInput + "\n" + "dsl-group auto";
              } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
                cliInput = "controller " + $("#controllerName").val();
                cliInput = cliInput + "\n operating mode " + $("#modeSelection").val();
              } else if (deviceType !== "fixed" &&
                         $("#connectionWanType").val().toLowerCase().indexOf("dsl") > -1) {

                  var cliInput = "";


                  if ($("#controllerName").val().toLowerCase().indexOf("shdsl") > -1) {

                    if (controllerType.toLowerCase() == "efm") {
                      cliInput = cliInput + "\n" + "dsl-group pairs 0-3 efm-bond";
                    } else if (controllerType.toLowerCase() == "efmatm") {
                      cliInput = cliInput + "\n  no dsl-group auto";
                      cliInput = cliInput + "\n mode " + $("#modeSelection").val();
                      cliInput = cliInput + "\n" + "dsl-group auto";
                    } else if (controllerType === "auto") {
                      cliInput = cliInput + "\n" + "dsl-group auto";
                    }
                  } else {
                    cliInput = "controller " + $("#controllerName").val();
                    cliInput = cliInput + "\n operating mode " + $("#modeSelection").val();

                  }

                }

              try {
                response = deviceCommunicator.getConfigCmdOutput(cliInput);
              } catch (e) {
                //$(this).dialog('close');
                $.unblockUI();
              }

              setShowInterface();
              loadDsl(dslFoundArray, showIpInt);
              $('#controllerName').trigger("change");
              $('#modeSelection option[value="' + name + '"]').attr("selected", "selected");
              if (name.indexOf('auto') > -1) {

                //var checkVDslInterface = 0;
                $('#interfaceSelection').empty();
                var splitArray = $('#controllerName').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                      $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      // checkVDslInterface = 1;
                    }

                }

                $("#interfaceSelection").change();
              }
              else if (name.indexOf("vdsl") > -1) {
                $('#interfaceSelection').empty();
                var splitArray = $('#controllerName').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") == -1) {
                        $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }


                $("#interfaceSelection").change();

              } else if ((name.indexOf("adsl") > -1) || (name.indexOf("ansi") > -1)) {
                $('#interfaceSelection').empty();
                var splitArray = $('#controllerName').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") > -1) {
                        $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }
                $("#interfaceSelection").change();
              } else if (name.toLowerCase().indexOf("efm") > -1) {
                $('#interfaceSelection').empty();
                var splitArray = $('#controllerName').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") == -1) {
                        $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }


                $("#interfaceSelection").change();

              } else if ((name.toLowerCase().indexOf("atm") > -1)) {
                $('#interfaceSelection').empty();
                var splitArray = $('#controllerName').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") > -1) {
                        $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }
                $("#interfaceSelection").change();
              } else {
                $('#interfaceSelection').empty();
                var splitArray = $('#controllerName').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                      $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      // checkVDslInterface = 1;
                    }

                }

                $("#interfaceSelection").change();

              }


              $.unblockUI();
            }, 1000);
          }
        }],
      close: function() {

      }
    });


    $("#modeAlertBackup").dialog({
      autoOpen: false,
      height: 200,
      width: 600,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            var name = $("#modeBackup").val();
            $(this).dialog('close');
            blockPage("Applying");
            setTimeout(function() {
              platformType = deviceCommunicator.getPlatformType();
              var deviceType = deviceCommunicator.getDeviceType();
              var controllerTypeBack = getControllerType($("#controllerBackup").val());
              //var controllerModeBack = $("#modeBackup").val();
              var cliInput = "controller " + $("#controllerBackup").val();
              if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
                cliInput = cliInput + "\n mode " + $("#modeBackup").val();
              } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
                cliInput = cliInput + "\n" + "dsl-group pairs 0-3 efm-bond";
              } else if (platformType.indexOf('EA') !== -1) {
                cliInput = cliInput + "\n no dsl-group auto";
                cliInput = cliInput + "\n mode " + $("#modeBackup").val();
                cliInput = cliInput + "\n" + "dsl-group auto";
              } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
                cliInput = "controller " + $("#controllerBackup").val();
                cliInput = cliInput + "\n operating mode " + $("#modeBackup").val();
              } else if (deviceType !== "fixed" &&
                         $("#connectionTypeBackup").val().toLowerCase().indexOf("dsl") > -1) {
                  var cliInput = "";
                  if ($("#controllerBackup").val().toLowerCase().indexOf("shdsl") > -1) {

                    if (controllerTypeBack.toLowerCase() == "efm") {
                      cliInput = cliInput + "\n" + "dsl-group pairs 0-3 efm-bond";
                    } else if (controllerTypeBack.toLowerCase() == "efmatm") {
                      cliInput = cliInput + "\n no dsl-group auto";
                      cliInput = cliInput + "\n mode " + $("#modeBackup").val();
                      cliInput = cliInput + "\n" + "dsl-group auto";
                    } else if (controllerTypeBack.toLowerCase() == "auto") {
                      cliInput = cliInput + "\n" + "dsl-group auto";
                    }
                  } else {
                    cliInput = "controller " + $("#controllerBackup").val();
                    cliInput = cliInput + "\n operating mode " + $("#modeBackup").val();

                  }


              }
              try {
                response = deviceCommunicator.getConfigCmdOutput(cliInput);
              } catch (e) {
                //$(this).dialog('close');
                $.unblockUI();
              }
              setShowInterface();
              loadDsl(dslFoundArray, showIpInt);
              $('#controllerBackup').trigger("change");

              $('#modeBackup option[value="' + name + '"]').attr("selected", "selected");
              //var name = $("#modeBackup").val();
              if (name.indexOf('auto') > -1) {

                //var checkVDslInterface = 0;
                $('#interfaceBackup').empty();
                var splitArray = $('#controllerBackup').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                      $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      // checkVDslInterface = 1;
                    }

                }

                $("#interfaceBackup").change();

              }
              else if (name.indexOf("vdsl") > -1) {
                $('#interfaceBackup').empty();
                var splitArray = $('#controllerBackup').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                        interfaceDSLArray[i].indexOf("ATM") == -1) {
                        $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }
                $("#interfaceBackup").change();

              } else if ((name.indexOf("adsl") > -1) || (name.indexOf("ansi") > -1)) {
                $('#interfaceBackup').empty();
                var splitArray = $('#controllerBackup').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") > -1) {
                        $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }
                $("#interfaceBackup").change();
              } else if (name.toLowerCase().indexOf("efm") > -1) {
                $('#interfaceBackup').empty();
                var splitArray = $('#controllerBackup').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") == -1) {
                        $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }
                $("#interfaceBackup").change();

              } else if ((name.toLowerCase().indexOf("atm") > -1)) {
                $('#interfaceBackup').empty();
                var splitArray = $('#controllerBackup').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                      interfaceDSLArray[i].indexOf("ATM") > -1) {
                        $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      }
                      // checkVDslInterface = 1;


                }
                $("#interfaceBackup").change();
              } else {
                $('#interfaceBackup').empty();
                var splitArray = $('#controllerBackup').val().split(" ");

                for (var i = 0; i < interfaceDSLArray.length; i++) {
                  if (splitArray[splitArray.length - 1].trim() != "" &&
                      interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                      $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      // checkVDslInterface = 1;
                    }

                }

                $("#interfaceBackup").change();

              }

              $.unblockUI();
            }, 1000);
          }
        }],
      close: function() {

      }
    });
    $('#modeBackup').change(function() {
      var name = $("#modeBackup").val();
      if (name != "") {
        //code
        if (name.indexOf('auto') > -1) {


          $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
          $("#modeAlertBackup").dialog("open");
        } else {
          var splitArray = $('#controllerBackup').val().split(" ");
          var wantypeDslArraycheckdialogback = 0;
          for (var i = 0; i < interfaceDSLArray.length; i++) {
            if (splitArray[splitArray.length - 1].trim() != "" &&
                interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                //$('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                wantypeDslArraycheckdialogback = 1;
              }

          }
          if (wantypeDslArraycheckdialogback == 0) {
            //code
            $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
            $("#modeAlertBackup").dialog("open");
          } else {
            var checkVDslInterfacemodeBack = 0;
            if (name.indexOf('auto') > -1) {
              //var checkVDslInterface = 0;
              $('#interfaceBackup').empty();
              var splitArray = $('#controllerBackup').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                    $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                    checkVDslInterfacemodeBack = 1;
                  }

              }
              if (checkVDslInterfacemodeBack == 0) {
                //code
                $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertBackup").dialog("open");
              }
              else {
                $("#interfaceBackup").change();
              }
            }
            else if (name.indexOf("vdsl") > -1) {
              $('#interfaceBackup').empty();
              var splitArray = $('#controllerBackup').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") == -1) {
                      $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemodeBack = 1;
                    }


              }
              if (checkVDslInterfacemodeBack == 0) {
                //code
                $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertBackup").dialog("open");
              }
              else {
                $("#interfaceBackup").change();
              }
            } else if ((name.indexOf("adsl") > -1) || (name.indexOf("ansi") > -1)) {
              $('#interfaceBackup').empty();
              var splitArray = $('#controllerBackup').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") > -1) {
                      $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemodeBack = 1;
                    }


              }
              if (checkVDslInterfacemodeBack == 0) {
                //code
                $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertBackup").dialog("open");
              }
              else {
                $("#interfaceBackup").change();
              }
            } else if (name.toLowerCase().indexOf("efm") > -1) {
              $('#interfaceBackup').empty();
              var splitArray = $('#controllerBackup').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") == -1) {
                      $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemodeBack = 1;
                    }


              }
              if (checkVDslInterfacemodeBack == 0) {
                //code
                $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertBackup").dialog("open");
              }
              else {
                $("#interfaceBackup").change();
              }
            } else if ((name.toLowerCase().indexOf("atm") > -1)) {
              $('#interfaceBackup').empty();
              var splitArray = $('#controllerBackup').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") > -1) {
                      $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemodeBack = 1;
                    }


              }
              if (checkVDslInterfacemodeBack == 0) {
                //code
                $("#modeAlertMessageBackup").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertBackup").dialog("open");
              }
              else {
                $("#interfaceBackup").change();
              }
            } else {
              $('#interfaceBackup').empty();
              var splitArray = $('#controllerBackup').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                    $('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                    // checkVDslInterface = 1;
                  }

              }
              $("#interfaceBackup").change();
            }
          }
        }
      } else {
        $('#wizardprimaryvpiRowBackup').hide();
        $('#interfaceRowBackup').hide();
        $('#controllerRowBackup').show();
        $('#modeRowBackup').show();
        $('#wizprimarypppoerowBackup').hide();
        $('#connectionAuthenticationFieldsetBackup').hide();
        $('#cellularNanoFieldsetBackup').hide();
        $('#ipAddressFieldsetBackup').hide();
        $('#wizardencapRowBackup').hide();

      }

    });
    $('#modeSelection').change(function() {
      var name = $("#modeSelection").val();
      if (name != "") {
        if (name.indexOf('auto') > -1) {

          $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
          $("#modeAlertPrimary").dialog("open");

        } else {
          var splitArray = $('#controllerName').val().split(" ");
          var wantypeDslArraycheckdialog = 0;
          for (var i = 0; i < interfaceDSLArray.length; i++) {
            if (splitArray[splitArray.length - 1].trim() != "" &&
                interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                //$('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                wantypeDslArraycheckdialog = 1;
              }

          }
          if (wantypeDslArraycheckdialog == 0) {
            //code
            $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
            $("#modeAlertPrimary").dialog("open");
          } else {
            var checkVDslInterfacemode = 0;
            if (name.indexOf('auto') > -1) {
              //var checkVDslInterface = 0;
              $('#interfaceSelection').empty();
              var splitArray = $('#controllerName').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                    $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                    checkVDslInterfacemode = 1;
                  }

              }
              if (checkVDslInterfacemode == 0) {
                //code
                $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertPrimary").dialog("open");
              } else {
                $("#interfaceSelection").change();
              }
            }
            else if (name.indexOf("vdsl") > -1) {
              $('#interfaceSelection').empty();
              var splitArray = $('#controllerName').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                    if (interfaceDSLArray[i].indexOf("ATM") == -1) {
                      $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                    }
                    checkVDslInterfacemode = 1;
                  }

              }
              if (checkVDslInterfacemode == 0) {
                //code
                $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertPrimary").dialog("open");
              } else {
                $("#interfaceSelection").change();
              }
            }
            else if ((name.indexOf("adsl") > -1) || (name.indexOf("ansi") > -1)) {
              $('#interfaceSelection').empty();
              var splitArray = $('#controllerName').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") > -1) {
                      $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemode = 1;
                    }


              }
              if (checkVDslInterfacemode == 0) {
                //code
                $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertPrimary").dialog("open");
              } else {
                $("#interfaceSelection").change();
              }
            } else if ((name.toLowerCase().indexOf("atm") > -1)) {
              $('#interfaceSelection').empty();
              var splitArray = $('#controllerName').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") > -1) {
                      $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemode = 1;
                    }


              }
              if (checkVDslInterfacemode == 0) {
                //code
                $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertPrimary").dialog("open");
              } else {
                $("#interfaceSelection").change();
              }
            } else if ((name.toLowerCase().indexOf("efm") > -1)) {
              $('#interfaceSelection').empty();
              var splitArray = $('#controllerName').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1 &&
                    interfaceDSLArray[i].indexOf("ATM") == -1) {
                      $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                      checkVDslInterfacemode = 1;
                    }


              }
              if (checkVDslInterfacemode == 0) {
                //code
                $("#modeAlertMessagePrimary").html($.i18n.prop("modeAlertMessageBackup"));
                $("#modeAlertPrimary").dialog("open");
              } else {
                $("#interfaceSelection").change();
              }
            } else {

              //var checkVDslInterface = 0;
              $('#interfaceSelection').empty();
              var splitArray = $('#controllerName').val().split(" ");
              for (var i = 0; i < interfaceDSLArray.length; i++) {
                if (splitArray[splitArray.length - 1].trim() != "" &&
                    interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
                    $('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
                    // checkVDslInterface = 1;
                  }

              }
              $("#interfaceSelection").change();
            }
          }
        }
      } else {
        $('#wizardprimaryvpiRow').hide();
        //$('#interfaceRow').show();
        $('#controllerRow').show();
        $('#modeRow').show();
        $('#wizprimarypppoerow').hide();
        $('#connectionAuthenticationFieldset').hide();
	$('#connectionAuthenticationFieldsetIpv6').hide();
        $('#cellularNanoFieldset').hide();
        $('#ipAddressFieldset').hide();
        $('#wizardencapRow').hide();

      }

    });
    $('#controllerName').change(function() {
      $('#interfaceSelection').empty();
      var splitArray = $('#controllerName').val().split(" ");
      var checkVDslInterface = 0;
      var nameWAN = $('#controllerName').val();


      platformType = deviceCommunicator.getPlatformType();
      var DeviceType = deviceCommunicator.getDeviceType();
      $("#controllerTypePlatformType").val(platformType);
      controllerType = getControllerType(nameWAN);
      $("#controllerTypePrimary").val(controllerType);
      if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
        $("#modeSelection").empty();
        $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
        $("#modeSelection").append('<option id="atm" value="atm">ATM</option>');
      } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
        $("#modeSelection").empty();
        $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
        $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
        if (nameWAN.indexOf('VDSL') !== -1) {
          addOperatingModeWizard(nameWAN, "modeSelection");
        }
      } else if (platformType.indexOf('EA') !== -1) {
        $("#modeSelection").empty();
        $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
        $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
        $("#modeSelection").append('<option id="atm" value="atm">ATM</option>');
        if (nameWAN.indexOf('VDSL') !== -1) {
          addOperatingModeWizard(nameWAN, "modeSelection");
        }
      } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
        $("#modeSelection").empty();
        if (nameWAN.indexOf('VDSL') !== -1) {
          addOperatingModeWizard(nameWAN, "modeSelection");
        }
      } else if (DeviceType !== "fixed") {
        if (nameWAN.indexOf('VDSL') !== -1) {
          $("#modeSelection").empty();
          addOperatingModeWizard(nameWAN, "modeSelection");
        } else if (nameWAN.indexOf('SHDSL') !== -1) {
          controllerType = getControllerType(nameWAN);
          $("#controllerTypePrimary").val(controllerType);
          if (controllerType === "EFM") {
            $("#modeSelection").empty();
            $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
          } else if (controllerType === "EFMATM") {
            $("#modeSelection").empty();
            //addOperatingModeWizard(name);
            //$("#interfaceSelection").prepend("<option value=''>" + $.i18n.prop("selectInterface") + "</option>")
            $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeSelection").append('<option id="atm" value="atm">ATM</option>');
            $("#modeSelection").append('<option id="efm" value="efm">EFM</option>');
          } else if (controllerType === "auto") {
            $("#modeSelection").empty();
            $("#modeSelection").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeSelection").append('<option id="auto" value="auto">auto</option>');
          }
        }
      }

      for (var i = 0; i < interfaceDSLArray.length; i++) {
        if (splitArray[splitArray.length - 1].trim() != "" &&
            interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
            //$('#interfaceSelection').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
            checkVDslInterface = 1;
          }

      }
      if (checkVDslInterface == 1) {
        //code
        $('#wizardprimaryvpiRow').hide();
        //$('#interfaceRow').show();
        $('#controllerRow').show();
        $('#modeRow').show();
        $('#wizprimarypppoerow').hide();
        $('#connectionAuthenticationFieldset').hide();
	$('#connectionAuthenticationFieldsetIpv6').hide();
        $('#cellularNanoFieldset').hide();
        $('#ipAddressFieldset').hide();
        $('#wizardencapRow').hide();

      } else {
        $('#wizardprimaryvpiRow').hide();
        //$('#interfaceRow').show();
        $('#controllerRow').show();
        $('#modeRow').show();
        $('#wizprimarypppoerow').hide();
        $('#connectionAuthenticationFieldset').hide();
	$('#connectionAuthenticationFieldsetIpv6').hide();
        $('#cellularNanoFieldset').hide();
        $('#ipAddressFieldset').hide();
        $('#wizardencapRow').hide();
      }


    });
    $('#controllerBackup').change(function() {
      $('#interfaceBackup').empty();
      var splitArray = $('#controllerBackup').val().split(" ");
      var checkVDslInterface = 0;
      var nameWAN = $('#controllerBackup').val();

      platformType = deviceCommunicator.getPlatformType();
      var DeviceType = deviceCommunicator.getDeviceType();
      $("#controllerTypeBackupPlatformType").val(platformType);
      controllerType = getControllerType(nameWAN);
      $("#controllerTypeBackup").val(controllerType);
      if (platformType.indexOf('888') !== -1 && platformType.indexOf('888E') === -1) {
        $("#modeBackup").empty();
        $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
        $("#modeBackup").append('<option id="atm" value="atm">ATM</option>');
      } else if (platformType.indexOf('888E') !== -1 && platformType.indexOf('888EA') === -1) {
        $("#modeBackup").empty();
        $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
        $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
        if (nameWAN.indexOf('VDSL') !== -1) {
          addOperatingModeWizard(nameWAN, "modeBackup");
        }
      } else if (platformType.indexOf('EA') !== -1) {
        $("#modeBackup").empty();
        $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
        $("#modeBackup").append('<option id="atm" value="atm">ATM</option>');
        $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
        if (nameWAN.indexOf('VDSL') !== -1) {
          addOperatingModeWizard(nameWAN, "modeBackup");
        }
      } else if (platformType.indexOf('867') !== -1 || platformType.indexOf('887') !== -1 || platformType.indexOf('866VAE') !== -1) {
        $("#modeBackup").empty();
        if (nameWAN.indexOf('VDSL') !== -1) {
          addOperatingModeWizard(nameWAN, "modeBackup");
        }
      } else if (DeviceType !== "fixed") {
        if (nameWAN.indexOf('VDSL') !== -1) {
          $("#modeBackup").empty();
          addOperatingModeWizard(nameWAN, "modeBackup");
        } else if (nameWAN.indexOf('SHDSL') !== -1) {
          controllerType = getControllerType(nameWAN);
          $("#controllerTypeBackup").val(controllerType);
          if (controllerType === "EFM") {
            $("#modeBackup").empty();
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
          } else if (controllerType === "EFMATM") {
            $("#modeBackup").empty();
            //addOperatingModeWizard(name);
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="atm" value="atm">ATM</option>');
            $("#modeBackup").append('<option id="efm" value="efm">EFM</option>');
          } else if (controllerType === "auto") {
            $("#modeBackup").empty();
            $("#modeBackup").append("<option value=''>" + $.i18n.prop("selectMode") + "</option>");
            $("#modeBackup").append('<option id="auto" value="auto">auto</option>');
          }
        }
      }

      for (var i = 0; i < interfaceDSLArray.length; i++) {
        if (splitArray[splitArray.length - 1].trim() != "" &&
            interfaceDSLArray[i].indexOf(splitArray[splitArray.length - 1].trim()) > -1) {
            //$('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
            checkVDslInterface = 1;
          }

      }
      //$("#interfaceSelection").append("<option value=''>" + $.i18n.prop("selectInterface") + "</option>")
      //$('#interfaceBackup').append("<option value='" + interfaceDSLArray[i] + "'>" + interfaceDSLArray[i] + "</option>");
      if (checkVDslInterface == 1) {
        //code
        $('#wizardprimaryvpiRowBackup').hide();
        $('#interfaceRowBackup').hide();
        $('#controllerRowBackup').show();
        $('#modeRowBackup').show();
        $('#wizprimarypppoerowBackup').hide();
        $('#connectionAuthenticationFieldsetBackup').hide();
        $('#cellularNanoFieldsetBackup').hide();
        $('#ipAddressFieldsetBackup').hide();
        $('#wizardencapRowBackup').hide();
      } else {
        $('#wizardprimaryvpiRowBackup').hide();
        $('#interfaceRowBackup').hide();
        $('#controllerRowBackup').show();
        $('#modeRowBackup').show();
        $('#wizprimarypppoerowBackup').hide();
        $('#connectionAuthenticationFieldsetBackup').hide();
        $('#cellularNanoFieldsetBackup').hide();
        $('#ipAddressFieldsetBackup').hide();
        $('#wizardencapRowBackup').hide();
      }


    });
    $('#connectionTypeBackup').change(function() {
      var WanSelectionbackup = $('#connectionTypeBackup').val();
      var WanSelection = $("#connectionWanType").val();
      if (interfaceDSLArray.length > 0 || controllerArray.length > 0) {
        if ($("#connectionWanType option[value='DSL']").length == 0) {
          $('#connectionWanType').append("<option value='DSL'>"+$.i18n.prop("wizardWanTypeBroadband")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='DSL']").length == 0) {
          $('#connectionTypeBackup').append("<option value='DSL'>"+$.i18n.prop("wizardWanTypeBroadband")+"</option>");
        }
      }
      if (interfaceotherArray.length > 0) {
        if ($("#connectionWanType option[value='Ethernet']").length == 0) {
          $('#connectionWanType').append("<option value='Ethernet'>"+$.i18n.prop("wizardWanTypeEthernet")+")</option>");
        }
        if ($("#connectionTypeBackup option[value='Ethernet']").length == 0) {
          $('#connectionTypeBackup').append("<option value='Ethernet'>"+$.i18n.prop("wizardWanTypeEthernet")+")</option>");
        }
      }
      if (cellularInterface.length > 0) {
        if ($("#connectionWanType option[value='3g']").length == 0) {
          $('#connectionWanType').append("<option value='3g'>"+$.i18n.prop("wizardWanType3G4G")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='3g']").length == 0) {
          $('#connectionTypeBackup').append("<option value='3g'>"+$.i18n.prop("wizardWanType3G4G")+"</option>");
        }

      }
      if (serialInterface.length > 0) {
        if ($("#connectionWanType option[value='Serial']").length == 0) {
          $('#connectionWanType').append("<option value='Serial'>"+$.i18n.prop("wizardWanTypeSerial")+"</option>");
        }
        if ($("#connectionTypeBackup option[value='Serial']").length == 0) {
          $('#connectionTypeBackup').append("<option value='Serial'>"+$.i18n.prop("wizardWanTypeSerial")+"</option>");
        }
      }
      if ($('#connectionTypeBackup').val() == "DSL") {
        if (controllerArray.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }
        //code
      } else if ($('#connectionTypeBackup').val() == "Ethernet") {
        if (interfaceotherArray.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }

        //code
      } else if ($('#connectionTypeBackup').val() == "3g") {

        if (cellularInterface.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }

      } else if ($('#connectionTypeBackup').val() == "Serial") {
        if (serialInterface.length >= 2) {
          //code
        } else {
          $('#connectionWanType option[value="' + WanSelectionbackup + '"]').remove();
        }

      }
      if ($('#connectionWanType').val() == "DSL") {
        if (controllerArray.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }
        //code
      } else if ($('#connectionWanType').val() == "Ethernet") {
        if (interfaceotherArray.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }

        //code
      } else if ($('#connectionWanType').val() == "3g") {

        if (cellularInterface.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }

      } else if ($('#connectionWanType').val() == "Serial") {
        if (serialInterface.length >= 2) {
          //code
        } else {
          $('#connectionTypeBackup option[value="' + WanSelection + '"]').remove();
        }

      }
      backupChangeFunction($('#connectionWanType').val());
      primaryChange($('#connectionTypeBackup').val());


    });

    $('#enableBackupWAN').change(function() {
      if ($('#enableBackupWAN').is(':checked')) {
        //$('#connectionTypeBackup').prop('disabled',false);
        //$('#interfaceBackup').prop('disabled',false);
        $('#wanRowBackup').show();
        $("#connectionTypeBackup").rules("add", {
          required: true
        });
        $("#controllerBackup").rules("add", {
          required: true
        });
        $("#modeBackup").rules("add", {
          required: true
        });
        $("#interfaceBackup").rules("add", {
          required: true
        });
      } else {
        //$('#connectionTypeBackup').prop('disabled',true);
        //$('#interfaceBackup').prop('disabled',true);
        //$('#ModeBackupRow').hide();
        //$('#controllerBackupRow').hide();
        $('#backupwanform').resetForm();
        $('#wanRowBackup').hide();
        $('#interfaceRowBackup').hide();
        $('#ipAddressFieldsetBackup').hide();
        $('#cellularNanoFieldsetBackup').hide();
	$('#ipv6oeFieldsetbackup').hide();
	$('#connectionAuthenticationFieldsetIpv6backup').hide();
        hideAllIntialBackup();
        $("#connectionTypeBackup").rules("remove");
        $("#controllerBackup").rules("remove");
        $("#modeBackup").rules("remove");
        $("#interfaceBackup").rules("remove");
        $("#interfaceBackup").empty();
        backupChangeFunction($('#connectionWanType').val());
        primaryChange($('#connectionTypeBackup').val());
      }
    });

    $('input[name="activationMethod"]').change(function() {
      if ($(this).val() == "manual") {
        $('#manualActivationTable').show();
        $('#otaspActivationTable').hide();
      } else if ($(this).val() == "otasp") {
        $('#manualActivationTable').hide();
        $('#otaspActivationTable').show();
      } else if ($(this).val() == "omadm") {
        $('#manualActivationTable').hide();
        $('#otaspActivationTable').hide();
      }


    });

    $('input[name="activationMethodBackup"]').change(function() {
      if ($(this).val() == "manual") {
        $('#manualActivationTableBackup').show();
        $('#otaspActivationTableBackup').hide();
      } else if ($(this).val() == "otasp") {
        $('#manualActivationTableBackup').hide();
        $('#otaspActivationTableBackup').show();
      } else if ($(this).val() == "omadm") {
        $('#manualActivationTableBackup').hide();
        $('#otaspActivationTableBackup').hide();
      }


    });

    $('#interfaceSelection').change(function() {
      populateIpv6oeInterface();
      var connectionType = $('#connectionWanType').val();
      var interface1 = $('#interfaceSelection').val();
      $("#wizprimaryenableNat").change();
      $("#wizenablenatcellular").change();
      //if ($('#interfaceSelection').val()!="") {
      if (interface1 !== "" && connectionType === '3g') {
        if ($('#interfaceSelection').val().toLowerCase().indexOf("cellular") > -1) {
          $('#cellularDns').show();
          $('#primaryDnstablerowcellular').hide();
          $('#secondarytablerowcellular').hide();
          if (!isNano) {
            $('.firmwareSectionModem').hide();
            $('.simSectionModem').hide();
            $.each(modemISRData, function(index, modemData) {
              if (modemData.name == $('#interfaceSelection').val()) {
                $('#primaryModemMode').val(modemData.value[0].modemType);
                //$('#primaryModemMode').val("CDMA");
              }
            });
            if ($('#primaryModemMode').val() == "LTE") {
              $('#pdpTypeRow').hide();
              $('#credentialsRow').hide();
              $('.modemActivationSection').hide();
            } else if ($('#primaryModemMode').val() == "CDMA") {
              $('.modemActivationSection').show();
              $('.profileSectionModem').hide();
              $('.simSectionModem').hide();
              $('.firmwareSectionModem').hide();
              $('#manualActivationTable').hide();
              $('#otaspActivationTable').hide();
              $('#activateModem').change();
            } else {
              $('#pdpTypeRow').show();
              $('#credentialsRow').show();
              $('.modemActivationSection').hide();
            }

          } else {
            populateFirmwareDropDown($('#interfaceSelection').val(), "primary");
            getSimInfo($('#interfaceSelection').val(), "primary");
            $('.firmwareSectionModem').show();
            $('.simSectionModem').show();
            $('#pdpTypeRow').hide();
            $('#credentialsRow').show();
            $('.modemActivationSection').hide();
            if ($('#primaryModemMode').val() == "CDMA") {
              $('.profileSectionModem').hide();
            } else {
              $('.profileSectionModem').show();
            }
          }
          $('#cellularNanoFieldset').show();
          // $('#persistanceRow').show();
        } else {
          $('#cellularNanoFieldset').hide();
          $('#persistanceRow').hide();
          $('#wizprimarypppoerow').show();
          $('#ipAddressFieldset').show();
        }
      } else if (interface1 !== "" && connectionType === 'Serial') {
        var isDCE = populateClockRate(interface1, 'decClockRatePrimary');
        if (isDCE) {
          //  $('#dceCable').show();
          $('#dceClockRate').show();
        } else {
          $('#dceClockRate').hide();
        }
      } else if (interface1 !== "" && connectionType === 'DSL') {
        //if (checkVDslInterface==1) {
        //code
        if ($('#interfaceSelection').val().indexOf("Ethernet") > -1) {
          //code
          $('#wizardencapRow').show();
          $('#wizardprimaryvpiRow').hide();
          $('#interfaceRow').show();
          $('#controllerRow').show();
          $('#modeRow').show();
          $('#wizprimarypppoerow').show();
          if ($('#wizprimarypppoe').is(':checked')) {
            $('#connectionAuthenticationFieldset').show();
	    if ($("#wizprimaryipv6Conf").is(':checked') && $("#connectionWanType").val()=="Ethernet") {
	      $("#connectionAuthenticationFieldsetIpv6").show();
	    }
          } else {
            $('#connectionAuthenticationFieldset').hide();
	    $('#connectionAuthenticationFieldsetIpv6').hide();
          }
          $('#cellularNanoFieldset').hide();
          $('#ipAddressFieldset').show();
          var ethernetSubTag = $('#interfaceSelection').val().replace('Ethernet', '') + iAndC.getEthernetSubInterfaceTag($('#interfaceSelection').val());
          $('#interfaceSelectionsub').val("");
          $('#interfaceSelectionsub').val("Ethernet" + ethernetSubTag);
        } else if ($('#interfaceSelection').val().indexOf("ATM") > -1) {
          $('#wizardencapRow').hide();
          $('#wizardprimaryvpiRow').show();
          $('#interfaceRow').show();
          $('#controllerRow').show();
          $('#modeRow').show();
          $('#wizprimarypppoerow').show();
          if ($('#wizprimarypppoe').is(':checked')) {
            $('#connectionAuthenticationFieldset').show();
	    if ($("#wizprimaryipv6Conf").is(':checked') && $("#connectionWanType").val()=="Ethernet") {
	      $("#connectionAuthenticationFieldsetIpv6").show();
	    }
          } else {
            $('#connectionAuthenticationFieldset').hide();
	    $('#connectionAuthenticationFieldsetIpv6').hide();
          }
          $('#cellularNanoFieldset').hide();
          $('#ipAddressFieldset').show();
          var atmSubInterfaceTag = $('#interfaceSelection').val().replace('ATM', '') + iAndC.getAtmSubInterfaceTag($('#interfaceSelection').val());
          $('#interfaceSelectionsub').val("");
          $('#interfaceSelectionsub').val("ATM" + atmSubInterfaceTag);
        }
        $('#cellularNanoFieldset').hide();
        $('#persistanceRow').hide();

      } else if (interface1 !== "" && connectionType === 'Ethernet') {
        $('#showAdv').show();
	$('#showAdvIpv6').show();
        $('#cellularNanoFieldset').hide();
        $('#modeRow').hide();
        $('#controllerRow').hide();
        $('#interfaceRow').show();
        $('#wizprimarypppoerow').show();
        if ($('#wizprimarypppoe').is(':checked')) {
          $('#connectionAuthenticationFieldset').show();
	  if ($("#wizprimaryipv6Conf").is(':checked') && $("#connectionWanType").val()=="Ethernet") {
	    $("#connectionAuthenticationFieldsetIpv6").show();
	  }
                    if (!$("#wizprimaryipv6Conf").is(':checked')) {
	     $("#ipv6oeCheckbox").show();
	  }
        } else {
          $('#connectionAuthenticationFieldset').hide();
	  $('#connectionAuthenticationFieldsetIpv6').hide();
        }
        $('#ipAddressFieldset').show();
        $('#wizardencapRow').show();
        $('#wizardprimaryvpiRow').hide();
        $('#persistanceRow').hide();
        $('#wizardencapRow').hide();
        $('#cellularNanoFieldset').hide();
        $('#persistanceRow').hide();

      } else {
        hideAllIntial();
        if (interface1 == "" && connectionType === 'DSL') {
          //code
          $('#modeRow').show();
          $('#controllerRow').show();
          $('#interfaceRow').show();
        } else {
          $('#interfaceRow').show();
        }
      }

    });

    $('#activateModem').change(function() {
      if ($('#activateModem').is(':checked')) {
        $('input[name="activationMethod"]').prop('disabled', false);
        $('#mdn').prop('disabled', false);
        $('#msid').prop('disabled', false);
        $('#msl').prop('disabled', false);
        $('#otaspPhoneNo').prop('disabled', false);
        $("#mdn").rules("add", {
          required: true,
          number: true,
          minlength: 10,
          maxlength: 10
        });
        $("#msid").rules("add", {
          required: true,
          number: true,
          minlength: 10,
          maxlength: 10
        });
        $("#msl").rules("add", {
          required: true,
          number: true,
          minlength: 6,
          maxlength: 6
        });
        $("#otaspPhoneNo").rules("add", {
          required: true,
          "validOTASPPhoneNo": true
        });

      } else {
        $('input[name="activationMethod"]').prop('disabled', true);
        $('#mdn').prop('disabled', true);
        $('#msid').prop('disabled', true);
        $('#msl').prop('disabled', true);
        $('#otaspPhoneNo').prop('disabled', true);
        $('#otaspPhoneNo').prop('disabled', true);
        $("#mdn").rules("remove");
        $("#msid").rules("remove");
        $("#msl").rules("remove");
        $("#otaspPhoneNo").rules("remove");

      }

    });

    $('#activateModemBackup').change(function() {
      if ($('#activateModemBackup').is(':checked')) {
        $('input[name="activationMethodBackup"]').prop('disabled', false);
        $('#mdnBackup').prop('disabled', false);
        $('#msidBackup').prop('disabled', false);
        $('#mslBackup').prop('disabled', false);
        $('#otaspPhoneNoBackup').prop('disabled', false);
        $('#otaspPhoneNoBackup').prop('disabled', false);
        $("#mdnBackup").rules("add", {
          required: true,
          number: true,
          minlength: 10,
          maxlength: 10
        });
        $("#msidBackup").rules("add", {
          required: true,
          number: true,
          minlength: 10,
          maxlength: 10
        });
        $("#mslBackup").rules("add", {
          required: true,
          number: true,
          minlength: 6,
          maxlength: 6
        });
        $("#otaspPhoneNoBackup").rules("add", {
          required: true,
          "validOTASPPhoneNo": true
        });

      } else {
        $('input[name="activationMethodBackup"]').prop('disabled', true);
        $('#mdnBackup').prop('disabled', true);
        $('#msidBackup').prop('disabled', true);
        $('#mslBackup').prop('disabled', true);
        $('#otaspPhoneNoBackup').prop('disabled', true);
        $('#otaspPhoneNoBackup').prop('disabled', true);
        $("#mdnBackup").rules("remove");
        $("#msidBackup").rules("remove");
        $("#mslBackup").rules("remove");
        $("#otaspPhoneNoBackup").rules("remove");

      }

    });

    $('#ntpEnable').change(function(){
        if ($(this).is(':checked')) {
            $('#showNTPServer').show();
        }else{
            $('#showNTPServer').hide();
        }
    });

    $('#interfaceBackup').change(function() {
      populateIpv6oeInterface("backup");
      var connectionType = $('#connectionTypeBackup').val();
      var interface1 = $('#interfaceBackup').val();
      if (interface1 !== "" && connectionType === '3g') {
        $('#cellularDnsBackup').show();
        //$('#primaryDnstablerowcellularBackup').hide();
        //$('#secondarytablerowcellularBackup').hide();
        //hideAllIntialBackup();
        if ($('#interfaceBackup').val().toLowerCase().indexOf("cellular") > -1) {
          if (!isNano) {
            $('.firmwareSectionModemBackup').hide();
            $('.simSectionModemBackup').hide();
            $.each(modemISRData, function(index, modemData) {
              if (modemData.name == $('#interfaceBackup').val()) {
                $('#backupModemMode').val(modemData.value[0].modemType);
                //$('#backupModemMode').val("CDMA");
              }
            });
            if ($('#backupModemMode').val() == "LTE") {
              $('#pdpTypeRowBackup').hide();
              $('#credentialsRowBackup').hide();
              $('.modemActivationSectionBackup').hide();
            } else if ($('#backupModemMode').val() == "CDMA") {
              $('.modemActivationSectionBackup').show();
              $('.profileSectionModemBackup').hide();
              $('.simSectionModemBackup').hide();
              $('.firmwareSectionModemBackup').hide();
              $('#manualActivationTableBackup').hide();
              $('#otaspActivationTableBackup').hide();
              $('#activateModemBackup').change();
            } else {
              $('#pdpTypeRowBackup').show();
              $('#credentialsRowBackup').show();
              $('.modemActivationSectionBackup').hide();
            }

          } else {
            populateFirmwareDropDown($('#interfaceBackup').val(), "backup");
            getSimInfo($('#interfaceBackup').val(), "backup");
            $('.firmwareSectionModemBackup').show();
            $('.simSectionModemBackup').show();
            $('#pdpTypeRowBackup').hide();
            $('#credentialsRowBackup').show();
            $('.modemActivationSectionBackup').hide();
          }
          $('#cellularNanoFieldsetBackup').show();
          //$('#persistanceRowBackup').show();

        } else {
          $('#cellularNanoFieldsetBackup').hide();
          $('#persistanceRowBackup').hide();
        }
      } else if (interface1 !== "" && connectionType === 'Serial') {
        var isDCE = populateClockRate(interface1, 'decClockRateBackup');
        if (isDCE) {
          //  $('#dceCableBackup').show();
          $('#dceClockRateBackup').show();
        } else {
          $('#dceClockRateBackup').hide();
        }
      } else if (interface1 !== "" && connectionType === 'DSL') {
        //if (checkVDslInterface==1) {
        //code
        hideAllIntialBackup();
        if ($('#interfaceBackup').val().indexOf("Ethernet") > -1) {
          //code
          $('#wizardencapRowBackup').show();
          $('#wizardprimaryvpiRowBackup').hide();
          $('#interfaceRowBackup').show();
          $('#controllerRowBackup').show();
          $('#modeRowBackup').show();
          $('#wizprimarypppoerowBackup').show();
          if ($("#wizprimarypppoebackup").is(':checked')) {
            $('#connectionAuthenticationFieldsetBackup').show();
          } else {
            $('#connectionAuthenticationFieldsetBackup').hide();
          }
          $('#cellularNanoFieldsetBackup').hide();
          $('#ipAddressFieldsetBackup').show();
          $('#slaFiledsetbackup').show();
          var ethernetSubTag = $('#interfaceBackup').val().replace('Ethernet', '') + iAndC.getEthernetSubInterfaceTag($('#interfaceBackup').val());
          $('#interfaceSelectionsubbackup').val("");
          $('#interfaceSelectionsubbackup').val("Ethernet" + ethernetSubTag);
        } else if ($('#interfaceBackup').val().indexOf("ATM") > -1) {
          $('#wizardencapRowBackup').hide();
          $('#wizardprimaryvpiRowBackup').show();
          $('#interfaceRowBackup').show();
          $('#controllerRowBackup').show();
          $('#modeRowBackup').show();
          $('#wizprimarypppoerowBackup').show();
          if ($("#wizprimarypppoebackup").is(':checked')) {
            $('#connectionAuthenticationFieldsetBackup').show();
          } else {
            $('#connectionAuthenticationFieldsetBackup').hide();
          }
          $('#cellularNanoFieldsetBackup').hide();
          $('#ipAddressFieldsetBackup').show();
          $('#slaFiledsetbackup').show();
          var atmSubInterfaceTag = $('#interfaceBackup').val().replace('ATM', '') + iAndC.getAtmSubInterfaceTag($('#interfaceBackup').val());
          $('#interfaceSelectionsubbackup').val("");
          $('#interfaceSelectionsubbackup').val("ATM" + atmSubInterfaceTag);
        }
      } else if (interface1 !== "" && connectionType === 'Ethernet') {
        hideAllIntialBackup();
        $('#showAdv').show();
	$('#showAdvIpv6').show();
        $('#cellularNanoFieldsetBackup').hide();
        $('#modeRowBackup').hide();
        $('#controllerRowBackup').hide();
        $('#interfaceRowBackup').show();
        $('#wizprimarypppoerowBackup').show();
        $('#connectionAuthenticationFieldsetBackup').show();
        $('#ipAddressFieldsetBackup').show();
        $('#wizardprimaryvpiRowBackup').hide();
        $('#persistanceRow').hide();
        $('#wizardencapRowBackup').hide();
        $('#cellularNanoFieldsetBackup').hide();
        $('#persistanceRowBackup').hide();
        $('#slaFiledsetbackup').show();
      } else {
        //$('#cellularNanoFieldsetBackup').hide();
        //$('#persistanceRowBackup').hide();
        hideAllIntialBackup();
        hideAllIntial();
        if (interface1 == "" && connectionType === 'DSL') {
          //code
          $('#modeRowBackup').show();
          $('#controllerRowBackup').show();
          $('#interfaceRowBackup').show();
        } else {
          $('#interfaceRowBackup').show();
        }
      }
    });

    $("input:radio[name='simType']").change(function() {
      $('#simPrimaryNo').val($(this).val());
      $('#simPrimaryNo').attr("simSelected", "true");

    });

    $("input:radio[name='simTypeBackup']").change(function() {
      $('#simBackupNo').val($(this).val());
      $('#simBackupNo').attr("simSelected", "true");
    });

    //Serial Interface Changes
    $('input[name=syncMode]').change(function() {
      var changedValue = $('input:radio[name=syncMode]:checked').val();
      if (changedValue === "sync") {
        var sysncMode = $('input:radio[name=syncEnc]');
        sysncMode.filter('[value=hdlc]').attr('checked', true);
        var asysncMode = $('input:radio[name=asyncEnc]');
        asysncMode.filter('[value=slip]').attr('checked', false);
        asysncMode.filter('[value=ppp]').attr('checked', false);
        onPppoeChangeForSerial(sysncMode);
        $('#syncEncTD').show();
        $('#asyncEncTD').hide();
      } else {
        var asysncMode = $('input:radio[name=asyncEnc]');
        asysncMode.filter('[value=slip]').attr('checked', true);
        var sysncMode = $('input:radio[name=syncEnc]');
        sysncMode.filter('[value=hdlc]').attr('checked', false);
        sysncMode.filter('[value=ppp]').attr('checked', false);
        onPppoeChangeForSerial(sysncMode);
        $('#syncEncTD').hide();
        $('#asyncEncTD').show();
      }
    });
    $('input[name=asyncEnc]').change(function() {
      var changedValue = $('input:radio[name=asyncEnc]:checked').val();
      onPppoeChangeForSerial(changedValue);
    });
    $('input[name=syncEnc]').change(function() {
      var changedValue = $('input:radio[name=syncEnc]:checked').val();
      onPppoeChangeForSerial(changedValue);
    });
    //Serial Changes For Backup
    $('input[name=syncModeBackup]').change(function() {
      var changedValue = $('input:radio[name=syncModeBackup]:checked').val();
      if (changedValue === "sync") {
        var sysncMode = $('input:radio[name=syncEncBackup]');
        sysncMode.filter('[value=hdlc]').attr('checked', true);

        var asysncMode = $('input:radio[name=asyncEncBackup]');
        asysncMode.filter('[value=slip]').attr('checked', false);
        asysncMode.filter('[value=ppp]').attr('checked', false);
        onPppoeChangeForSerialBackup(sysncMode);
        $('#syncEncTDBackup').show();
        $('#asyncEncTDBackup').hide();
      } else {
        var sysncMode = $('input:radio[name=asyncEncBackup]');
        sysncMode.filter('[value=slip]').attr('checked', true);
        onPppoeChangeForSerialBackup(sysncMode);
        var sysncMode = $('input:radio[name=syncEncBackup]');
        sysncMode.filter('[value=hdlc]').attr('checked', false);
        sysncMode.filter('[value=ppp]').attr('checked', false);
        $('#syncEncTDBackup').hide();
        $('#asyncEncTDBackup').show();
      }
    });
    $('input[name=asyncEncBackup]').change(function() {
      var changedValue = $('input:radio[name=asyncEncBackup]:checked').val();
      onPppoeChangeForSerialBackup(changedValue);
    });
    $('input[name=syncEncBackup]').change(function() {
      var changedValue = $('input:radio[name=syncEncBackup]:checked').val();
      onPppoeChangeForSerialBackup(changedValue);
    });
    $('#chapSelect').change(function() {
      addValidationPAPCHAP("");
    });
    $('#papSelect').change(function() {
      addValidationPAPCHAP("");
    });
    $('#papSelectIpv6').change(function() {
      addValidationPAPCHAP("Ipv6");
    });
    $('#chapSelectIpv6').change(function() {
      addValidationPAPCHAP("Ipv6");
    });
    $('#papSelectIpv6backup').change(function() {
      addValidationPAPCHAP("Ipv6","backup");
    });
    $('#chapSelectIpv6backup').change(function() {
      addValidationPAPCHAP("Ipv6","backup");
    });
    $('#chapSelectbackup').change(function() {
      addValidationPAPCHAPBackup();
    });
    $('#papSelectbackup').change(function() {
      addValidationPAPCHAPBackup();
    });
    $('#showAdv').click(function() {
      $('#showAdv').hide();
      $('#hideAdv').show();
      $('#advAuthSetting').prop('checked', true);
      $('#wizardMTUSizeTr').show();
      $('#wizardMSSSizeTr').show();
      addValidationMtuAndMss("","");
      $(".fieldsetContent").animate({ scrollTop:$('.fieldsetContent')[1].scrollHeight }, 1000);
    });
    $('#hideAdv').click(function() {
      $('#showAdv').show();
      $('#hideAdv').hide();
      $('#advAuthSetting').prop('checked', false);
      $('#advAuthSetting').removeAttr('checked');
      $('#wizardMTUSizeTr').hide();
      $('#wizardMSSSizeTr').hide();
      addValidationMtuAndMss("","");
    });
    $('#showAdvIpv6').click(function() {
      $('#showAdvIpv6').hide();
      $('#hideAdvIpv6').show();
      $('#advAuthSettingIpv6').prop('checked', true);
      $('#wizardMTUSizeTrIpv6').show();
      $('#wizardMSSSizeTrIpv6').show();
      addValidationMtuAndMss("","Ipv6");
      $(".fieldsetContent").animate({ scrollTop:$('.fieldsetContent')[1].scrollHeight }, 1000);
    });
    $('#hideAdvIpv6').click(function() {
      $('#showAdvIpv6').show();
      $('#hideAdvIpv6').hide();
      $('#advAuthSettingIpv6').prop('checked', false);
      $('#advAuthSettingIpv6').removeAttr('checked');
      $('#wizardMTUSizeTrIpv6').hide();
      $('#wizardMSSSizeTrIpv6').hide();
      addValidationMtuAndMss("","Ipv6");
    });
    $('#showAdvIpv6backup').click(function() {
      $('#showAdvIpv6backup').hide();
      $('#hideAdvIpv6backup').show();
      $('#advAuthSettingIpv6backup').prop('checked', true);
      $('#wizardMTUSizeTrIpv6backup').show();
      $('#wizardMSSSizeTrIpv6backup').show();
      addValidationMtuAndMss("Ipv6","backup");
      //$(".fieldsetContent").animate({ scrollTop:$('.fieldsetContent')[1].scrollHeight }, 1000);
    });
    $('#hideAdvIpv6backup').click(function() {
      $('#showAdvIpv6backup').show();
      $('#hideAdvIpv6backup').hide();
      $('#advAuthSettingIpv6backup').prop('checked', false);
      $('#advAuthSettingIpv6backup').removeAttr('checked');
      $('#wizardMTUSizeTrIpv6backup').hide();
      $('#wizardMSSSizeTrIpv6backup').hide();
      addValidationMtuAndMss("Ipv6","backup");
    });
    $('#showAdvBackup').click(function() {
      $('#showAdvBackup').hide();
      $('#hideAdvBackup').show();
      $('#advAuthSettingBackup').prop('checked', true);
      $('#wizardMTUSizeBackupTr').show();
      $('#wizardMSSSizeBackupTr').show();
      addValidationMtuAndMss("Backup","");
      $(".fieldsetContent").animate({ scrollTop:$('.fieldsetContent')[2].scrollHeight }, 1000);
    });
    $('#hideAdvBackup').click(function() {
      $('#showAdvBackup').show();
      $('#hideAdvBackup').hide();
      $('#advAuthSettingbackup').prop('checked', false);
      $('#advAuthSettingbackup').removeAttr('checked');
      $('#wizardMTUSizeBackupTr').hide();
      $('#wizardMSSSizeBackupTr').hide();
      addValidationMtuAndMss("Backup","");
    });
    $('#enableAutoFimrwareSwitch').change(function() {
      if ($(this).is(':checked')) {
        $('#simZeroRow').show();
        $('#simOneRow').show();
      } else {
        $('#simZeroRow').hide();
        $('#simOneRow').hide();
      }
    });
    $('#enableAutoFimrwareSwitchBackup').change(function() {
      if ($(this).is(':checked')) {
        $('#simZeroRowBackup').show();
        $('#simOneRowBackup').show();
      }
      else {
        $('#simZeroRowBackup').hide();
        $('#simOneRowBackup').hide();
      }
    });
    $('#wizprimaryipv6Conf').change(function() {
      populateIpv6("");
      if ($(this).is(":checked") && $("#wizprimarypppoe").is(":checked") && $("#connectionWanType").val()=="Ethernet") {
	$("#ipv6Select").val("autoconfig");
	$('#ipv6Select').change();
	$("#connectionAuthenticationFieldsetIpv6").show();
      }else{
	$("#connectionAuthenticationFieldsetIpv6").hide();
      }
      if($(this).is(":checked")) {
	$("#ipv6oeCheckbox").hide();
	$("#ipv6oeFieldset").hide();
	$("#wizardprimaryipv6oe").prop("checked",false);
            } else if (!$(this).is(":checked") && $("#wizprimarypppoe").is(":checked") && $("#connectionWanType").val() === "Ethernet") {
                //  if (checkEnableIPv6oE()) {
	  $("#ipv6oeCheckbox").show();
                // }
      }
      $("#wizardprimaryipv6oe").change();
    });
    $('#wizprimaryipv6Confbackup').change(function() {
      populateIpv6("backup");
      if ($(this).is(":checked") && $("#wizprimarypppoebackup").is(":checked") && $("#connectionTypeBackup").val()=="Ethernet") {
	$("#ipv6Selectbackup").val("autoconfig");
	$('#ipv6Selectbackup').change();
	$("#connectionAuthenticationFieldsetIpv6backup").show();
      }else{
	$("#connectionAuthenticationFieldsetIpv6backup").hide();
      }
      if($(this).is(":checked")) {
	$("#ipv6oeCheckboxbackup").hide();
	$("#ipv6oeFieldset").hide();
	$("#wizardprimaryipv6oebackup").prop("checked",false);
            } else if (!$(this).is(":checked") && $("#wizprimarypppoebackup").is(":checked") && $("#connectionTypeBackup").val() === "Ethernet") {
                // if (!$("#wizardprimaryipv6oe").is(":checked") && checkEnableIPv6oE("backup")) {
	  $("#ipv6oeCheckboxbackup").show();
                // }
      }
      $("#wizardprimaryipv6oebackup").change();
    });
    $('#ipv6Select').change(function() {
      populateIpv6ConfByType("");
    });
    $('#ipv6Selectbackup').change(function() {
      populateIpv6ConfByType("backup");
    });
    
    function addEthernet(id,intId) {
      if (interfaceotherArray.length>1) {
	  if ($('#'+id+' option[value="Ethernet"]').length==0) {
	    $('#'+id).append('<option value="Ethernet">Ethernet (Direct / PPPOE)</option>');
	  }
      }
      if (intId!==undefined) {
	if (interfaceotherArray.length>2) {
	  if (bridgeInterface!="") {
	    if ($("#"+intId).find("option[value='"+bridgeInterface+"']").length==0) {
	      $("#"+intId).append("<option value='"+bridgeInterface+"'>" + bridgeInterface + "</option>");
	      bridgeInterface=""
	    }
	  }
	}
      }
    }
    
    $("#wizardprimaryIpv6Int").change(function(){
      if ($("#enableBackupWAN").is(":checked") && interfaceotherArray.length>2) {
	if($("#connectionTypeBackup").val()=="Ethernet"){
	  if ($("#interfaceBackup").find("option[value='"+bridgeInterface+"']").length==0 && bridgeInterface!=="") {
	      $("#interfaceBackup").append("<option value='"+bridgeInterface+"'>" + bridgeInterface + "</option>");
	  }
	  bridgeInterface=$("#wizardprimaryIpv6Int").val();
	  $('#interfaceBackup option[value="' + bridgeInterface + '"]').remove();
	}
      }
    });
    
    $("#wizardprimaryIpv6Intbackup").change(function(){
      if (interfaceotherArray.length>2) {
	if($("#connectionTypeBackup").val()=="Ethernet" && $("#connectionWanType").val()=="Ethernet"){
	  if ($("#interfaceSelection").find("option[value='"+bridgeInterface+"']").length==0 && bridgeInterface!=="") {
	      $("#interfaceSelection").append("<option value='"+bridgeInterface+"'>" + bridgeInterface + "</option>");
	  }
	  bridgeInterface=$("#wizardprimaryIpv6Intbackup").val();
	  $('#interfaceSelection option[value="' + bridgeInterface + '"]').remove();
	}
      }
    });
    
    $("input[name=Ipv6oe]").change(function(){
      if ($("input[name=Ipv6oe]:checked").val()=="bridge" && $('#wizardprimaryipv6oe').is(":checked") && $("#wizprimarypppoe").is(":checked")) {
	if (interfaceotherArray.length<=2) {
	  $('#connectionTypeBackup option[value="Ethernet"]').remove();
	}
	$("#wizardprimaryIpv6Int").change();
	$('.bridgeRow').show();
	$('.dhcpRow').hide();
      }else{
                if (interfaceotherArray.length > 1 && $("#connectionTypeBackup option[value='Ethernet']").length === 0) {
                    $('#connectionTypeBackup').append("<option value='Ethernet'>" + $.i18n.prop("wizardWanTypeEthernet") + "</option>");
                }
	addEthernet('connectionTypeBackup','interfaceBackup');
	$('.dhcpRow').show();
	$('.bridgeRow').hide();
      }
      //backupChangeFunction();
    });
    $("input[name=Ipv6oebackup]").change(function(){
            if ($("input[name=Ipv6oebackup]:checked").val() === "bridge" && $('#wizardprimaryipv6oebackup').is(":checked") && $("#wizprimarypppoebackup").is(":checked")) {
                if (interfaceotherArray.length <= 2) {
	  $('#connectionWanType option[value="Ethernet"]').remove();
	}
	$("#wizardprimaryIpv6Intbackup").change();
	$('.bridgeRowbackup').show();
	$('.dhcpRowbackup').hide();
	bridgeInterface=$("#wizardprimaryIpv6Intbackup").val();
      }else{
                if (interfaceotherArray.length > 1 && $("#connectionWanType option[value='Ethernet']").length === 0) {
                    $('#connectionWanType').append("<option value='Ethernet'>" + $.i18n.prop("wizardWanTypeEthernet") + "</option>");
                }
	if ($('#connectionWanType').val()==="Ethernet") {
	  addEthernet('connectionWanType','interfaceSelection');
	}
	$('.dhcpRowbackup').show();
	$('.bridgeRowbackup').hide();
      }
      //primaryChange();
    });
    $("#dhcpClient").on("click",function(){
	if ($(this).is(":checked")) {
	  $("#prefixRowIpv6").show();
	  $("#showMandatePrefix").show();
	  $("#wizardprimaryPrefixProvider").addClass("required");
	}else{
	  $("#showMandatePrefix").hide();
	  $("#wizardprimaryPrefixProvider").removeClass("required");
	  $("#prefixRowIpv6").hide();
	}
    });
    $("#dhcpClientbackup").on("click",function(){
	if ($(this).is(":checked")) {
	  $("#prefixRowIpv6backup").show();
	  $("#showMandatePrefixbackup").show();
	  $("#wizardprimaryPrefixProviderbackup").addClass("required");
	}else{
	  $("#showMandatePrefixbackup").hide();
	  $("#wizardprimaryPrefixProviderbackup").removeClass("required");
	  $("#prefixRowIpv6backup").hide();
	}
    });
    setShowInterface();
    populateWanConnection(showIpInt);
    addValidationPAPCHAP("");
    addValidationPAPCHAP("Ipv6");
    addValidationPAPCHAP("Ipv6","backup");
    addValidationPAPCHAPBackup();
    addValidationMtuAndMss("","");
    addValidationMtuAndMss("Backup","");
    addValidationMtuAndMss("","Ipv6");
    addValidationMtuAndMss("Ipv6","backup");
    hideAllIntial();
    hideAllIntialBackup();

    //**********basicTabe Page Loading Ends**********
  }


  return {
    configureWizardLoading: configureWizardLoading,
    basicformProcessing: basicformProcessing,
    primaryformProcessing: primaryformProcessing,
    backupformProcessing: backupformProcessing,
    lanformProcessing:lanformProcessing,
    securityformProcessing: securityformProcessing,
    setConfiguredFeatures: setConfiguredFeatures,
    checkChangeNetwork:checkChangeNetwork,
    addRemoveInterface: addRemoveInterface,
    activateSim: activateSim,
    profileCreation: profileCreation,
    createProfileISR: createProfileISR,
    loadAndDisplayLanguages: loadAndDisplayLanguages

  };
}());var configureScanSafe = (function() {

  function loadContentSecurity() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "loadContentSecurity()");
    $("#scansafeWanCheckDiv").hide();
    $("#primaryupinfo").hide();
    $("#primarydowninfo").hide();
    $("#secondarydowninfo").hide();
    $("#secondaryupinfo").hide();
    blockPage("Loading");
    setTimeout(function() {
      $('#scanSafeError').hide();
      $('#openDNSError').hide();
      $('div.error').hide();
      $('#info').hide();
      //xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
      var wanListcheck = configureFirewall.getInterfacesInZone("WAN");
      if (wanListcheck.length <= 0) {
        //code
        $("#scansafeFieldSet").hide();
        $("#scansafeWanCheckDiv").show();

      }
      else {
        $("#scansafeFieldSet").show();
        $("#scansafeWanCheckDiv").hide();
        $('#utmForm').resetForm();
        validator.resetForm();
        loadScanSafe();
        //loadOpenDns();
        /*if($("input[name=contentSecurityRadio]").attr("id")=="scansafeSet") {
         $("#scansafeFieldSet").show();
         $("#openDnsFieldSet").hide();
         }
         else if($("input[name=contentSecurityRadio]").attr("id")=="openDnsSet") {
         $("#scansafeFieldSet").hide();
         $("#openDnsFieldSet").show();
         $('#openDNSError').hide();
         }
         if($("#enableGlobal").is(':checked')){
         $('input:radio[name=contentSecurityRadio]')[0].checked = true;
         $("#scansafeFieldSet").show();
         $("#openDnsFieldSet").hide();
         $('#scanSafeError').hide();
         $('.error').hide();
         }
         if(($("#enableOpenDns").is(':checked')) && !($("#enableGlobal").is(':checked'))){
         $('input:radio[name=contentSecurityRadio]')[1].checked = true;
         $("#scansafeFieldSet").hide();
         $("#openDnsFieldSet").show();
         $('#openDNSError').hide();
         } */
      }
      $.unblockUI();
    }, 500);
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "loadContentSecurity()");

  }

  function loadScanSafe() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "loadScanSafe()");

    $('#utmForm').resetForm();
    validator.resetForm();
    var primaryAddressValue = "", secondaryAddressValue = "", licenseIdValue = "";
    $("#primaryAddress").attr("disabled", false);
    $("#secondaryAddress").attr("disabled", false);
    $("#licenseId").attr("disabled", false);
    $("#primaryupinfo").hide();
    $("#primarydowninfo").hide();
    $("#secondarydowninfo").hide();
    $("#secondaryupinfo").hide();
    var flag = false;
    var xml = deviceCommunicator.getExecCmdOutput("show parameter-map type cws global");
    var reg = new RegExp("[,\\n]"), rows, rowsOne, rowsOneSplit;
    //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("Loading")+'</h1>' });
    //blockPage("Loading");
    rows = xml.split(reg);
    for (var i = 0; i < rows.length; i++) {
      rowsOne = rows[i].split(reg);
      rowsOneSplit = rowsOne[0].split(' ');
      for (j = 0; j < rowsOneSplit.length; j++) {
        rowsOneSplit[j] = rowsOneSplit[j].trim();
      }
      if (rowsOneSplit[3] == "global") {
        flag = true;
      }
      if (rowsOneSplit[2] == "primary") {
        primaryAddressValue = rowsOneSplit[4];
      }
      if (rowsOneSplit[2] == "secondary") {
        secondaryAddressValue = rowsOneSplit[4];
      }
      if (rowsOneSplit[1] == "license") {
        licenseIdValue = rowsOneSplit[3];
      }
    }
    primaryAddressScan = $('#primaryAddress').val(primaryAddressValue);
    secondaryAddressScan = $('#secondaryAddress').val(secondaryAddressValue);
    licenseScan = $('#licenseId').val(licenseIdValue);

    if (primaryAddressValue != "" && licenseIdValue != "") {
      $("#enableGlobal").attr("checked", "checked");
      empty = [];
      if (licenseIdValue.length == 66) {
        $('input:radio[name=encryptLicense]')[0].checked = true;
      } else {
        $('input:radio[name=encryptLicense]')[1].checked = true;
      }
      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;
      if (xml.indexOf("Building configuration...") !== -1) {
        xml = xml.substring(25, xml.length);
        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
      }
      xml = xml.substring(xml.indexOf("<?xml"), xml.length);
      regEx = new RegExp("&#x03;", "g");
      xml = xml.replace(regEx, "");
      try {
        checkDhcp = $.parseXML(xml);
      } catch (error) {
        checkDhcp = xml;
      }
      var flagvpn = configureVpn.checkValuesIkve1(checkDhcp);
      var flagvpn2 = configureVpn.checkValuesIkve2(checkDhcp);
      if (flagvpn || flagvpn2) {
        //code
        checkxml = deviceCommunicator.getExecCmdOutput("show running-config | section cws whitelisting");
        reg = new RegExp("[,\\n]");
        rows = checkxml.split(reg);
        checkFlagcws = 0;
        for (var i = 0; i < rows.length; i++) {
          if (rows[i].indexOf("INTRANET-WHITELIST") > -1) {
            checkFlagcws = 1;
          }
        }
        if (checkFlagcws == 0) {
          //code
          deviceCommunicator.configureCommandsFromTemplate("cwsWhiteListing.txt", empty, false);
        }

      } else {
        deviceCommunicator.configureCommandsFromTemplate("deleteCwsWhiteListing.txt", empty, false);
      }

    } else {
      $("#enableGlobal").removeAttr("checked");
      $("#primaryAddress").attr("disabled", true);
      $("#secondaryAddress").attr("disabled", true);
      $("#licenseId").attr("disabled", true);
    }
    var xmlContent = deviceCommunicator.getExecCmdOutput("show cws summary "), reg, rows, primaryValue, secondaryValue;
    //var primaryUp, secondaryUp, primarydown, secondarydown;
    reg = new RegExp("[,\\n]");
    rows = xmlContent.split(reg);
    if (primaryAddressValue != "") {
      //code

      for (var i = 0; i < rows.length; i++) {
        if (rows[i].indexOf("Primary:") > -1) {
          primaryValue = rows[i].trim().split(" ");
          $("#primaryupinfo").attr("title", $.i18n.prop("scanSafePrimaryServerup")+"" + primaryValue[1] + ")");
          $("#primarydowninfo").attr("title", $.i18n.prop("scanSafePrimaryServerDown")+"" + primaryValue[1] + ")");

          if (primaryValue[2].toString().toLowerCase().indexOf("down") > -1) {
            if (primaryValue[1].toString().indexOf("0.0.0.0") > -1) {
              $("#primaryupinfo").hide();
              $("#primarydowninfo").show();

            }
            else {
              /*$('#primaryAddress').css('border-color', 'red');
               $( '#primaryAddress' ).hover(function() {
               $(this).attr('title','Primary Address is down');
               });*/
              $("#primaryupinfo").hide();
              $("#primarydowninfo").show();

            }
          } else if (primaryValue[2].toString().toLowerCase().indexOf("up") > -1) {
            //$("#primaryupinfo").attr("title","Primary Address Up("+primaryValue[1]+")");
            $("#primaryupinfo").show();
            $("#primarydowninfo").hide();

            //$('#primaryAddress').css('border-color', 'green');
          }
          $("#primaryupinfo").tooltip({
            show: {
              effect: "slideDown"
            },
            tooltipClass: "custom-tooltip-styling"
          });
          $("#primarydowninfo").tooltip({
            show: {
              effect: "slideDown"
            },
            tooltipClass: "custom-tooltip-styling"
          });
        }
      }
      if (secondaryAddressValue != "") {
        //code
        for (var i = 0; i < rows.length; i++) {
          if (rows[i].indexOf("Secondary: ") > -1) {
            secondaryValue = rows[i].trim().split(" ");
            $("#secondaryupinfo").attr("title", $.i18n.prop("scanSafeSecondaryServerup")+"" + secondaryValue[1] + ")");
            $("#secondarydowninfo").attr("title", $.i18n.prop("scanSafeSecondaryServerDown")+"" + secondaryValue[1] + ")");
            if (secondaryValue[2].toString().toLowerCase().indexOf("down") > -1) {
              if (secondaryValue.toString().indexOf("0.0.0.0") > -1) {
                $("#secondaryupinfo").hide();
                $("#secondarydowninfo").show();
              }
              else {
                $("#secondaryupinfo").hide();
                $("#secondarydowninfo").show();
              }
            } else if (secondaryValue[2].toString().toLowerCase().indexOf("up") > -1) {
              $("#secondaryupinfo").show();
              $("#secondarydowninfo").hide();

            }
            $("#secondaryupinfo").tooltip({
              show: {
                effect: "slideDown"
              },
              tooltipClass: "custom-tooltip-styling"

            });
            $("#secondarydowninfo").tooltip({
              show: {
                effect: "slideDown"
              },
              tooltipClass: "custom-tooltip-styling"
            });
          }
        }

      }

    }
    $.unblockUI();
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "loadScanSafe()");


    //Disable apply button until CWS is enabled

            var cwsStatus = $("#enableGlobal");
            if(cwsStatus.is(':checked'))
            {

                $( "#applyScan" ).button({
        disabled: false
        });

            }
            else{

                $( "#applyScan" ).button({
        disabled: true
        });

            }
            $("#enableGlobal").click(function(){
            if(cwsStatus.is(':checked'))
            {

        $( "#applyScan" ).button({
        disabled: false
        });

            }
            else{

        $( "#applyScan" ).button({
        disabled: true
        });
            }
            });











  }

  /*function loadOpenDns() {
   var usernameValue = "", passwordValue = "", googleApiKey = "";
   $.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("Loading")+'</h1>' });
   var reg = new RegExp("[,\\n]"), rowsDns, rowsOneDns, rowsOneSplitDns, openDnsRow, openDnsRowSplit;
   var xmlDns = deviceCommunicator.getExecCmdOutput("show running-config | sec parameter-map type dyndns global");
   rowsDns = xmlDns.split(reg);
   for(var i = 0;i< rowsDns.length;i++) {
   rowsOneDns =  rowsDns[i].split(reg);
   rowsOneSplitDns = rowsOneDns[0].split(' ');
   for(j=0;j<rowsOneSplitDns.length;j++){
   rowsOneSplitDns[j]=rowsOneSplitDns[j].trim();
   }
   if (rowsOneSplitDns[2] == "username"){
   usernameValue = rowsOneSplitDns[3];
   }
   if (rowsOneSplitDns[5] == "password"){
   passwordValue = rowsOneSplitDns[6];
   }
   }
   var xmlGoogleApi = deviceCommunicator.getExecCmdOutput("show parameter-map type urlfpolicy websense websense-parameter-map | inc google-apikey");
   openDnsRow = xmlGoogleApi.split(reg);
   openDnsRowSplit = openDnsRow[0].split(' ');
   googleApiKey = openDnsRowSplit[1];
   $('#openDNSUsername').val(usernameValue);
   $('#openDNSPassword').val(passwordValue);
   $('#openDNSMailid').val(googleApiKey);
   if(usernameValue != "" && passwordValue != ""){
   $("#enableOpenDns").attr("checked", "checked");
   } else {
   $("#enableOpenDns").removeAttr("checked");
   $("#openDNSUsername").attr("disabled", true);
   $("#openDNSPassword").attr("disabled", true);
   $("#openDNSMailid").attr("disabled", true);
   }
   $.unblockUI();
   }*/

  function retrivingOpenDns() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "retrivingOpenDns()");
    var dnsSplit, dnsSpaceSplit, googleKeyValue;
    var reg = new RegExp("[,\\n]");
    var xmldnsvalue = deviceCommunicator.getExecCmdOutput("show parameter-map type urlfpolicy websense websense-parameter-map | inc google-apikey");
    dnsSplit = xmldnsvalue.split(reg);
    dnsSpaceSplit = dnsSplit[0].split(' ');
    googleKeyValue = dnsSpaceSplit[1];
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "retrivingOpenDns()");
    return googleKeyValue;
  }

  function retrivingDnsValue() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "retrivingDnsValue()");
    var reg = new RegExp("[,\\n]"), rowsDns, rowsOneDns, rowsOneSplitDns;
    //var openDnsRow, openDnsRowSplit;
    var xmlDns = deviceCommunicator.getExecCmdOutput("show running-config | section parameter-map type dyndns global");
    var usernameValue = "", passwordValue = "";
    rowsDns = xmlDns.split(reg);
    for (var i = 0; i < rowsDns.length; i++) {
      rowsOneDns = rowsDns[i].split(reg);
      rowsOneSplitDns = rowsOneDns[0].split(' ');
      for (j = 0; j < rowsOneSplitDns.length; j++) {
        rowsOneSplitDns[j] = rowsOneSplitDns[j].trim();
      }
      if (rowsOneSplitDns[2] == "username") {
        usernameValue = rowsOneSplitDns[3];
      }
      if (rowsOneSplitDns[5] == "password") {
        passwordValue = rowsOneSplitDns[6];
      }
    }
    //var googleKeyApi = retrivingOpenDns();
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "retrivingDnsValue()");
    if (usernameValue != "" && passwordValue != "") {
      return true;
    } else {
      return false;
    }
  }
  function deleteCwsInterface(wanList,priview) {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "deleteCwsInterface()");

    //code
     if(priview==undefined){
    priview=false;
    }
    var arrEmpty = [];
    var output="";
    for (var i = 0; i < wanList.length; i++) {
      interfaceId = wanList[i];
      arrEmpty = [{name: "interfaceId", value: interfaceId}];
      output=output+deviceCommunicator.configureCommandsFromTemplate("deleteContentScan.txt", arrEmpty, true);
    }
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "deleteCwsInterface()");
    if(priview){
    return output;
    }else{
    deviceCommunicator.getConfigCmdOutput(cliInput);
    return "";
    }
  }
  function addCwsInterface(wanList, flagvpn, flagvpn2, flagDmVpn,priview) {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "addCwsInterface()");
    //code
     if(priview==undefined){
    priview=false;
    }
    var emptyCws = [];
    var output="";
    for (var i = 0; i < wanList.length; i++) {
      interfaceId = wanList[i];
      empty = [{name: "interfaceId", value: interfaceId}];
      output=output+deviceCommunicator.configureCommandsFromTemplate("contentScan.txt", empty, true);
    }
    if (flagvpn === true || flagvpn2 === true || flagDmVpn === true) {
      //code
      output=output+deviceCommunicator.configureCommandsFromTemplate("cwsWhiteListing.txt", emptyCws, true);
    }
    else {
      output=output+deviceCommunicator.configureCommandsFromTemplate("deleteCwsWhiteListing.txt", emptyCws, true);
    }
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "addCwsInterface()");
    if(priview){
    return output;
    }else{
    deviceCommunicator.getConfigCmdOutput(output);
    return "";
    }
  }
  function retrivingValues(usernameValue) {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "retrivingValues()");

    //var flag = false;
    var xml = deviceCommunicator.getExecCmdOutput("show parameter-map type cws global");
    var reg = new RegExp("[,\\n]"), rows, rowsOne, rowsOneSplit;
    rows = xml.split(reg);
    count = 0;
    for (var i = 0; i < rows.length; i++) {
      rowsOne = rows[i].split(reg);
      rowsOneSplit = rowsOne[0].split(' ');
      for (j = 0; j < rowsOneSplit.length; j++) {
        rowsOneSplit[j] = rowsOneSplit[j].trim();
      }
      if (rowsOneSplit[3] == "global") {
        count++;
      }
      if (rowsOneSplit[2] == "primary") {
        count++;
      }
      if (rowsOneSplit[2] == "secondary") {
        count++;
      }
      if (rowsOneSplit[1] == "license") {
        count++;
      }
    }
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "retrivingValues()");
    if (count >= 3) {
      return true;
    } else {
      return false;
    }
  }

  function validateIpv4Address(ip) {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "validateIpv4Address()");

    var reg = /^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/i;

    if (reg.test(ip)) {
      //consoleLogMethodDetailsEnd("configureScanSafe.js", "validateIpv4Address()");
      return true;
    } else {
      //consoleLogMethodDetailsEnd("configureScanSafe.js", "validateIpv4Address()");

      return false;
    }
  }

  function loadUrlFliteringDialog() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "loadUrlFliteringDialog()");
    //var arr = [], cliOutput, response;
    var bflag;
    //var rows, classMap = "", reg = new RegExp("[,\\n]");
    var DnsServerName = "";
    var checkValue = false;
    bflag = false;
    $("#TableSearch").focus();
    if ($("#siteNameErrorSpan").hasClass('hint--top')) {
      $("#siteNameErrorSpan").removeAttr("data-hint");
      $("#siteNameErrorSpan").removeClass("hint--top");
      $("#siteName").removeClass("highlightTextBox");
    }
    $("#blockUrlTable").find('tr').each(function(index) {
      $(this).find('td.blockUrlText').each(function() {
        $(this).parents('tr').remove();
      });
    });
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xml = shRunFormatOutput;
    $(xml).find('ConfigProfile-Configuration').each(function() {
      $(this).find('Server').each(function() {
        $(this).find('name').each(function() {
          checkValue = false;
          DnsServerName = $(this).find('SpecifyDNSNameServer').text().replace(/\./g, "").replace(/\*/g, "");
          $("ul#permittedSitesList li").each(function() {
            if (DnsServerName.toLowerCase() == $(this).find("a").attr("caption").replace("www.", "").replace("http://", "").replace("https://", "").replace(".com", "").replace(".in", "").toLowerCase()) {
              $(this).hide();
              $('#blockUrlTable').append('<tr class="bordertr"><td class="blockUrlText"><a class="' +
                                         $(this).find("a").attr("titleimg") +
                                         '"/><span class="ccpexpCSSReplaceClass585">' +
                                         $(this).find("a").attr("caption") +
                                         '</span></td><td class="ccpexpCSSReplaceClass586">'+
           '<a class="utmSprite close deleteSite" dataid="' + $(this).attr("data-id") + '"/></td>');
              checkValue = true;
            }
          });
          if (checkValue === false) {
            $('#blockUrlTable').append('<tr class="bordertr"><td class="blockUrlText"><a class="utmSprite empty"/>'+
                                       '<span class="ccpexpCSSReplaceClass587">' +
                                       $("#siteName").val() + '</span></td><td class="ccpexpCSSReplaceClass588">'+
                                       '<a class="utmSprite close deleteSite" dataid="0"/></td>');
          }
          DnsServerName = "";
        });
      });
    });
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "loadUrlFliteringDialog()");

  }

  function addBlockUrl(move) {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "addBlockUrl()");
    $('#blockUrlTable').append('<tr class="bordertr"><td class="blockUrlText"><a class="' + move.find("a ").attr("titleimg") +
                               '"/><span class="ccpexpCSSReplaceClass589">' + move.find("a").attr("caption") +
                               '</span></td><td class="ccpexpCSSReplaceClass590">'+
                               '<a class="utmSprite close deleteSite" dataid="' + move.attr("data-id") + '"/></td>');
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "addBlockUrl()");
  }

  function licenseFocusOut() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "licenseFocusOut()");

    var xml = deviceCommunicator.getExecCmdOutput("show parameter-map type cws global");
    var reg = new RegExp("[,\\n]"), rows, rowsOne, rowsOneSplit, licenseEncryptionValue = "";
    rows = xml.split(reg);
    count = 0;
    for (var i = 0; i < rows.length; i++) {
      rowsOne = rows[i].split(reg);
      rowsOneSplit = rowsOne[0].split(' ');
      for (j = 0; j < rowsOneSplit.length; j++) {
        rowsOneSplit[j] = rowsOneSplit[j].trim();
      }
      if (rowsOneSplit[1] == "license") {
        licenseEncryptionValue = rowsOneSplit[3];
      }
    }
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "licenseFocusOut()");
    return licenseEncryptionValue;
  }

  function scanSafeLoading() {
    //consoleLogMethodDetailsStart("configureScanSafe.js", "scanSafeLoading()");

    $('#scanSafeError').hide();
    $('#openDNSError').hide();
    $('#info').hide();
    $('.error').hide();
    //loadAndDisplayScanSafeLanguages();

    validator = $('#utmForm').validate({
      errorElement: "div",
      errorPlacement: function(error, element) {
        error.insertAfter(element.parent());
      }
    });

    $("input[name=contentSecurityRadio]").change(function() {

      if (this.id == "scansafeSet") {
        $('div.error').hide();
        $("#scansafeFieldSet").show();
        $("#openDnsFieldSet").hide();
        $('#scanSafeError').hide();
        $('#openDNSError').hide();
        loadOpenDns();
      }
      else if (this.id == "openDnsSet") {
        $('div.error').hide();
        $("#scansafeFieldSet").hide();
        $('#openDNSError').hide();
        $("#openDnsFieldSet").show();
        loadScanSafe();
      }
    });

    $("input[name=encryptLicense]").change(function() {
      $('.error').each(function() {
        if ($(this).attr('for') == "licenseId"){
          $(this).hide();
        }
      });

      if (this.id == "encryptYes") {
        var hello = licenseFocusOut();
        if (hello.length == 66 && hello != null && hello != "") {
          $("#licenseId").val(hello);
        } else {
          $("#licenseId").val("");
        }
        $("#licenseId").removeClass("requiredHexaKeyValueLength");
        $("#licenseId").addClass("requiredEncryptHexaKeyValue");
      }
      else if (this.id == "encryptNo") {
        var hello = licenseFocusOut();
        if (hello.length == 32 && hello != null && hello != "") {
          $("#licenseId").val(hello);
        } else {
          $("#licenseId").val("");
        }
        $("#licenseId").removeClass("requiredEncryptHexaKeyValue");
        $("#licenseId").addClass("requiredHexaKeyValueLength");
      }
    });


    $("input[name=enableGlobal]").change(function() {
      if ($("#enableGlobal").is(':checked')) {
        $("#primaryAddress").attr("disabled", false);
        $("#secondaryAddress").attr("disabled", false);
        $("#licenseId").attr("disabled", false);
      }
      else {
        $("#primaryAddress").attr("disabled", true);
        $("#secondaryAddress").attr("disabled", true);
        $("#licenseId").attr("disabled", true);
      }
    });

    $("input[name=enableOpenDns]").change(function() {
      if ($("#enableOpenDns").is(':checked')) {
        $("#openDNSUsername").attr("disabled", false);
        $("#openDNSPassword").attr("disabled", false);
        $("#openDNSMailid").attr("disabled", false);
      }
      else {
        $("#openDNSUsername").attr("disabled", true);
        $("#openDNSPassword").attr("disabled", true);
        $("#openDNSMailid").attr("disabled", true);
      }
    });

    $('#enableOpenDns').on('click', function() {
      if ($("#enableGlobal").is(':checked')) {

        //$('#infoMessage').html("Cloud Web security is already configured. On enabling OpenDns, all the configured clis will be removed");
        $('#infoMessage').html($.i18n.prop("cloudWebSecurity"));
        $('#info').show();
        $('#info').delay(4000).fadeOut(1000);
      }
    });

    $('#enableGlobal').on('click', function() {
      if ($("#enableOpenDns").is(':checked')) {
        //$('#infoMessage').html("OpenDns is already configured. On enabling Cloud Web security, all the configured clis will be removed");
        $('#infoMessage').html($.i18n.prop("openDNSConfig"));
        $('#info').show();
        $('#info').delay(4000).fadeOut(1000);
      }
    });

    $('#licenseId').on('focusout', function() {
      if ($('#encryptYes').is(':checked')) {
        $("#licenseId").removeClass("requiredHexaKeyValueLength");
        $("#licenseId").addClass("requiredEncryptHexaKeyValue");


      } else if ($('#encryptNo').is(':checked')) {
        $("#licenseId").removeClass("requiredEncryptHexaKeyValue");
        $("#licenseId").addClass("requiredHexaKeyValueLength");
      }
    });

    $("#urlFilteringDialog").dialog({
      autoOpen: false,
      modal: true,
      height: 740,
      width: 675,
      position: ['middle', 50],
      //buttons: {
      //  "Save": function () {
      buttons: [{
          text: $.i18n.prop("save"),
          click: function() {
            //consoleLogMethodDetailsStart("configureScanSafe.js", "(#\"urlFilteringDialog\").button().save.click()");
            $('#urlFilteringError').hide();
            //server name .*$java.* snoop
            if ($('#urlFilteringForm').valid()) {
              var arr = [], response;
              var arrFirst = [];
              var keyword = "";
              var blockUrl = "";
              var SearchKeywordload = "";
              //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
              blockPage("Applying");
              setTimeout(function() {
                try {
                  if (!shRunFormatLatest) {
                    shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
                    shRunFormatLatest = true;
                  }
                  xml = shRunFormatOutput;
                  $(xml).find('ConfigProfile-Configuration').each(function() {
                    $(this).find('Server').each(function() {
                      $(this).find('name').each(function() {
                        SearchKeywordload = SearchKeywordload + "\n" + "no server name " + $(this).find('SpecifyDNSNameServer').text() + " snoop";
                      });
                    });
                  });
                  arrFirst.length = 0;
                  arrFirst.push({name: "deleteServerName", value: SearchKeywordload});
                  response = deviceCommunicator.configureCommandsFromTemplate("deleteBlockUrl.txt", arrFirst, false);
                  SearchKeywordload = "";
                  if (($("#blockUrlTable > tbody > tr").length) > 0) {
                    blockUrl = "";
                    arr.length = 0;
                    $("#blockUrlTable").find('tr').each(function(index) {
                      $(this).find('td.blockUrlText').each(function() {
                        keyword = "";
                        keyword = $(this).text().replace("www.", "").replace("http://", "").replace("https://", "").replace(".com", "").replace(".in", "");
                        blockUrl = blockUrl + "\n" + "server name .*" + keyword.toLowerCase() + ".* snoop";

                      });
                    });
                    arr.push({name: "addServerName", value: blockUrl});
                    response = deviceCommunicator.configureCommandsFromTemplate("addBlockUrl.txt", arr, false);
                    deviceCommunicator.doWriteMemory();
                  }
                  $.unblockUI();

                } catch (error) {
                  $('#urlFilteringMessage').html(error.errorResponse);
                  $('#urlFilteringError').show();
                  $.unblockUI();
                  return false;
                }
              }, 1000);
            }
            $(this).dialog("close");
            //consoleLogMethodDetailsEnd("configureScanSafe.js", "(#\"urlFilteringDialog\").button().save.click()");

            //},
          }
        }, {
          text: $.i18n.prop("cancel"),
          click: function() {
            //Cancel: function () {
            $(this).dialog("close");
          }
          //},
        }],
      close: function() {
      }
    });

    $("#urlFilteringBtn")
      .button()
      .click(function(e) {
        $('#urlFilteringError').hide();
        //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("Open Domain Filetering")+'</h1>'});
        blockPage("Loading");
        //$('#urlFilteringDialog').dialog('open', 'title', "Content Secure");
        $('#urlFilteringDialog').dialog('open', 'title', $.i18n.prop("contentSecure"));
        loadUrlFliteringDialog();
        e.preventDefault();
        $.unblockUI();
        return false;
      });

    $("#permittedSitesList li").draggable({
      tolerance: "touch",
      revert: true,
      drag: function() {
      }, stop: function() {
      }
    });

    $("#blockedSiteFieldSet").droppable({
      tolerance: "touch",
      drop: function(event, ui) {
        move = ui.draggable;
        addBlockUrl(move);
        move.hide();
        $("#blockedSiteFieldSet").show();
        event.preventDefault();
      }
    });

    $("#addContentName")
      .button()
      .click(function(e) {
        if ($("#siteName").val().trim().length > 0) {
          $('#blockUrlTable').append('<tr class="bordertr"><td class="blockUrlText"><a class="utmSprite empty"/>'+
                                     '<span class="ccpexpCSSReplaceClass591">' + $("#siteName").val() +
                                     '</span></td><td class="ccpexpCSSReplaceClass592">'+
                                     '<a class="utmSprite close deleteSite" dataid="0"/></td>');
          $("#siteName").val("");
        }
        else {
          $("#siteNameErrorSpan").addClass("hint--top");
          //$("#siteNameErrorSpan").attr( "data-hint","Field is empty" );
          $("#siteNameErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#siteName").addClass("highlightTextBox");
          //$()

        }
        e.preventDefault();
        return false;
      });

    $("#blockUrlTable").on('click', '.deleteSite', function() {
      var i = $(this).attr('dataid');
      $(this).parents('tr').remove();
      //var keyword = $(this).text().replace("www.", "").replace("http://", "").replace("https://", "").replace(".com", "").replace(".in", "");
      $("ul#permittedSitesList li").each(function() {
        if (i == $(this).attr('data-id')){
          $(this).show();
        }
      });
    });

    $("#siteName").on("keyup", function(event) {
      if ($("#siteNameErrorSpan").hasClass('hint--top')) {
        $("#siteNameErrorSpan").removeAttr("data-hint");
        $("#siteNameErrorSpan").removeClass("hint--top");
        $("#siteName").removeClass("highlightTextBox");
      }
    });

    $("#TableSearch").on("keyup", function(event) {
      var searchKeyword = $("#TableSearch").val().toLowerCase();
      if (searchKeyword.length <= 0) {
        $("#blockUrlTable").find('tr').each(function() {
          $(this).find('td').each(function() {
            $(this).parents('tr').show();
          });
        });
      } else {
        $("#blockUrlTable").find('tr').each(function(index) {
          $(this).find('td.blockUrlText').each(function() {
            if ($(this).text().toLowerCase().indexOf(searchKeyword) > -1) {

              $(this).parents('tr').show();
            } else {
              $(this).parents('tr').hide();
            }
          });
        });
      }
    });

    function applyScan() {
      //consoleLogMethodDetailsStart("configureScanSafe.js", "applyScan()");

      var licenseValue, wanList, empty, interfaceId, emptyArr = [], arrEmpty, arrValue, secondaryValue, num;
      //var licencempty = [], responseVal, encryptLicense, licenseEncryptionValue, licenseEncrypt;
      var valueFlag = retrivingValues();
      var cliInput = "";
      var response = "";
      primaryAddressScan = $('#primaryAddress').val().trim();
      secondaryAddressScan = $('#secondaryAddress').val().trim();
      licenseScan = $('#licenseId').val();
      wanList = configureFirewall.getInterfacesInZone("WAN");

      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;
      if (xml.indexOf("Building configuration...") !== -1) {
        xml = xml.substring(25, xml.length);
        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
      }
      xml = xml.substring(xml.indexOf("<?xml"), xml.length);
      regEx = new RegExp("&#x03;", "g");
      xml = xml.replace(regEx, "");
      try {
        checkDhcp = $.parseXML(xml);
      } catch (error) {
        checkDhcp = xml;
      }

      var flagvpn = configureVpn.checkValuesIkve1(checkDhcp);
      var flagvpn2 = configureVpn.checkValuesIkve2(checkDhcp);
      emptyCws = [];
      var DefaultCws = [];
      if (natEnabledFlag === true) {
        DefaultCws.push({name: "ipNatInside", value: " ip nat inside"});
      } else {
        DefaultCws.push({name: "ipNatInside", value: ""});
      }
      if ($("#enableGlobal").is(':checked')) {
        if (valueFlag) {
          deviceCommunicator.configureCommandsFromTemplate("DefaultCws.txt", DefaultCws, false);
          deviceCommunicator.configureCommandsFromTemplate("deleteScanSafe.txt", emptyArr, false);
          for (var i = 0; i < wanList.length; i++) {
            interfaceId = wanList[i];
            arrEmpty = [{name: "interfaceId", value: interfaceId}];
            deviceCommunicator.configureCommandsFromTemplate("deleteContentScan.txt", arrEmpty, false);
          }

          if (validateIpv4Address(primaryAddressScan)) {
            priNameOrIp = "ipv4";
          } else {
            priNameOrIp = "name";
          }
          if (validateIpv4Address(secondaryAddressScan)) {
            secNameOrIp = "ipv4";
          } else {
            secNameOrIp = "name";
          }
          arrValue = [{name: "priNameOrIp", value: priNameOrIp},
                      {name: "primaryAddressScan", value: primaryAddressScan}];
          deviceCommunicator.configureCommandsFromTemplate("scanSafeNameOrIPv4.txt", arrValue, false);
          if ($('#secondaryAddress').val().trim() != "") {
            secondaryValue = [{name: "secNameOrIp", value: secNameOrIp},
                              {name: "secondaryAddressScan", value: secondaryAddressScan}];
            deviceCommunicator.configureCommandsFromTemplate("secondaryIPv4OrName.txt", secondaryValue, false);
          }
          if ($('#encryptYes').is(':checked')) {
            num = "7";
            licenseValue = [{name: "num", value: num},
                            {name: "licenseScan", value: licenseScan}];
            deviceCommunicator.configureCommandsFromTemplate("licenseCWS.txt", licenseValue, false);
          }
          if ($('#encryptNo').is(':checked')) {
            num = "0";
            licenseValue = [{name: "num", value: num},
                            {name: "licenseScan", value: licenseScan}];
            deviceCommunicator.configureCommandsFromTemplate("licenseCWS.txt", licenseValue, false);
          }
          for (var i = 0; i < wanList.length; i++) {
            interfaceId = wanList[i];
            empty = [{name: "interfaceId", value: interfaceId}];
            deviceCommunicator.configureCommandsFromTemplate("contentScan.txt", empty, false);
          }
          if (flagvpn === true || flagvpn2 === true) {
            //code
            deviceCommunicator.configureCommandsFromTemplate("cwsWhiteListing.txt", emptyCws, false);
          }
          else {
            deviceCommunicator.configureCommandsFromTemplate("deleteCwsWhiteListing.txt", emptyCws, false);
          }
          cliInput = "object-group network local_cws_net" + "\n" + "no " + "10.1.1.1 255.255.255.255";
          response = deviceCommunicator.getConfigCmdOutput(cliInput);
          cliInput = "object-group network local_cws_net" + "\n" + "10.1.1.1 255.255.255.255";
          response = deviceCommunicator.getConfigCmdOutput(cliInput);
        } else {
          deviceCommunicator.configureCommandsFromTemplate("DefaultCws.txt", DefaultCws, false);
          if (validateIpv4Address(primaryAddressScan)) {
            priNameOrIp = "ipv4";
          } else {
            priNameOrIp = "name";
          }
          if (validateIpv4Address(secondaryAddressScan)) {
            secNameOrIp = "ipv4";
          } else {
            secNameOrIp = "name";
          }
          arrValue = [{name: "priNameOrIp", value: priNameOrIp},
                      {name: "primaryAddressScan", value: primaryAddressScan}];
          deviceCommunicator.configureCommandsFromTemplate("scanSafeNameOrIPv4.txt", arrValue, false);
          if ($('#secondaryAddress').val().trim() != "") {
            secondaryValue = [{name: "secNameOrIp", value: secNameOrIp},
                              {name: "secondaryAddressScan", value: secondaryAddressScan}];
            deviceCommunicator.configureCommandsFromTemplate("secondaryIPv4OrName.txt", secondaryValue, false);
          }
          if ($('#encryptYes').is(':checked')) {
            num = "7";
            licenseValue = [{name: "num", value: num},
                            {name: "licenseScan", value: licenseScan}];
            deviceCommunicator.configureCommandsFromTemplate("licenseCWS.txt", licenseValue, false);
          }
          if ($('#encryptNo').is(':checked')) {
            num = "0";
            licenseValue = [{name: "num", value: num},
                            {name: "licenseScan", value: licenseScan}];
            deviceCommunicator.configureCommandsFromTemplate("licenseCWS.txt", licenseValue, false);
          }
          for (var i = 0; i < wanList.length; i++) {
            interfaceId = wanList[i];
            empty = [{name: "interfaceId", value: interfaceId}];
            deviceCommunicator.configureCommandsFromTemplate("contentScan.txt", empty, false);
          }
          if (flagvpn === true || flagvpn2 === true) {
            //code
            deviceCommunicator.configureCommandsFromTemplate("cwsWhiteListing.txt", emptyCws, false);
          }
          else {
            deviceCommunicator.configureCommandsFromTemplate("deleteCwsWhiteListing.txt", emptyCws, false);
          }
          cliInput = "object-group network local_cws_net" + "\n" + "10.1.1.1 255.255.255.255";
          response = deviceCommunicator.getConfigCmdOutput(cliInput);
        }
      } else {
        if (valueFlag) {
          if (primaryAddressScan != "" && licenseScan != "") {
            deviceCommunicator.configureCommandsFromTemplate("deleteScanSafe.txt", emptyArr, false);
            for (var i = 0; i < wanList.length; i++) {
              interfaceId = wanList[i];
              arrEmpty = [{name: "interfaceId", value: interfaceId}];
              deviceCommunicator.configureCommandsFromTemplate("deleteContentScan.txt", arrEmpty, false);
            }
            deviceCommunicator.configureCommandsFromTemplate("deleteCwsWhiteListing.txt", emptyCws, false);
          }
          cliInput = "object-group network local_cws_net" + "\n" + "no " + "10.1.1.1 255.255.255.255";
          response = deviceCommunicator.getConfigCmdOutput(cliInput);
        }
      }
      iAndC.createAccessListforNAT(licenseCheck, xml);
      loadContentSecurity();
      deviceCommunicator.doWriteMemory();
      //consoleLogMethodDetailsEnd("configureScanSafe.js", "applyScan()");

    }

    function createOpenDns() {
      //consoleLogMethodDetailsStart("configureScanSafe.js", "createOpenDns()");

      var usernameDNS, passwordDNS, googleAPI, arrDNS = [], googleAPIDNS, emptyDnsArr = [], newDns = [], deleteKeyArr, deletekey, setFlagValue;
      usernameDNS = $('#openDNSUsername').val();
      passwordDNS = $('#openDNSPassword').val();
      googleAPI = $('#openDNSMailid').val();
      setFlagValue = retrivingDnsValue();
      deletekey = retrivingOpenDns()
      arrDNS = [{name: "usernameDNS", value: usernameDNS}, {name: "passwordDNS", value: passwordDNS}];
      googleAPIDNS = [{name: "googleAPI", value: googleAPI}];
      deleteKeyArr = [{name: "deletekey", value: deletekey}];
      if ($("#enableOpenDns").is(':checked')) {
        if (setFlagValue) {
          deviceCommunicator.configureCommandsFromTemplate("deleteOpenDns.txt", emptyDnsArr, false);
          if (deletekey != "") {
            deviceCommunicator.configureCommandsFromTemplate("deleteGoogleApiKey.txt", deleteKeyArr, false);
          }
          deviceCommunicator.configureCommandsFromTemplate("createOpenDns.txt", arrDNS, false);
          if (googleAPI != "") {
            deviceCommunicator.configureCommandsFromTemplate("createOpenDnsGoogleKey.txt", googleAPIDNS, false);
          }
        } else {
          deviceCommunicator.configureCommandsFromTemplate("createOpenDns.txt", arrDNS, false);
          if (googleAPI != "") {
            deviceCommunicator.configureCommandsFromTemplate("createOpenDnsGoogleKey.txt", googleAPIDNS, false);
          }
        }
      } else {
        if (setFlagValue) {
          if (usernameDNS != "" && passwordDNS != "") {
            deviceCommunicator.configureCommandsFromTemplate("deleteOpenDns.txt", newDns, false);
            if (googleAPI != "") {
              deviceCommunicator.configureCommandsFromTemplate("deleteOpenDnsGoogleKey.txt", googleAPIDNS, false);
            }
          }
        }
      }
      loadContentSecurity();
      deviceCommunicator.doWriteMemory();
      //consoleLogMethodDetailsEnd("configureScanSafe.js", "createOpenDns()");
    }

    $("#applyScan")
      .button()
      .click(function(e) {
        //consoleLogMethodDetailsStart("configureScanSafe.js", "(#\"applyScan\").button().click()");
        if ($('#utmForm').valid()) {
          var emptyDnsArr = [], deleteKeyArr, deletekey;
          //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
          blockPage("Applying");
          setTimeout(function() {
            try {
              if ($("#enableOpenDns").is(':checked')) {
                //$('<div><p> Do you want to remove all the associated configurations to OpenDns?</p></div>').dialog({
                $('<div><p>' + $.i18n.prop("removeAllOpenDNS") + '</p></div>').dialog({
                  autoOpen: true,
                  title: $.i18n.prop("scanSafeRemove"),
                  height: 200,
                  width: 450,
                  modal: true,
                  //buttons: {
                  //  "Ok": function () {
                  buttons: [{
                      text: $.i18n.prop("ok"),
                      click: function() {
                        $(this).dialog("close");
                        //$.blockUI({blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
                        blockPage("Applying");
                        setTimeout(function() {
                          deletekey = retrivingOpenDns();
                          deleteKeyArr = [{name: "deletekey", value: deletekey}];
                          deviceCommunicator.configureCommandsFromTemplate("deleteOpenDns.txt", emptyDnsArr, false);
                          deviceCommunicator.configureCommandsFromTemplate("deleteGoogleApiKey.txt", deleteKeyArr, false);
                          applyScan();
                          $.unblockUI();
                        }, 1000);
                        //},
                      }
                    }, {
                      text: $.i18n.prop("cancel"),
                      click: function() {
                        //"Cancel": function () {
                        $(this).dialog("close");
                      }
                    }],
                  close: function() {
                  }
                });
              } else {
                applyScan();
              }
            } catch (error) {
              $('#scanSafeErrorMessage').html(error.errorResponse);
              $('#scanSafeError').show();
              $.unblockUI();
              //consoleLogMethodDetailsEndWithError("configureScanSafe.js", "(#\"applyScan\").button().click()", error);
              return false;
            }
            $.unblockUI();
          }, 1000);
        }
        e.preventDefault();
        //consoleLogMethodDetailsEnd("configureScanSafe.js", "(#\"applyScan\").button().click()");

        return false;
      });

    /*  $("#createOpenDNS")
     .button()
     .click(function (e) {
     if ($('#utmForm').valid()) {
     var wanList, arrEmptyContent = [], deleteContentArr, interfaceId;
     wanList = configureFirewall.getInterfacesInZone("WAN");
     $.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
     setTimeout(function () {
     try {
     if($("#enableGlobal").is(':checked')){
     $('<div><p> Do you want to remove all the associated configurations to Cloud Web Security?</p></div>').dialog({
     autoOpen: true,
     title:'Do you want to remove?',
     height: 200,
     width: 450,
     modal: true,
     buttons: {
     "Ok": function () {
     $(this).dialog("close");
     $.blockUI({blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("ApplyConfig")+'</h1>'});
     setTimeout(function () {
     deviceCommunicator.configureCommandsFromTemplate("deleteScanSafe.txt", arrEmptyContent, false);
     for(var i = 0;i< wanList.length;i++) {
     interfaceId = wanList[i];
     deleteContentArr = [{name:"interfaceId", value:interfaceId}];
     deviceCommunicator.configureCommandsFromTemplate("deleteContentScan.txt", deleteContentArr, false);
     }
     createOpenDns();
     $.unblockUI();
     },1000);
     },
     "Cancel": function () {
     $(this).dialog("close");
     },
     },
     close: function () {
     }
     });
     } else {
     createOpenDns();
     }
     } catch (error) {
     $('#openDNSErrorMessage').html(error.errorResponse);
     $('#openDNSError').show();
     $.unblockUI();
     return false;
     }
     $.unblockUI();
     },1000);
     }
     e.preventDefault();
     return false;
     });*/
    //consoleLogMethodDetailsEnd("configureScanSafe.js", "scanSafeLoading()");

  }
  return {
    scanSafeLoading: scanSafeLoading,
    loadContentSecurity: loadContentSecurity,
    retrivingValues: retrivingValues,
    deleteCwsInterface: deleteCwsInterface,
    addCwsInterface: addCwsInterface
  };
}());
var worker;
var utmDashboard = (function() {
  //var refreshIntervalDash;
  var ipsDetailOutput;
  var topNArruniqueTemp = [],
    forwardData = [],
    reverseData = [],
    drawyaxis = [],
    domainFltData = [],
    fwData = [],
    maxData = [],
    topAppGraphData = [],
    topAppGraphDataBit = [],
    vpnData = [],
    inboundData = [],
    outboundData = [],
    vpnDetails,
    tunnelId = "",
    bIpsWidgetMaximized = false,
    topAppGraphWidgetMaximized = false,
    featureState = [];
  ;
  topNArruniqueTemp = ["h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5", "h1", "h2", "h3", "h4", "h5"]
  //var x = ["h1", "h2", "h3", "h4", "h5"],topUserWidgetMaximized = false;
  var fwDroppedData = [{values: [], key: 'Outbound', color: '#ff7f0e'},
    {values: [], key: 'Inbound', color: '#2ca02c'},
    {values: [], key: 'Domain Filtering', color: '#FF00FF'}];
  var ipsPieData = [{"label": "Checked", "value": 0}, {"label": "Alarmed+Dropped", "value": 0}];
  var ipsHitData = [{"key": "", "color": "#1f77b4", "values": []}], top10IpsHitData = [{"key": "", "color": "#1f77b4", "values": []}];
  var ipsSevData = [{"key": "High", "color": "#d62728", "values": []},
    {"key": "Med", "color": "#1f77b4", "values": []},
    {"key": "Low", "color": "rgb(255, 127, 14)", "values": []},
    {"key": "Info", "color": "#90EE90", "values": []}];
  var top10IpsSevData = [{"key": "", "color": "#1f77b4", "values": []}];
  /*var top10IpsSevData = [  {"key": "","color": "#1f77b4","values": [{"label":"IP Localhost Source Spoof","severity":"info","value":233},
   {"label":"TCP SYN/FIN Packet","severity":"high","value":23},
   {"label":"Deep Throat Response","severity":"medium","value":83},
   {"label":"Impossible IP Packet","severity":"low","value":23},
   {"label":"TCP NULL Packet","severity":"low","value":203},
   {"label":"Fragmented NULL TCP Packet","severity":"high","value":100},
   {"label":"IP Options-Bad Options List","severity":"info","value":155}
   ]}];*/
  var ipsSevBarColor = [];
  var firewallGraph, droppedPacketsGraph, vpnGraph, ipsPieChart, ipsHitChart, ipsSevChart, fwHttpUserGraph, dfUserGraph, ipsAttackGraph, topAppGraph, firewallDropGraph, policyGraph;
  //var tempVar = 7, topAppGraphbit;
  /*var ipsHitDatas = [{values: [
        {"label": "Cisco PIX and ASA Time-to-live DoS", "value": "52308"},
        {"label": "IP Localhost Source Spoof", "value": "50381"},
        {"label": "Fragmented Orphaned FIN Packet", "value": "17000"},
        {"label": "Deep Throat Response", "value": "16938"},
        {"label": "TCP SYN/FIN Packet", "value": "16936"},
        {"label": "Fragmented NULL TCP Packet", "value": "16734"},
        {"label": "IP Options-Bad Options List", "value": "16733"},
        {"label": "Fragmented SYN/FIN Packet", "value": "16411"},
        {"label": "Impossible IP Packet", "value": "3825"},
        {"label": "TCP NULL Packet", "value": "1213"}]}];*/

  /*var ipsSevDatas = [{values: [
        {"label": "Cisco PIX and ASA Time-to-live DoS", "value": "80500"},
        {"label": "IP Localhost Source Spoof", "value": "69990"},
        {"label": "Fragmented Orphaned FIN Packet", "value": "65722"},
        {"label": "Deep Throat Response", "value": "45232"},
        {"label": "TCP SYN/FIN Packet", "value": "38321"},
        {"label": "Fragmented NULL TCP Packet", "value": "27987"},
        {"label": "IP Options-Bad Options List", "value": "16733"},
        {"label": "Fragmented SYN/FIN Packet", "value": "15654"},
        {"label": "Impossible IP Packet", "value": "7325"},
        {"label": "TCP NULL Packet", "value": "1213"}]}];*/

  var fwHttpUserData = [];

  var policyData = [{values: [
        {"label": "policy1", "value": "50"},
        {"label": "policy2", "value": "46"},
        {"label": "policy3", "value": "40"},
        {"label": "policy4", "value": "37"},
        {"label": "policy5", "value": "30"},
        {"label": "policy6", "value": "25"},
        {"label": "policy7", "value": "23"},
        {"label": "policy8", "value": "19"},
        {"label": "policy9", "value": "15"},
        {"label": "policy10", "value": "12"}]}];

 /*
  //Demo data
var firewallData = [{values: [

   {"label": "Invalid Header length", "value" : "80"},
   {"label": "policy match failure", "value" : "77"},
   {"label": "Police rate limiting", "value" : "60"},
   {"label": "Session limiting", "value" : "50"},
   {"label": "Bidirectional traffic disabled", "value" : "45"},
   {"label": "SYN with data or with PSH/URG flags", "value" : "35"},
   {"label": "Segment matching no TCP connection", "value" : "34"},
   {"label": "Invalid Segment", "value" : "28"},
   {"label": "Invalid Ack (or no Ack)", "value" : "21"},
   {"label": "Invalid Flags", "value" : "17"}]}];
*/

  var ipsAttackData = [];

/*
  //Demo Data
  var ipsAttackData = [{values: [
                        {"label": "10.1.1.1", "value" : "90"},
                        {"label": "1.2.2.1", "value" : "60"},
                        {"label": "4.4.4.1", "value" : "50"},
                        {"label": "12.3.1.1", "value" : "45"},
                        {"label": "10.1.1.7", "value" : "30"},
                        {"label": "10.1.1.2", "value" : "33"},
                        {"label": "3.2.3.1", "value" : "24"},
                        {"label": "1.3.3.3", "value" : "20"},
                        {"label": "5.1.2.1", "value" : "16"},
                        {"label": "10.1.1.14", "value" : "10"}]}];


*/
  var ipsVictimData = [];

/*
  //Demo Data
  var ipsVictimData = [{values: [
                        {"label": "Sam", "value" : "80"},
                        {"label": "John", "value" : "70"},
                        {"label": "Peter", "value" : "55"},
                        {"label": "Judas", "value" : "54"},
                        {"label": "Tommy", "value" : "45"},
                        {"label": "Hector", "value" : "33"},
                        {"label": "Brad", "value" : "32"},
                        {"label": "Mark", "value" : "30"},
                        {"label": "Anton", "value" : "15"},
                        {"label": "Jimmy", "value" : "14"}]}];



*/

  var dfDomainData = [{"key": "HTTP", "values": []},
    {"key": "HTTPS", "values": []}];

/*

  //Demo Data
  var dfDomainData=[
    {"key" : "HTTP", "values" : [
               [ 1025409600000 , 23.041422681023] , [ 1028088000000 , 19.854291255832] , [ 1030766400000 , 21.02286281168] , [ 1033358400000 , 22.093608385173] , [ 1036040400000 , 25.108079299458] , [ 1038632400000 , 26.982389242348] , [ 1041310800000 , 19.828984957662] , [ 1043989200000 , 19.914055036294] , [ 1046408400000 , 19.436150539916] , [ 1049086800000 , 21.558650338602] , [ 1051675200000 , 24.395594061773] , [ 1054353600000 , 24.747089309384] , [ 1056945600000 , 23.491755498807] , [ 1059624000000 , 23.376634878164] , [ 1062302400000 , 24.581223154533] , [ 1064894400000 , 24.922476843538] , [ 1067576400000 , 27.357712939042] , [ 1070168400000 , 26.503020572593] , [ 1072846800000 , 26.658901244878] , [ 1075525200000 , 27.065704156445] , [ 1078030800000 , 28.735320452588] , [ 1080709200000 , 31.572277846319] , [ 1083297600000 , 30.932161503638] , [ 1085976000000 , 31.627029785554] , [ 1088568000000 , 28.728743674232] , [ 1091246400000 , 26.858365172675] , [ 1093924800000 , 27.279922830032] , [ 1096516800000 , 34.408301211324] , [ 1099195200000 , 34.794362930439] , [ 1101790800000 , 35.609978198951] , [ 1104469200000 , 33.574394968037] , [ 1107147600000 , 31.979405070598] , [ 1109566800000 , 31.19009040297] , [ 1112245200000 , 31.083933968994] , [ 1114833600000 , 29.668971113185] , [ 1117512000000 , 31.490638014379] , [ 1120104000000 , 31.818617451128] , [ 1122782400000 , 32.960314008183] , [ 1125460800000 , 31.313383196209] , [ 1128052800000 , 33.125486081852] , [ 1130734800000 , 32.791805509149] , [ 1133326800000 , 33.506038030366] , [ 1136005200000 , 26.96501697216] , [ 1138683600000 , 27.38478809681] , [ 1141102800000 , 27.371377218209] , [ 1143781200000 , 26.309915460827] , [ 1146369600000 , 26.425199957518] , [ 1149048000000 , 26.823411519396] , [ 1151640000000 , 23.850443591587] , [ 1154318400000 , 23.158355444054] , [ 1156996800000 , 22.998689393695] , [ 1159588800000 , 27.9771285113] , [ 1162270800000 , 29.073672469719] , [ 1164862800000 , 28.587640408904] , [ 1167541200000 , 22.788453687637] , [ 1170219600000 , 22.429199073597] , [ 1172638800000 , 22.324103271052] , [ 1175313600000 , 17.558388444187] , [ 1177905600000 , 16.769518096208] , [ 1180584000000 , 16.214738201301] , [ 1183176000000 , 18.729632971229] , [ 1185854400000 , 18.814523318847] , [ 1188532800000 , 19.789986451358] , [ 1191124800000 , 17.070049054933] , [ 1193803200000 , 16.121349575716] , [ 1196398800000 , 15.141659430091] , [ 1199077200000 , 17.175388025297] , [ 1201755600000 , 17.286592443522] , [ 1204261200000 , 16.323141626568] , [ 1206936000000 , 19.231263773952] , [ 1209528000000 , 18.446256391095] , [ 1212206400000 , 17.822632399764] , [ 1214798400000 , 15.53936647598] , [ 1217476800000 , 15.255131790217] , [ 1220155200000 , 15.660963922592] , [ 1222747200000 , 13.254482273698] , [ 1225425600000 , 11.920796202299] , [ 1228021200000 , 12.122809090924] , [ 1230699600000 , 15.691026271393] , [ 1233378000000 , 14.720881635107] , [ 1235797200000 , 15.387939360044] , [ 1238472000000 , 13.765436672228] , [ 1241064000000 , 14.631445864799] , [ 1243742400000 , 14.292446536221] , [ 1246334400000 , 16.170071367017] , [ 1249012800000 , 15.948135554337] , [ 1251691200000 , 16.612872685134] , [ 1254283200000 , 18.778338719091] , [ 1256961600000 , 16.756026065421] , [ 1259557200000 , 19.385804443146] , [ 1262235600000 , 22.950590240168] , [ 1264914000000 , 23.61159018141] , [ 1267333200000 , 25.708586989581] , [ 1270008000000 , 26.883915999885] , [ 1272600000000 , 25.893486687065] , [ 1275278400000 , 24.678914263176] , [ 1277870400000 , 25.937275793024] , [ 1280548800000 , 29.461381693838] , [ 1283227200000 , 27.357322961861] , [ 1285819200000 , 29.057235285673] , [ 1288497600000 , 28.549434189386] , [ 1291093200000 , 28.506352379724] , [ 1293771600000 , 29.449241421598] , [ 1296450000000 , 25.796838168807] , [ 1298869200000 , 28.740145449188] , [ 1301544000000 , 22.091744141872] , [ 1304136000000 , 25.07966254541] , [ 1306814400000 , 23.674906973064] , [ 1309406400000 , 23.418002742929] , [ 1312084800000 , 23.24364413887] , [ 1314763200000 , 31.591854066817] , [ 1317355200000 , 31.497112374114] , [ 1320033600000 , 26.67238082043] , [ 1322629200000 , 27.297080015495] , [ 1325307600000 , 20.174315530051] , [ 1327986000000 , 19.631084213898] , [ 1330491600000 , 20.366462219461] , [ 1333166400000 , 19.284784434185] , [ 1335758400000 , 19.157810257624]
               ]},
    {"key" : "HTTPS", "values" : [
               [ 1025409600000 , 13.153938631352] , [ 1028088000000 , 12.456410521864] , [ 1030766400000 , 12.537048663919] , [ 1033358400000 , 13.947386398309] , [ 1036040400000 , 14.421680682568] , [ 1038632400000 , 14.143238262286] , [ 1041310800000 , 12.229635347478] , [ 1043989200000 , 12.508479916948] , [ 1046408400000 , 12.155368409526] , [ 1049086800000 , 13.335455563994] , [ 1051675200000 , 12.888210138167] , [ 1054353600000 , 12.842092790511] , [ 1056945600000 , 12.513816474199] , [ 1059624000000 , 12.21453674494] , [ 1062302400000 , 11.750848343935] , [ 1064894400000 , 10.526579636787] , [ 1067576400000 , 10.873596086087] , [ 1070168400000 , 11.019967131519] , [ 1072846800000 , 11.235789380602] , [ 1075525200000 , 11.859910850657] , [ 1078030800000 , 12.531031616536] , [ 1080709200000 , 11.360451067019] , [ 1083297600000 , 11.456244780202] , [ 1085976000000 , 11.436991407309] , [ 1088568000000 , 11.638595744327] , [ 1091246400000 , 11.190418301469] , [ 1093924800000 , 11.835608007589] , [ 1096516800000 , 11.540980244475] , [ 1099195200000 , 10.958762325687] , [ 1101790800000 , 10.885791159509] , [ 1104469200000 , 13.605810720109] , [ 1107147600000 , 13.128978067437] , [ 1109566800000 , 13.119012086882] , [ 1112245200000 , 13.003706129783] , [ 1114833600000 , 13.326996807689] , [ 1117512000000 , 13.547947991743] , [ 1120104000000 , 12.807959646616] , [ 1122782400000 , 12.931763821068] , [ 1125460800000 , 12.795359993008] , [ 1128052800000 , 9.6998935538319] , [ 1130734800000 , 9.3473740089131] , [ 1133326800000 , 9.36902067716] , [ 1136005200000 , 14.258619539875] , [ 1138683600000 , 14.21241095603] , [ 1141102800000 , 13.973193618249] , [ 1143781200000 , 15.218233920664] , [ 1146369600000 , 14.382109727451] , [ 1149048000000 , 13.894310878491] , [ 1151640000000 , 15.593086090031] , [ 1154318400000 , 16.244839695189] , [ 1156996800000 , 16.017088850647] , [ 1159588800000 , 14.183951830057] , [ 1162270800000 , 14.148523245696] , [ 1164862800000 , 13.424326059971] , [ 1167541200000 , 12.974450435754] , [ 1170219600000 , 13.232470418021] , [ 1172638800000 , 13.318762655574] , [ 1175313600000 , 15.961407746104] , [ 1177905600000 , 16.287714639805] , [ 1180584000000 , 16.24659058389] , [ 1183176000000 , 17.564505594808] , [ 1185854400000 , 17.872725373164] , [ 1188532800000 , 18.018998508756] , [ 1191124800000 , 15.584518016602] , [ 1193803200000 , 15.480850647182] , [ 1196398800000 , 15.699120036985] , [ 1199077200000 , 19.184281817226] , [ 1201755600000 , 19.691226605205] , [ 1204261200000 , 18.982314051293] , [ 1206936000000 , 18.707820309008] , [ 1209528000000 , 17.459630929759] , [ 1212206400000 , 16.500616076782] , [ 1214798400000 , 18.086324003978] , [ 1217476800000 , 18.929464156259] , [ 1220155200000 , 18.233728682084] , [ 1222747200000 , 16.315776297325] , [ 1225425600000 , 14.632892190251] , [ 1228021200000 , 14.667835024479] , [ 1230699600000 , 13.946993947309] , [ 1233378000000 , 14.394304684398] , [ 1235797200000 , 13.724462792967] , [ 1238472000000 , 10.930879035807] , [ 1241064000000 , 9.8339915513708] , [ 1243742400000 , 10.053858541872] , [ 1246334400000 , 11.786998438286] , [ 1249012800000 , 11.780994901769] , [ 1251691200000 , 11.305889670277] , [ 1254283200000 , 10.918452290083] , [ 1256961600000 , 9.6811395055706] , [ 1259557200000 , 10.971529744038] , [ 1262235600000 , 13.330210480209] , [ 1264914000000 , 14.592637568961] , [ 1267333200000 , 14.605329141157] , [ 1270008000000 , 13.936853794037] , [ 1272600000000 , 12.189480759072] , [ 1275278400000 , 11.676151385046] , [ 1277870400000 , 13.058852800018] , [ 1280548800000 , 13.62891543203] , [ 1283227200000 , 13.811107569918] , [ 1285819200000 , 13.786494560786] , [ 1288497600000 , 14.045162857531] , [ 1291093200000 , 13.697412447286] , [ 1293771600000 , 13.677681376221] , [ 1296450000000 , 19.96151186453] , [ 1298869200000 , 21.049198298156] , [ 1301544000000 , 22.687631094009] , [ 1304136000000 , 25.469010617433] , [ 1306814400000 , 24.88379943712] , [ 1309406400000 , 24.203843814249] , [ 1312084800000 , 22.138760964036] , [ 1314763200000 , 16.034636966228] , [ 1317355200000 , 15.394958944555] , [ 1320033600000 , 12.62564246197] , [ 1322629200000 , 12.973735699739] , [ 1325307600000 , 15.78601833615] , [ 1327986000000 , 15.227368020134] , [ 1330491600000 , 15.899752650733] , [ 1333166400000 , 15.661317319168] , [ 1335758400000 , 15.359891177281]
             ]}
    ];

  vpnData = [
    {"key" : "Decrypted", "values" : [
               [ 1025409600000 , 23000.041422681023] , [ 1028088000000 , 19000.854291255832] , [ 1030766400000 , 21000.02286281168] , [ 1033358400000 , 22000.093608385173] , [ 1036040400000 , 25000.108079299458] , [ 1038632400000 , 26000.982389242348] , [ 1041310800000 , 19000.828984957662] , [ 1043989200000 , 19000.914055036294] , [ 1046408400000 , 19000.436150539916] , [ 1049086800000 , 21000.558650338602] , [ 1051675200000 , 24000.395594061773] , [ 1054353600000 , 24000.747089309384] , [ 1056945600000 , 23000.491755498807] , [ 1059624000000 , 23000.376634878164] , [ 1062302400000 , 24000.581223154533] , [ 1064894400000 , 24000.922476843538] , [ 1067576400000 , 27000.357712939042] , [ 1070168400000 , 26000.503020572593] , [ 1072846800000 , 26000.658901244878] , [ 1075525200000 , 27000.065704156445] , [ 1078030800000 , 28000.735320452588] , [ 1080709200000 , 31000.572277846319] , [ 1083297600000 , 30000.932161503638] , [ 1085976000000 , 31000.627029785554] , [ 1088568000000 , 28000.728743674232] , [ 1091246400000 , 26000.858365172675] , [ 1093924800000 , 27000.279922830032] , [ 1096516800000 , 34.408301211324] , [ 1099195200000 , 34.794362930439] , [ 1101790800000 , 35.609978198951] , [ 1104469200000 , 33.574394968037] , [ 1107147600000 , 31000.979405070598] , [ 1109566800000 , 31000.19009040297] , [ 1112245200000 , 31000.083933968994] , [ 1114833600000 , 29000.668971113185] , [ 1117512000000 , 31000.490638014379] , [ 1120104000000 , 31000.818617451128] , [ 1122782400000 , 32.960314008183] , [ 1125460800000 , 31000.313383196209] , [ 1128052800000 , 33.125486081852] , [ 1130734800000 , 32.791805509149] , [ 1133326800000 , 33.506038030366] , [ 1136005200000 , 26000.96501697216] , [ 1138683600000 , 27000.38478809681] , [ 1141102800000 , 27000.371377218209] , [ 1143781200000 , 26000.309915460827] , [ 1146369600000 , 26000.425199957518] , [ 1149048000000 , 26000.823411519396] , [ 1151640000000 , 23000.850443591587] , [ 1154318400000 , 23000.158355444054] , [ 1156996800000 , 22000.998689393695] , [ 1159588800000 , 27000.9771285113] , [ 1162270800000 , 29000.073672469719] , [ 1164862800000 , 28000.587640408904] , [ 1167541200000 , 22000.788453687637] , [ 1170219600000 , 22000.429199073597] , [ 1172638800000 , 22000.324103271052] , [ 1175313600000 , 17000.558388444187] , [ 1177905600000 , 16000.769518096208] , [ 1180584000000 , 16000.214738201301] , [ 1183176000000 , 18000.729632971229] , [ 1185854400000 , 18000.814523318847] , [ 1188532800000 , 19000.789986451358] , [ 1191124800000 , 17000.070049054933] , [ 1193803200000 , 16000.121349575716] , [ 1196398800000 , 15000.141659430091] , [ 1199077200000 , 17000.175388025297] , [ 1201755600000 , 17000.286592443522] , [ 1204261200000 , 16000.323141626568] , [ 1206936000000 , 19000.231263773952] , [ 1209528000000 , 18000.446256391095] , [ 1212206400000 , 17000.822632399764] , [ 1214798400000 , 15000.53936647598] , [ 1217476800000 , 15000.255131790217] , [ 1220155200000 , 15000.660963922592] , [ 1222747200000 , 13000.254482273698] , [ 1225425600000 , 11000.920796202299] , [ 1228021200000 , 12000.122809090924] , [ 1230699600000 , 15000.691026271393] , [ 1233378000000 , 14000.720881635107] , [ 1235797200000 , 15000.387939360044] , [ 1238472000000 , 13000.765436672228] , [ 1241064000000 , 14000.631445864799] , [ 1243742400000 , 14000.292446536221] , [ 1246334400000 , 16000.170071367017] , [ 1249012800000 , 15000.948135554337] , [ 1251691200000 , 16000.612872685134] , [ 1254283200000 , 18000.778338719091] , [ 1256961600000 , 16000.756026065421] , [ 1259557200000 , 19000.385804443146] , [ 1262235600000 , 22000.950590240168] , [ 1264914000000 , 23000.61159018141] , [ 1267333200000 , 25000.708586989581] , [ 1270008000000 , 26000.883915999885] , [ 1272600000000 , 25000.893486687065] , [ 1275278400000 , 24000.678914263176] , [ 1277870400000 , 25000.937275793024] , [ 1280548800000 , 29000.461381693838] , [ 1283227200000 , 27000.357322961861] , [ 1285819200000 , 29000.057235285673] , [ 1288497600000 , 28000.549434189386] , [ 1291093200000 , 28000.506352379724] , [ 1293771600000 , 29000.449241421598] , [ 1296450000000 , 25000.796838168807] , [ 1298869200000 , 28000.740145449188] , [ 1301544000000 , 22000.091744141872] , [ 1304136000000 , 25000.07966254541] , [ 1306814400000 , 23000.674906973064] , [ 1309406400000 , 23000.418002742929] , [ 1312084800000 , 23000.24364413887] , [ 1314763200000 , 31000.591854066817] , [ 1317355200000 , 31000.497112374114] , [ 1320033600000 , 26000.67238082043] , [ 1322629200000 , 27000.297080015495] , [ 1325307600000 , 20000.174315530051] , [ 1327986000000 , 19000.631084213898] , [ 1330491600000 , 20000.366462219461] , [ 1333166400000 , 19000.284784434185] , [ 1335758400000 , 19000.157810257624]
               ]},
    {"key" : "Encrypted", "values" : [
               [ 1025409600000 , 13000.153938631352] , [ 1028088000000 , 12000.456410521864] , [ 1030766400000 , 12000.537048663919] , [ 1033358400000 , 13000.947386398309] , [ 1036040400000 , 14000.421680682568] , [ 1038632400000 , 14000.143238262286] , [ 1041310800000 , 12000.229635347478] , [ 1043989200000 , 12000.508479916948] , [ 1046408400000 , 12000.155368409526] , [ 1049086800000 , 13000.335455563994] , [ 1051675200000 , 12000.888210138167] , [ 1054353600000 , 12000.842092790511] , [ 1056945600000 , 12000.513816474199] , [ 1059624000000 , 12000.21453674494] , [ 1062302400000 , 11000.750848343935] , [ 1064894400000 , 10000.526579636787] , [ 1067576400000 , 10000.873596086087] , [ 1070168400000 , 11000.019967131519] , [ 1072846800000 , 11000.235789380602] , [ 1075525200000 , 11000.859910850657] , [ 1078030800000 , 12000.531031616536] , [ 1080709200000 , 11000.360451067019] , [ 1083297600000 , 11000.456244780202] , [ 1085976000000 , 11000.436991407309] , [ 1088568000000 , 11000.638595744327] , [ 1091246400000 , 11000.190418301469] , [ 1093924800000 , 11000.835608007589] , [ 1096516800000 , 11000.540980244475] , [ 1099195200000 , 10000.958762325687] , [ 1101790800000 , 10000.885791159509] , [ 1104469200000 , 13000.605810720109] , [ 1107147600000 , 13000.128978067437] , [ 1109566800000 , 13000.119012086882] , [ 1112245200000 , 13000.003706129783] , [ 1114833600000 , 13000.326996807689] , [ 1117512000000 , 13000.547947991743] , [ 1120104000000 , 12000.807959646616] , [ 1122782400000 , 12000.931763821068] , [ 1125460800000 , 12000.795359993008] , [ 1128052800000 , 9.6998935538319] , [ 1130734800000 , 9.3473740089131] , [ 1133326800000 , 9.36902067716] , [ 1136005200000 , 14000.258619539875] , [ 1138683600000 , 14000.21241095603] , [ 1141102800000 , 13000.973193618249] , [ 1143781200000 , 15000.218233920664] , [ 1146369600000 , 14000.382109727451] , [ 1149048000000 , 13000.894310878491] , [ 1151640000000 , 15000.593086090031] , [ 1154318400000 , 16000.244839695189] , [ 1156996800000 , 16000.017088850647] , [ 1159588800000 , 14000.183951830057] , [ 1162270800000 , 14000.148523245696] , [ 1164862800000 , 13000.424326059971] , [ 1167541200000 , 12000.974450435754] , [ 1170219600000 , 13000.232470418021] , [ 1172638800000 , 13000.318762655574] , [ 1175313600000 , 15000.961407746104] , [ 1177905600000 , 16000.287714639805] , [ 1180584000000 , 16000.24659058389] , [ 1183176000000 , 17000.564505594808] , [ 1185854400000 , 17000.872725373164] , [ 1188532800000 , 18000.018998508756] , [ 1191124800000 , 15000.584518016602] , [ 1193803200000 , 15000.480850647182] , [ 1196398800000 , 15000.699120036985] , [ 1199077200000 , 19000.184281817226] , [ 1201755600000 , 19000.691226605205] , [ 1204261200000 , 18000.982314051293] , [ 1206936000000 , 18000.707820309008] , [ 1209528000000 , 17000.459630929759] , [ 1212206400000 , 16000.500616076782] , [ 1214798400000 , 18000.086324003978] , [ 1217476800000 , 18000.929464156259] , [ 1220155200000 , 18000.233728682084] , [ 1222747200000 , 16000.315776297325] , [ 1225425600000 , 14000.632892190251] , [ 1228021200000 , 14000.667835024479] , [ 1230699600000 , 13000.946993947309] , [ 1233378000000 , 14000.394304684398] , [ 1235797200000 , 13000.724462792967] , [ 1238472000000 , 10000.930879035807] , [ 1241064000000 , 9.8339915513708] , [ 1243742400000 , 10000.053858541872] , [ 1246334400000 , 11000.786998438286] , [ 1249012800000 , 11000.780994901769] , [ 1251691200000 , 11000.305889670277] , [ 1254283200000 , 10000.918452290083] , [ 1256961600000 , 9.6811395055706] , [ 1259557200000 , 10000.971529744038] , [ 1262235600000 , 13000.330210480209] , [ 1264914000000 , 14000.592637568961] , [ 1267333200000 , 14000.605329141157] , [ 1270008000000 , 13000.936853794037] , [ 1272600000000 , 12000.189480759072] , [ 1275278400000 , 11000.676151385046] , [ 1277870400000 , 13000.058852800018] , [ 1280548800000 , 13000.62891543203] , [ 1283227200000 , 13000.811107569918] , [ 1285819200000 , 13000.786494560786] , [ 1288497600000 , 14000.045162857531] , [ 1291093200000 , 13000.697412447286] , [ 1293771600000 , 13000.677681376221] , [ 1296450000000 , 19000.96151186453] , [ 1298869200000 , 21000.049198298156] , [ 1301544000000 , 22000.687631094009] , [ 1304136000000 , 25000.469010617433] , [ 1306814400000 , 24000.88379943712] , [ 1309406400000 , 24000.203843814249] , [ 1312084800000 , 22000.138760964036] , [ 1314763200000 , 16000.034636966228] , [ 1317355200000 , 15000.394958944555] , [ 1320033600000 , 12000.62564246197] , [ 1322629200000 , 12000.973735699739] , [ 1325307600000 , 15000.78601833615] , [ 1327986000000 , 15000.227368020134] , [ 1330491600000 , 15000.899752650733] , [ 1333166400000 , 15000.661317319168] , [ 1335758400000 , 15000.359891177281]
             ]}
    ];

*/

  //var graphData = [];
  var userIdByIPHash = [];
  var cwsDate = null;

  var fwDroppedPktsData = [];
  var maxCwsValue = 0;


/*
  //Demo data
  var fwHttpUserData = [{values: [
                  {"label": "Jacob", "value" : "70"},
                  {"label": "Percy", "value" : "60"},
                  {"label": "Jack", "value" : "56"},
                  {"label": "Nina", "value" : "48"},
                  {"label": "chole", "value" : "45"},
                  {"label": "Amir", "value" : "40"},
                  {"label": "Josh", "value" : "35"},
                  {"label": "David", "value" : "20"},
                  {"label": "Neal", "value" : "18"},
                  {"label": "peter", "value" : "15"}]}];
  var topAppGraphData=[{values: [
                  {"label": "http","value" : "4583"},
                  {"label": "smtp", "value" : "1904"},
                  {"label": "ssl", "value" : "1552"},
                  {"label": "ftp-data", "value" : "938"},
                  {"label": "bittorrent", "value" : "656"},
                  {"label": "ftp", "value" : "422"},
                  {"label": "edonkey", "value" : "421"},
                  {"label": "ssh", "value" : "257"},
                  {"label": "tftp", "value" : "165"},
                  {"label": "dns", "value" : "150"}]}];
  var topAppGraphDataBit=[{values: [
                  {"label": "http","value" : "77928"},
                  {"label": "smtp", "value" : "59445"},
                  {"label": "ssl", "value" : "44322"},
                  {"label": "telnet", "value" : "4001"},
                  {"label": "bittorrent", "value" : "596"},
                  {"label": "ftp", "value" : "165"},
                  {"label": "edonkey", "value" : "88"},
                  {"label": "ftp-data", "value" : "75"},
                  {"label": "imap", "value" : "65"},
                  {"label": "dhcp", "value" : "52"}]}];


*/
  // function to generate random number
  function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function dailyBaseFWSessionGraph() {

    var data = [{
        "key": "Long",
        "values": getData()
      }];
    var chart;

    nv.addGraph(function() {
      chart = nv.models.lineChart();

      chart.xAxis
        .tickFormat(function(d) {
          return d3.time.format('%x')(new Date(d))
        });

      chart.yAxis
        .tickFormat(d3.format(',.1%'));

      d3.select('#chart svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);

      nv.utils.windowResize(chart.update);

      return chart;
    });


    function redraw() {
      d3.select('#vpnGraph svg')
        .datum(data)
        .transition().duration(500)
        .call(chart);
    }


    function getData() {
      var arr = [];
      var theDate = new Date(2013, 12, 01, 0, 0, 0, 0);
      for (var x = 0; x < 30; x++) {
        arr.push({x: new Date(theDate.getTime()), y: Math.random() * 100});
        theDate.setDate(theDate.getDate() + 1);
      }
      return arr;
    }

    /*setInterval(function () {
     var long = data[0].values;
     var next = new Date(long[long.length - 1].x);
     next.setDate(next.getDate() + 1)
     long.shift();
     long.push({x:next.getTime(), y:Math.random() * 100});
     //alert(next.getDate());
     redraw();
     }, 1500);*/
  }
  // function to describe what type of session it is HTTP, HTTPS, VoIP or Email
  function getFWSessionID(data, classMap) {
    var returnKey = -1;
    $.each(data, function(index, info) {
      if (info.key == classMap) {
        returnKey = index;
        return false;
      }
      ;
    });
    return returnKey;
  }

  // Function to draw Firewall session graph
  function drawFWSessionGraph() {
    try {
      nv.addGraph(function() {
        firewallGraph = nv.models.stackedAreaChart()
          .x(function(d) {
            return d[0]
          })
          .y(function(d) {
            return d[1]
          })
          .clipEdge(true)
          .showControls(false);

        firewallGraph.xAxis.showMaxMin(false)
          .axisLabel('Time')
          .tickFormat(function(d) {
            return d3.time.format('%X')(new Date(d))
          });

        firewallGraph.yAxis
          .axisLabel('Sessions')
          .axisLabelDistance(40)
          .tickFormat(d3.format(',f'));

        d3.select('#firewallGraph svg')
          .datum(fwData)
          .transition().duration(500).call(firewallGraph);
        nv.utils.windowResize(firewallGraph.update);
        return firewallGraph;
      });
    }
    catch (e) {
      //alert(e.message);
    }

  }

  //-------------------------------

  // Function to draw Firewall dropped graph
  function drawFWDroppedPacketsGraph() {
    try {
      nv.addGraph(function() {
        droppedPacketsGraph = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 20, bottom: 20, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showLegend(false)
          .showYAxis(false)
          .tooltipContent(toolTipF());
        //nv.models.multiBarChart().stacked(true).showControls(false); // changing from multibar to stacked area chart
        /*droppedPacketsGraph = nv.models.stackedAreaChart()
         .x(function(d) { return d[0] })
         .y(function(d) { return d[1] })
         .clipEdge(true)
         .showControls(false);*/

        /*droppedPacketsGraph.xAxis
         .axisLabel('Time')
         .tickFormat(function(d) { return d3.time.format('%X')(new Date(d)) });
         */
        droppedPacketsGraph.yAxis
          .axisLabel('Reason')
          .axisLabelDistance(40)
          .tickFormat(d3.format(',f'));

        d3.select('#droppedPacketsGraph svg')
          .datum(fwDroppedPktsData)
          .transition().duration(500)
          .call(droppedPacketsGraph);

        nv.utils.windowResize(droppedPacketsGraph.update);

        return droppedPacketsGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }

  }

  //-------------------------------

  // Function to draw VPN graph based on packets and time
  function drawVPNGraph() {
    try {
      nv.addGraph(function() {
        vpnGraph = nv.models.stackedAreaChart()
          .x(function(d) {
            return d[0]
          })
          .y(function(d) {
            return d[1]
          })
          .margin({bottom: 40, left: 110})
          .clipEdge(true)
          .showControls(false)
          .useInteractiveGuideline(true)
          .showLegend(false);

        vpnGraph.xAxis.showMaxMin(false)
          .axisLabel('Time')
          .tickFormat(function(d) {
            return d3.time.format('%X')(new Date(d))
          });

        vpnGraph.yAxis
          .axisLabel('Packets')
          .axisLabelDistance(-21)
          .tickFormat(d3.format(',f'));

        d3.select('#vpnGraph svg')
          .datum(vpnData)
          .transition().duration(500).call(vpnGraph);
        nv.utils.windowResize(vpnGraph.update);
        return vpnGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }

  }

  // function to draw IPS threat packets - Checked v/s Alarmed + dropped packets
  function drawIpsPieChart() {
    try {
      nv.addGraph(function() {
        ipsPieChart = nv.models.pieChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .showLabels(true).showLegend(false);
        ipsPieChart.valueFormat(d3.format(',f'));

        d3.select("#ipsPieChart svg")
          .datum(ipsPieData)
          .transition().duration(1200)
          .call(ipsPieChart);
        return ipsPieChart;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }

  }

  //Custom tooltip functions for d3 charts
  function toolTipF() {
    return function(key, x, y, e, graph) {
      return '<div class="custom-d3-tooltip ccpexpCSSReplaceClass872" ><div><p><b>' + x + '</b></p></div><p>' + y + ' </p></div>';
    }
  }

  // function to change tooltip for IPS graph
  function toolTipContentFunction() {
    return function(key, x, y, e, graph) {
      var element = e.series.values.filter(function(val) {
        return val.label === x
      });
      return '<p class="ccpexpCSSReplaceClass873">Severity: ' + element[0].severity + '</p>'
    }
  }


  function addDetails(data) {
    var regColen = new RegExp(":", ""), arr, sum = 0;
    arr = data.slice(1, data.length - 1).split(regColen);
    sum = parseInt(arr[0]) + parseInt(arr[1]);
    return sum;
  }

  // get firewall details both for sessions and dropped packets
  function getFirewallStats(firstInput) {

    var policyBlocks, blocks, rows, session, sessionCount, totalSessionCount = 0, totalMaxSessionCount = 0, fwdPktFound = false, cliOutput, timestamp = new Date().getTime();
    var reg = new RegExp("[,\\n]"), regClassMap = new RegExp("Class-map:", ""), regColen = new RegExp(":", ""),
      regServicePolicy = new RegExp("Service-policy inspect : ", "");

    var fwDropKey, fwSessionKey;


    try {
      cliOutput = deviceCommunicator.getExecCmdOutput("show policy-firewall stats zone-pair");
      policyBlocks = cliOutput.split(regServicePolicy);
      for (var j = 0; j < policyBlocks.length; j++) {

        if (policyBlocks[j].indexOf("UTM-FW-DEFAULT-POLICY") > -1 || policyBlocks[j].indexOf("UTM-FW-REV-POLICY") > -1) {
          if (policyBlocks[j].indexOf("UTM-FW-DEFAULT-POLICY") > -1){
            fwdPktFound = true;
      }
          else if (policyBlocks[j].indexOf("UTM-FW-REV-POLICY") > -1){
            fwdPktFound = false;
          }
          blocks = policyBlocks[j].split(regClassMap);

          for (var i = 0; i < blocks.length; i++) {
            fwDropKey = -1;
            fwSessionKey = -1;
            rows = blocks[i].toString().split(reg);
            // to check what type of class for dropped packets (fwd packets, rev packets and domain filtering)
            if (rows[0].indexOf("class-default") > -1 || rows[0].indexOf("url_class") > -1) {
              if (rows[0].indexOf("url_class") > -1){
                fwDropKey = 2;
        }
              else if (fwdPktFound){
                fwDropKey = 0;
        }
              else{
                fwDropKey = 1;
        }
            }

            if (rows[0].indexOf("WEB") > -1 || rows[0].indexOf("SECURE_WEB") > -1 || rows[0].indexOf("VOIP") > -1 || rows[0].indexOf("MAIL") > -1) {


              if (rows[0].indexOf("SECURE_WEB") > -1) {
                if (firstInput) {
                  fwData.push({"key": "HTTPS", "values": []});
                  maxData.push({"key": "HTTPS", "maxValue": 0});
                  fwSessionKey = fwData.length - 1;
                }
                else {
                  fwSessionKey = getFWSessionID(fwData, "HTTPS");
                }
              }
              else if (rows[0].indexOf("WEB") > -1) {
                if (firstInput) {
                  fwData.push({"key": "HTTP", "values": []});
                  maxData.push({"key": "HTTP", "maxValue": 0});
                  fwSessionKey = fwData.length - 1;
                }
                else {
                  fwSessionKey = getFWSessionID(fwData, "HTTP");
                }
              }
              else if (rows[0].indexOf("VOIP") > -1) {
                if (firstInput) {
                  fwData.push({"key": "VoIP", "values": []});
                  maxData.push({"key": "VoIP", "maxValue": 0});
                  fwSessionKey = fwData.length - 1;
                }
                else {
                  fwSessionKey = getFWSessionID(fwData, "VoIP");
                }
              }
              else if (rows[0].indexOf("MAIL") > -1) {
                if (firstInput) {
                  fwData.push({"key": "Email", "values": []});
                  maxData.push({"key": "Email", "maxValue": 0});
                  fwSessionKey = fwData.length - 1;
                }
                else {
                  fwSessionKey = getFWSessionID(fwData, "Email");
                }
              }
            }

            // adding data
            for (var k = 0; k < rows.length; k++) {

              if (rows[k].indexOf("Current session counts") > -1 && fwSessionKey > -1) {
                session = (rows[k].toString().split(" "))[12];
                sessionCount = session.slice(1, session.length - 1).split(regColen);
                totalSessionCount = parseInt(sessionCount[0]) + parseInt(sessionCount[1]);
                fwData[fwSessionKey]["values"].push([timestamp, totalSessionCount]);
              }

              if (rows[k].indexOf("Maxever session counts") > -1 && fwSessionKey > -1) {
                if (firstInput) {
                  session = (rows[k].toString().split(" "))[12];
                  sessionCount = session.slice(1, session.length - 1).split(regColen);
                  totalMaxSessionCount = parseInt(sessionCount[0]) + parseInt(sessionCount[1]);
                  maxData[fwSessionKey]["maxValue"] = totalMaxSessionCount;
                }
                break;
              }

              if (rows[k].indexOf("Drop") > -1 && fwDropKey > -1) {
                var value = rows[k + 1].split(" packets");
                var droppedData = parseInt(value[0]);

                if (fwDropKey == 0) {
                  forwardData.push(droppedData);
                  if (forwardData.length > 1){
                    fwDroppedData[fwDropKey]["values"].push({x: timestamp, y: Math.abs(forwardData[forwardData.length - 1] - forwardData[forwardData.length - 2])});
                  }
        }
                else if (fwDropKey == 1) {
                  reverseData.push(droppedData);
                  if (reverseData.length > 1){
                    fwDroppedData[fwDropKey]["values"].push({x: timestamp, y: Math.abs(reverseData[reverseData.length - 1] - reverseData[reverseData.length - 2])});
                  }
        }
                else if (fwDropKey == 2) {
                  domainFltData.push(droppedData);
                  if (domainFltData.length > 1){
                    fwDroppedData[fwDropKey]["values"].push({x: timestamp, y: Math.abs(domainFltData[domainFltData.length - 1] - domainFltData[domainFltData.length - 2])});
                  }
        }

                break;
              }
            }
          }
        }
      }

      //displaying data
      /*var dump = "";
       for(var i=0; i<fwData[0]["values"].length; i++)
       dump = dump + fwData[0]["values"][i][1] + ">>";*/

    }
    catch (e) {
        isEmptyBlock = true;
    }

  }

  function getFirewallDroppedPacketsData(output) {
    var cliOutput2, reg = new RegExp("[,\\n]"), regReason = /[a-z]/ig,
      droppedPktCount = 0, reason, lines = [], droppedData = [];
    //var regCount = /[1-9]/g;
    //cliOutput2  = deviceCommunicator.getExecCmdOutput("show policy-firewall stats drop-counters");
    cliOutput2 = output;
    lines = cliOutput2.split(reg);
    fwDroppedPktsData.length = 0;
    droppedData.length = 0;
    if (lines[0].trim() == "No packets dropped by firewall") {
      fwDroppedPktsData = [];
    } else {
      try {
        for (var i = 0; i < lines.length; i++) {
          var reasonTemp = lines[i].match(regReason);
          //var droppedPktCountTemp = lines[i].match(regCount);
          reason = lines[i].substr(lines[i].indexOf(reasonTemp[0]), lines[i].lastIndexOf(" ")).trim();
          droppedPktCount = parseInt(lines[i].substr(lines[i].lastIndexOf(" ")).trim(), 10);
          droppedData.push({"label": reason, "value": droppedPktCount});
        }
        fwDroppedPktsData = [{values: droppedData}];

      } catch (e) {
        isEmptyBlock = true;
      }

    }

  }

  function setIpsSevBarColor() {
    if (top10IpsSevData[0]['values'].length > 0) {
      if (ipsSevBarColor.length > 0) {
        ipsSevBarColor.length = 0;
      }
      $.each(top10IpsSevData[0]['values'], function(index, value) {
        if (value['severity'].trim().toLowerCase() == "high") {
          ipsSevBarColor.push("#d62728");
        } else if (value['severity'].trim().toLowerCase() == "medium") {
          ipsSevBarColor.push("#1f77b4");
        } else if (value['severity'].trim().toLowerCase() == "low") {
          ipsSevBarColor.push("#ff7f0d");
        } else if (value['severity'].trim().toLowerCase() == "info") {
          ipsSevBarColor.push("#90ee90");
        }
      });
    }
  }

  // function to get VPN data
  function getVpnStatsData(output) {

    var tunnelBlocks, lines, inboundPacketCount = 0, outboundPacketCount = 0, sessionStstus = false, tunnelFound = false, cliOutput, timestamp = new Date().getTime(), absoluteValue;
    cliOutput = output;
    var reg = new RegExp("[,\\n]"), regTunnelInterface = new RegExp("Interface: ", "");
    var vpnDetails = {
      status: "",
      tunnel1Status: "",
      tunnel2Status: ""
    };

    //var fwDropKey, fwSessionKey, rows, session, totalMaxSessionCount = 0, tunnel1Status = "";
    /*try{
     cliOutput = deviceCommunicator.getExecCmdOutput("show crypto session detail");
     }
     catch(e){
     errorLogInConsole(e);
     }*/
    if (cliOutput.length <= 0) {
      vpnDetails.status = "NotConfigured";
      return vpnDetails;
    }
    tunnelBlocks = cliOutput.split(regTunnelInterface);
    for (var j = 0; j < tunnelBlocks.length; j++) {
      //if (tunnelBlocks[j].indexOf("Tunnel99") > -1 || tunnelBlocks[j].indexOf("Tunnel2") > -1) {
      if (tunnelBlocks[j].indexOf("Tunnel") > -1) {
        if (tunnelBlocks[j].indexOf("Tunnel") > -1) {
          //tunnelId = "Tunnel99";
          var patt1 = /[0-9]/;
          var id = tunnelBlocks[j].match(patt1);
          tunnelId = tunnelBlocks[j].substring(tunnelBlocks[j].indexOf("Tunnel"), tunnelBlocks[j].lastIndexOf(id) + 1);

        }/* else if(tunnelBlocks[j].indexOf("Tunnel2") > -1){
         tunnelId = "Tunnel2";
         }*/
        tunnelFound = true;
        vpnDetails.status = "Configured";
        lines = tunnelBlocks[j].split(reg);
        sessionStstus = false;
        for (var i = 0; i < lines.length; i++) {
          if (lines[i].indexOf("Session status") != -1) {
            tunnelStatus = lines[i].substring(lines[i].indexOf(":") + 1, lines[i].length).trim();
            if (tunnelStatus.indexOf("UP-ACTIVE") != -1) {
              sessionStstus = true;
            }
            if (tunnelId.indexOf("Tunnel") != -1) {
              vpnDetails.tunnel1Status = tunnelStatus;
            } else if (tunnelId.indexOf("Tunnel2") != -1) {
              vpnDetails.tunnel2Status = tunnelStatus;
            }
          }
          if (sessionStstus) {
            if (lines[i].indexOf("Inbound:") != -1) {
              inboundPacketCount = inboundPacketCount + lines[i].substring(lines[i].indexOf("#pkts dec'ed") + 13, lines[i].indexOf("drop") - 1);
            }
            if (lines[i].indexOf("Outbound:") != -1) {
              outboundPacketCount = outboundPacketCount + lines[i].substring(lines[i].indexOf("#pkts enc'ed") + 13, lines[i].indexOf("drop") - 1);
            }
          }
        }
      }
    }

    if (vpnDetails.tunnel1Status.indexOf("UP-ACTIVE") != -1 || vpnDetails.tunnel2Status.indexOf("UP-ACTIVE") != -1) {
      inboundData.push(inboundPacketCount);
      if (inboundData.length > 1) {
        absoluteValue = inboundData[inboundData.length - 1] - inboundData[inboundData.length - 2];
        if (absoluteValue >= 0) {
          vpnData[0]["values"].push([timestamp, absoluteValue]);
        } else {
          vpnData.length = 0;
          vpnData.push({"key": "Decrypted", "values": []});
          vpnData.push({"key": "Encrypted", "values": []});
        }
      }
      outboundData.push(outboundPacketCount);
      if (outboundData.length > 1) {
        absoluteValue = outboundData[outboundData.length - 1] - outboundData[outboundData.length - 2];
        if (absoluteValue >= 0) {
          vpnData[1]["values"].push([timestamp, absoluteValue]);
        }
        else {
          vpnData.length = 0;
          vpnData.push({"key": "Decrypted", "values": []});
          vpnData.push({"key": "Encrypted", "values": []});
        }
      }
    }
    return vpnDetails;

  }

  // function to get IPS data
  /*function getIPSData(ipsData) {
   var ipsStatsOutput, ipsDetailOutput;
   ipsStatsOutput = deviceCommunicator.getExecCmdOutput("show ip ips statistics");
   ipsDetailOutput = deviceCommunicator.getExecCmdOutput("show ip ips signatures detail | section include Y   Y");

   // apply policy related changes
   var rows, cols, check, alarm, drop, totalCheck = 0, totalAD = 0, blocks, key = 0, topLength = 0, diff = 0, TOP_LIST = 10;
   var reg = new RegExp("[,\\n]"), regColen = new RegExp(":", "");


   //}
   return vpnDetails;

   }*/
  function getIPSData(ipsData, ipsStatsOutput) {
    //var ipsStatsOutput;
    //ipsStatsOutput = deviceCommunicator.getExecCmdOutput("show ip ips statistics");
    if (ipsDetailOutput.trim() == "") {
      for (var i = 0; i < ipsHitData.length; i++) {
        ipsHitData[i]["values"].length = 0;
      }
      for (var i = 0; i < ipsSevData.length; i++) {
        ipsSevData[i]["values"].length = 0;
      }
      return;
    }

    // apply policy related changes
    for (var i = 0; i < ipsHitData.length; i++) {
      ipsHitData[i]["values"].length = 0;
    }
    for (var i = 0; i < ipsSevData.length; i++) {
      ipsSevData[i]["values"].length = 0;
    }
    var rows, cols, check, alarm, drop, totalCheck = 0, totalAD = 0, blocks, key = 0, TOP_LIST = 10, totalAlarm = 0, totalDrop = 0;
    var reg = new RegExp("[,\\n]");
    //var regColen = new RegExp(":", ""), topLength = 0, diff = 0;
    try {
      rows = ipsStatsOutput.split(reg);
      for (var i = 1; i < rows.length; i++) {
        if (rows[i].indexOf("signature ") > -1) {
          cols = rows[i].split(" ");
          check = addDetails(cols[6]);
          totalCheck = totalCheck + check;
          alarm = addDetails(cols[8]);
          drop = addDetails(cols[10]);
          totalAD = totalAD + alarm + drop;
          totalAlarm = totalAlarm + parseInt(alarm);
          totalDrop = totalDrop + parseInt(drop);
          ipsData.push({"signature": cols[3].slice(0, cols[3].length - 1), "check": check, "alarm": alarm, "drop": drop, "hit": (alarm + drop), "sigName": "", "severity": ""});
        }
        else{
          break;
    }
      }
      ipsPieData[0]["value"] = totalCheck;
      ipsPieData[1]["value"] = totalAD;
      $('#alarmedCount').text(totalAlarm);
      $('#droppedCount').text(totalDrop);
      blocks = ipsDetailOutput.replace(/([0-9]+:[0-9])/g, "###$1").split("###");
      if (totalAlarm == 0 && totalDrop == 0) {
        $("#ipsDropAlarmId").hide();
      } else {
        $("#ipsDropAlarmId").show();
      }
      for (var i = 0; i < ipsData.length; i++) {
        for (var j = 0; j < blocks.length; j++) {
          if (blocks[j].indexOf(ipsData[i]["signature"]) > -1) {
            rows = blocks[j].split(reg);
            cols = rows[0].split(/ +/);
            ipsData[i]["severity"] = cols[4];
            for (var k = 1; k < rows.length; k++) {
              if (rows[k].indexOf("sig-name:") > -1) {
                cols = rows[k].split("sig-name: ");
                ipsData[i]["sigName"] = cols[1];
                break;
              }
            }
            break;
          }
        }
      }

      for (var i = 0; i < ipsData.length; i++) {
        var ipsFound = false;
        $.each(ipsHitData[0]["values"], function(index, value) {
          if (value['label'] == ipsData[i]["sigName"]) {
            value['value'] = parseInt(value['value']) + parseInt(ipsData[i]['hit']);
            ipsFound = true;
          }
        });
        if (!ipsFound) {
          ipsHitData[0]["values"].push({"label": ipsData[i]["sigName"], "value": ipsData[i]["hit"], "severity": ipsData[i]["severity"]});
        }


        if (ipsData[i]["severity"].indexOf("HIGH") > -1){
          key = 0;
    }
        else if (ipsData[i]["severity"].indexOf("MED") > -1){
          key = 1;
    }
        else if (ipsData[i]["severity"].indexOf("LOW") > -1){
          key = 2;
    }
        else if (ipsData[i]["severity"].indexOf("INFO") > -1){
          key = 3;
    }
        var found = false;
        $.each(ipsSevData[key]["values"], function(index, value) {
          if (value['label'] == ipsData[i]["sigName"]) {
            value['value'] = parseInt(value['value']) + parseInt(ipsData[i]['hit']);
            found = true;
          }
        });
        if (!found) {
          ipsSevData[key]["values"].push({"label": ipsData[i]["sigName"], "value": ipsData[i]["hit"]});

        }

      }

      function sortFunction(a, b) {
        var a1 = a.value, b1 = b.value;
        if (a1 == b1){
          return 0;
    }
        return a1 < b1 ? 1 : -1;
      }

      // Logic to sort the array
      ipsHitData[0]["values"].sort(sortFunction);
      /*
  if(ipsSevData[0]["values"].length > 1)
       ipsSevData[0]["values"].sort(sortFunction);
       if(ipsSevData[1]["values"].length > 1)
       ipsSevData[1]["values"].sort(sortFunction);
       if(ipsSevData[2]["values"].length > 1)
       ipsSevData[2]["values"].sort(sortFunction);
       if(ipsSevData[3]["values"].length > 1)
       ipsSevData[3]["values"].sort(sortFunction);
  */


      if (ipsHitData[0]["values"].length > TOP_LIST){
        top10IpsHitData[0]["values"] = ipsHitData[0]["values"].slice(0, TOP_LIST);
    }
      else{
        top10IpsHitData[0]["values"] = ipsHitData[0]["values"];
    }
      top10IpsSevData = top10IpsHitData;

      /*
  if (ipsSevData[0]["values"].length > TOP_LIST) {
       top10IpsSevData[0]["values"] = ipsSevData[0]["values"].slice(0,TOP_LIST);
       }
       else {
       top10IpsSevData[0]["values"] = ipsSevData[0]["values"];
       topLength = ipsSevData[0]["values"].length;
       diff = TOP_LIST - topLength;
       if (ipsSevData[1]["values"].length > diff) {
       top10IpsSevData[1]["values"] = ipsSevData[1]["values"].slice(0,diff);
       }
       else {
       top10IpsSevData[1]["values"] = ipsSevData[1]["values"];
       topLength = topLength + ipsSevData[1]["values"].length;
       diff = TOP_LIST - topLength;
       if (ipsSevData[2]["values"].length > diff) {
       top10IpsSevData[2]["values"] = ipsSevData[2]["values"].slice(0,diff);
       }
       else {
       top10IpsSevData[2]["values"] = ipsSevData[2]["values"];
       topLength = topLength + ipsSevData[2]["values"].length;
       diff = TOP_LIST - topLength;
       if (ipsSevData[3]["values"].length > diff) {
       top10IpsSevData[3]["values"] = ipsSevData[3]["values"].slice(0,diff);
       }
       else {
       top10IpsSevData[3]["values"] = ipsSevData[3]["values"];
       }
       }
       }
       }
  */
      /*var tempSev=[];
       for(var i=0;i<top10IpsSevData.length;i++){

       var tempArr=[];
       tempArr.push(top10IpsSevData[i]["values"][0]);
       $.each(top10IpsSevData[i]["values"],function(index,value){
       var found=false;
       if (index!=0) {
       $.each(tempArr,function(index1,value1){

       if(value['label'].trim()==value1['label'].trim()){
       found=true;
       }
       });
       if (!found) {
       tempArr.push(top10IpsSevData[i]["values"][index]);
       }
       }
       });
       top10IpsSevData[i]["values"].length=0;
       top10IpsSevData[i]["values"]=tempArr;
       if(top10IpsSevData[i]["values"].length!=0){
       tempSev.push(top10IpsSevData[i]);
       }
       }
       top10IpsSevData.length=0;
       top10IpsSevData=tempSev;*/

    }
    catch (e) {
        isEmptyBlock = true;

    }
  }
  function isPositiveInteger(s)
  {
    try {
      return $.isNumeric(s)
      /* var i = +s; // convert to a number
       if (i < 0)
       return false; // make sure it's positive
       if (i !== ~~i)
       return false; // make sure there's no decimal part
       return true;*/
    } catch (error) {
      return false;
    }
  }
  function getDomainFilterUserData(output) {
    try {
      if (cwsDate === null) {
        cwsDate = new Date();
      }
      //var cwsData = deviceCommunicator.getExecCmdOutput("show cws statistics");
      var cwsData = output;
      if (cwsData === '') {
        $('#maxCurrentSession').text(0);
        return;
      }
      var cwsArray = cwsData.split('\n');

      var currentHttpSessions;
      var currentHttpsSessions;
      //var totalHttpSessions;
      //var totalHttpsSessions;
      var maxCurrentActiveSessions;
      var currentRate = false;
      var cunnectionratePerMinitHTTP;
      var cunnectionratePerMinitHTTPS;
      var maxCunnectionratePerMinitHTTP;
      var maxCunnectionratePerMinitHTTPS;
      var httpObj = dfDomainData[0];
      var httpsObj = dfDomainData[1];
      var httpArray = httpObj.values;
      var httpsArray = httpsObj.values;
      for (var i = 0; i < cwsArray.length; i++) {

        var row = cwsArray[i];
        if (row.indexOf('Current HTTP sessions:') !== -1) {
          var values = row.split(':');
          currentHttpSessions = values[1];
          //consoleLog(values[1]);
          continue;
        } else
        if (row.indexOf('Current HTTPS sessions:') !== -1) {
          var values = row.split(':');
          currentHttpsSessions = values[1];
          continue;
        }/*else
         if(row.indexOf('Total HTTP sessions:')!==-1){
         var values=row.split(':');
         totalHttpSessions=values[1];
         continue;
         }else
         if(row.indexOf('Total HTTPS sessions:')!==-1){
         var values=row.split(':');
         totalHttpsSessions=values[1];
         continue;
         }else*/
        if (row.indexOf('Max Concurrent Active Sessions:') !== -1) {
          var values = row.split(':');
          maxCurrentActiveSessions = values[1];
          if (!isPositiveInteger(maxCurrentActiveSessions)) {
            maxCurrentActiveSessions = 0;
          }
          continue;
        } else
        if (row.indexOf('Connection Rate in last minute:') !== -1) {
          currentRate = true;
          continue;

        } else if (row.indexOf('Max Connection Rate per minute') !== -1) {
          currentRate = false;
          continue;
        }
        if (currentRate === true) {
          if (row.indexOf('HTTP:') !== -1) {
            var values = row.split(':');
            cunnectionratePerMinitHTTP = values[1];
            if (!isPositiveInteger(cunnectionratePerMinitHTTP)) {
              cunnectionratePerMinitHTTP = 0;
            }
            continue;
          }
          if (row.indexOf('HTTPS:') !== -1) {
            var values = row.split(':');
            cunnectionratePerMinitHTTPS = values[1];
            if (!isPositiveInteger(cunnectionratePerMinitHTTPS)) {
              cunnectionratePerMinitHTTPS = 0;
            }
            continue;
          }
        } else {
          if (row.indexOf('HTTP:') !== -1) {
            var values = row.split(':');
            maxCunnectionratePerMinitHTTP = values[1];
            if (!isPositiveInteger(maxCunnectionratePerMinitHTTP)) {
              maxCunnectionratePerMinitHTTP = 0;
            }
            continue;
          }
          if (row.indexOf('HTTPS:') !== -1) {
            var values = row.split(':');
            maxCunnectionratePerMinitHTTPS = values[1];
            if (!isPositiveInteger(maxCunnectionratePerMinitHTTPS)) {
              maxCunnectionratePerMinitHTTPS = 0;
            }
            continue;
          }
        }


      }
      // var d = new Date();
      cwsDate.setMilliseconds(cwsDate.getMilliseconds() + parseInt($("#pollOption").val()));
      var time = cwsDate.getTime();
      if (httpArray.length > 0 || currentHttpSessions > 0 || currentHttpsSessions > 0) {
        var http = parseInt(currentHttpSessions);
        var https = parseInt(currentHttpsSessions);
        var total = http + https;
        if (maxCwsValue < total) {
          maxCwsValue = total;
        }
        httpArray.push([time, http]);
        httpsArray.push([time, https]);
        $('#maxCurrentSessionTD').show();
        $('#maxCurrentSession').text(maxCurrentActiveSessions);

      } else {
        $('#maxCurrentSessionTD').hide();
      }
      //  httpsArray.push([time,parseFloat(maxCunnectionratePerMinitHTTPS)]);
      dfDomainData[0] = {"key": "HTTP", "values": httpArray};
      dfDomainData[1] = {"key": "HTTPS", "values": httpsArray};


    } catch (e) {
        isEmptyBlock = true;
    }
  }

  function redrawFWUserApplGraph(data) {
    d3.select('#fwUserApplBasedChart svg')
      .datum(data)
      .transition().duration(500).call(fwHttpUserGraph);
    nv.utils.windowResize(fwHttpUserGraph.update);
    //addGradientToChart("fwHttpUserApplChart");
  }

  function redrawDomainFilterUserGraph(dfData) {
    var max = maxCwsValue + 10;
    dfUserGraph.yDomain([0, max]);
    d3.select('#dfUserChart svg')
      .datum(dfData)
      .transition().duration(500).call(dfUserGraph);
    nv.utils.windowResize(dfUserGraph.update);
  }

  function drawDomainFilterUserGraph(dfData) {
    try {

      nv.addGraph(function() {
        var max = maxCwsValue + 10;
        dfUserGraph = nv.models.stackedAreaChart()
          .x(function(d) {
            return d[0]
          })
          .y(function(d) {
            return d[1]
          })
          .clipEdge(true)
          .useInteractiveGuideline(true)
          .showControls(false)
          .showLegend(false)
          .yDomain([0, max]);

        dfUserGraph.xAxis.showMaxMin(false)
          .axisLabel('Time')
          .tickFormat(function(d) {
            return d3.time.format('%X')(new Date(d))
          });

        dfUserGraph.yAxis
          .axisLabel('Sessions')
          .axisLabelDistance(40)
          .tickFormat(d3.format(',f'))
          .scale().domain([0, 200])
          ;

        d3.select('#dfUserChart svg')
          .datum(dfDomainData)
          .transition().duration(500).call(dfUserGraph);
        nv.utils.windowResize(dfUserGraph.update);

        return dfUserGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  function drawIPSAttackGraph() {
    // Need to have data structures for attacked as well as victimized
    try {
      nv.addGraph(function() {
        ipsAttackGraph = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 30, bottom: 50, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showLegend(false)
          .tooltipContent(toolTipF());

        ipsAttackGraph.yAxis
          .axisLabel('Hits')
          .tickFormat(d3.format('d'));

        ipsAttackGraph.valueFormat(d3.format('d'));

        d3.select('#ipsAttackGraph svg')
          .datum(ipsAttackData)
          .transition().duration(500).call(ipsAttackGraph);
        nv.utils.windowResize(ipsAttackGraph.update);

        return ipsAttackGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  function redrawApplications(drawyaxis, topAppGraphType, yaxisLabel) {
    var topApp;
    if (topAppGraphType == "bitRate") {
      topApp = topAppGraphDataBit;
    } else {
      topApp = topAppGraphData;
    }
    topAppGraph = nv.models.multiBarHorizontalChart()
      .x(function(d) {
        return d.label
      })
      .y(function(d) {
        return d.value
      })
      .margin({top: 20, right: 30, bottom: 50, left: 200})
      .showValues(true)
      .tooltips(true)
      .showControls(false)
      .showLegend(false)
      .tooltipContent(toolTipF());


    topAppGraph.yAxis
      .axisLabel(yaxisLabel)
      .axisLabelDistance(25)
      .tickFormat(d3.format('d'));
    //.axisLabel(yaxisLabel).staggerLabels(true).tickValues(drawyaxis);

    topAppGraph.valueFormat(d3.format('d'));
    d3.select('#topAppGraph svg')
      .datum(topApp)
      .transition().duration(500).call(topAppGraph);
    nv.utils.windowResize(topAppGraph.update);
  }

  function drawtopApplications(drawyaxis, topAppGraphType, yaxisLabel) {
    // Need to have data structures for attacked as well as victimized
    try {
      //alert(drawyaxis)
      nv.addGraph(function() {
        topAppGraph = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 30, bottom: 50, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showLegend(false)
          .tooltipContent(toolTipF());


        topAppGraph.yAxis
          .axisLabel(yaxisLabel)
          .axisLabelDistance(25)
          .tickFormat(d3.format('d'));
        //.axisLabel(yaxisLabel).staggerLabels(true).tickValues(drawyaxis);

        topAppGraph.valueFormat(d3.format('d'));
        d3.select('#topAppGraph svg')
          .datum(topAppGraphDataBit)
          .transition().duration(500).call(topAppGraph);
        nv.utils.windowResize(topAppGraph.update);

        return topAppGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  function drawFWUserApplGraph(data) {
    try {
      nv.addGraph(function() {

        fwHttpUserGraph = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 30, bottom: 50, left: 200})
          .showValues(true)
          .tooltips(false)
          .showControls(false)
          .tooltipContent(toolTipF())
          .showLegend(false);

        fwHttpUserGraph.yAxis
          .axisLabel('Kilo Bytes (KB)')
          .tickFormat(d3.format('d'));
        fwHttpUserGraph.valueFormat(d3.format('d'));
        d3.select('#fwUserApplBasedChart svg')
          .datum(fwHttpUserData)
          .transition().duration(500).call(fwHttpUserGraph);
        nv.utils.windowResize(fwHttpUserGraph.update);

        return fwHttpUserGraph;

      });
      //addGradientToChart("fwHttpUserApplChart");
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  function drawFirewallGraph() {
    try {

      nv.addGraph(function() {
        firewallDropGraph = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 20, bottom: 50, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showLegend(false)
          .tooltipContent(toolTipF());

        firewallDropGraph.yAxis
          .axisLabel("Packets")
          .axisLabelDistance(25)
          .showMaxMin(true).tickFormat(d3.format('d'));

        firewallDropGraph.valueFormat(d3.format('d'));




        d3.select('#firewallDropGraph svg')
          .datum(fwDroppedPktsData)
          .transition().duration(500).call(firewallDropGraph);
        nv.utils.windowResize(firewallDropGraph.update);

        return firewallDropGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  // function to draw IPS severity statistics
  function drawIpsSeverityBarGraph(data) {
    try {
      nv.addGraph(function() {
        ipsSevChart = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 20, bottom: 20, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showYAxis(true)
          .tooltipContent(toolTipF())
          .barColor(ipsSevBarColor)
          .showLegend(false);


        //ipsSevChart.valueFormat(d3.format('f'));

        ipsSevChart.yAxis
          .tickFormat(d3.format(',f'));
        ipsSevChart.valueFormat(d3.format('d'));

        d3.select('#ipsSevBarChart svg')
          .datum(data)
          .transition().duration(500)
          .call(ipsSevChart);
        nv.utils.windowResize(ipsSevChart.update);

        return ipsSevChart;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  function drawIPsHitGraph(data) {
    try {
      nv.addGraph(function() {
        ipsHitChart = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 20, bottom: 20, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showLegend(false)
          .showYAxis(true)
          .tooltipContent(toolTipContentFunction());

        //ipsHitChart.valueFormat(d3.format('f'));

        ipsHitChart.yAxis
          .tickFormat(d3.format(',f'));

        ipsHitChart.valueFormat(d3.format('d'));

        d3.select('#ipsHitBarChart svg')
          .datum(data)
          .transition().duration(500)
          .call(ipsHitChart);

        nv.utils.windowResize(ipsHitChart.update);

        return ipsHitChart;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }

  }

  function drawPolicy() {
    try {

      nv.addGraph(function() {

        policyGraph = nv.models.multiBarHorizontalChart()
          .x(function(d) {
            return d.label
          })
          .y(function(d) {
            return d.value
          })
          .margin({top: 20, right: 30, bottom: 50, left: 200})
          .showValues(true)
          .tooltips(true)
          .showControls(false)
          .showLegend(false)
          .tooltipContent(toolTipF())
          .showYAxis(true);

        policyGraph.yAxis
          .axisLabel('Sessions')
          .tickFormat(d3.format('d'));

        policyGraph.valueFormat(d3.format('d'));

        d3.select('#policyChart svg')
          .datum(policyData)
          .transition().duration(500).call(policyGraph);
        nv.utils.windowResize(policyGraph.update);

        return policyGraph;
      });
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  // function to redraw graph based on div id. This is called when one of the widget is maximized
  //@boolean -- true is maximized and false is minimized
  function redrawGraph(div, maxWidget) {
    //clearInterval(refreshIntervalDash);
    try {
      div = div.replace("listQuad", "").trim();
      if (div === "firewallCurrentSession") {
        drawFWSessionGraph();
        if (maxWidget === true) {
          $("#maxSession").show();
          $("#firewallGraph").css('height', "85%");
        }
        else {
          $("#firewallGraph").css('height', "100%");
          $("#maxSession").hide();
        }
      }
      else if (div === "vpnStatistics") {
        redrawGraphAtPoll("vpnGraph", vpnData, vpnGraph);
      }
      else if (div === "ipsStatistics") {
        var ipsGraphType = $("input[name=ipsChartType]:checked").val();
        if (ipsGraphType === "maxHit") {
          redrawGraphAtPoll("ipsHitBarChart", top10IpsHitData, ipsHitChart);
          //drawIPsHitGraph(top10IpsHitData);
        } else {
          //drawIpsSeverityBarGraph(top10IpsSevData);
          redrawGraphAtPoll("ipsSevBarChart", top10IpsSevData, ipsSevChart);
        }
      }
      else if (div === "fwHttpUserApplChart") {
        /*var userg = $("input[name=httpChartType]").val();
         if (maxWidget === true) {
         topUserWidgetMaximized = true;
         if (userg === "fwUserBasedChart")
         drawFWUserApplGraph(data);
         else
         drawFWUserApplGraph(data);
         }
         else {
         topUserWidgetMaximized = false;
         if (userg === "fwUserBasedChart")
         drawFWUserApplGraph(data);
         else
         drawFWUserApplGraph(data);
         }*/
        redrawFWUserApplGraph(fwHttpUserData);
      }
      else if (div === "firewallDrop") {
        redrawGraphAtPoll("firewallDropGraph", fwDroppedPktsData, firewallDropGraph);
      }
      else if (div == "ipsAttackStats") {
        redrawGraphAtPoll("ipsAttackGraph", ipsAttackData, ipsAttackGraph);
      }
      else if (div === "ipsThreatStatistics") {
        drawIpsPieChart();
      }
      else if (div == "policyGraph") {
        redrawGraphAtPoll("policyChart", policyData, policyGraph);
      }
      else if (div == "fwDfUserBasedChart") {
        redrawDomainFilterUserGraph(dfDomainData);
      }
      else if (div === "topAppStats") {
        var topAppGraphType = $("input[name=topAppByCount]:checked").val();
        if (maxWidget === true) {
          topAppGraphWidgetMaximized = true;
          if (topAppGraphType === "byteCount") {
            redrawApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
          }
          else {
            redrawApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
          }
        }
        else {
          //clearTopApp();
          topAppGraphWidgetMaximized = false;
          if (topAppGraphType === "byteCount") {
            redrawApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
          }
          else {
            redrawApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
          }
        }

      }
      if (!maxWidget) {
        if ($('#topAppGraphByBitRateRadio').is(':checked')) {
          redrawApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
        } else {
          redrawApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
        }
        redrawGraphAtPoll("firewallDropGraph", fwDroppedPktsData, firewallDropGraph);
        //drawFWUserApplGraph(fwHttpUserData);
        redrawFWUserApplGraph(fwHttpUserData);
        redrawGraphAtPoll("ipsAttackGraph", ipsAttackData, ipsAttackGraph);
        //drawIPSAttackGraph();
        redrawGraphAtPoll("vpnGraph", vpnData, vpnGraph);
        redrawGraphAtPoll("policyChart", policyData, policyGraph);
        redrawDomainFilterUserGraph(dfDomainData);
        //ipsPieChart = drawIpsPieChart();
        if ($('#maxHit').is(':checked')) {
          redrawGraphAtPoll("ipsHitBarChart", top10IpsHitData, ipsHitChart);
        } else {
          redrawGraphAtPoll("ipsSevBarChart", top10IpsSevData, ipsSevChart);
        }

      }
    }
    catch (e) {
        isEmptyBlock = true;
    }
    //refreshInterval($("#pollOption").val());
  }

  // Function to reset data on load of dashboard page
  function resetData() {
    try {
      cwsDate = new Date();
      forwardData.length = 0;
      reverseData.length = 0;
      domainFltData.length = 0;
      fwData.length = 0;
      maxData.length = 0;
      fwDroppedData[0]["values"].length = 0;
      fwDroppedData[1]["values"].length = 0;
      fwDroppedData[2]["values"].length = 0;
      vpnData.length = 0;
      inboundData.length = 0;
      outboundData.length = 0;
      //ipsPieData[0]["value"] =0, ipsPieData10]["value"] = 0;
      ipsHitData[0]["values"].length = 0;
      ipsSevData[0]["values"].length = 0;
      ipsSevData[1]["values"].length = 0;
      ipsSevData[2]["values"].length = 0;
      dfDomainData = [{"key": "HTTP", "values": []},
        {"key": "HTTPS", "values": []}];
      for (var i = 0; i < 5; i++) {
        fwHttpUserData[i]["values"].length = 0;
        //fwHttpApplData[i]["values"].length = 0;
        //dfCategoryData[i]["values"].length = 0;
        dfDomainData[i]["values"].length = 0;
      }

      $("#maxSession").hide();
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }

  function redrawGraphAtPoll(graph, data, chart) {
    d3.select('#' + graph + ' svg')
      .datum(data)
      .transition().duration(500)
      .call(chart);
  }
  function getDashletData() {
    var ipsData = [];
    /*setTimeout(getDomainFilterUserData, 500);
     setTimeout(getFirewallDroppedPacketsData, 1000);
     setTimeout(getTop10Users, 1500);
     setTimeout(getPolicyHits, 2000);
     setTimeout(getIPSData(ipsData), 2500);
     setTimeout(getVpnData, 3000);*/
    getDomainFilterUserData();
    getFirewallDroppedPacketsData();
    getTop10Users();
    getPolicyHits();
    getIPSData(ipsData);
    getVpnData();
    redrawDomainFilterUserGraph(dfDomainData);
    if ($('#topAppGraphByByteCountRadio').is(':checked')) {
      drawTopApplicationsGraph("byteCount");
    } else {
      drawTopApplicationsGraph("bitRate");
    }



    drawFirewallGraph();


    drawFWUserApplGraph(fwHttpUserData);


    drawPolicy();

    //getIpsAttackData();
    //drawIPSAttackGraph();

    if (ipsData.length > 0) {
      ipsPieChart = drawIpsPieChart();
      if ($('#maxHit').is('checked')) {
        ipsHitChart = drawIPsHitGraph(top10IpsHitData);
      } else {
        setIpsSevBarColor();
        ipsSevChart = drawIpsSeverityBarGraph(top10IpsSevData);
      }


      //$('#ipsSevBarChart').hide();
    }



  }

  function getVpnData() {
    vpnDetails = getVpnStatsData(executeCli("show crypto session detail"));
    if (vpnDetails.tunnel1Status.indexOf("UP-ACTIVE") != -1 || vpnDetails.tunnel2Status.indexOf("UP-ACTIVE") != -1) {
      $("#vpnDetails").hide();
      $("#vpnGraph svg").show();
      drawVPNGraph();
    } else {
      $("#vpnDetails").empty();
      $("#vpnDetails").show();
      $("#vpnGraph svg").hide();
      $('<div class="vpnLabel">VPN Status : ' + vpnDetails.status + '</div>').appendTo('#vpnDetails');
      if (vpnDetails.tunnel1Status.length > 0) {
        $('<p>' + tunnelId + ' Status : ' + vpnDetails.tunnel1Status + '</p>').appendTo('#vpnDetails');
      }
      if (vpnDetails.tunnel2Status.length > 0) {
        $('<p>Tunnel2 Status : ' + vpnDetails.tunnel2Status + '</p>').appendTo('#vpnDetails');
      }
    }
  }


  //To load the security feature page on click on security tiles
  function redirectToSecurityFeature(active) {
    $.get('utm.html',
      function(data) {
        //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("Loading")+'</h1>' });
        blockPage("Loading");
        setTimeout(function() {
          if (!($('ul#bottomnav li#bottomnav-11 a').hasClass('toggleopacity'))) {
            $('#content').html(data);
            $('#hideAll').css('display', 'block');
            utm.utmLoading(active);
            utmDashboard.terminateCliWorker();
            $('#hideAll').css('display', 'none');
            $('ul#bottomnav li a').removeClass('toggleopacity');
            $('ul#bottomnav li#bottomnav-11 a').addClass('toggleopacity');
          }
          $.unblockUI();
        }, 1000);
      }
    );
    $.unblockUI();
    history.pushState({}, '', "frames.html?feature=security");
  }

  function getUnique(inputArray)
  {
    var outputArray = [];

    for (var i = 0; i < inputArray.length; i++)
    {
      if ((jQuery.inArray(inputArray[i], outputArray)) == -1)
      {
        outputArray.push(inputArray[i]);
      }
    }

    return outputArray;
  }

  function getPolicyHits(policyCli) {
    try {
      cliValue = "show policy-map type inspect zone-pair";
      //responseExecOrConfig = deviceCommunicator.getExecCmdOutput(cliValue);
      responseExecOrConfig = policyCli;
      classMapArr = responseExecOrConfig.split("Class-map:");
      var className, topPolicyHits = [];
      $.each(classMapArr, function(index, value) {
        classNameLine = value.split("\n")[0];
        if (classNameLine.indexOf("(match-all)") > -1) {
          className = classNameLine.split("(match-all)")[0].trim();
          if (value.indexOf("Session creations since subsystem startup or last reset") > -1) {
            sessions = parseInt(value.split("Session creations since subsystem startup or last reset")[1].split("\n")[0].trim());
            if (sessions > 0) {
              topPolicyHits.push({"label": className, "value": sessions});
            }
          }

        }

      });
      topPolicyHits.sort(function(a, b) {
        return b.value - a.value;
      });
      if (topPolicyHits.length > 10) {
        topPolicyHits.length = 10;
      }
      policyData.length = 0;
      policyData.push({values: topPolicyHits});
    }
    catch (e) {
        isEmptyBlock = true;
    }
  }
  function getTopApplications(numberlen, typtofGraph, output) {
    try {
      /*if (typtofGraph==="byteCount") {
       cliValue = "show ip nbar protocol-discovery stats byte-count top-n 10";
       }
       else{
       cliValue = "show ip nbar protocol-discovery stats bit-rate top-n 10";
       }*/

      //responseExecOrConfig = deviceCommunicator.getExecCmdOutput(cliValue);
      responseExecOrConfig = output;
      var reg = new RegExp("[,\\n]"), rows;
      rows = responseExecOrConfig.split(reg);
      //var getlen = [], byteValue = [], num = 0, rowsOne, rowsOneSplit;
      var arrsplit = [], count = 0;
      regExp = new RegExp('^' + '([a-zA-Z])+', "gi");
      var topNAppArr = [], topNAppArrTemp = [], topNAppArrval = [];
      topNAppArrTemp.length = 0;
      for (var i = 0; i < rows.length; i++) {
        if ((rows[i].trim().toLowerCase().indexOf("input") < 0) && (rows[i].trim().toLowerCase().indexOf("---") < 0) && (rows[i].trim().toLowerCase().indexOf("total") < 0) && (rows[i].trim().toLowerCase().indexOf("unknown") < 0)) {
          arrsplit = rows[i].trim().split(/\s+/);
          if (arrsplit.length == 3) {
            topNAppArrTemp[count] = arrsplit[0];
            if (typtofGraph === "byteCount") {
              //code
              topNAppArrval[count] = parseFloat((parseFloat((parseInt(arrsplit[1], 10) + parseInt(arrsplit[2], 10)) / 1024) / 1024).toFixed(0));
            }
            else {
              topNAppArrval[count] = parseFloat((parseFloat((parseInt(arrsplit[1], 10) + parseInt(arrsplit[2], 10)) / 8) / 1024).toFixed(0));
            }
            count = count + 1;
          }
        }
      }
      var topNArrunique = [];
      topNArrunique.length = 0;
      topNArruniqueTemp.length = 0;
      for (m = 0; m < topNAppArrTemp.length; m++) {
        topNAppArr[m] = topNAppArrTemp[m];
      }

      /*$.each($.unique(topNAppArrTemp), function(i, value){
       topNArruniqueTemp[i]=value;
       alert(value);
       });*/
      topNArruniqueTemp = getUnique(topNAppArrTemp);
      //setting applications installed Tile
      if (typtofGraph != "byteCount") {
        var applistD = "";
        $('#applicationDetected').text(topNArruniqueTemp.length);
        $.each(topNArruniqueTemp, function(index, value) {
          if (index == 0){
            applistD = value;
          }
          else{
            applistD = applistD + "," + value;
          }
        });
        $('#applicationDetected').attr("data", applistD);
      }
      var lentemp = 0;
      for (k = topNArruniqueTemp.length - 1; k >= 0; k--) {
        topNArrunique[lentemp] = topNArruniqueTemp[k];
        lentemp = lentemp + 1;
      }
      var topAppGraphDatatemp = [], topNArrNamesVal = [], topNArrValData = [], topNArrValDataTemp = [];
      topNArrNamesVal.length = 0;
      topNArrValData.length = 0;
      topNArrValDataTemp.length = 0;
      topAppGraphDatatemp.length = 0;
      drawyaxis.length = 0;
      drawyaxis[0] = 100;
      for (k = 0; k < topNArrunique.length; k++) {
        topNArrNamesVal[k] = 0.00;
        for (l = 0; l < topNAppArr.length; l++) {
          if (topNArrunique[k] == topNAppArr[l]) {
            topNArrNamesVal[k] = parseFloat(topNArrNamesVal[k]) + parseFloat(topNAppArrval[l]);
          }
        }
        topNArrValDataTemp.push({
          "name": topNArrunique[k],
          "value": topNArrNamesVal[k]
        });
      }
      topNArrValDataTemp.sort(function(a, b) {
        return a.value - b.value;
      });
      for (l = topNArrValDataTemp.length - 1; l >= 0; l--) {
        topNArrValData.push({
          "name": topNArrValDataTemp[l]["name"],
          "value": topNArrValDataTemp[l]["value"]
        });
      }
      if (topNArrValData.length < numberlen) {
        numberlen = topNArrValData.length;
      }
      for (m = 0; m < numberlen; m++) {
        if (topNArrValData[m]["value"] > 0) {
          topAppGraphDatatemp.push({"label": topNArrValData[m]["name"], "value": topNArrValData[m]["value"]});
        }

      }
      if (typtofGraph === "byteCount") {
        topAppGraphData.length = 0;
        topAppGraphData.push({values: topAppGraphDatatemp});
      } else {
        topAppGraphDataBit.length = 0;
        topAppGraphDataBit.push({values: topAppGraphDatatemp});
      }
    } catch (error) {
        isEmptyBlock = true;
    }
    return topAppGraphData;
  }




  function clearTopApp() {
    topAppGraphData.length = 0;
  }

  function drawTopApplicationsGraph(typeofData, output) {
    clearTopApp();
    if (typeofData == "bitRate") {
      //code
      getTopApplications(10, "bitRate", output);
      drawtopApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
    }
    else {
      getTopApplications(10, "byteCount", output);
      drawtopApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
    }


  }

  //Custom no data available added as d3 charts have a known UI bug if data is not available
  function addNoDataAvailable(id, action) {
    if ($('#' + id).find(".widget-content").find('.noData').length == 0 && action == "add") {
      $('#' + id).find(".widget-content").children().not('.graphOption').css("visibility", "hidden");
      //$('#'+id).find(".widget-content").append('<div class="noData">No Data Available</div>');
      $('#' + id).find(".widget-content").append('<div class="noData">' + $.i18n.prop("noDataAva") + '</div>');
    }
    if (action == "remove") {
      $('#' + id).find(".widget-content").find(".noData").remove();
      $('#' + id).find(".widget-content").children().css("visibility", "visible");
    }
  }

  function mapUserByIp(output) {
    /*try{
     var userIds=deviceCommunicator.getExecCmdOutput("show ip admission cache");
     }
     catch(e){
     }*/
    var userIds = output;
    var userIdByIPHash = [];
    if (userIds !== null && userIds !== '') {
      var usersList = userIds.split("\n");
      for (var i = 1; i < usersList.length; i++) {
        var rowData = usersList[i];

        var tokens = rowData.split(',');
        var clintName = tokens[0].replace("Client Name ", "");
        var clintIp = tokens[1].replace("Client IP ", "");
        clintName = $.trim(clintName);
        clintIp = $.trim(clintIp);
        //var clintPort = tokens[2].replace("Port ", "");
        userIdByIPHash[clintIp] = clintName;
      }
    }
    //adding data to no of active users tile
    $('#activeUsersCount').text(Object.keys(userIdByIPHash).length);
    var index = 0, userString = "";
    for (var obj in userIdByIPHash) {
      if (index == 0){
        userString = userString + obj + ':' + userIdByIPHash[obj];
      }
      else{
        userString = userString + ',' + obj + ':' + userIdByIPHash[obj];
      }
      index++;
      ////consoleLog(obj);
      ////consoleLog(userIdByIPHash[obj]);
    }
    $('#activeUsersCount').attr("data", userString);
    return userIdByIPHash;
  }

  function getTunnelStatus(tunnel0Cli, tunnel1Cli) {
    tunnel0 = 0;
    tunnel1 = 0;
    if (tunnel0Cli.trim() != "") {
      if (tunnel0Cli.split("\n")[0].split(",")[0].indexOf("is up") > -1 && tunnel0Cli.split("\n")[0].split(",")[1].indexOf("is up") > -1){
        tunnel0 = 1;
      }
      else{
        tunnel0 = 2;
      }
    }
    if (tunnel1Cli.trim() != "") {
      if (tunnel1Cli.split("\n")[0].split(",")[0].indexOf("is up") > -1 && tunnel1Cli.split("\n")[0].split(",")[1].indexOf("is up") > -1){
        tunnel1 = 1;
      }
      else{
        tunnel1 = 2;
      }
    }

    if (tunnel0 == 1 || tunnel1 == 1){
      return 1;
    }
    else if (tunnel0 == 0 && tunnel1 == 0){
      return 0;
    }
    else{
      return 2;
    }

  }

  //Adds/removes loading for tiles
  function tileLoader(id, action) {
    if (action == "add") {
      $('#' + id).parent().children().hide();
      //$("#"+id).parent().append('<div class="facebook ccpexpCSSReplaceClass874" ><div></div><div></div><div></div>'+
      //                          '<span class="ccpexpCSSReplaceClass875">Loading</span></div>');
      $("#" + id).parent().append('<div class="facebook ccpexpCSSReplaceClass876" ><div></div><div></div><div></div>'+
                                  '<span class="ccpexpCSSReplaceClass877">' + $.i18n.prop("loadingBgTitle") + '</span></div>');
    } else {
      $("#" + id).parent().find('.facebook').remove();
      $('#' + id).parent().children().not('.tileToolTip').show();
    }

  }

  //Adds loading to dashlet
  function loader(id) {
    //$("#"+id).append('<div id="dashletLoading" class="ccpexpCSSReplaceClass878">'+
    //                 '<div class="facebook"><div></div><div></div><div></div>'+
    //                 '<span class="ccpexpCSSReplaceClass879">Loading</span></div></div>');
    $("#" + id).append('<div id="dashletLoading" class="ccpexpCSSReplaceClass880">'+
                       '<div class="facebook"><div></div><div></div><div></div>'+
                       '<span class="ccpexpCSSReplaceClass881">' +
                       $.i18n.prop("loadingBgTitle") + '</span></div></div>');
    $("#" + id).find('.widget-content').children().hide();
    $("#" + id).find('.widget-content').css("background", "rgb(253, 253, 253)");
  }

  //removes loading from dashlet
  function removeLoader(id) {
    if ($("#" + id).find('#dashletLoading').length > 0) {
      $("#" + id).find('#dashletLoading').remove();
      $("#" + id).find('.widget-content').children().show();
      $("#" + id).find('.widget-content').css("background", "#FFFFFF");
    }

  }

  //minimises the dashboard for features which are not enabled
  function minimizeDashboard() {
    if (!featureState["cws"]){
      $('#fwDfUserBasedChart').find('.widget-head').find('.remove').click();
    }
    if (!featureState["vpn"]){
      $('#vpnStatistics').find('.widget-head').find('.remove').click();
    }
    if (!featureState["policy"]){
      $('#policyGraph').find('.widget-head').find('.remove').click();
    }
    if (isEnableIPS) {
      if (!featureState["ips"]) {
        $('#ipsSignatureStatistics').find('.widget-head').find('.remove').click();
        $('#ipsAttackStats').find('.widget-head').find('.remove').click();
      }
    }

  }

  //clear all setIntervals set in routerDashboard to improve performance for security dashboard
  function clearRouterDashBoardIntervals() {
    clearInterval(clockInterval);
    clearInterval(timerInterval);
  }

  //Sets security features state i.e Enabled or Disabled
  function setFeaturesState(xml) {
    if (xml.indexOf("Building configuration...") !== -1) {
      xml = xml.substring(25, xml.length);
      xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
    }
    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
    var regEx = new RegExp("&#x03;", "g");
    xml = xml.replace(regEx, "");
    try {
      var xmlDoc = $.parseXML(xml);
      xml = xmlDoc;
    } catch (error) {
        isEmptyBlock = true;
    }
    var primaryFound = false, policy = false, cws = false, ips = false, vpn = false;
    $(xml).find('zone-pair').each(function() {
      if ($(this).find('service-policy').find('PolicyMapName')) {
        policy = true;
        return false;
      }
    });
    $(xml).find('interface').each(function() {
      //var p=$(this).html();
      $(this).find('ConfigIf-Configuration').each(function() {
        if (($(this).find('description').find('DescriptionBeTruncatedTo200Characters').text().indexOf("PrimaryWANDesc_") == 0) && ($(this).find('zone-member').find('security').children().length > 0))
        {
          if ($(this).find('zone-member').find('security').children().first().prop("tagName").toLowerCase() == "wan") {
            primaryFound = true;
            if ($(this).find('cws').find('out').length > 0) {
              cws = true;
            }
            if ($(this).find('ip').find('ips').find('in').length > 0) {
              ips = true;
            }
            if (configureVpn.checkValuesIkve1(xml) || configureVpn.checkValuesIkve2(xml)) {
              vpn = true;
            }
          }
        }
      });
      if (primaryFound) {
        return false;
      }
    });

    setStatus("zoneTile", primaryFound);
    setStatus("policyTile", policy);
    setStatus("vpnTile", vpn);
    setStatus("ipsTile", ips);
    setStatus("cwsTile", cws);

    function setStatus(feature, value) {
      if (value) {
        if ($("#" + feature).hasClass("disableTile")) {
          $("#" + feature).removeClass("disableTile");
        }
        $("#" + feature).addClass("enableTile");
        $("#" + feature).find('.featureName').css("color","rgb(57, 190, 31)");
      }
      else {
        if ($("#" + feature).hasClass("enableTile")) {
          $("#" + feature).removeClass("enableTile");
        }
        $("#" + feature).addClass("disableTile");
        $("#" + feature).find('.featureName').css("color","#a39e9e");
      }
    }

    featureState["primaryFound"] = primaryFound;
    featureState["cws"] = cws;
    featureState["vpn"] = vpn;
    featureState["policy"] = policy;
    featureState["ips"] = ips;

    $('.disableTile').hover(function() {
      $(this).css("background", "#38a1bf");
      $(this).css("color", "#ffffff");
      $(this).find('.featureName').css("color", "#ffffff");
      $(this).children().first().css("border-bottom", "none");
    }, function() {
      $(this).css("background", "#fcfcfc");
      $(this).css("color", "#a39e9e");
      $(this).find('.featureName').css("color", "#a39e9e");
      $(this).children().first().css("border-bottom", "3px solid #a39e9e");

    });

    $('.enableTile').hover(function() {
      $(this).css("background", "#38a1bf");
      $(this).css("color", "#ffffff");
      $(this).find('.featureName').css("color", "#ffffff");
      $(this).children().first().css("border-bottom", "none");
    }, function() {
      $(this).css("background", "#fcfcfc");
      $(this).css("color", "#39be1f");
      $(this).find('.featureName').css("color", "#39be1f");
      $(this).children().first().css("border-bottom", "3px solid #39be1f");

    });



  }

  /*
  function setTunnelStatus(cli1, cli2) {
    var result = getTunnelStatus(cli1, cli2);
    if (result == 1) {
      $("#tunnelStatus").text($.i18n.prop("upStr"));
    }
    else if (result == 0) {
      $("#tunnelStatus").text($.i18n.prop("downStr"));
    }
    else {
      $("#tunnelStatus").text($.i18n.prop("downStr"));
    }
  }
  */
  
  
  function showTunnelStatus(interfaceArr,statusArr) {
    var tunnelTitle =  $.i18n.prop("tunnelText")+" "+$.i18n.prop("details");      
    $("#dashBoardTunnelStatus").text(tunnelTitle);
	if(interfaceArr.length==0){
	  $("#tunnelStatus").text("--");
      $('#tunnelStatus').removeAttr("data");      
	} else {
      var status = $.i18n.prop("tunnelText")+" "+$.i18n.prop("DashBoardCount")+":"+interfaceArr.length;
	  $("#tunnelStatus").text(status);
      var inString="";    
      for(i=0;i<interfaceArr.length;i++)  {
      if(interfaceArr[i]!==undefined){        
        inString=inString+interfaceArr[i]+":"+statusArr[i]+",";
      }
      }/*
      if(interfaceArr[1]!==undefined){        
        inString=inString+interfaceArr[1]+":"+statusArr[1];
      }*/   
      inString = inString.substring(0, inString.length-1);      
      $('#tunnelStatus').attr("data", inString);
	}
    
  }
  
  function getTunnelDetails(){
	var ipsecConfig=deviceCommunicator.getExecCmdOutput("show crypto session");  
	var interfaceArr=[];
    var statusArr=[];
	var configLine="";
	var ipsecArr=ipsecConfig.split("\n");
    var ipsecArrlength = ipsecArr.length;
	for(i=0;i<ipsecArrlength;i++){
    configLine=ipsecArr[i];
      if((configLine.indexOf("Interface:")>-1)&&(configLine.indexOf("Tunnel")>-1)){
		interfaceArr.push(configLine.replace("Interface: ",""));
	  }else if(configLine.indexOf("Session status")>-1){
		statusArr.push(configLine.replace("Session status: ",""));
      }
	}
	showTunnelStatus(interfaceArr,statusArr);
  }

  function getWANBandwidth(interface1, interface2) {
    var bandwidth = 0, backUpWan = "", primaryWan = "", primaryStatus = "", primaryStatusLine = "", secondaryStatus = "", secondaryStatusLine = "";
    $.each(primayWanList, function(index, value) {
      var primaryFound = false, backupFound = false;
      if (index == 0){
        resp = interface1;
      }
      if (index == 1){
        resp = interface2;
      }
      if (resp != "") {
        interfaceLines = resp.split("\n");
        $.each(interfaceLines, function(index, iLines) {
          if ((iLines.indexOf("Description") > -1) && (iLines.indexOf("BackupWANDesc_") > -1)) {
            backUpWan = value;
            backupFound = true;

          }
          if ((iLines.indexOf("Description") > -1) && (iLines.indexOf("PrimaryWANDesc_") > -1)) {
            primaryWan = value;
            primaryFound = true;
          }
          if (primaryFound || backupFound) {
            if ((iLines.indexOf("5 minute input rate") > -1) || (iLines.indexOf("30 second input rate") > -1) || (iLines.indexOf("30 second output rate") > -1) || (iLines.indexOf("5 minute output rate") > -1)) {
              var iLinesSplit = iLines.split(",");
              //$.each(iLinesSplit,function(index,bLines){
              //if ((bLines.indexOf("BW")>-1) && (bLines.indexOf("Kbit/sec")>-1)) {
              var spLine = iLinesSplit[0].trim().split(/\s+/);
              bandwidth = bandwidth + parseInt(spLine[spLine.length - 2]);
              //}
              //});
            }
          }
        });
      }
      if (primaryFound) {
        primaryStatus = interfaceLines[0].trim().split(",")[0];
        primaryStatusLine = interfaceLines[0].trim().split(",")[1];
      }

      if (backupFound) {
        secondaryStatus = interfaceLines[0].trim().split(",")[0];
        secondaryStatusLine = interfaceLines[0].trim().split(",")[1];
      }

    });

    if (secondaryStatus != "" || primaryStatus != "") {
      var kbBandwidth = bandwidth / (8 * 1024);
      if (kbBandwidth > 1024) {
        var wanBWVal = (kbBandwidth / 1024).toFixed(2);
        $('#wanZoneBandwidth').text((wanBWVal + " Mb/s"));
      } else {
        $('#wanZoneBandwidth').text(kbBandwidth.toFixed(2) + " Kb/s");
      }
    }
  }
  function mirzeRowsWithSameLable(userByBytes) {
    try {
      var mirzedUserByBytes = [];
      var privLabel = '';
      var privValue = 0.00;
      for (var i = 0; i < userByBytes.length; i++) {
        var row = userByBytes[i];
        var currentLabel = row.label;
        var currentValue = row.value;
        if (i > 0) {
          if (privLabel !== currentLabel) {
            mirzedUserByBytes.push({"label": privLabel, "value": privValue});
            privLabel = currentLabel;
            privValue = currentValue;
          } else {
            privValue = privValue + currentValue;
          }
        } else {
          privLabel = currentLabel;
          privValue = privValue + currentValue;
        }
      }
      if (privValue > 0) {
        mirzedUserByBytes.push({"label": privLabel, "value": privValue});
      }
      return mirzedUserByBytes;
    } catch (error) {
      errorLogInConsole(error.errorResponse);
      return userByBytes;
    }
  }
  function getTop10Users(top10Users) {
    try {
      //var top10Users = deviceCommunicator.getExecCmdOutput("show flow monitor application-mon cache aggregate ipv4 destination address");
      //var top10Users = deviceCommunicator.getExecCmdOutput("show flow monitor application-mon cache aggregate ipv4 source address");
      var top10UsersArray = top10Users.split('\n');
      var userByBytes = [];

      ////consoleLog(userIdByIPHash);
      for (var i = 5; i < top10UsersArray.length; i++) {
        var rowData = top10UsersArray[i].replace(/\s\s+/g, '|');

        var rowDataArray = rowData.split('|');
        var mb = parseFloat(rowDataArray[2]) / 1024;
        mb = Math.round(mb);
        if (mb > 0) {

          var ip = getUserIdByIp(rowDataArray[0]);

          userByBytes.push({"label": ip, "value": mb});
        }

      }
      ;
      userByBytes.sort(function(a, b) {
        if (a.last_nom < b.label){
          return -1;
        }
        if (a.label > b.label){
          return 1;
        }
        return 0;
        //  return b.label - a.label;
      });
      var mirzedUserByBytes = mirzeRowsWithSameLable(userByBytes);

      var tempUserArr = [];
      $.each(mirzedUserByBytes, function(index, value) {
        if (index == 0) {
          tempUserArr.push(value);
          return true;
        }
        var found = false;
        $.each(tempUserArr, function(index1, value1) {
          if (value['label'].trim().toLowerCase() == value1['label'].trim().toLowerCase()) {
            found = true;
            value1['value'] = parseFloat(value1['value']) + parseFloat(value['value']);
          }
        });
        if (!found) {
          tempUserArr.push(value);
        }
      });
      mirzedUserByBytes = tempUserArr;
      mirzedUserByBytes.sort(function(a, b) {
        return b.value - a.value;
      });
      if (mirzedUserByBytes.length > 10) {
        fwHttpUserData = [{values: mirzedUserByBytes.slice(0, 10)}];
      } else {
        fwHttpUserData = [{values: mirzedUserByBytes}];
      }
      //  fwHttpUserData=[{values:userByBytes}];
      ////consoleLog(fwHttpUserData);
    } catch (e) {
        isEmptyBlock = true;
    }
  }

  function getUserIdByIp(ip) {
    var userOrIp;
    var userId = userIdByIPHash[ip];
    if (typeof userId !== 'undefined') {
      userId = userId.trim();
      if (userId === '' || userId === 'N/A') {
        userOrIp = ip;
      } else {
        userOrIp = userId;
      }

    } else {
      userOrIp = ip;
    }
    return userOrIp;
  }
  function getIpsAttackData(output) {

    var sorceResultObj = {};
    var destResultObj = {};
    var totalVictimCount = 0;

    try {
      var ipsAttackLog = output;

      var newLine = new RegExp("[,\\n]");
      var ipsAttackRow = ipsAttackLog.split(newLine);
      for (var i = 0; i < ipsAttackRow.length; i++) {
        var row = ipsAttackRow[i];
        var fromIndex = row.indexOf('[');
        var toIndex = row.indexOf(']');
        var ipAddress = row.substring(fromIndex + 1, toIndex);

        if (ipAddress.indexOf('->') !== -1) {
          var sorceDEstinationArray = ipAddress.split('->');
          var sorce = sorceDEstinationArray[0];
          var destination = sorceDEstinationArray[1];




          fromIndex = sorce.lastIndexOf(':');
          var ip = sorce.substring(0, fromIndex);
          var sorceIp = getUserIdByIp(ip);




          fromIndex = destination.lastIndexOf(':');
          ip = destination.substring(0, fromIndex);
          var destIp = getUserIdByIp(ip);


          if (sorceResultObj[sorceIp]) {
            sorceResultObj[sorceIp]++;
          } else {
            sorceResultObj[sorceIp] = 1;
          }

          if (destResultObj[destIp]) {
            destResultObj[destIp]++;
          } else {
            destResultObj[destIp] = 1;
          }


        }
      }

      var attakerJson = [];
      for (var key in sorceResultObj) {
        attakerJson.push({"label": key, "value": parseInt(sorceResultObj[key])});
      }
      attakerJson.sort(function(a, b) {
        return b.value - a.value;
      });
      if (attakerJson.length > 10) {
        ipsAttackData = [{values: attakerJson.slice(0, 10)}];
      } else {
        ipsAttackData = [{values: attakerJson}];
      }

      var victamsJson = [];
      for (var key in destResultObj) {
        victamsJson.push({"label": key, "value": parseInt(destResultObj[key])});
      }
      victamsJson.sort(function(a, b) {
        return b.value - a.value;
      });

//Setting Ips Tile
      $.each(victamsJson, function(index, value) {
        totalVictimCount = totalVictimCount + parseInt(value['value']);
      });
      $('#ipVictim').text(totalVictimCount);
      if (victamsJson.length > 10) {
        ipsVictimData = [{values: victamsJson.slice(0, 10)}];
      } else {
        ipsVictimData = [{values: victamsJson}];
      }


    } catch (e) {
        isEmptyBlock = true;
    }



  }
  function terminateCliWorker() {
    if (worker != undefined) {
      worker.terminate();
    }
    /*if (timerInterval!=undefined) {
     clearInterval(timerInterval);
     }*/
    if (clockInterval != undefined) {
      clearInterval(clockInterval);

    }
    if (myStatus != undefined) {
      clearInterval(myStatus);
    }
    if (myTunnel != undefined) {
      clearInterval(myTunnel);
    }
  }
  //custom ToolTip for Tiles
  function initializeTileTooltip() {
    $('.securityTopBoxInner').each(function() {
      var attr = $(this).find('.values').attr('data');
      if (attr != undefined) {
        arr = $(this).find('.values').attr("data").split(',');
        var content = "<table><tr><td valign='top'><ul>";
        if ($(this).find('.values').attr("id") == "applicationDetected") {
          $.each(arr, function(index, value) {
            if (index == 20){
              return false;
            }
            if (index == 10) {
              content = content + '</ul></td><td valign="top"><ul>';
            }
            content = content + '<li><em class="fa fa-list-alt"></em>&nbsp;' + value + '</li>';

          });
        }
        else if ($(this).find('.values').attr("id") == "activeUsersCount") {
          $.each(arr, function(index, value) {
            if (index == 20){
              return false;
            }
            if (index == 10) {
              content = content + '</ul></td><td valign="top"><ul>';
            }
            temp = value.split(':');
            ip = temp[0];
            user = temp[1];
            content = content + '<li><em class="fa fa-user"></em>&nbsp;' + ip + ' ' + user + '</li>';
          });
        }
        else if ($(this).find('.values').attr("id") == "tunnelStatus") {
          $.each(arr, function(index, value) {
            if (index == 20){
              return false;
            }
            if (index == 10) {
              content = content + '</ul></td><td valign="top"><ul>';
            }
            temp = value.split(':');
            ip = temp[0];
            user = temp[1];
            
             if (user.toLowerCase().indexOf('down') > -1|| user.indexOf($.i18n.prop("downStr"))>-1) {
              //status = "down";
              imgSrc = "disable";
            } else {
              //status = "up";
              imgSrc = "enable";
            }
            content = content + '<li>' + ip + ' ' + '&nbsp;&nbsp;<a href="javascript:void(0)" class="utmSprite ' + imgSrc + ' ccpexpCSSReplaceClass800" ></a>' + '</li>';
          });
        }
        content = content + "</ul></td></tr></table>";
        if (arr.length > 20) {
          content = content + '<div class="more-tooltip" data-for="' + $(this).find('.values').attr("id") + '"><a href="javascript:void(0);">more</a></div>';
        }
        $(this).find('.tileToolTip').empty();
        $(this).find('.tileToolTip').append(content);
        $(this).find('.tileToolTip').css("left", ($(this).position().left + 20) + 'px');
        $(this).find('.tileToolTip').css("top", ($(this).position().top + 80) + 'px');



      }
    });

    $('.securityTopBoxInner').each(function() {
      var attr = $(this).find('.values').attr('data');
      $(this).unbind('mouseenter mouseleave');
      $(this).hover(function(e) {
        $('.tileToolTip').hide();
        current = $(this);
        if (attr != undefined && attr != "") {
          $(this).find('.tileToolTip').fadeIn("fast", function() {
            $('.securityTopBoxInner').each(function() {
              if (!current.is($(this))) {
                $(this).find('.tileToolTip').hide();
              }
            });

          });
        }
      }, function() {
        $(this).find('.tileToolTip').each(function() {
          //$(this).stop();
          $(this).hide();
        });
      });
    });
    $('.more-tooltip').click(function() {
      var dialogTitle = "";
      $('#tileMoreDetails').empty();
      if ($(this).attr("data-for") == "applicationDetected") {
        dialogTitle = "Applications Detected";
        content = '<table class="moreTable"><tr><td valign="top"><ul>';
        divideApp = parseInt(topNArruniqueTemp.length / 3);
        moduloApp = topNArruniqueTemp.length % 3;
        firstCollength = divideApp;
        secondCollength = divideApp;
        thirdCollength = divideApp;
        if (moduloApp == 2) {
          firstCollength++;
          secondCollength++;
        }
        if (moduloApp == 1) {
          firstCollength++;
          secondCollength++;
          thirdCollength--;
        }

        var count = 0;
        var colNo = 1;
        var current = 0;
        $.each(topNArruniqueTemp, function(index, value) {

          content = content + '<li><em class="fa fa-list-alt"></em> ' + value + '</li>';
          count++;
          if (colNo == 1){
            current = firstCollength;
          }
          else if (colNo == 2){
            current = secondCollength;
          }
          else if (colNo == 3) {
            current = thirdCollength;
          }
          if (count == current) {
            content = content + '</ul></td>';
            count = 0;

            if (colNo != 3){
              content = content + '<td valign="top"><ul>';
            }
            colNo++;

          }
        });
        content = content + '</tr></table>';
        $('#tileMoreDetails').append(content);
      } else if ($(this).attr("data-for") == "activeUsersCount") {
        dialogTitle = "Active Users";
      }
      $("#tileMoreDetails").dialog({
        title: dialogTitle,
        width: "500px"
      });
      $("#tileMoreDetails").dialog('open');

    });
  }

  function addGradientToChart(id) {
    if ($("#" + id).find('svg').find('defs').find('#myLinearGradient1').length == 0) {
      $("#" + id).find('svg').find('defs').append('<linearGradient id="myLinearGradient1" x1="0%" y1="0%" x2="100%" y2="0%" spreadMethod="pad"> <stop offset="10%" stop-color="#00cc00" stop-opacity="1"/> <stop offset="30%" stop-color="#006600" stop-opacity="1"/><stop offset="70%" stop-color="#cc0000" stop-opacity="1"/><stop offset="90%" stop-color="#000099" stop-opacity="1"/></linearGradient>');
    }
    $("#" + id).find('svg').find('rect').each(function() {
      $(this).attr("style", "fill:url(#myLinearGradient1); stroke: #005000;stroke-width: 3;");
    });
  }

  function executeAsyncCli(cliValue) {
    var resp = "";
    try {
      resp = deviceCommunicator.getExecCmdOutput(cliValue, true);
    } catch (e) {
        isEmptyBlock = true;
    }
    return resp;
  }

  function executeCli(cliValue) {
    var resp = "";
    try {
      resp = deviceCommunicator.getExecCmdOutput(cliValue);
    }
    catch (e) {
        isEmptyBlock = true;
    }
    return resp;
  }

  function loadDashboard() {
    blockPage("Loading");
    setTimeout(function() {
$('#topAppGraphByBitRateRadio').click();
      $('.trashDiv').css({width: '320px', left: '34%'});
      $("#viewOption").click(function() {
        if ($(this).val() == "month") {
          dailyBaseFWSessionGraph();
          //alert($(this).val());
        }
      });

      resetData();
      if (!isEnableIPS) {
        $('#ipsTile').hide();
        $("#ipsAttackStats").parent().hide();
        $("#ipsSignatureStatistics").parent().hide();
        var mainNode = $('#ipVictim').parent();
        mainNode.hide();
        mainNode.prev().attr('style', 'border-width:1px 0');
        $('.securityTopBoxInner').css("width", "220px");
      }

      // display Session graph
      //var ipsData = [];
      //var counter = 0;
      vpnData.push({"key": "Decrypted", "values": []});
      vpnData.push({"key": "Encrypted", "values": []});
      $("#fwUserChartRadio").attr("checked", true);

      setFeaturesState(runningConfig);

      if (fwData.length == 0) {
        $('#firewallCurrentSession').addClass("onloadhide");
        $('#firewallDropped').addClass("onloadhide");
      }
      else {
        $('#firewallCurrentSession').removeClass("onloadhide");
        $('#firewallDropped').removeClass("onloadhide");
      }

      dashboardUI.dashboardLoad('.column', '#column1,#column2', 'column1', 'column2');
      //to reset if dashboard is maximised
      $('.widget-head').each(function() {
        if ($(this).parent().hasClass('MaximizedDiv')) {
          $(this).find('.maximize').click();
          return false;
        }
      });

      if (fwData.length > 0) {
        drawFWSessionGraph();
      }

      $('#ipsSevBarChart').hide();
      $('#ipsDropAlarmId >.legend').hide();

      var fontColor = ["rgb(31, 119, 180)", "rgb(174, 199, 232)", "rgb(255, 127, 14)", "rgb(255, 187, 120)"];
      $("#maxSessionTable").empty();
      $('#maxSessionTable').append("<tr></tr>");
      for (var k = 0; k < maxData.length; k++) {
        $('#maxSessionTable tr').append('<td class="maxSessionCount" style = "color: ' + fontColor[k] + '">' + maxData[k]["maxValue"] +
                                        '</td><td class="maxSessionText" style =  "color: ' + fontColor[k] + '">' + maxData[k]["key"] + '</td><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>');
      }

      //*****************************************************************************************************
      // Display IPS bar chart


      $("input[name=ipsAttackVictimChartType]").change(function() {
        if (this.id === 'ipsAttackRadio') {
          if (ipsAttackData[0]['values'].length != 0) {
            addNoDataAvailable("ipsAttackStats", "remove");
            d3.select('#ipsAttackGraph svg')
              .datum(ipsAttackData)
              .transition().duration(500).call(ipsAttackGraph);
            nv.utils.windowResize(ipsAttackGraph.update);
          }
          else {
            addNoDataAvailable("ipsAttackStats", "add");
          }
        }
        else {
          if (ipsVictimData[0]['values'].length != 0) {
            addNoDataAvailable("ipsAttackStats", "remove");
            d3.select('#ipsAttackGraph svg')
              .datum(ipsVictimData)
              .transition().duration(500).call(ipsAttackGraph);
            nv.utils.windowResize(ipsAttackGraph.update);
          } else {
            addNoDataAvailable("ipsAttackStats", "add");
          }
        }
      });

      $('.tiled').click(function() {
        redirectToSecurityFeature(parseInt($(this).attr("data")));
      });

      $("input[name=ipsChartType]").change(function() {
        if (this.id === 'maxHit') {
          $('#ipsSevBarChart').hide();
          $('#ipsDropAlarmId >.legend').hide();
          $('#ipsHitBarChart').show();
          if (bIpsWidgetMaximized === true){
            drawIPsHitGraph(ipsHitData);
          }
          else{
            drawIPsHitGraph(top10IpsHitData);
          }
        }
        else {
          $('#ipsHitBarChart').hide();
          $('#ipsSevBarChart').show();
          $('#ipsDropAlarmId >.legend').show();
          if (bIpsWidgetMaximized === true) {
            setIpsSevBarColor();
            drawIpsSeverityBarGraph(ipsSevData);
          }
          else {
            setIpsSevBarColor();
            drawIpsSeverityBarGraph(top10IpsSevData);
          }
        }
      });

      $("input[name=topAppByCount]").change(function() {
        if (this.id === 'topAppGraphByByteCountRadio') {
          if (topAppGraphWidgetMaximized === true)
          {
            getTopApplications(10, "byteCount", executeAsyncCli("show ip nbar protocol-discovery stats byte-count top-n 10"));
            if (topAppGraphData[0]['values'].length != 0) {
              addNoDataAvailable("topAppStats", "remove");
              redrawApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
            }
            else{
              addNoDataAvailable("topAppStats", "add");
            }
            //drawTopApplicationsGraph("byteCount",);

          }
          else
          {
            getTopApplications(10, "byteCount", executeAsyncCli("show ip nbar protocol-discovery stats byte-count top-n 10"));
            if (topAppGraphData[0]['values'].length != 0) {
              addNoDataAvailable("topAppStats", "remove");
              redrawApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
            }
            else{
              addNoDataAvailable("topAppStats", "add");
            }
            //drawTopApplicationsGraph("byteCount",executeCli("show ip nbar protocol-discovery stats byte-count top-n 10"));

          }
        }
        else {
          if (topAppGraphWidgetMaximized === true)
          {
            getTopApplications(10, "bitRate", executeAsyncCli("show ip nbar protocol-discovery stats bit-rate"));
            if (topAppGraphDataBit[0]['values'].length != 0) {
              addNoDataAvailable("topAppStats", "remove");
              redrawApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
            }
            else{
              addNoDataAvailable("topAppStats", "add");
            }
            //drawTopApplicationsGraph("bitRate",);
          }
          else
          {
            getTopApplications(10, "bitRate", executeAsyncCli("show ip nbar protocol-discovery stats bit-rate"));
            if (topAppGraphDataBit[0]['values'].length != 0) {
              addNoDataAvailable("topAppStats", "remove");
              redrawApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
            }
            else{
              addNoDataAvailable("topAppStats", "add");
            }
            //drawTopApplicationsGraph("bitRate",executeCli("show ip nbar protocol-discovery stats bit-rate top-n 10"));
          }
        }
      });
      //checks whether feature is diasabled and minimises the dashlet
      minimizeDashboard();
      //clears all router dashboard setInterval on tab switch
      clearRouterDashBoardIntervals();
      $.unblockUI();
    }, 1000);
    function startLoader() {
      loader("topAppStats");
      loader("fwHttpUserApplChart");
      loader("vpnStatistics");
      loader("policyGraph");
      loader("ipsSignatureStatistics");
      loader("ipsAttackStats");
      loader("firewallDrop");
      loader("fwDfUserBasedChart");
      tileLoader("applicationDetected", "add");
      tileLoader("activeUsersCount", "add");
      tileLoader("tunnelStatus", "add");
      tileLoader("wanZoneBandwidth", "add");
      tileLoader("ipVictim", "add");
    }
    startLoader();
    getTunnelDetails();
    //setTimeout(function(){removeLoader("topAppStats");},60000);
    utmDashboard.terminateCliWorker();
    setTimeout(function() {
      worker = new Worker('../js/securityDashboardWorker.js');
      $("#pollOption").change(function() {
        var messagePost = [
          {"type": "interval", "poll": $("#pollOption").val()}
        ];
        worker.postMessage(JSON.stringify(messagePost));
      });
      var int1 = "", int2 = "";
      if (primayWanList != undefined) {
        $.each(primayWanList, function(index, value) {
          if (index == 0){
            int1 = value;
          }
          if (index == 1){
            int2 = value;
          }
        });
      }
      var messagePost = [
        {"type": "start", "poll": $("#pollOption").val(), "zone": featureState['primaryFound'], "policy": featureState['policy'], "vpn": featureState['vpn'], "ips": featureState['ips'], "cws": featureState['cws'], "int1": int1, "int2": int2}
      ];
      worker.postMessage(JSON.stringify(messagePost));
      worker.onmessage = function(event) {
        var resp = JSON.parse(event.data);
        if (resp[0]['cliName'] == "policy") {
          getPolicyHits(resp[0]['output']);
          removeLoader("policyGraph");
          if (policyGraph == undefined) {
            if (policyData[0]['values'].length != 0) {
              addNoDataAvailable("policyGraph", "remove");
              drawPolicy();
            }
            else{
              addNoDataAvailable("policyGraph", "add");
            }
          } else {
            if (policyData[0]['values'].length != 0) {
              addNoDataAvailable("policyGraph", "remove");
              redrawGraphAtPoll("policyChart", policyData, policyGraph);
            }
            else{
              addNoDataAvailable("policyGraph", "add");
            }

          }
        } else if (resp[0]['cliName'] == "ipcache") {
          userIdByIPHash = mapUserByIp(resp[0]['output']);
        } else if (resp[0]['cliName'] == "ips") {
          var ipsDat = [];
          getIPSData(ipsDat, resp[0]['output']);
          removeLoader("ipsSignatureStatistics");
          //ipsPieChart = drawIpsPieChart();
          if ($('#maxHit').is(':checked')) {
            //ipsHitChart = drawIPsHitGraph(top10IpsHitData);

            if (ipsHitChart == undefined) {
              if (top10IpsHitData[0]['values'].length != 0) {
                addNoDataAvailable("ipsSignatureStatistics", "remove");
                ipsHitChart = drawIPsHitGraph(top10IpsHitData);
              } else{
                addNoDataAvailable("ipsSignatureStatistics", "add");
              }

            } else {
              if (top10IpsHitData[0]['values'].length != 0) {
                addNoDataAvailable("ipsSignatureStatistics", "remove");
                redrawGraphAtPoll("ipsHitBarChart", top10IpsHitData, ipsHitChart);
              }
              else{
                addNoDataAvailable("ipsSignatureStatistics", "add");
              }
            }
          } else {
            if (top10IpsHitData[0]['values'].length != 0) {
              //ipsSevChart = drawIpsSeverityBarGraph(top10IpsSevData);
              addNoDataAvailable("ipsSignatureStatistics", "remove");
              setIpsSevBarColor();
              redrawGraphAtPoll("ipsSevBarChart", top10IpsSevData, ipsSevChart);
            } else{
              addNoDataAvailable("ipsSignatureStatistics", "add");
            }
          }
        }
        else if (resp[0]['cliName'] == "firewallDrop") {
          getFirewallDroppedPacketsData(resp[0]['output']);
          removeLoader("firewallDrop");
          if (firewallDropGraph == undefined) {
            if (fwDroppedPktsData.length != 0) {
              addNoDataAvailable("firewallDrop", "remove");
              drawFirewallGraph();
            }
            else {
              addNoDataAvailable("firewallDrop", "add");
            }
          } else {
            if (fwDroppedPktsData.length != 0) {
              addNoDataAvailable("firewallDrop", "remove");
              redrawGraphAtPoll("firewallDropGraph", fwDroppedPktsData, firewallDropGraph);
            }
            else {
              addNoDataAvailable("firewallDrop", "add");
            }

          }
          //redrawGraphAtPoll("firewallDropGraph",firewallData,firewallDropGraph)
          //drawFirewallGraph();
        }
        else if (resp[0]['cliName'] == "cws") {
          getDomainFilterUserData(resp[0]['output']);
          removeLoader("fwDfUserBasedChart");
          if (dfUserGraph == undefined) {
            drawDomainFilterUserGraph();
          } else {
            redrawDomainFilterUserGraph(dfDomainData);
          }


          //redrawGraphAtPoll("firewallDropGraph",fwDroppedPktsData);
          //drawDomainFilterUserGraph();
        }
        else if (resp[0]['cliName'] == "vpn") {
          getVpnStatsData(resp[0]['output']);
          removeLoader("vpnStatistics");
          if (vpnGraph == undefined) {
            drawVPNGraph();
          } else {
            redrawGraphAtPoll("vpnGraph", vpnData, vpnGraph);
          }
          //drawVPNGraph();
        }
        else if (resp[0]['cliName'] == "topUsers") {
          getTop10Users(resp[0]['output']);
          removeLoader("fwHttpUserApplChart");
          tileLoader("activeUsersCount", "remove");
          if (fwHttpUserGraph == undefined) {
            if (fwHttpUserData[0]['values'].length != 0) {
              addNoDataAvailable("fwHttpUserApplChart", "remove");
              drawFWUserApplGraph(fwHttpUserData);
            }
            else {
              addNoDataAvailable("fwHttpUserApplChart", "add");
            }
          } else {
            if (fwHttpUserData[0]['values'].length != 0) {
              addNoDataAvailable("fwHttpUserApplChart", "remove");
              redrawFWUserApplGraph(fwHttpUserData);
            }
            else {
              addNoDataAvailable("fwHttpUserApplChart", "add");
            }
          }
        }
        else if (resp[0]['cliName'] == "topAppsByte" || resp[0]['cliName'] == "topAppsBit") {
          if ($('#topAppGraphByBitRateRadio').is(':checked')) {
            if (resp[0]['cliName'] == "topAppsBit") {
              //drawTopApplicationsGraph("bitRate",resp[0]['output']);
              getTopApplications(10, "bitRate", resp[0]['output']);
              removeLoader("topAppStats");
              tileLoader("applicationDetected", "remove");
              if (topAppGraph == undefined) {
                if (topAppGraphDataBit[0]['values'].length != 0) {
                  addNoDataAvailable("topAppStats", "remove");
                  drawTopApplicationsGraph("bitRate", resp[0]['output']);
                }
                else {
                  addNoDataAvailable("topAppStats", "add");
                }

              } else {
                if (topAppGraphDataBit[0]['values'].length != 0) {
                  addNoDataAvailable("topAppStats", "remove");
                  redrawApplications(drawyaxis, "bitRate", "Kilo Bytes (Load interval 30s)");
                } else {
                  addNoDataAvailable("topAppStats", "add");
                }
              }

            }
          } else {
            if (resp[0]['cliName'] == "topAppsByte") {
              //drawTopApplicationsGraph("byteCount",resp[0]['output']);
              getTopApplications(10, "byteCount", resp[0]['output']);
              //if (topAppGraphData[0]['values'].length!=0) {
              if (topAppGraphData[0]['values'].length != 0) {
                addNoDataAvailable("topAppStats", "remove");
                redrawApplications(drawyaxis, "byteCount", "Mega Bytes (MB)");
              }
              else{
                addNoDataAvailable("topAppStats", "add");
              }

              //}
            }

          }

        }
        else if (resp[0]['cliName'] == "ipsStats") {
          ipsDetailOutput = resp[0]['output'];

        }
        else if (resp[0]['cliName'] == "ipsAttack") {
          getIpsAttackData(resp[0]['output']);
          removeLoader("ipsAttackStats");
          tileLoader("ipVictim", "remove");
          if (ipsAttackData[0]['values'].length != 0) {
            addNoDataAvailable("ipsAttackStats", "remove");
            drawIPSAttackGraph();
          }
          else {
            addNoDataAvailable("ipsAttackStats", "add");
          }


        }
        else if (resp[0]['cliName'] == "tunnel") {
          //initializeTileTooltip();
          //setTunnelStatus(resp[0]['output1'], resp[0]['output2']);
          getTunnelDetails();
          tileLoader("tunnelStatus", "remove");

        } else if (resp[0]['cliName'] == "wanInt") {
          getWANBandwidth(resp[0]['int1'], resp[0]['int2']);
          tileLoader("wanZoneBandwidth", "remove");
        }
        else if (resp[0]['cliName'] == "loadTile") {
          initializeTileTooltip();

        }
      };
    }, 1200);

    $("#tileMoreDetails").dialog({
      autoOpen: false,
      //width: 600,
      height: 400,
      modal: true,
      show: 'fadeIn',
      close: function() {
        isEmptyBlock = true;
      }
    });







  }
  return {
    loadDashboard: loadDashboard,
    redrawGraph: redrawGraph,
    redrawGraphAtPoll: redrawGraphAtPoll,
    terminateCliWorker: terminateCliWorker
  };
}());
var configureNat = (function() {
  var natFlag = false;

  function loadStaticNat() {
    blockPage("Loading");
    //consoleLogMethodDetailsStart("configureNat.js", "loadStaticNat()");

    setTimeout(function() {
      $('#staticNatError').hide();
      refreshNAT();
      $.unblockUI();
    }, 1000);
    //consoleLogMethodDetailsEnd("configureNat.js", "loadStaticNat()");
  }
  /* refresh nat table*/
  function refreshNAT() {
    //consoleLogMethodDetailsStart("configureNat.js", "refreshNAT()");

    $("#natTable  tbody").empty();
    var h1;
    var xmlTag;
    if (!shRunFormatLatest) {
      shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
      shRunFormatLatest = true;
    }
    xmlTag = shRunFormatOutput;

    xml = $.parseXML(xmlTag);
    var countInternal = 0;
    $(xml).find('ip').each(function() {
      $(this).find('nat').each(function() {
        $(this).find('inside').each(function() {
          $(this).find('source').each(function() {
            $(this).find('static').each(function() {
              var internalIPVal = $(this).find('InsideLocalIPAddress').text();
                var externalIPVal = $(this).find('InsideGlobalIPAddress').text();
                var portVal = $(this).find('LocalUDPTCPPort').text();
                var extPort = $(this).find('GlobalUDPTCPPort').text();
              var protocolUDP = $(this).find('udp').text();
                var protocolTCP = $(this).find('tcp').text();
              var externalInterface = $(this).find('interface').find('Param:first').text();
              if (externalIPVal == "") {
                externalIPVal = externalInterface;
              }
              if ((portVal == "") || (portVal == undefined) || (portVal == null)) {
                h1 = false;
              } else {
                h1 = true;
              }
              countInternal = 0;
              $("#natTable").find('tr').each(function(index) {
                if (($(this).find('td.internalIp').text() == internalIPVal) &&
                    ($(this).find('td.externalIp').text() == externalIPVal) &&
                    ($(this).find('td.intlPort').text() == portVal) &&
                    ($(this).find('td.extlPort').text() == extPort)) {
                  countInternal = 1;
                  $(this).find('td.pat').text(h1 + " (Any)");
                }
              });
              if (countInternal == 0) {
                if (h1 === true) {
                  if ((protocolUDP == "") || (protocolUDP == undefined) || (protocolUDP == null)) {
                    isEmptyBlock = true;
                  } else {
                    h1 = h1 + " (UDP)";
                    $('<tr></tr>').html('<td class="internalIp">' + internalIPVal +
                                        '</td><td class="externalIp">' + externalIPVal +
                                        '</td><td class="pat">' + h1 +
                                        '</td><td class="intlPort ccpexpCSSReplaceClass579"  >' +
                                        portVal + '</td><td class="extlPort ccpexpCSSReplaceClass580"  >' +
                                        extPort + '</td>').appendTo('#natTable');
                  }
                  if ((protocolTCP == "") || (protocolTCP == undefined) || (protocolTCP == null)) {
                    isEmptyBlock = true;
                  } else {
                    h1 = h1 + " (TCP)";
                    $('<tr></tr>').html('<td class="internalIp">' +
                                        internalIPVal + '</td><td class="externalIp">' +
                                        externalIPVal + '</td><td class="pat">' + h1 +
                                        '</td><td class="intlPort ccpexpCSSReplaceClass581"  >' +
                                        portVal + '</td><td class="extlPort ccpexpCSSReplaceClass582"  >' +
                                        extPort + '</td>').appendTo('#natTable');
                  }
                } else {
                  $('<tr></tr>').html('<td class="internalIp">' + internalIPVal +
                                      '</td><td class="externalIp">' + externalIPVal +
                                      '</td><td class="pat">' + h1 +
                                      '</td><td class="intlPort ccpexpCSSReplaceClass583"  >' +
                                      portVal + '</td><td class="extlPort ccpexpCSSReplaceClass584"  >' +
                                      extPort + '</td>').appendTo('#natTable');
                }
              }
              //$('<tr></tr>').html('<td>' + internalIPVal + '</td><td>' + externalIPVal + '</td><td>' + h1 + '</td>' ).appendTo('#natTable');
            });
          });
        });

      });

    });
    addTableColumn("natTable", "natEdit", "natDelete");
    enableDisableButton("natTable", "addNat");
    $("#natTable tr:nth-child(even)").addClass("striped");
    $("#natTable thead input:checkbox").prop('checked', false);
    var natRowCount = $('#natTable tbody tr').length;
    if (natRowCount == 0) {
      $("#noNATMessage").show();
      $("#natTable").hide();
      $("#editNat").hide();
      $("#deleteNat").hide();
    } else {
      $("#noNATMessage").hide();
      $("#natTable").show();
      $("#editNat").show();
      $("#deleteNat").show();
    }
    changeEditNatBtn();
    //consoleLogMethodDetailsEnd("configureNat.js", "refreshNAT()");
  }
  /*diable edit button */
  function changeEditNatBtn() {
    //consoleLogMethodDetailsStart("configureNat.js", "changeEditNatBtn()");
    var chkboxChecked;
    $('#natTable tbody tr').on('click', (function() {
      chkboxChecked = $("#natTable tbody input:checkbox:checked").length;
      if (chkboxChecked > 1) {
        $("#editNat").addClass("ui-state-disabled");
        $("#editNat").attr("disabled", true);
      } else {
        $("#editNat").removeClass("ui-state-disabled");
        $("#editNat").attr("disabled", false);
      }

    }));
    $('#natTable thead tr').on('click', (function() {
      setTimeout(function() {
        chkboxChecked = $("#natTable tbody input:checkbox:checked").length;
        if (chkboxChecked > 1) {
          $("#editNat").addClass("ui-state-disabled");
          $("#editNat").attr("disabled", true);
        } else {
          $("#editNat").removeClass("ui-state-disabled");
          $("#editNat").attr("disabled", false);
        }
      }, 100);
    }));
    //consoleLogMethodDetailsEnd("configureNat.js", "changeEditNatBtn()");
  }

  function loadAndDisplayLanguages() {
    //consoleLogMethodDetailsStart("configureNat.js", "loadAndDisplayLanguages()");


    $("#dhcpSelectRowStr").text($.i18n.prop("selectRowStr"));
    $("#selectaRow").attr("title", $.i18n.prop("selectaHeading"));
    $("#portForwardAny").text($.i18n.prop("any"));


    //consoleLogMethodDetailsEnd("configureNat.js", "loadAndDisplayLanguages()");

  }

  function configNatLoading() {
    //consoleLogMethodDetailsStart("configureNat.js", "configNatLoading()");
    $("#l1").hide();
    $("#l3").hide();
    $('#staticNatError').hide();
    var addNAT = false, editNAT = false;
    //var validatorNAT, validatorNAT2;
    $("#enablePort").live("click", function() {
      $(this).closest("tr").removeClass("hilite");
    });

    function staticNatValid() {
      //consoleLogMethodDetailsStart("configureNat.js", "staticNatValid()");

      var sourceIp = $('#sourceIpNat').val();
      var destIp = $('#destIpNat').val();
      var intPort = $('#fromPort').val();
      var extPort = $('#toPort').val();
      if ((includeWildIPaddress(sourceIp) === false) || (sourceIp.trim().length == 0)) {
        $("#sourceIpNatErrorSpan").addClass("hint--top");
        //$("#sourceIpNatErrorSpan").attr("data-hint", "Enter valid IP");
        $("#sourceIpNatErrorSpan").attr("data-hint", $.i18n.prop("enterValidIp"));
        $("#sourceIpNat").addClass("highlightTextBox");
        //consoleLogMethodDetailsEnd("configureNat.js", "staticNatValid()");
        return false;
      } else if (destIp.trim().length == 0) {
        $("#destIpNatErrorSpan").addClass("hint--top");
        //$("#destIpNatErrorSpan").attr("data-hint", "Enter proper IP/Interface.");
        $("#destIpNatErrorSpan").attr("data-hint", $.i18n.prop("enterProperIp"));
        $("#destIpNat").addClass("highlightTextBox");
        //consoleLogMethodDetailsEnd("configureNat.js", "staticNatValid()");
        return false;
      }
      //else {
      //}
      if ($('#enablePort').attr('checked')) {
        if (intPort.trim().length <= 0 || isNaN(intPort.trim()) || intPort <= 0 || intPort > 65535) {
          $("#internalPortErrorSpan").addClass("hint--top");
          //$("#internalPortErrorSpan").attr("data-hint", "Enter valid port");
          $("#internalPortErrorSpan").attr("data-hint", $.i18n.prop("enterValidPort"));
          $("#fromPort").addClass("highlightTextBox");
          //consoleLogMethodDetailsEnd("configureNat.js", "staticNatValid()");
          return false;
        } else if (extPort.trim().length <= 0 || (isNaN(extPort.trim())) || extPort <= 0 || extPort > 65535) {
          $("#externalPortErrorSpan").addClass("hint--top");
          //$("#externalPortErrorSpan").attr("data-hint", "Enter valid port");
          $("#externalPortErrorSpan").attr("data-hint", $.i18n.prop("enterValidPort"));
          $("#toPort").addClass("highlightTextBox");
          //consoleLogMethodDetailsEnd("configureNat.js", "staticNatValid()");
          return false;
        }
        //else {
        //}
      }
      //consoleLogMethodDetailsEnd("configureNat.js", "staticNatValid()");

      return true;
    }
    $('#sourceIpNat').on('keyup', function() {
      resetIpNatBox("sourceIpNatErrorSpan", "sourceIpNat");
    });
    $('#destIpNat').on('keyup', function() {
      resetIpNatBox("destIpNatErrorSpan", "destIpNat");
    });
    $('#fromPort').on('keyup', function() {
      resetIpNatBox("internalPortErrorSpan", "fromPort");
    });
    $('#toPort').on('keyup', function() {
      resetIpNatBox("externalPortErrorSpan", "toPort");
    });
    /*reset the dialog form box*/
    function resetIpNatBox(errorSpan, natId) {
      //consoleLogMethodDetailsStart("configureNat.js", "resetIpNatBox()");
      if ($("#" + errorSpan).hasClass('hint--top')) {
        $("#" + errorSpan).removeAttr("data-hint");
        $("#" + errorSpan).removeClass("hint--top");
        $("#" + natId).removeClass("highlightTextBox");
      }
      //consoleLogMethodDetailsEnd("configureNat.js", "resetIpNatBox()");
    }
    function resetNatForm() {
      //consoleLogMethodDetailsStart("configureNat.js", "resetNatForm()");
      resetIpNatBox("sourceIpNatErrorSpan", "sourceIpNat");
      resetIpNatBox("destIpNatErrorSpan", "destIpNat");
      resetIpNatBox("internalPortErrorSpan", "fromPort");
      resetIpNatBox("externalPortErrorSpan", "toPort");
      //consoleLogMethodDetailsEnd("configureNat.js", "resetNatForm()");
    }
    $("#staticNatDialog").dialog({
      autoOpen: false,
      height: 340,
      width: 720,
      modal: true,
      //buttons: {
      //  Ok: function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            //consoleLogMethodDetailsStart("configureNat.js", "(#\"staticNatDialog\").dialog().ok.click()");

            if (staticNatValid()) {
              $("#staticNatDialog").dialog("close");
              blockPage("Applying");
              setTimeout(function() {
                var intIp, extIp, intPort, extPort, arr, editIntIp, editExtIp, editEnablePort = false, delarr, delArray, editArray, portVal, isPreview = false;
                arr = $('#staticNatForm').formToArray();
                intIp = $('#sourceIpNat').val();
                extIp = $('#destIpNat').val();
                intPort = $('#fromPort').val();
                extPort = $('#toPort').val();
                try {
                  if (addNAT) {
                    if (includeWildIPaddress(extIp) === true) {
                      if ($('#enablePort').attr('checked')) {
                        if ($('#tcp').attr('checked')) {
                          arr = [{name: "port", value: "tcp"},
                                 {name: "internalIP", value: intIp},
                                 {name: "internalPort", value: intPort},
                                 {name: "externalIP", value: extIp},
                                 {name: "externalPort", value: extPort}];
                          response = deviceCommunicator.configureCommandsFromTemplate2("addPort.txt", arr, isPreview);

                        } else if ($('#udp').attr('checked')) {
                          arr = [{name: "port", value: "udp"},
                                 {name: "internalIP", value: intIp},
                                 {name: "internalPort", value: intPort},
                                 {name: "externalIP", value: extIp},
                                 {name: "externalPort", value: extPort}];
                          response = deviceCommunicator.configureCommandsFromTemplate2("addPort.txt", arr, isPreview);
                        } else {
                          var a = ["tcp", "udp"];
                          for (var i = 0; i < a.length; i++) {
                            arr = [{name: "port", value: a[i]},
                                   {name: "internalIP", value: intIp},
                                   {name: "internalPort", value: intPort},
                                   {name: "externalIP", value: extIp},
                                   {name: "externalPort", value: extPort}];
                            response = deviceCommunicator.configureCommandsFromTemplate2("addPort.txt", arr, isPreview);
                          }
                        }
                      } else {
                        arr = [{name: "internalIP", value: intIp},
                               {name: "externalIP", value: extIp}];
                        response = deviceCommunicator.configureCommandsFromTemplate2("addNAT.txt", arr, isPreview);
                      }
                    } else {
                      if ($('#enablePort').attr('checked')) {
                        if ($('#tcp').attr('checked')) {
                          arr = [{name: "port", value: "tcp"},
                                 {name: "internalIP", value: intIp},
                                 {name: "internalPort", value: intPort},
                                 {name: "externalIP", value: extIp},
                                 {name: "externalPort", value: extPort}];
                          response = deviceCommunicator.configureCommandsFromTemplate2("addNATwithPort.txt", arr, isPreview);

                        } else if ($('#udp').attr('checked')) {
                          arr = [{name: "port", value: "udp"},
                                 {name: "internalIP", value: intIp},
                                 {name: "internalPort", value: intPort},
                                 {name: "externalIP", value: extIp},
                                 {name: "externalPort", value: extPort}];
                          response = deviceCommunicator.configureCommandsFromTemplate2("addNATwithPort.txt", arr, isPreview);
                        } else {
                          var a = ["tcp", "udp"];
                          for (var i = 0; i < a.length; i++) {
                            arr = [{name: "port", value: a[i]},
                                   {name: "internalIP", value: intIp},
                                   {name: "internalPort", value: intPort},
                                   {name: "externalIP", value: extIp},
                                   {name: "externalPort", value: extPort}];
                            response = deviceCommunicator.configureCommandsFromTemplate2("addNATwithPort.txt", arr, isPreview);
                          }
                        }
                      } else {
                        arr = [{name: "internalIP", value: intIp},
                               {name: "externalIP", value: extIp}];
                        response = deviceCommunicator.configureCommandsFromTemplate2("addNATInterface.txt", arr, isPreview);
                      }
                    }
                  } else {
                    editIntIp = $('#natTable tr.hilite').find("td").eq(1).text();
                    editExtIp = $('#natTable tr.hilite').find("td").eq(2).text();
                    editEnablePort = $('#natTable tr.hilite').find("td").eq(3).text();
                    editfromPortValue = $('#natTable tr.hilite').find("td").eq(4).text();
                    edittoPortValue = $('#natTable tr.hilite').find("td").eq(5).text();
                    var editExtValue = false, editExtInput = false;
                    var xml = deviceCommunicator.getExecCmdOutput("show running-config | include ip nat inside");
                    var reg = new RegExp("[,\\n]");
                    var rows, rowsOne, rowsOneSplit, count = 0, currentPort;
                    rows = xml.split(reg);
                    for (var i = 0; i < rows.length; i++) {
                      //var internalPort = "", externalPort = "";
                      rowsOne = rows[i].split(reg);
                      rowsOneSplit = rowsOne[0].split(' ');
                      if (rowsOneSplit.length > 9) {
                        if (includeWildIPaddress(editExtIp) === true) {
                          if ((rowsOneSplit[6] == editIntIp) &&
                              (rowsOneSplit[8] == editExtIp) &&
                              (rowsOneSplit[7] == editfromPortValue) &&
                              (rowsOneSplit[9] == edittoPortValue)) {
                            editfromPortValue = rowsOneSplit[7];
                            edittoPortValue = rowsOneSplit[9];
                            editinternalIP = rowsOneSplit[6];
                            editexternalIP = rowsOneSplit[8];
                            count = count + 1;
                            if (count > 1) {
                              currentPort = ["tcp", "udp"];
                            } else {
                              if ((rowsOneSplit[5] == "tcp") || (rowsOneSplit[5] == "udp")) {
                                currentPort = rowsOneSplit[5];
                              }
                            }
                          }
                        } else {
                          if ((rowsOneSplit[6].trim() == editIntIp) &&
                              (rowsOneSplit[9].trim() == editExtIp) &&
                              (rowsOneSplit[7].trim() == editfromPortValue) &&
                              (rowsOneSplit[10].trim() == edittoPortValue)) {
                            editfromPortValue = rowsOneSplit[7];
                            edittoPortValue = rowsOneSplit[10];
                            editinternalIP = rowsOneSplit[6];
                            editexternalIP = rowsOneSplit[9];
                            count = count + 1;
                            if (count > 1) {
                              currentPort = ["tcp", "udp"];
                            } else {
                              if ((rowsOneSplit[5].trim() == "tcp") || (rowsOneSplit[5].trim() == "udp")) {
                                currentPort = rowsOneSplit[5];
                              }
                            }
                          }
                        }

                      }
                    }
                    if ($('#tcp').is(":checked")) {
                      portVal = "tcp";
                    }
                    if ($('#udp').is(":checked")) {
                      portVal = "udp";
                    }
                    if ($('#none').is(":checked")) {
                      portVal = ["tcp", "udp"];
                    }
                    editEnablePort = editEnablePort.substring(0, 4);
                    if (includeWildIPaddress(editExtIp) === true) {
                      editExtValue = true;
                    }
                    if (includeWildIPaddress(extIp) === true) {
                      editExtInput = true;
                    }
                    if (editEnablePort == "true") {
                      if (editExtValue === true) {
                        deleteNATCommand = "deleteOldNAT.txt";
                      } else {
                        deleteNATCommand = "deleteNATIntwithPort.txt";
                      }
                      if (count > 1) {
                        for (var i = 0; i < currentPort.length; i++) {
                          delArray = [{name: "port", value: currentPort[i]},
                                      {name: "internalIP", value: editinternalIP},
                                      {name: "internalPort", value: editfromPortValue},
                                      {name: "externalIP", value: editexternalIP},
                                      {name: "externalPort", value: edittoPortValue}];
                          deviceCommunicator.configureCommandsFromTemplate2(deleteNATCommand, delArray, isPreview);
                        }
                      } else {
                        delArray = [{name: "port", value: currentPort},
                                    {name: "internalIP", value: editinternalIP},
                                    {name: "internalPort", value: editfromPortValue},
                                    {name: "externalIP", value: editexternalIP},
                                    {name: "externalPort", value: edittoPortValue}];
                        deviceCommunicator.configureCommandsFromTemplate2(deleteNATCommand, delArray, isPreview);
                      }
                      if ($('#enablePort').attr('checked')) {
                        if (editExtInput === true) {
                          addNATCommand = "addPort.txt";
                        } else {
                          addNATCommand = "addNATwithPort.txt";
                        }
                        if ((portVal == "tcp") || (portVal == "udp")) {
                          editArray = [{name: "port", value: portVal},
                                       {name: "internalIP", value: intIp},
                                       {name: "internalPort", value: intPort},
                                       {name: "externalIP", value: extIp},
                                       {name: "externalPort", value: extPort}];
                          deviceCommunicator.configureCommandsFromTemplate2(addNATCommand, editArray, isPreview);
                        } else {
                          for (var i = 0; i < portVal.length; i++) {
                            editArray = [{name: "port", value: portVal[i]},
                                         {name: "internalIP", value: intIp},
                                         {name: "internalPort", value: intPort},
                                         {name: "externalIP", value: extIp},
                                         {name: "externalPort", value: extPort}];
                            deviceCommunicator.configureCommandsFromTemplate2(addNATCommand, editArray, isPreview);
                          }
                        }
                      } else {
                        if (editExtInput === true) {
                          addNATCommand = "addNAT.txt";
                        } else {
                          addNATCommand = "addNATInterface.txt";
                        }
                        editArray = [{name: "internalIP", value: intIp},
                                     {name: "externalIP", value: extIp}];
                        deviceCommunicator.configureCommandsFromTemplate2(addNATCommand, editArray, isPreview);
                      }


                    } else {
                      if (editExtValue === true) {
                        deleteNATCommand = "deleteNATVal.txt";
                      } else {
                        deleteNATCommand = "deleteNATInterface.txt";
                      }
                      delarr = [{name: "editinternalIP", value: editIntIp},
                                {name: "editexternalIP", value: editExtIp}];
                      response = deviceCommunicator.configureCommandsFromTemplate2(deleteNATCommand, delarr, isPreview);
                      if ($('#enablePort').attr('checked')) {
                        if (editExtInput === true) {
                          addNATCommand = "addPort.txt";
                        } else {
                          addNATCommand = "addNATwithPort.txt";
                        }
                        if ((portVal == "tcp") || (portVal == "udp")) {
                          editArray = [{name: "port", value: portVal},
                                       {name: "internalIP", value: intIp},
                                       {name: "internalPort", value: intPort},
                                       {name: "externalIP", value: extIp},
                                       {name: "externalPort", value: extPort}];
                          deviceCommunicator.configureCommandsFromTemplate2(addNATCommand, editArray, isPreview);
                        } else {
                          for (var i = 0; i < portVal.length; i++) {
                            editArray = [{name: "port", value: portVal[i]},
                                         {name: "internalIP", value: intIp},
                                         {name: "internalPort", value: intPort},
                                         {name: "externalIP", value: extIp},
                                         {name: "externalPort", value: extPort}];
                            deviceCommunicator.configureCommandsFromTemplate2(addNATCommand, editArray, isPreview);
                          }
                        }
                      } else {
                        if (editExtInput === true) {
                          addNATCommand = "addNAT.txt";
                        } else {
                          addNATCommand = "addNATInterface.txt";
                        }
                        editArray = [{name: "internalIP", value: intIp},
                                     {name: "externalIP", value: extIp}];
                        response = deviceCommunicator.configureCommandsFromTemplate2(addNATCommand, editArray, isPreview);
                      }
                      //delarr = [{name: "editinternalIP", value: editIntIp},
                      //          {name: "editexternalIP", value: editExtIp}];
                      //response = deviceCommunicator.configureCommandsFromTemplate2("deleteNATVal.txt", delarr, isPreview);
                    }
                  }
                  refreshNAT();
                  $.unblockUI();
                  deviceCommunicator.doWriteMemory();
                } catch (error) {
                  $("#staticNatDialog").dialog("open");
                  //$('#staticNatErrorMessage').html(error.errorResponse);
                  //$('#staticNatErrorMessage').html(error.errorResponse);

                  if ((error.errorResponse).indexOf("Invalid input detected") == 0) {
                    $('#staticNatErrorMessage').html($.i18n.prop("invalidInputDetected"));
                  }
                  else if ((error.errorResponse).indexOf("Specify non-empty resource name") == 0) {
                    $('#staticNatErrorMessage').html($.i18n.prop("errSpecifyOne"));
                  }
                  else if ((error.errorResponse).indexOf("Specify non-empty interface name") == 0) {
                    $('#staticNatErrorMessage').html($.i18n.prop("errSpecifyTwo"));
                  }
                  else {
                    $('#staticNatErrorMessage').html(error.errorResponse);
                  }
                  $('#staticNatError').show();
                  $.unblockUI();
                  //consoleLogMethodDetailsEndWithError("configureNat.js", "(#\"staticNatDialog\").dialog().ok.click()", error);

                  return false;
                }
              }, 1000);
            }
            //},
            //Cancel: function(){
          }
        }, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
          }
          //},
        }],
      close: function() {
        $(this).dialog("close");
      }

    });

    $("#selectaRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      //buttons: {
      //  "Ok": function (e) {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function(e) {
            $(this).dialog("close");
            e.preventDefault();
          }
          //},
        }],
      close: function() {

      }
    });

    $("#deleteUTMRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      //buttons: {
      //  "Ok": function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
            if (natFlag === true) {
              $("#deleteNat").trigger("click");
            }
            //},
          }
        }, {
          //"Cancel": function () {
          text: $.i18n.prop("cancel"),
          click: function() {
            $(this).dialog("close");
            //},
            //},
          }
        }],
      close: function() {

      }
    });

    $("#addNat")
      .button()
      .click(function(e) {
        //consoleLogMethodDetailsStart("configureNat.js", "(#\"addNat\").button().click()");

        addNAT = true;
        $("#staticNatDialog").dialog("open");
        //$("#staticNatDialog").dialog("option", "title","Add Static NAT");
        $("#staticNatDialog").dialog("option", "title", $.i18n.prop("staticNatDialog"));
        $('#staticNatError').hide();
        $('#staticNatForm').resetForm();
        resetNatForm();
        $("#l1").hide();
        $("#l3").hide();
        $("#enablePort").attr('checked', false);

        $('#sourceIpNat').val('');
        $('#destIpNat').val('');
        $('#fromPort').val('');
        $('#toPort').val('');
        e.preventDefault();
        //consoleLogMethodDetailsEnd("configureNat.js", "(#\"addNat\").button().click()");
      });
    /* edit NAT data*/
    $("#editNat")
      .button()
      .click(function(e) {
        //consoleLogMethodDetailsStart("configureNat.js", "(#\"editNat\").button().click()");
        var internalIp, externalIp, count = 0, intPortValue = "", extPortValue = "";
        //var editDHCP, td;
        $td = $('#natTable tr.hilite').closest('tr').children('td');
        if ($td.length !== 0) {
          $("#staticNatDialog").dialog("open");
          //$("#staticNatDialog").dialog("option", "title","Edit Static NAT");
          $("#staticNatDialog").dialog("option", "title", $.i18n.prop("staticNatDialogEdit"));
          $('#staticNatError').hide();
          $('#staticNatForm').resetForm();
          resetNatForm();
          addNAT = false;
          editNAT = true;
          $("#l1").hide();
          $("#l3").hide();
          $("#enablePort").attr('checked', false);
          internalIp = $('#natTable tr.hilite').find("td").eq(1).text();
          externalIp = $('#natTable tr.hilite').find("td").eq(2).text();
          enablePort = $('#natTable tr.hilite').find("td").eq(3).text();
          intPortValue = $('#natTable tr.hilite').find("td").eq(4).text();
          extPortValue = $('#natTable tr.hilite').find("td").eq(5).text();
          $('#sourceIpNat').val(internalIp);
          $('#destIpNat').val(externalIp);
          if ((intPortValue == "") || (intPortValue == undefined) || (intPortValue == null)) {
            $('#fromPort').val("");
          } else {
            $('#fromPort').val(intPortValue);
          }
          if ((extPortValue == "") || (extPortValue == undefined) || (extPortValue == null)) {
            $('#toPort').val("");
          } else {
            $('#toPort').val(extPortValue);
          }
          var xml = deviceCommunicator.getExecCmdOutput("show running-config | include ip nat inside");
          var reg = new RegExp("[,\\n]");
          var rows, rowsOne, rowsOneSplit;
          rows = xml.split(reg);
          for (var i = 0; i < rows.length; i++) {
            rowsOne = rows[i].split(reg);
            rowsOneSplit = rowsOne[0].split(' ');
            if (rowsOneSplit.length > 9) {
              if (includeWildIPaddress(externalIp) === true) {
                if ((rowsOneSplit[6] == internalIp) &&
                    (rowsOneSplit[8] == externalIp) &&
                    (rowsOneSplit[7] == intPortValue) &&
                    (rowsOneSplit[9] == extPortValue)) {
                  $("#l1").show();
                  $("#l3").show();
                  $("#enablePort").attr('checked', true);
                  count = count + 1;
                  if ((rowsOneSplit[5] == "tcp") ||
                      (rowsOneSplit[5] == "udp")) {
                    var currentPort = rowsOneSplit[5];
                  }
                }
              } else {
                if ((rowsOneSplit[6].trim() == internalIp) &&
                    (rowsOneSplit[9].trim() == externalIp) &&
                    (rowsOneSplit[7].trim() == intPortValue) &&
                    (rowsOneSplit[10].trim() == extPortValue)) {
                  $("#l1").show();
                  $("#l3").show();
                  $("#enablePort").attr('checked', true);
                  count = count + 1;
                  if ((rowsOneSplit[5] == "tcp") || (rowsOneSplit[5] == "udp")) {
                    var currentPort = rowsOneSplit[5];
                  }
                }
              }
            }
          }
          if (count > 1) {
            $("#none").attr('checked', true);
          } else {
            if (currentPort == "tcp") {
              $("#tcp").attr('checked', true);
            }
            if (currentPort == "udp") {
              $("#udp").attr('checked', true);
            }
          }
          enablePort = enablePort.substring(0, 4);
          if (enablePort == "true") {
            $("#l1").show();
            $("#l3").show();
            $("#enablePort").attr('checked', true);
          }
        } else {
          $("#selectaRow").dialog("open");
        }
        e.preventDefault();
        //consoleLogMethodDetailsEnd("configureNat.js", "(#\"editNat\").button().click()");
        return false;
      });

    $(".natEdit").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerEditNat($this)
    });
    $('#natTable tbody tr').live('dblclick', function() {
      $this = $(this).closest("tr");
      triggerEditNat($this)
    });
    //to trigger editNat button
    function triggerEditNat($this) {
      var natChkbox = $this.find('input:checkbox').eq(0);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      $('#natTable input:checkbox').removeAttr('checked');
      natChkbox.prop('checked', true);
      enableDisableButton("natTable", "addNat");
      $("#editNat").trigger("click");
    }

    /*delete nat data by clicking delete icon*/
    $(".natDelete").live('click', function(e) {
      natFlag = true;
      $this = $(this).closest("tr");
      var natChkbox = $this.find('input:checkbox').eq(0);
      $this.addClass("hilite");
      $this.siblings().removeClass('hilite');
      natChkbox.prop('checked', true);
      enableDisableButton("natTable", "addNat");
      //$("#deleteutmRowStr").text("This Static NAT will be deleted. Do you want to continue?")
      $("#deleteutmRowStr").text($.i18n.prop("deleteutmRowStr"));
      $("#deleteUTMRow").dialog("open");
      //$("#deleteNat").trigger("click");

    });
    $("#deleteNat")
      .button()
      .click(function(e) {
        //consoleLogMethodDetailsStart("configureNat.js", "(#\"deleteNat\").button().click()");
        var selectedRows = $("#natTable tbody input:checkbox:checked").length;
        $td = $('#natTable tr.hilite').closest('tr').children('td');
        if (selectedRows == 0) {
          $.unblockUI();
          $("#selectaRow").dialog("open");
          //$("#userSelectRowStr").text("Select a Row to Edit/Delete.");
          $("#userSelectRowStr").text($.i18n.prop("selectRowStr"));
        } else {
          blockPage("Applying");
          var internalIp = [], externalIP = [], portVal = [], delfromPort = [], deltoPort = [], delintIp = [];
          var delextIp = [], count = [], isPreview = false, intlPort = [], extlPort = [];
          var natIndex = 0;
          setTimeout(function() {
            if (selectedRows > 1 && natFlag === false) {
              $("#natTable tbody input:checkbox").each(function() {
                if (this.checked) {
                  $td = $(this).closest("tr").children('td');
                  internalIp[natIndex] = $td.eq(1).text();
                  externalIP[natIndex] = $td.eq(2).text();
                  portVal[natIndex] = $td.eq(3).text();
                  intlPort[natIndex] = $td.eq(4).text();
                  extlPort[natIndex] = $td.eq(5).text();
                  count[natIndex] = 0;
                  natIndex++;
                }
              });
            } else {
              internalIp[natIndex] = $td.eq(1).text();
              externalIP[natIndex] = $td.eq(2).text();
              portVal[natIndex] = $td.eq(3).text();
              intlPort[natIndex] = $td.eq(4).text();
              extlPort[natIndex] = $td.eq(5).text();
              count[natIndex] = 0;
              natIndex++;
            }
            var xml = deviceCommunicator.getExecCmdOutput("show running-config | include ip nat inside");
            var reg = new RegExp("[,\\n]");
            var rows, rowsOne, rowsOneSplit, currentPort = [], found = -1;
            rows = xml.split(reg);
            for (var i = 0; i < rows.length; i++) {
              rowsOne = rows[i].split(reg);
              rowsOneSplit = rowsOne[0].split(' ');
              if (rowsOneSplit.length > 9) {
                found = $.inArray(rowsOneSplit[6], internalIp);
                if (found !== -1) {
                  if (includeWildIPaddress(externalIP[found]) === true) {
                    if ((rowsOneSplit[8].trim() == externalIP[found]) && (rowsOneSplit[7].trim() == intlPort[found]) && (rowsOneSplit[9].trim() == extlPort[found])) {
                      delfromPort[found] = rowsOneSplit[7];
                      deltoPort[found] = rowsOneSplit[9];
                      delintIp[found] = rowsOneSplit[6];
                      delextIp[found] = rowsOneSplit[8];
                      count[found] = count[found] + 1;
                      if (count[found] > 1) {
                        currentPort[found] = ["tcp", "udp"];
                      } else {
                        if ((rowsOneSplit[5] == "tcp") || (rowsOneSplit[5] == "udp")) {
                          currentPort[found] = [rowsOneSplit[5]];
                        }
                      }
                    }
                  } else {
                    if ((rowsOneSplit[9].trim() == externalIP[found]) && (rowsOneSplit[7].trim() == intlPort[found]) && (rowsOneSplit[10].trim() == extlPort[found])) {
                      delfromPort[found] = rowsOneSplit[7];
                      deltoPort[found] = extlPort[found];
                      delintIp[found] = rowsOneSplit[6];
                      delextIp[found] = rowsOneSplit[9];
                      count[found] = count[found] + 1;
                      if (count[found] > 1) {
                        currentPort[found] = ["tcp", "udp"];
                      } else {
                        if ((rowsOneSplit[5] == "tcp") || (rowsOneSplit[5] == "udp")) {
                          currentPort[found] = [rowsOneSplit[5]];
                        }
                      }
                    }
                  }
                }
              }
            }
            for (var i = 0; i < portVal.length; i++) {
              var deleteNATCommand;
              portVal[i] = portVal[i].substring(0, 4);
              if (portVal[i] == "true") {
                if (includeWildIPaddress(delextIp[i]) === true) {
                  deleteNATCommand = "deleteOldNAT.txt";
                } else {
                  deleteNATCommand = "deleteNATIntwithPort.txt";
                }
                if (currentPort[i].length > 1) {
                  for (var j = 0; j < currentPort[i].length; j++) {
                    delArray = [{name: "port", value: currentPort[i][j]},
                                {name: "internalIP", value: delintIp[i]},
                                {name: "internalPort", value: delfromPort[i]},
                                {name: "externalIP", value: delextIp[i]},
                                {name: "externalPort", value: deltoPort[i]}];
                    deviceCommunicator.configureCommandsFromTemplate2(deleteNATCommand, delArray, isPreview);
                  }
                } else {
                  delArray = [{name: "port", value: currentPort[i]},
                              {name: "internalIP", value: delintIp[i]},
                              {name: "internalPort", value: delfromPort[i]},
                              {name: "externalIP", value: delextIp[i]},
                              {name: "externalPort", value: deltoPort[i]}];
                  deviceCommunicator.configureCommandsFromTemplate2(deleteNATCommand, delArray, isPreview);
                }
              } else {
                if (includeWildIPaddress(externalIP[i]) === true) {
                  deleteNATCommand = "deleteNATVal.txt";
                } else {
                  deleteNATCommand = "deleteNATInterface.txt";
                }
                arr = [{name: "editinternalIP", value: internalIp[i]},
                       {name: "editexternalIP", value: externalIP[i]}];
                deviceCommunicator.configureCommandsFromTemplate2(deleteNATCommand, arr, false);
              }
            }
            natFlag = false;
            refreshNAT();
            $.unblockUI();
            deviceCommunicator.doWriteMemory();
          }, 1000);
        }
        e.preventDefault();
        //consoleLogMethodDetailsEnd("configureNat.js", "(#\"deleteNat\").button().click()");

        return false;
      });

    $('#enablePort').on('click', function() {
      if ($("#enablePort").is(':checked')) {
        $("#enablePort").attr('checked', true);
        $("#fromPort").addClass("required");
        $("#toPort").addClass("required");
        $("#l1").show();
        $("#l3").show();
      } else {
        $("#enablePort").attr('checked', false);
        $("#l1").hide();
        $("#l3").hide();
      }
    });
    //consoleLogMethodDetailsEnd("configureNat.js", "configNatLoading()");

  }

  return {
    configNatLoading: configNatLoading,
    loadStaticNat: loadStaticNat
  };
}());
var dashboardUI = {
  dashboardSettings: {
    columns: '.column',
    widgetSelector: '.widget',
    handleSelector: '.widget-head',
    contentSelector: '.widget-content',
    widgetOptions: {
      removable: true,
      collapsible: true,
      editable: true,
      maximize: true,
      excel: true,
      colorClasses: ['color-yellow', 'color-red', 'color-blue', 'color-white', 'color-orange', 'color-green']
    }
  },
  dashboardLoad: function(colClassname, ConnectClassID, firstColumn, secondColumn) {
    //var dashboardUI = this,
    var dashboardSettings = this.dashboardSettings;
    dashboardSettings.columns = colClassname;
    var callinit = 1;
    $(".hidden").each(function() {
      $(this).show();
    });
    $(".hiddenlistitem").each(function() {
      $(this).remove();
    });
    $(".trashDiv").hide();
    $(dashboardSettings.handleSelector, $(dashboardSettings.columns)).each(function() {
      if ($(this).parent().hasClass("onloadhide")) {
        $(this).parent().hide();
      }
      else {
        $(this).parent().show();
      }

      if ($(this).find("a").hasClass("collapse")) {
        $(".collapse").each(function() {
          $(this).css({
            backgroundPosition: ''
          });
        });
        callinit = 0;
        return false;
      }
    });
    $(dashboardSettings.contentSelector, $(dashboardSettings.columns)).each(function() {
      if ($(this).parent().hasClass("onloadhide")) {
        $(this).parent().hide();
      }
      else {
        $(this).parent().show();
      }
      $(this).show();
    });
    if (callinit == 1) {
      //code
      this.addDashboardWidget(colClassname, ConnectClassID, firstColumn, secondColumn);
      // $("#dashboardDiv").append("");
    }
    $(ConnectClassID).sortable({
      cursor: 'move',
      connectWith: colClassname
    }).disableSelection();
  },
  getDashboardSettings: function(id) {
    //var $ = this.jQuery,
    this.dashboardSettings.widgetOptions.removable = true;
    this.dashboardSettings.widgetOptions.maximize = true;
    this.dashboardSettings.widgetOptions.editable = true;
    this.dashboardSettings.widgetOptions.collapsible = true;
    this.dashboardSettings.widgetOptions.excel = true;
    tempDashboardSettings = this.dashboardSettings;
    if (Boolean.parse($("#" + id).attr("removable")) === false) {
      //code
      tempDashboardSettings.widgetOptions.removable = false;
    }
    if (Boolean.parse($("#" + id).attr("maximize")) === false) {
      tempDashboardSettings.widgetOptions.maximize = false;
    }
    if (Boolean.parse($("#" + id).attr("editable")) === false) {
      //code
      tempDashboardSettings.widgetOptions.editable = false;
    }
    if (Boolean.parse($("#" + id).attr("collapsible")) === false) {
      //code
      tempDashboardSettings.widgetOptions.collapsible = false;
    }
    if (Boolean.parse($("#" + id).attr("excel")) === false) {
      //code
      tempDashboardSettings.widgetOptions.excel = false;
    }
    return tempDashboardSettings.widgetOptions;
  },
  addDashboardWidget: function(colClassname, ConnectClassID, firstColumn, secondColumn) {

    var dashboardUI = this,
      dashboardSettings = this.dashboardSettings;
    dashboardSettings.columns = colClassname;
    //var styleProps;
    $(dashboardSettings.widgetSelector, $(dashboardSettings.columns)).each(function() {
      var thisWidgetDashboardSettings = dashboardUI.getDashboardSettings(this.id);
      if (thisWidgetDashboardSettings.removable) {
        $('<a href="javascript:void(0)" class="remove">CLOSE</a>').mousedown(function(e) {
          e.stopPropagation();
        }).click(function() {
          $(this).parents(dashboardSettings.widgetSelector).animate({}, function() {
            $(this).parent().addClass('hidden');
            $(this).parent().slideUp(function() {
              var findli = 0, found = false, current = $(this);
              $("ul.trashDiv-ul").find('li').each(function(index) {
                findli = 1;
                if ($(this).attr("data-id") == current.find('li').attr('data-id')) {
                  found = true;
                }
              });
              if (findli == 0) {
                //code
                $(".trashDiv").slideDown(500);
              }
              if (!found) {
                $("<li class='hiddenlistitem' data-id='" + $(this).find('li').attr('data-id') +
                  "'><center><a href='javascript:void(0)' class='" + $(this).find('li').attr('imageclass') +
                  "  hint--bottom' data-hint='" + $(this).find('.widget-head h3').text() + "'></a></center></li>")
                  .appendTo($(".trashDiv").find('ul.trashDiv-ul'));
              }

            });
          });
          return false;
        }).appendTo($(dashboardSettings.handleSelector, this));
      }
      if (thisWidgetDashboardSettings.maximize) {
        $('<a href="javascript:void(0)" class="maximize">Maximize</a>').mousedown(function(e) {
          e.stopPropagation();
        }).click(function() {
          if ($(this).parent().parent().parent().find('li').hasClass("MaximizedDiv")) {
            var divid = $(this).parent().parent().parent().attr("class").split(/\s/)[0];
            $(this).parent().parent().parent().find('.widget').removeClass("MaximizedDiv");
            $(this).parent().parent().parent().find('.widget').find('.remove').show();
            $(this).parent().parent().parent().find('.widget').find('.edit').show();
            $(this).parent().parent().parent().find('.widget').animate({
              width: HeadSetting + "px"
            }, 10);
            $(this).parent().parent().parent().find('.widget-content').animate({
              height: contentSetting + "px"
            }, 100, function() {
              utmDashboard.redrawGraph(divid, false);
            });
            var countli = 0;
            var temp = $(this);
            $(".hidden").each(function() {
              if (temp.attr('data-id') == $(this).find('li').attr('data-id')) {
                $(this).show();
                temp.remove();
              }
            });
            $(".hiddenlistitem").each(function() {
              countli = 1;
            });
            if (countli == 0) {
              //code
              $(".trashDiv").slideUp(500);
            } else {
              $(".trashDiv").slideDown(500);
            }
            $(dashboardSettings.handleSelector, $(dashboardSettings.columns)).each(function() {
              if (divid != $(this).parent().parent().attr('class')) {
                if ($(this).parent().parent().find('.widget').hasClass("onloadhide")) {
                  isEmptyBlock = true;
                } else {
                  $(this).parent().parent().find('.widget').fadeIn(100);
                }
              }
            });
            $("#" + firstColumn).show();
            $("#" + secondColumn).show();
          } else {
            //var contentdiv = $(this).parent().parent().find('.widget-content');
            //var contentHead = $(this).parent().parent().find('h3');
            $(this).parent().parent().parent().find('.widget').find('.remove').hide();
            $(this).parent().parent().parent().find('.widget').find('.edit').hide();
            //var contentdiv = $(this).parent().parent();
            var divid = $(this).parent().parent().parent().attr("class").split(/\s+/)[0];
            HeadSetting = parseInt($(this).parent().parent().parent().find('.widget').css("width").replace('px', ''));
            contentSetting = parseInt($(this).parent().parent().parent().find('.widget-content').css("height").replace('px', ''));
            // $('.customSettingHead').css({width:parseInt($(this).parent().parent().parent().find('li').css('width').replace('px',''))+parseInt($(this).parent().parent().parent().find('li').css('width').replace('px',''))+10 +"px"});
            $(this).parent().parent().parent().find('.widget').addClass("MaximizedDiv");
            $(dashboardSettings.handleSelector, $(dashboardSettings.columns)).each(function() {
              if (divid != $(this).parent().parent().attr('class').split(/\s+/)[0]) {
                $(this).parent().parent().find('.widget').fadeOut(100);
              }
            });
            $(this).parent().parent().parent().find('.widget').animate({
              width: parseInt($(this).parent().parent().parent().find('.widget').css('width').replace('px', '')) +
              parseInt($(this).parent().parent().parent().find('.widget').css('width').replace('px', '')) + 10 + "px"
            }, 500);
            $(this).parent().parent().parent().find('.widget-content').animate({
              height: parseInt($(this).parent().parent().parent().find('.widget-content').css('height').replace('px', '')) +
              parseInt($(this).parent().parent().parent().find('.widget-content').css('height').replace('px', '')) + 10 + "px"
            }, 500, function() {
              utmDashboard.redrawGraph(divid, true);
            });
            if ($(this).parent().parent().parent().parent().attr('id') == firstColumn) {
              $('#' + secondColumn).hide();
            } else {
              $('#' + firstColumn).hide();
            }
            $(".trashDiv").hide();
          }
        }).appendTo($(dashboardSettings.handleSelector, this));
      }
      if (thisWidgetDashboardSettings.editable) {
        $('<a href="javascript:void(0)" class="edit">EDIT</a>').mousedown(function(e) {
          e.stopPropagation();
        }).click(function() {
          var parentid = $(this)
            .parents(dashboardSettings.widgetSelector)
            .find('.themeDiv');
          $(dashboardSettings.widgetSelector, $(dashboardSettings.columns)).each(function() {
            if ($(this).find('.themeDiv') != parentid) {
              $(this).find('.themeDiv').slideUp();
            }
          });
          // alert();
          if ($(this)
            .parents(dashboardSettings.widgetSelector)
            .find('.themeDiv').css("display") == "none") {
            var position = $(this).position();
            $('.themeDiv').css({
              left: position.left - 100 + "px"
            });
            $('.themeDiv').css({
              top: position.top + 10 + "px"
            });
            $(this)
              .parents(dashboardSettings.widgetSelector)
              .find('.themeDiv').slideDown().show();
            // return false;
          } else {
            $(this)
              .parents(dashboardSettings.widgetSelector)
              .find('.themeDiv').slideUp();
          }
        }).appendTo($(dashboardSettings.handleSelector, this));
        $('<div class="themeDiv"><div><span>Set Time (MM:SS)</span></div>')
          .append((function() {
            var colorList = '<div class="themeColorBox">';
            // $(thisWidgetDashboardSettings.colorClasses).each(function () {
            //   colorList += '<li class="' + this + '"/>';
            //});
            //return colorList + '<input class="setTimeInterval validatetimer1" maxlength="5" type="text"/></ul>';
            return colorList + '<select id="timeInterval"><option value="5sec">5 sec</option><option value="10sec">10 sec</option></div>';
          })())
          .append('</div>')
          .insertAfter($(dashboardSettings.handleSelector, this));
      }

      if (thisWidgetDashboardSettings.excel) {
        $('<a href="javascript:void(0)" class="excel">excel</a>').mousedown(function(e) {
          e.stopPropagation();
        }).click(function() {

          tableToExcel('testTable', 'Example Excel Table');
          /* $(this).parents(dashboardSettings.widgetSelector).animate({}, function () {
           $(this).parent().addClass('hidden');
           $(this).parent().slideUp(function () {
           var findli = 0;
           $("ul#trashDiv-ul").find('li').each(function (index) {
           findli = 1;
           });
           if (findli == 0) {
           //code
           $(".trashDiv").slideDown(500);
           }
           $("<li class='hiddenlistitem' data-id='" + $(this).find('li').attr('data-id') + "'><center><a href='#' class='utmSprite hiddendiv  hint--bottom' data-hint='" + $(this).find('.widget-head h3').text() + "'></a></center></li>")
           .appendTo($(".trashDiv").find('ul#trashDiv-ul'));
           });
           });*/
          return false;
        }).appendTo($(dashboardSettings.handleSelector, this));
      }


      if (thisWidgetDashboardSettings.collapsible) {
        $('<a href="javascript:void(0)" class="collapse">COLLAPSE</a>').mousedown(function(e) {
          e.stopPropagation();
        }).toggle(function() {
          $(this).css({
            backgroundPosition: '-1716px 0px'
          })
            .parents(dashboardSettings.widgetSelector)
            .find(dashboardSettings.contentSelector).slideUp();
          return false;
        }, function() {
          $(this).css({
            backgroundPosition: ''
          })
            .parents(dashboardSettings.widgetSelector)
            .find(dashboardSettings.contentSelector).slideDown();
          return false;
        }).prependTo($(dashboardSettings.handleSelector, this));
      }
    });
    $('.themeDiv').each(function() {
      $('ul.themeColorBox li', this).click(function() {
        var colorStylePattern = /\bcolor-[\w]{1,}\b/,
          thisWidgetColorClass = $(this).parents(dashboardSettings.widgetSelector).attr('class').match(colorStylePattern)
        if (thisWidgetColorClass) {
          $(this).parents(dashboardSettings.widgetSelector)
            .removeClass(thisWidgetColorClass[0])
            .addClass($(this).attr('class').match(colorStylePattern)[0]);
        }
        $('.themeDiv').slideUp();
        return false;
      });
    });
  }
};
$(".hiddenlistitem").live("click", function() {
  var countli = 0;
  var temp = $(this);
  $(".hidden").each(function() {
    if (temp.attr('data-id') == $(this).find('li').attr('data-id')) {
      //code
      $(this).show();
      temp.remove();
      utmDashboard.redrawGraph($(this).attr("class").split(/\s/)[0], true);
      $(".hiddenlistitem").each(function() {
        if (temp.attr('data-id') == $(this).attr('data-id')) {
          $(this).remove();
        }
        $("text").each(function(e) {
          if ($(this).text() == "No Data Available.") {
            $(this).text($.i18n.prop("noDataAva"));
          }
        });
      });
    }
  });
  $(".hiddenlistitem").each(function() {
    countli = 1;
  });
  if (countli == 0) {
    //code
    $(".trashDiv").slideUp(500);
  }
});


$(".validatetimer1").live('keydown', function(event) {
  // Allow only backspace and delete
  //alert(event.KeyCode);
  //var key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
  //alert(event);
  if (event.keyCode == 46 || event.keyCode == 8) {
    // let it happen, don't do anything
    //event.preventDefault();
  } else {
    // Ensure that it is a number and stop the keypress
    if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) &&
        (event.keyCode < 96 || event.keyCode > 105) &&
        (event.keyCode < 8 || event.keyCode > 10) &&
        (event.keyCode < 36 || event.keyCode > 40)) {
      event.preventDefault();
    }
  }
});

$(".validatetimer1").live('keyup', function(event) {
  mask(this.value, this, '2', ':', event);
});
$(".validatetimer1").live('blur', function(event) {
  formTime(this);
});
Boolean.parse = function(str) {
  switch (str) {
    case "true":
      return true;
    case "false":
      return false;
  }
};


function mask(str, textbox, loc, delim, evt) {
  //var locs = loc.split(',');
  var regex = /^([0-9][0-9])|[01][0-9]:$/;
  //var regex1=/^(20|21|22|23|[01]\d|\d)(([:][0-5]\d){1,2})$/;
  var regex1 = /^(([0-9][0-9])|[01][0-9]\d|\d)(([:][0-5]\d){1,2})$/;
  //for (var i = 0; i <= locs.length; i++){
  var charCode = evt.which || evt.keyCode;
  if (charCode == 46 || charCode == 8) {
    // let it happen, don't do anything
    //event.preventDefault();
  } else {
    if (textbox.value.length <= loc) {
      for (var k = 0; k <= str.length; k++) {
        if (k == loc) {
          if (str.substring(k, k + 1) != delim) {
            str = str.substring(0, k) + delim + str.substring(k, str.length);
          }
        } else if (str.substring(0, 1) > 9) {
          if (str.substring(k, k + 1) != delim) {
            str = 0 + str.substring(k, str.length)
          }
        }
      }
    }
  }
  textbox.value = str;
  var test = textbox.value;
  var sele = test.split(':');
  if (sele[0] > 99) {
    textbox.value = '';
  }
  if (sele[0].length > 2) {
    textbox.value = '';
  }
  if (textbox.value.length == 3) {
    var matchArray = regex.test(textbox.value);
    if (!matchArray) {
      textbox.value = '';
    } else {
      textbox.value = str;
    }
  }
  if (textbox.value.length == 5) {
    var matchArray = regex1.test(textbox.value);
    if (!matchArray) {
      var newStr = str.substring(0, str.indexOf(":"));
      textbox.value = newStr + ':';
    } else {
      textbox.value = str;
    }
  }
}



var tableToExcel = (function() {
  var uri = 'data:application/vnd.ms-excel;base64,'
    , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" '+
                  'xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml>'+
                  '<x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name>'+
                  '<x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets>'+
                  '</x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
    , base64 = function(s) {
      return window.btoa(unescape(encodeURIComponent(s)))
    }
  , format = function(s, c) {
    return s.replace(/{(\w+)}/g, function(m, p) {
      return c[p];
    })
  }
  return function(table, name) {
    if (!table.nodeType){
      table = document.getElementById(table)
    }
    var ctx = {worksheet: name || 'Worksheet', table: table.innerHTML}
    window.location.href = uri + base64(format(template, ctx))
  }
})()

function formTime(textField) {
  // msg.style.display = "none";
  timeValue = parseInt(textField.value);
  var sec = textField.value;
  var newStr = sec.substring(sec.indexOf(":") + 1);
  var time = sec.substring(0, sec.indexOf(":"));

  if (textField.value.length < 5) {
    if ((timeValue > 10) && (textField.value.length == 4)) {
      if (newStr < 10) {
        textField.value = time + ":" + '0' + newStr;
      }
    } else if ((timeValue < 10) && (textField.value.length < 2)) {
      textField.value = '0' + textField.value + ':00';
    } else if ((timeValue > 9) && (timeValue <= 99)) {
      textField.value = textField.value + '00';
    } else if (textField.value.length < 1) {
      textField.value = '01:00';
    } else if (textField.value.length == 3) {
      textField.value = textField.value + '00';
    }
  }
}
var utmReport = (function() {
  function loadReport() {

  }

  function reportLoading() {
    validator = $('#utmForm').validate({
      ignore: ".ignore",
      errorElement: "div",
      errorPlacement: function(error, element) {
        //error.insertAfter(element.parent());
        error.insertAfter(element.parent());
      }
    });
    $('#reportFWSesssionCheck').on('click', function() {
      if ($("#reportFWSesssionCheck").is(':checked')) {
        $("#firewallsesionoption").show();

      } else {
        $("#firewallsesionoption").hide();
      }
    });
    $('#reportFWDropCheck').on('click', function() {
      if ($("#reportFWDropCheck").is(':checked')) {
        $("#firewallDropedoption").show();
      } else {
        $("#firewallDropedoption").hide();
      }
    });
    $("#downloadReport")
      .button()
      .click(function(e) {
        e.preventDefault();
      });
    $(".settingClick").click(function() {
      if ($("#sliderDiv").hasClass('activeMenu')) {
        $("#sliderDiv").hide();
        $("#sliderDiv").removeClass("activeMenu");
      } else {
        $("#sliderDiv").show();
        $("#sliderDiv").addClass("activeMenu");
      }

    });
    var slider = $('#slider'),
      tooltip = $('.SliderPercentage');
    //Call the Slider
    slider.slider({
      //Config
      value: 65,
      range: "min",
      step: 5,
      animate: true,
      orientation: "horizontal",
      start: function(event, ui) {
        tooltip.fadeIn('fast');
      },
      //Slider Event
      slide: function(event, ui) { //When the slider is sliding

        var value = slider.slider('value'),
          volume = $('.volume');
        tooltip.text(ui.value + "%"); //Adjust the valueaccordingly
      },
    });

  }
  return {
    reportLoading: reportLoading,
    loadReport: loadReport
  };
}());//var checkFlagACL=false;
var editPolicyFlag = false;
var editRowSelected;
var xmlGlobal, appArr = [], loadPorts = false;
var configureSecurityPolicy = (function() {
  var deletePolicyFlag = false;
  function getAllConfig(flag) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getAllConfig()");
    if (flag) {
      var xml;
      if (!shRunFormatLatest) {
        shRunFormatOutput = deviceCommunicator.getExecCmdOutput("show running-config | format");
        shRunFormatLatest = true;
      }
      xml = shRunFormatOutput;
      if (xml.indexOf("Building configuration...") !== -1) {
        xml = xml.substring(25, xml.length);
        xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
      }
      xml = xml.substring(xml.indexOf("<?xml"), xml.length);
      regEx = new RegExp("&#x03;", "g");
      xml = xml.replace(regEx, "");
      try {
        xmlGlobal = $.parseXML(xml);
      } catch (error) {
        xmlGlobal = xml;
      }

    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getAllConfig()");
    return xmlGlobal;
  }

  function checkNetworkIP(ip1, ip2) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkNetworkIP()");
    check = true;
    ip1Split = ip1.split(".");
    ip2Split = ip2.split(".");
    for (var i = 0; i < 4; i++) {
      if (parseInt(ip1Split[i]) > parseInt(ip2Split[i])) {
        check = false;
      }
      if (parseInt(ip1Split[i]) < parseInt(ip2Split[i])) {
        break;
      }
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkNetworkIP()");
    return check;
  }

  function checkNetworkIPRange(ip1, ip2, list) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkNetworkIPRange()");
    var flag = true;
    list.find('li').each(function() {
      if ($(this).text().trim().indexOf(" ") > -1) {
        var arr = $(this).text().trim().split(/\s+/);
        if ((checkNetworkIP(arr[0], ip1) && checkNetworkIP(ip1, arr[1])) ||
            (checkNetworkIP(arr[0], ip2) && checkNetworkIP(ip2, arr[1])) ||
            (checkNetworkIP(ip1, arr[0]) && checkNetworkIP(arr[0], ip2))) {
          flag = false;
        }
      }
    });
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkNetworkIPRange()");
    return flag;
  }

  function checkPortRange(port1, port2, list) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkPortRange()");
    var flag = true;
    list.find('li').each(function() {
      ////consoleLog($(this).text());
      if ($(this).text().indexOf(':') > -1 && $(this).text().trim().indexOf(" ") > -1) {
        var arr = $(this).text().trim().split(':')[1].split(/\s/);
        var range1 = parseInt(arr[0]);
        var range2 = parseInt(arr[1]);
        if ((port1 >= range1 && port1 <= range2) || (port2 >= range1 && port2 <= range2) || (range1 >= port1 && range1 < port2)) {
          flag = false;
          //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkPortRange()");
          return false;
        }
      }
    });
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkPortRange()");
    return flag;

  }

  function checkNbarClassify(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkNbarClassify()");
    var found = false;
    $(xml).find('parameter-map').each(function() {
      $(this).find('type').each(function() {
        $(this).find('inspect').each(function() {
          $(this).find('global').each(function() {
            $(this).find('ConfigProfile-Configuration').each(function() {
              if ($(this).find('nbar-classify').length != 0) {
                found = true;
              }
            });
          });
        });
      });
    });

    if (!found) {
      try {
        resp = deviceCommunicator.getConfigCmdOutput("parameter-map type inspect global \n nbar-classify");
      }
      catch (e) {
        //consoleLog(e);
      }

    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkNbarClassify()");

  }

  function hilightPolicyTable() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "hilightPolicyTable()");

    $("#securityPolicytable tr:nth-child(even)").addClass("striped");
    $('#securityPolicytable tbody tr').on('click', (function() {
      if ($(this).attr("head") == "true") {
        //code
      }
      else {
        var $tr = $(this).closest("tr");
        $tr.siblings().removeClass('hilite');
        var tableid = $(this).parents('tbody').attr("id");
        $('#securityPolicytable tbody tr').each(function() {
          if ($(this).hasClass('hilite')) {
            //code
            if ($(this).parents('tbody').attr("id") != tableid) {
              $(this).removeClass('hilite');
            }
          }
        });
        //alert();
        $tr.toggleClass('hilite');
      }
    }));
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "hilightPolicyTable()");
  }

  function checkDuplicates(list, value) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkDuplicates()");
    var flag = false;
    list.find('li').each(function() {
      if ($(this).text().trim() == value) {
        flag = true;
        //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkDuplicates()");
        return false;
      }
    });
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkDuplicates()");
    return flag;
  }

  function checkListEmpty(list) {
    if (list.children().length < 1) {
      return true;
    } else {
      return false;
    }
  }

  function enableDisableDomain() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "enableDisableDomain()");
    if (!checkListEmpty($('#SecurityApplicationPolicySelectedList')) || disableDomainFiltering) {
      $('#SecuritypermittedSitesList li').each(function() {
        $(this).draggable('disable');
      });
      $('#SecuritysiteName').attr('disabled', true);
      $('#SecurityaddContentName').attr('disabled', true);
      $('#SecurityblockedSiteFieldSet').droppable('disable');
    }
    else {
      $('#SecuritypermittedSitesList li').each(function() {
        $(this).draggable('enable');
      });
      $('#SecuritysiteName').removeAttr('disabled');
      $('#SecurityaddContentName').removeAttr('disabled');
      $('#SecurityblockedSiteFieldSet').droppable('enable');
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "enableDisableDomain()");
  }

  function enableDisableApplications() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "enableDisableApplications()");
    if (!checkListEmpty($('#SecurityblockUrlTable tbody'))) {
      $('#SecurityApplicationPolicyListDiv .categoryList').each(function() {
        $(this).draggable('disable');
        $(this).find('.appList li').each(function() {
          $(this).draggable('disable');
        });
      });
      $('#availableAppSearch').attr('disabled', true);
      $('#selectedAppSearch').attr('disabled', true);
      $('#SecurityApplicationPolicySelectedListDiv').droppable('disable');
    }
    else {
      $('#SecurityApplicationPolicyListDiv .categoryList').each(function() {
        $(this).draggable('enable');
        $(this).find('.appList li').each(function() {
          $(this).draggable('enable');
        });
      });
      $('#availableAppSearch').removeAttr('disabled');
      $('#selectedAppSearch').removeAttr('disabled');
      $('#SecurityApplicationPolicySelectedListDiv').droppable('enable');
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "enableDisableApplications()");
  }

  function getSubnetMask(subnet) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getSubnetMask()");
    splitSubnet = subnet.split("\.");
    subnetMask = 0;
    var toBinary = function(decNum) {
      return parseInt(decNum, 10).toString(2);
    }
    $.each(splitSubnet, function(index, value) {
      if (value == "255") {
        subnetMask = subnetMask + 8;
      }
      else if (value > 0 && value < 255) {
        binNo = toBinary(parseInt(value));
        binString = binNo.toString();
        for (var i = 0; i < binString.length; i++) {
          if (binString[i] == "1"){
            subnetMask++;
          }

        }

      }
    });
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getSubnetMask()");

    return subnetMask;
  }
  function getPolicyMapWithClasses(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getPolicyMapWithClasses()");
    var policyMapArr = [];
    var resp = deviceCommunicator.getExecCmdOutput("show running-config policy-map");
    policyMapList = resp.split('policy-map');
    for (var i = 1; i < policyMapList.length; i++) {
      var policyMapName, className = [];
      var policyLines = policyMapList[i].split("\n");

      $.each(policyLines, function(index, value) {
        var splitPolicyLines = value.trim().split(/\s+/);
        if (index == 0) {
          policyMapName = splitPolicyLines[splitPolicyLines.length - 1];
        }
        if (value.indexOf("class type") > -1) {
          if (splitPolicyLines[splitPolicyLines.length - 1].trim().toUpperCase() != "INTERNAL_DOMAIN_FILTER") {
            className.push({name: policyLines[index + 1].trim(), value: splitPolicyLines[splitPolicyLines.length - 1]});
          }

        }
      });
      $(xml).find('zone-pair').each(function() {
        var pMapName = $(this).find('service-policy').find('PolicyMapName').text().trim();
        if (pMapName == policyMapName) {
          policyMapArr.push({
            name: policyMapName,
            value: className
          });
        }
      });
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getPolicyMapWithClasses()");
    return policyMapArr;
  }

  function reorderPolicy(policyName, policyMapName, action, xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "reorderPolicy()");
    var policyOrder = []
    policyMapArr = getPolicyMapWithClasses(xml);
    for (var i = 0; i < policyMapArr.length; i++) {
      if (policyMapArr[i]['name'].trim() == policyMapName) {
        classMapArr = policyMapArr[i]['value'];
        policyOrder.push({name: policyName, value: action});
        for (var j = 0; j < classMapArr.length; j++) {
          //deleteClassFromPolicyMap(policyMapName,classMapArr[j]['value']);
          policyOrder.push({name: classMapArr[j]['value'], value: classMapArr[j]['name']});
        }
        reorderAllPolicies(policyMapName, policyOrder);
        /*policyMap(policyMapName,policyName,action);
         for(var k=0;k<classMapArr.length;k++){
         policyMap(policyMapName,classMapArr[k]['value'],classMapArr[k]['name']);
         }*/

      }
    }

    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "reorderPolicy()");

  }

  function reorderAllPolicies(policyMapName, policyOrder) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "reorderAllPolicies()");
    var arr = [], response = "";
    splitZones = policyMapName.split('-');
    sourceZone = splitZones[0];
    destZone = splitZones[1];
    zonepairName = sourceZone + "-" + destZone;

    arr.push(
      {
        name: "policyzpName",
        value: policyMapName
      }
    );
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deletePolicyMap.txt", arr, true) + "\n";

      for (var i = 0; i < policyOrder.length; i++) {
        response = response + policyMap(policyMapName, policyOrder[i]['name'], policyOrder[i]['value'], true) + "\n";
      }
      response = response + policyMap(policyMapName, "INTERNAL_DOMAIN_FILTER", "inspect", true) + "\n";
      response = response + zonePair(zonepairName, sourceZone, destZone, policyMapName, true) + "\n";
      try {
        var resp3 = deviceCommunicator.getConfigCmdOutput(response);
      } catch (error) {
        errorLogInConsole(error);
      }
    }
    catch (e) {
      $.unblockUI();
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "reorderAllPolicies()");

  }

  function GetUnique(inputArray)
  {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "GetUnique()");
    var outputArray = [];
    var found;
    if (inputArray.length != 0) {
      outputArray.push(inputArray[0]);
      for (var i = 1; i < inputArray.length; i++)
      {
        found = false;
        for (var j = 0; j < outputArray.length; j++) {
          if (inputArray[i]['value'] == outputArray[j]['value']) {
            found = true;
          }
        }
        if (!found) {
          outputArray.push(inputArray[i]);
        }
      }
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "GetUnique()");
    return outputArray;
  }

  function refreshPolicyTable(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "refreshPolicyTable()");
    //$('#securityPolicytable tbody').empty();
    $("#SaveOrder").hide();
    $("#secPolicyChkbox").prop('checked', false);
    $('#securityPolicytable tbody').each(function() {
      $(this).remove();
    });


    policyMapArr = getPolicyMapWithClasses(xml);
    if (policyMapArr.length == 0) {
      $("#noPolicyMessage").show();
      $("#securityPolicytable").hide();
      $("#policyBar").hide();
      $("#edit").hide();
      $("#delete").hide();
    } else {
      $("#noPolicyMessage").hide();
      $("#securityPolicytable").show();
      $("#policyBar").show();
      $("#edit").show();
      $("#delete").show();
    }


    /*$(xml).find('zone-pair').each(function(){
     if($(this).find('service-policy').find('PolicyMapName').text().trim().indexOf(policyName+"_")==0){
     var zoneArr=$(this).find('service-policy').find('PolicyMapName').text().trim().split('_');
     zoneDest.push(zoneArr[zoneArr.length-1]);
     zoneSource.push(zoneArr[zoneArr.length-2]);
     }
     });*/
    for (var i = 0; i < policyMapArr.length; i++) {
      var policyMapName = "";
      policyMapName = policyMapArr[i]['name'];
      classMapArr = policyMapArr[i]['value'];
      if (policyMapName.indexOf('-POLICY') != -1) {
        for (var j = 0; j < classMapArr.length; j++) {
          var policyName = "", catString = "", desc = "", type = "", zoneSource = "", zoneDest = "",
              networkSource = [], networkDes = [], serviceGroupSrc = [], serviceGroupDes = [], urlList = [],
              appList = [], groupList = [], catList = [], catCount = [];
          zoneSource.length = 0;
          zoneDest.length = 0;
          networkSource.length = 0;
          networkDes.length = 0;
          serviceGroupSrc.length = 0;
          serviceGroupDes.length = 0;
          urlList.length = 0;
          appList.length = 0;
          groupList.length = 0;
          catList.length = 0;
          policyName = classMapArr[j]['value'];
          var zoneArr = policyMapName.trim().split('-');
          zoneDest = zoneArr[1];
          zoneSource = zoneArr[0];
          type = classMapArr[j]['name'];

          $(xml).find('class-map').each(function() {
            if ($(this).find('match-all').find('ClassMapName').text() == policyName) {
              desc = $(this).find('ConfigCMap-Configuration').find('description').find('DescriptionClassMapUpTo200Characters').text();
              return false;
            }
          });
          $(xml).find('object-group').each(function() {
            $(this).find('network').each(function() {
              if ($(this).find('ObjectGroupName').text().trim().indexOf(policyName + "_") == 0) {
                var objectGroupArr = $(this).find('ObjectGroupName').text().trim().split(policyName + "_");
                if (objectGroupArr[objectGroupArr.length - 1] == "src_net") {
                  if ($(this).find('ConfigNetworkGroup-Configuration').find('host').length != 0) {
                    $(this).find('ConfigNetworkGroup-Configuration').find('host').each(function() {
                      //networkDes.push({name:"ip", value:$(this).find('HostAddress').text()});
                      networkSource.push($(this).find('HostAddress').text());
                    });
                  }
                  if ($(this).find('ConfigNetworkGroup-Configuration').find('range').length != 0) {
                    $(this).find('ConfigNetworkGroup-Configuration').find('range').each(function() {
                      var startIp = $(this).find('IPAddress1').text();
                      var endIp = $(this).find('IPAddress2').text();
                      //networkDes.push({name:"ipRange", value:startIp+"-"+endIp});
                      networkSource.push(startIp + "-" + endIp);
                    });
                  }
                  if ($(this).find('ConfigNetworkGroup-Configuration').find('NetworkAddressGroupMembers').length != 0) {
                    $(this).find('ConfigNetworkGroup-Configuration').find('NetworkAddressGroupMembers').each(function() {
                      var networkAdd = $(this).text().trim();
                      var subnet = $(this).next().text().trim();
                      mask = getSubnetMask(subnet);
                      //wildCard=getWildCardMask(subnet);
                      //networkDes.push({name:"ipRange", value:startIp+"-"+endIp});
                      networkSource.push(networkAdd + "/" + mask);
                    });
                  }
                }
                if (objectGroupArr[objectGroupArr.length - 1] == "dst_net") {
                  if ($(this).find('ConfigNetworkGroup-Configuration').find('host').length != 0) {
                    $(this).find('ConfigNetworkGroup-Configuration').find('host').each(function() {
                      //networkDes.push({name:"ip", value:$(this).find('HostAddress').text()});
                      networkDes.push($(this).find('HostAddress').text());
                    });
                  }
                  if ($(this).find('ConfigNetworkGroup-Configuration').find('range').length != 0) {
                    $(this).find('ConfigNetworkGroup-Configuration').find('range').each(function() {
                      var startIp = $(this).find('IPAddress1').text();
                      var endIp = $(this).find('IPAddress2').text();
                      //networkDes.push({name:"ipRange", value:startIp+"-"+endIp});
                      networkDes.push(startIp + "-" + endIp);
                    });
                  }
                  if ($(this).find('ConfigNetworkGroup-Configuration').find('NetworkAddressGroupMembers').length != 0) {
                    $(this).find('ConfigNetworkGroup-Configuration').find('NetworkAddressGroupMembers').each(function() {
                      var networkAdd = $(this).text().trim();
                      var subnet = $(this).next().text().trim();
                      mask = getSubnetMask(subnet);
                      //networkDes.push({name:"ipRange", value:startIp+"-"+endIp});
                      networkDes.push(networkAdd + "/" + mask);
                    });
                  }

                }
              }
            });
            $(this).find('service').each(function() {
              if ($(this).find('ObjectGroupName').text().trim().indexOf(policyName + "_") == 0) {
                var objectGroupArr = $(this).find('ObjectGroupName').text().trim().split('_');
                if (objectGroupArr[objectGroupArr.length - 1] == "svc") {
                  $(this).find('ConfigServiceGroup-Configuration').children().each(function() {
                    if ($(this).find('source').length != 0) {
                      if ($(this).find('source').children('range').length != 0 || $(this).find('source').children('eq').length != 0) {
                        if ($(this).find('source').children('range').length != 0) {
                          if ($(this).find('source').children('range').children('PortNumber').length != 0) {
                            if ($(this).find('source').children('range').children('PortNumber').length == 2){
                              serviceGroupSrc.push({name: $(this).prop("tagName"),
                                                   value: $(this).prop("tagName") + ":" +
                                                          $(this).find('source').children('range').children('PortNumber').eq(0).text() + "-" +
                                                          $(this).find('source').children('range').children('PortNumber').eq(1).text()});
                            }
                          }
                          if ($(this).find('source').children('range').children('range').length != 0) {
                            if ($(this).find('source').children('range').children('range').children('PortNumber').length == 2){
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                    value: $(this).prop("tagName") + ":" +
                                                            $(this).find('source').children('range').children('range').children('PortNumber').eq(0).text() + "-" +
                                                            $(this).find('source').children('range').children('range').children('PortNumber').eq(1).text()});
                            }
                          }
                          if ($(this).find('source').children('range').children('eq').length != 0) {
                            if ($(this).find('source').children('range').children('eq').children("PortNumber").length != 0) {
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                    value: $(this).prop("tagName") + ":" +
                                                           $(this).find('source').children('range').children('eq').children("PortNumber").text()});
                            }
                            else {
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                    value: $(this).find('source').children('range').children('eq').children().first().prop("tagName")});
                            }
                          }
                        }
                        if ($(this).find('source').children('eq').length != 0) {
                          ////consoleLog($(this).children('eq').html());
                          if ($(this).find('source').children('eq').children('PortNumber').length != 0) {
                            serviceGroupSrc.push({name: $(this).prop("tagName"),
                                                  value: $(this).prop("tagName") + ":" +
                                                          $(this).find('source').children('eq').children('PortNumber').eq(0).text()});
                          } else {
                            serviceGroupSrc.push({name: $(this).prop("tagName"),
                                                 value: $(this).find('source').children('eq').children().first().prop("tagName")});
                          }
                          ////consoleLog($(this).children('eq').children('range').length);
                          if ($(this).find('source').children('eq').find('range').length != 0) {
                            if ($(this).find('source').children('eq').find('range').children('PortNumber').length == 2){
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                   value: $(this).prop("tagName") + ":" +
                                                          $(this).find('source').children('eq').find('range').children('PortNumber').eq(0).text() + "-" +
                                                          $(this).find('source').children('eq').find('range').children('PortNumber').eq(1).text()});
                            }
                          }
                          if ($(this).find('source').children('eq').find('eq').length != 0) {
                            if ($(this).find('source').children('eq').find('eq').children("PortNumber").length != 0) {
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                   value: $(this).prop("tagName") + ":" +
                                                          $(this).find('source').children('eq').find('eq').children("PortNumber").text()});
                            }
                            else {
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                   value: $(this).find('source').children('eq').find('eq').children().first().prop("tagName")});
                            }
                          }
                        }


                      }
                    } else {
                      if ($(this).children('range').length != 0 || $(this).children('eq').length != 0) {
                        if ($(this).children('range').length != 0) {
                          if ($(this).children('range').children('PortNumber').length != 0) {
                            if ($(this).children('range').children('PortNumber').length == 2){
                              serviceGroupDes.push({name: $(this).prop("tagName"),
                                                   value: $(this).prop("tagName") + ":" +
                                                   $(this).children('range').children('PortNumber').eq(0).text() + "-" +
                                                   $(this).children('range').children('PortNumber').eq(1).text()});
                            }
                          }
                        }
                        if ($(this).children('eq').length != 0) {
                          if ($(this).children('eq').children("PortNumber").length != 0) {
                            serviceGroupDes.push({name: $(this).prop("tagName"),
                                                 value: $(this).prop("tagName") + ":" + $(this).children('eq').children("PortNumber").text()});
                          }
                          else {
                            serviceGroupDes.push({name: $(this).prop("tagName"),
                                                 value: $(this).children('eq').children().first().prop("tagName")});
                          }
                        }

                      }
                    }
                    /*if ($(this).find('source').length!=0) {
                     if ($(this).find('PortNumber').length!=0) {
                     if ($(this).find('PortNumber').length==2)
                     serviceGroupSrc.push({name:$(this).prop("tagName"),value:$(this).prop("tagName")+":"+$(this).find('PortNumber').eq(0).text()+"-"+$(this).find('PortNumber').eq(1).text()});
                     else
                     serviceGroupSrc.push({name:$(this).prop("tagName"),value:$(this).prop("tagName")+":"+$(this).find('PortNumber').text()});
                     }else{
                     serviceGroupSrc.push({name:$(this).prop("tagName"),value:$(this).find('eq').children().first().prop("tagName")});
                     }
                     }else{
                     if ($(this).find('PortNumber').length!=0) {
                     if ($(this).find('PortNumber').length==2)
                     serviceGroupDes.push({name:$(this).prop("tagName"),value:$(this).prop("tagName")+":"+$(this).find('PortNumber').eq(0).text()+"-"+$(this).find('PortNumber').eq(1).text()});
                     else
                     serviceGroupDes.push({name:$(this).prop("tagName"),value:$(this).prop("tagName")+":"+$(this).find('PortNumber').text()});
                     }else{
                     serviceGroupDes.push({name:$(this).prop("tagName"),value:$(this).find('eq').children().first().prop("tagName")});
                     }
                     }*/
                  });
                }
              }
            });
          });
          $(xml).find('parameter-map').each(function() {
            if ($(this).find('ParameterMapName').text().trim() == policyName + "_urllist") {
              $(this).find('ConfigProfile-Configuration').find('SpecifyDNSNameServer').each(function() {
                var urlString = $(this).text().trim();
                if (urlString != "" && urlString != undefined) {
                  if (urlString.indexOf('.*') > -1) {
                    var urlSplit = urlString.split('.*')[1];
                    urlList.push(urlSplit);
                  } else {
                    urlList.push(urlString);
                  }


                }

              });
            }
          });
          $(xml).find('class-map').each(function() {
            $(this).find('type').each(function() {
              $(this).find('inspect').each(function() {
                $(this).find('match-any').each(function() {
                  if ($(this).find('ClassMapName').text().trim() == policyName + "_app") {
                    if ($(this).find('ConfigCMap-Configuration').find('class-map').length != 0) {
                      var count = 0;
                      $(this).find('ConfigCMap-Configuration').find('class-map').each(
                        function()
                        {
                          var found = false;
                          var className = $(this).find('MatchClassMapName').text().trim();
                          count++;
                          if (className != "" && className != undefined) {
                            var slicedClass = className.split('CATEGORY_')[1];
                            $.each(catCount, function(index, value) {
                              if (slicedClass.indexOf(value['name']) == 0) {
                                value['value'] = value['value'] + 1;
                                found = true;
                              }
                            });
                            /*if (slicedClass.indexOf("_")>-1) {

                             $.each(appList,function(index,value){
                             if (value.trim().toLowerCase()==slicedClass.split("_")[0].toLowerCase())
                             found=true;
                             });
                             }*/
                            if (found) {
                              return true;
                            }
                            catCount.push({name: slicedClass, value: 1});
                            appList.push(slicedClass.toLowerCase());
                            if (count == 1) {
                              catString = slicedClass.toLowerCase();
                            } else {
                              catString = catString + "," + slicedClass.toLowerCase();
                            }
                          }
                        });
                    }
                    if ($(this).find('ConfigCMap-Configuration').find('protocol').length != 0) {
                      $(this).find('ConfigCMap-Configuration').find('protocol').each(function() {
                        if ($(this).text().indexOf("_") > -1) {
                          appList.push($(this).text().replace("_", "").replace("<", "").replace(">", ""));
                        }
                        if ($(this).find(':first-child').prop("tagName") != "" && $(this).find(':first-child').prop("tagName") != undefined) {
                          appList.push($(this).find(':first-child').prop("tagName").toLowerCase());
                        }
                      });
                    }

                  }
                  if ($(this).find('ClassMapName').text().trim() == policyName + "_user") {
                    $(this).find('ConfigCMap-Configuration').find('user-group').each(function() {
                      groupList.push($(this).find('SpecifyGroupName').text().trim());
                    });
                  }
                });
              });
            });
          });
          /*
           //workaround for match protocol xml issue
           try{
           resp=deviceCommunicator.getExecCmdOutput("show running-config class-map "+policyName+"_app");
           if (resp.trim()!="") {

           appLines=resp.split('class-map type inspect match-any '+policyName+"_app");
           catsApps=appLines[1].split("\n");
           $.each(catsApps,function(index,value){
           if (value.indexOf('match class-map')>-1) {
           var found=false;
           categoryClass=value.split('match class-map')[1].trim();
           var slicedClass=categoryClass.split('CATEGORY_')[1];
           $.each(catCount,function(index,value){
           if (slicedClass.indexOf(value['name'])==0) {

           value['value']=value['value']+1;
           found=true;
           }
           });
           if (found) {
           return true;
           }
           catCount.push({name:slicedClass,value:1});
           appList.push(slicedClass.toLowerCase());
           if (index==1) {
           catString=slicedClass.toLowerCase();
           }else{
           catString=catString+","+slicedClass.toLowerCase();
           }
           }
           });
           $.each(catsApps,function(index,value){
           if (value.indexOf('match protocol')>-1) {
           appName=value.split('match protocol')[1].trim();
           appList.push(appName.toLowerCase());
           }
           });
           }
           }
           catch(e){
           //consoleLog(e);
           }
           //workaround for match protocol xml issue ends here
           */
          addPolicyToTable(policyName, desc, zoneSource, zoneDest, networkSource, networkDes,
                           GetUnique(serviceGroupSrc), GetUnique(serviceGroupDes), urlList, appList,
                           groupList, catList, type, catString, catCount);
        }
        //code
      }
    }
    /*
     $.each(policyMapArr, function(index, value){
     var policyMapName="";

     $.each(policyMapArr[index]['value'], function(i, classname){
     if (policyName==classname.trim()) {
     policyMapName=policyMapArr[index]['name'];
     }
     var zoneArr=policyMapName.text().trim().split('_');
     zoneDest.push(zoneArr[zoneArr.length-1]);
     zoneSource.push(zoneArr[zoneArr.length-2]);
     });
     });*/


    addTableColumn("securityPolicytable", "secPolicyEdit", "secPolicyDelete");
    enableDisableButton("securityPolicytable", "add");
    //reorderTable(policyMapArr);
    //var tableid = "";
    //var trclass = "";
    $('#securityPolicytable tbody').each(function() {
      var tableid = $(this).attr("id");
      var trclass = tableid.replace("sortThis", "").trim();
      $('tbody#' + tableid).sortable({
        helper: function(e, tr)
        {
          var $originals = tr.children();
          var $helper = tr.clone();
          $helper.children().each(function(index)
          {
            // Set helper cell sizes to match the original sizes
            $(this).width($originals.eq(index).width());
          });
          return $helper;
        },
        items: 'tr.' + trclass,
        cursor: 'move',
        start: function(event, ui) {
          var start_pos = ui.item.index() + 1;
          ui.item.data('start_pos', start_pos);
        },
        change: function(event, ui) {
          var start_pos = ui.item.data('start_pos');
          var dragDirection = start_pos < ui.placeholder.index() ? "down" : "up";
          ui.item.data('drag_direction', dragDirection);

        },
        stop: function(event, ui) {
          var movedRowIndex = (ui.item.index());
          var thisTable = $("#securityPolicytable tbody#" + ui.item.parents('tbody').attr("id")).find("tr");
          var pageNumberCell = $(thisTable).eq(movedRowIndex).attr("changeorderrow");
          ui.item.attr("changeorderrow", movedRowIndex.toString());
          var drag_direction = ui.item.data('drag_direction');
          if (drag_direction == 'down') {
            for (var i = 0; i < $(thisTable).length; i++) {
              if (i < movedRowIndex) {
                $(thisTable).eq(i).attr("changeorderrow", i.toString());
              }
            }
          }

          //if the record was drageed up the table, update record page#s below
          if (drag_direction == 'up') {
            for (var i = 1; i < $(thisTable).length; i++) {
              if (i > movedRowIndex) {
                $(thisTable).eq(i).attr("changeorderrow", i.toString());
              }
            }
          }
          var chekFlagtr = 0;
          //var arraytbodyId = [];
          $('#securityPolicytable tbody#' + ui.item.parents('tbody').attr("id") + ' tr').each(function() {
            if ($(this).attr("orderrow") == $(this).attr("changeorderrow")) {
              $(this).parents('tbody').attr("change", "false");
            }
            else {
              $(this).parents('tbody').attr("change", "true");
              //chekFlagtr=1;
              return false;

            }
          });
          $('#securityPolicytable tbody').each(function() {
            if ($(this).attr("change") == "true") {
              chekFlagtr = 1;
            }
          });

          if (chekFlagtr == 0) {
            // ui.item.parents('tbody').attr("change","false");


            $("#SaveOrder").hide();
          } else {
            //ui.item.parents('tbody').attr("change","true");
            $("#SaveOrder").show();
          }
        }
      });
      $('tbody#' + tableid).disableSelection();
    });
    $(".optionText").click(function() {

      if ($(this).attr('textval') == "Collapse") {
        //code
        $("#securityPolicytable tbody tr").each(function() {
          if ($(this).attr('head') == "true") {
            //code
            //$(this).find('span.collapsetable').css({
            //  background: 'url(images/expand.png)'
            //});

            $(this).find('span.collapsetable div').removeClass('collapse');
      $(this).find('span.collapsetable div').addClass('expand');

            $(this).find('span.collapsetable').attr('collapse', "false");
          }
          else {
            $(this).hide();
          }

          // $('#securityPolicytable tbody tr').on('click', (function () {


        });
      }
      else if ($(this).attr('textval') == "Expand") {
        $("#securityPolicytable tbody tr").each(function() {
          if ($(this).attr('head') == "true") {
            //code
            //$(this).find('span.collapsetable').css({
            //  background: 'url(images/Collapse.png)'
            //});
            $(this).find('span.collapsetable div').addClass('collapse');
            $(this).find('span.collapsetable div').removeClass('expand');

            $(this).find('span.collapsetable').attr('collapse', "true");
          }
          else {
            $(this).show();
          }

          // $('#securityPolicytable tbody tr').on('click', (function () {


        });

      }
      else if ($(this).attr('textval') == "RollBack") {
        $('#securityPolicytable tbody').each(function() {
          //alert("java")

          var $table = $("#securityPolicytable tbody#" + $(this).attr("id"));

          var rows = $table.find('tr').get();
          rows.sort(function(a, b) {
            var keyA = parseInt($(a).attr('orderrow'));
            var keyB = parseInt($(b).attr('orderrow'));
            if (keyA > keyB){
              return 1;
            }
            if (keyA < keyB){
              return -1;
            }
            return 0;
          });
          $.each(rows, function(index, row) {
            $(row).attr("changeorderrow", index.toString());
            $table.append(row);
          });
          $table.attr("change", "false");
          $table.hide();
          $table.show();
        });
        $("#SaveOrder").hide();
      }
    });

    $(".reloadtable").click(function() {
      //if ($(this).attr('collapse')=="true") {}
      var $table = $("#securityPolicytable " + "tbody#" + $(this).parents('tbody').attr('id'));
      var rows = $table.find('tr').get();
      rows.sort(function(a, b) {
        var keyA = parseInt($(a).attr('orderrow'));
        var keyB = parseInt($(b).attr('orderrow'));
        if (keyA > keyB){
          return 1;
        }
        if (keyA < keyB){
          return -1;
        }
        return 0;
      });
      $.each(rows, function(index, row) {
        $(row).attr("changeorderrow", index.toString());
        $table.append(row);
      });
      $table.attr("change", "false");
      $table.hide();
      $table.show();
      var chekFlagtr = 0;
      $('#securityPolicytable tbody').each(function() {
        if ($(this).attr("change") == "true") {
          chekFlagtr = 1;
        }
      });

      if (chekFlagtr == 0) {
        // ui.item.parents('tbody').attr("change","false");


        $("#SaveOrder").hide();
      } else {
        //ui.item.parents('tbody').attr("change","true");
        $("#SaveOrder").show();
      }

    });

    $(".collapsetable").click(function() {
      if ($(this).attr('collapse') == "true") {
        //code

        $("#securityPolicytable " + "tbody#" + $(this).parents('tbody').attr('id') + " tr").each(function() {
          if ($(this).attr('head') == "true") {
            //code
          }
          else {
            $(this).hide();
          }
        });
        // $('#securityPolicytable tbody tr').on('click', (function () {
        //$(this).css({
        //  background: 'url(images/expand.png)'
        //});

        $(this).find('div').removeClass('collapse');
        $(this).find('div').addClass('expand');


        $(this).attr('collapse', "false");
      }
      else {
        $("#securityPolicytable " + "tbody#" + $(this).parents('tbody').attr('id') + " tr").each(function() {
          if ($(this).attr('head') == "true") {
            //code
          }
          else {
            $(this).show();
          }
        });
        //$(this).css({
        //  background: 'url(images/Collapse.png)'
        //});
        $(this).find('div').addClass('collapse');
        $(this).find('div').removeClass('expand');

        $(this).attr('collapse', "true");
      }
    });

    //hilightPolicyTable();
    changeBtnState("securityPolicytable", "edit");
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "refreshPolicyTable()");

  }

  function reorderTable(policyMapArr) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "reorderTable()");

    //var order=0;
    /*
     var sortedRows=[];
     for(var i=0;i<policyMapArr.length;i++){
     var policyMapName=policyMapArr[i]['name'];
     classMapArr=policyMapArr[i]['value'];
     for(var j=0;j<classMapArr.length;j++){
     $('#securityPolicytable tbody tr').each(function(){
     if (classMapArr[j]['value'].trim().toLowerCase()==$(this).children().eq(0).text().trim().toLowerCase()) {
     sortedRows.push($(this));
     }
     });
     }
     }
     $('#securityPolicytable tbody').empty();
     $.each(sortedRows, function(index, value){
     $('#securityPolicytable tbody').append(value);
     });
     */

    $('#securityPolicytable tbody tr').each(function() {
      if ($(this).children().eq(10).text().trim().toLowerCase() == "block") {
        $('#securityPolicytable tbody').prepend($(this));
      }

    });
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "reorderTable()");

  }

  function addPolicyToTable(policyName, desc, zoneSource, zoneDest, networkSource, networkDes, serviceGroupSrc,
                            serviceGroupDes, urlList, appList, groupList, catList, type, catString, catCount) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "addPolicyToTable()");
    var urlString = "", networkSourceString = "", networkDesString = "", groupListString = "", appListString = "", sourcePortString = "", desPortString = "";
    //var zoneSourceString = "", zoneDestString = "";
    var checkFlag = 0;
    var count = 0;
    $('#securityPolicytable tbody').each(function() {
      if ($(this).attr("id") == "sortThis" + zoneSource + "-" + zoneDest) {
        checkFlag = 1;
        //alert($(this).attr("id"));
      }
    });
    if (checkFlag == 1) {
      //code
    } else {
      //alert("java");
      $("#securityPolicytable").append("<tbody id='" + "sortThis" + zoneSource + "-" + zoneDest + "'change='false'></tbody>");
      //$("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest).append("<tr head='true' orderrow='"+(count)+"'changeorderrow='"+(count)+"' class='policyhead'><td colspan='11' style='text-align: center'>"+zoneSource+"-"+zoneDest+" Policies</td><td style='width:7%'><span class='reloadtable' reload='true' title='Revert order'></span><span  class='collapsetable' title='Expand/Collapse' collapse='true'></span></td></tr>");
      $("#securityPolicytable " +
              "tbody#" + "sortThis" +
              zoneSource + "-" + zoneDest).append('<tr head="true" orderrow="' + (count) +
                                                  '"changeorderrow="' + (count) +
                                                  '" class="policyhead">'+
                                                  '<td colspan="11" class="ccpexpCSSReplaceClass593">' + zoneSource + '-' + zoneDest + ' ' +
                                                  $.i18n.prop("policyTitle") + '</td><td class="ccpexpCSSReplaceClass594">'+
                                                  '<span class="reloadtable" reload="true" title="' +
                                                  $.i18n.prop("reloadtable") + '"><div class="utmSprite reload"></div></span><span  class="collapsetable" title="' + $.i18n.prop("collapsetable") +
                                                  '" collapse="true"><div class="utmSprite collapse"></div></span></td></tr>');
    }


    $("#securityPolicytable " + "tbody#" + "sortThis" + zoneSource + "-" + zoneDest + " tr").each(function() {
      count = count + 1;
    });
    //$("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest).append('<tr orderrow="'+(count)+'" changeorderrow="'+(count)+'"class=" policyData '+zoneSource+"-"+zoneDest+'"><td class="securityPolicyName">'+
    //'<img src="images/sortable.png"  class="sortableImg ccpexpCSSReplaceClass595" title="Drag the row to sort">'+policyName+'</td>');
    //$("#securityPolicytable " + "tbody#" +
    //                "sortThis" + zoneSource + "-" +
    //                zoneDest).append('<tr orderrow="' + (count) + '" changeorderrow="' + (count) +
    //                                 '"class=" policyData ' + zoneSource + "-" + zoneDest +
    //                                 '"><td class="securityPolicyName">'+
    //                                 '<div  class="utmSprite sortable sortableImg ccpexpCSSReplaceClass596 displayInlineBlock" title="' +
    //                                 $.i18n.prop("dragRowToSort") + '"></div>' + policyName + '</td>');
    if (policyName.toLowerCase() == "web" || policyName.toLowerCase() == "others") {
      $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest).append('<tr orderrow="' + (count) + '" changeorderrow="' + (count) +
                                     '"class="disabledObjectGroup policyData ' + zoneSource + "-" + zoneDest +
                                     '"><td class="securityPolicyName">'+
                                     '<div  class="utmSprite sortable sortableImg ccpexpCSSReplaceClass596 displayInlineBlock" title="' +
                                     $.i18n.prop("dragRowToSort") + '"></div><span class="webAndOthersTitle" title="'+$.i18n.prop("webAndOthersPolicyReservedMessage")+'">'+ policyName + '</span></td>');
    } else {
      $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest).append('<tr orderrow="' + (count) + '" changeorderrow="' + (count) +
                                     '"class=" policyData ' + zoneSource + "-" + zoneDest +
                                     '"><td class="securityPolicyName">'+
                                     '<div  class="utmSprite sortable sortableImg ccpexpCSSReplaceClass596 displayInlineBlock" title="' +
                                     $.i18n.prop("dragRowToSort") + '"></div>' + policyName + '</td>');
    }
    
    $('.sortableImg:last').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('.webAndOthersTitle:last').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('.reloadtable:last').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });
    $('.collapsetable:last').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });
    //$("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest+"> ."+zoneSource+"-"+zoneDest+":last")
    //Adding Zone Source
    /*$("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest+"> ."+zoneSource+"-"+zoneDest+":last").append('<td class="zoneSource"></td>');
     $('.zoneSource:last').append(zoneSource);


     //Adding Zone Destination
     $("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest+"> ."+zoneSource+"-"+zoneDest+":last").append('<td class="zoneDes"></td>');
     $('.zoneDes:last').append(zoneDest);*/
    if (desc.trim() != "") {
      $("#securityPolicytable " + "tbody#" +
                      "sortThis" + zoneSource + "-" + zoneDest + "> ." +
                      zoneSource + "-" + zoneDest + ":last").append('<td class="securityPolicyDes">' + desc + '</td>');
    } else {
      $("#securityPolicytable " + "tbody#" +
                      "sortThis" + zoneSource + "-" +
                      zoneDest + "> ." + zoneSource + "-" +
                      zoneDest + ":last").append('<td class="securityPolicyDes">-</td>');
    }


    //Adding User List
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="usersGroupList"></td>');
    var groupWithDir = "";
    $.each(groupList, function(index, value) {
      //var groupName="";
      var groupName = value;
      //if (value.indexOf('local-d_')==0) {
      //          var groupSplit=value.split('local-d_');
      //          groupName=groupSplit[1];
      //          //groupType='Local';
      //
      //        }else if (value.indexOf('active-d_')==0) {
      //          var groupSplit=value.split('active-d_');
      //          groupName=groupSplit[1];
      //          //groupType='Active';
      //}
      if (index == 0) {
        $('.usersGroupList:last').append(groupName);
        groupListString = groupName;
        groupWithDir = value;
      } else {
        groupListString = groupListString + ", " + groupName;
        groupWithDir = groupWithDir + "," + value;
      }
      if (index == 1) {
        $('.usersGroupList:last').append(", " + groupName);
      }
    });
    $('.usersGroupList:last').attr("title", groupListString);
    $('.usersGroupList:last').attr("datalist", groupListString);
    $('.usersGroupList:last').attr("grouplist", groupWithDir);
    if ($('.usersGroupList:last').text().trim() != "" && groupList.length > 2) {
      $('.usersGroupList:last').append(", ...");
      $(".usersGroupList:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    if ($('.usersGroupList:last').text().trim() == "") {
      $('.usersGroupList:last').text("Any");
    }

    //Adding Network Source
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="networkSource"></td>');
    $.each(networkSource, function(index, value) {
      if (index == 0) {
        $('.networkSource:last').append(value);
        networkSourceString = value;
      } else {
        networkSourceString = networkSourceString + ", " + value;
      }
      if (index == 1) {
        $('.networkSource:last').append(", " + value);
      }
    });
    $('.networkSource:last').attr("title", networkSourceString);
    $('.networkSource:last').attr("datalist", networkSourceString);
    if ($('.networkSource:last').text().trim() != "" && networkSource.length > 2) {
      $('.networkSource:last').append(", ...");
      $(".networkSource:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    if ($('.networkSource:last').text().trim() == "") {
      $('.networkSource:last').text("Any");
    }

    //Adding Network Destination
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="networkDes"></td>');
    $.each(networkDes, function(index, value) {
      if (index == 0) {
        $('.networkDes:last').append(value);
        networkDesString = value;
      } else {
        networkDesString = networkDesString + ", " + value;
      }
      if (index == 1) {
        $('.networkDes:last').append(", " + value);
      }
    });
    $('.networkDes:last').attr("title", networkDesString);
    $('.networkDes:last').attr("datalist", networkDesString);
    if ($('.networkDes:last').text().trim() != "" && networkDes.length > 2) {
      $('.networkDes:last').append(", ...");
      $(".networkDes:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    if ($('.networkDes:last').text().trim() == "") {
      $('.networkDes:last').text("Any");
    }



    //Adding Source Ports
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="sourcePorts"></td>');
    var protocolOrder;
    $.each(serviceGroupSrc, function(index, value) {
      if (index == 0) {
        sourcePortString = value['value'];
        $('.sourcePorts:last').append(value['value']);
        protocolOrder = value['name'];
      } else {
        sourcePortString = sourcePortString + ", " + value['value'];
        protocolOrder = protocolOrder + "," + value['name'];
      }
      if (index == 1) {
        $('.sourcePorts:last').append(", " + value['value']);
      }
    });
    $('.sourcePorts:last').attr("title", sourcePortString);
    $('.sourcePorts:last').attr("datalist", sourcePortString);
    $('.sourcePorts:last').attr("data", protocolOrder);
    if ($('.sourcePorts:last').text().trim() != "" && serviceGroupSrc.length > 2) {
      $('.sourcePorts:last').append(", ...");
      $(".sourcePorts:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    if ($('.sourcePorts:last').text().trim() == "" || $('.sourcePorts:last').text().trim().toLowerCase() == "ip") {
      $('.sourcePorts:last').text("Any");
    }

    //Adding Destination Ports
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="desPorts"></td>');
    var protocolDesOrder;
    $.each(serviceGroupDes, function(index, value) {
      if (index == 0) {
        desPortString = value['value'];
        $('.desPorts:last').append(value['value']);
        protocolDesOrder = value['name'];
      } else {
        desPortString = desPortString + ", " + value['value'];
        protocolDesOrder = protocolDesOrder + "," + value['name'];
      }
      if (index == 1) {
        $('.desPorts:last').append(", " + value['value']);
      }
    });
    $('.desPorts:last').attr("title", desPortString);
    $('.desPorts:last').attr("datalist", desPortString);
    $('.desPorts:last').attr("data", protocolDesOrder);
    if ($('.desPorts:last').text().trim() != "" && serviceGroupDes.length > 2) {
      $('.desPorts:last').append(", ...");
      $(".desPorts:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    if ($('.desPorts:last').text().trim() == "" || $('.desPorts:last').text().trim().toLowerCase() == "ip") {
      $('.desPorts:last').text("Any");
    }

    //Adding Application/Category List
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="applicationCatList"></td>');
    if (appList.length != 0) {
      $.each(appList, function(index, value) {
        if (index == 0) {
          $('.applicationCatList:last').append(value);
          appListString = value;
        } else {
          appListString = appListString + ", " + value;
        }
        if (index == 1) {
          $('.applicationCatList:last').append(", " + value);
        }
      });
      $('.applicationCatList:last').attr("data", "application");
    }
    if (catList.length != 0) {
      $.each(catList, function(index, value) {
        if (index == 0) {
          $('.applicationCatList:last').append(value);
          appListString = value;
        } else {
          appListString = appListString + ", " + value;
        }
        if (index == 1) {
          $('.applicationCatList:last').append(", " + value);
        }
      });
      $('.applicationCatList:last').attr("data", "category");
    }
    $('.applicationCatList:last').attr("title", appListString);
    $('.applicationCatList:last').attr("datalist", appListString);
    if ($('.applicationCatList:last').text().trim() != "" && appList.length > 2) {
      $('.applicationCatList:last').append(", ...");
      $(".applicationCatList:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    $('.applicationCatList:last').attr("category", catString);
    var catData = "";
    $.each(catCount, function(index, value) {
      if (index == 0){
        catData = value['value'].toString();
      }
      else{
        catData = catData + "," + value['value'].toString();
      }
    });
    $('.applicationCatList:last').attr("catData", catData);
    if ($('.applicationCatList:last').text().trim() == "") {
      $('.applicationCatList:last').text("Any");
    }

    //Adding Url List
    $("#securityPolicytable " + "tbody#" +
                    "sortThis" + zoneSource + "-" +
                    zoneDest + "> ." + zoneSource + "-" +
                    zoneDest + ":last").append('<td class="urlLists"></td>');
    $.each(urlList, function(index, value) {
      if (index == 0) {
        urlString = value;
        $('.urlLists:last').append(value);
      } else {
        urlString = urlString + ", " + value;
      }
      if (index == 1) {
        $('.urlLists:last').append(", " + value);
      }
    });
    $('.urlLists:last').attr("title", urlString);
    $('.urlLists:last').attr("datalist", urlString);
    if ($('.urlLists:last').text().trim() != "" && urlList.length > 2) {
      $('.urlLists:last').append(", ...");
      $(".urlLists:last").tooltip({
        show: {
          effect: "slideDown"
        },
        tooltipClass: "custom-tooltip-styling"
      });
    }
    if ($('.urlLists:last').text().trim() == "") {
      $('.urlLists:last').text("Any");
    }

    if (type == "inspect") {
      //$("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest+"> ."+zoneSource+"-"+zoneDest+":last").append('<td class="policyAction">Allow</td>');
      $("#securityPolicytable " + "tbody#" +
                      "sortThis" + zoneSource + "-" +
                      zoneDest + "> ." + zoneSource + "-" +
                      zoneDest + ":last").append('<td class="policyAction">' + $.i18n.prop("allow") + '</td>');
    }
    if (type == "drop log") {
      //$("#securityPolicytable "+"tbody#"+"sortThis"+zoneSource+"-"+zoneDest+"> ."+zoneSource+"-"+zoneDest+":last").append('<td class="policyAction">Block</td>');
      $("#securityPolicytable " + "tbody#" +
                      "sortThis" + zoneSource + "-" +
                      zoneDest + "> ." + zoneSource + "-" +
                      zoneDest + ":last").append('<td class="policyAction">' + $.i18n.prop("block") + '</td>');
    }
    //$('#securityPolicytable tbody').append('<tr class="bordertr"><td class="securityPolicyName">'+policyName+'</td><td>'+zoneSource+'</td><td>'+zoneDest+'</td><td>Any</td><td>Any</td><td>UTM TEAM</td><td>Skype</td><td>ANY</td><td>ANY</td><td>FaceBook</td><td>Allow</td></tr>');
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "addPolicyToTable()");

  }

  /*
   function getclassMapUserGroup(xml,policy_name_user){
   $(xml).find('class-map').each(function () {
   if(policy_name_user==$(this).find('ClassMapName').text().toLowerCase().trim()){
   $(this).find('user-group').each(function () {
   $('#SecurityblockUrlTable').append('<tr class="Securitybordertr"><td class="SecurityblockUrlText"><a class="' + $(this).find('SpecifyGroupName').text().trim().toLowerCase() +
                '"/><span class="ccpexpCSSReplaceClass597">' + $(this).find('SpecifyGroupName').text().trim().toLowerCase() +
                '</span></td><td class="ccpexpCSSReplaceClass598">'+
                '<a class="utmSprite close deleteSite" dataid="' + move.attr("data-id") + '"/></td>');
   });
   }
   });
   }

   function getclassMapURL(xml,policy_name_urllist){
   $(xml).find('parameter-map').each(function () {
   if(policy_name_urllist==$(this).find('ParameterMapName').text().toLowerCase().trim()){
   $(this).find('server').each(function () {
   $('#SecurityUserGroupSelectedList').append('<li value="' +$(this).find('SpecifyDNSNameServer').text().trim().toLowerCase()+ '" class="ui-draggable" >' + "<a href='#' class='utmUserGroup' />" + " " + $(this).find('SpecifyDNSNameServer').text().trim().toLowerCase() + '</li>');
   });
   }
   });
   }*/

  function checkZonePolicyCount(deleteRow) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkZonePolicyCount()");

    var count = 0;
    deleteRow.parent().children(':not(:first)').each(function() {
      count++
    });
    if (count == 1) {
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkZonePolicyCount()");
      return true;
    } else {
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkZonePolicyCount()");
      return false;
    }

  }

  function checkPolicyLimit() {
    var count = 1;
    if (!editPolicyFlag) {
      $('#securityPolicytable>tbody').each(function() {
        $(this).find('tr:not(:first)').each(function() {
          count++
        });
      });
      if (count > 32) {
        $('#maxLimitPol').dialog('open');
        return false;
      }
      else {
        return true;
      }
    }
    else {
      return true;
    }
  }

  function resetFields() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "resetFields()");
    $("#SecurityPolicyName").val('');
    $("#SecurityPolicyDescription").val('');
    $("#SecurityApplicationPolicySelectedList").empty();
    $("#availableAppSearch").val('');
    $("#selectedAppSearch").val('');
    $('#securityPortsSearch').val('');
    $('#availableGroupSelectedSearch').val('');
    $('#availableGroupSearch').val('');
    $('#SecurityTableSearch').val('');
    $('#SecuritysiteName').val('');
    $('#SecurityPortSource').attr('disabled', false);
    $('#SecurityPortSourceProtocol').attr('disabled', false);
    $('#SecurityPortDestination').attr('disabled', false);
    $('#SecurityPortDestinationProtocol').attr('disabled', false);
    $('#SecurityPortSourceProtocol').val('TCP');
    $('#SecurityPortDestinationProtocol').val('TCP');
    if ($("#SecurityNetworkSourceErrorSpan").hasClass('hint--top')) {
      $("#SecurityNetworkSourceErrorSpan").removeAttr("data-hint");
      $("#SecurityNetworkSourceErrorSpan").removeClass("hint--top");
      $("#SecurityNetworkSource").removeClass("highlightTextBox");
    }
    if ($("#SecurityNetworkDestinationErrorSpan").hasClass('hint--top')) {
      $("#SecurityNetworkDestinationErrorSpan").removeAttr("data-hint");
      $("#SecurityNetworkDestinationErrorSpan").removeClass("hint--top");
      $("#SecurityNetworkDestination").removeClass("highlightTextBox");
    }
    if ($("#SecurityPortSourceErrorSpan").hasClass('hint--top')) {
      $("#SecurityPortSourceErrorSpan").removeAttr("data-hint");
      $("#SecurityPortSourceErrorSpan").removeClass("hint--top");
      $("#SecurityPortSource").removeClass("highlightTextBox");
    }
    if ($("#SecurityPortDestinationErrorSpan").hasClass('hint--top')) {
      $("#SecurityPortDestinationErrorSpan").removeAttr("data-hint");
      $("#SecurityPortDestinationErrorSpan").removeClass("hint--top");
      $("#SecurityPortDestination").removeClass("highlightTextBox");
    }
    $("ul#SecurityNetworkSourceList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityNetworkDestinationList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityApplicationPolicySelectedList").children().each(function() {
      $(this).remove();
    });
    $("ul#SecurityPortSourceList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityPortDestinationList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityUserGroupSelectedList li").each(function() {
      $(this).remove();
    });
    $("#SecurityblockUrlTable").find('tr').each(function() {
      $(this).find('td').each(function() {
        $(this).parents('tr').remove();
      });
    });

    $("#SecurityUserGroupAvailableList li").each(function() {
      $(this).show();
    });
    $("#SecuritypermittedSitesList li").each(function() {
      $(this).show()
    });
    $("#SecurityPortAvailableList li").each(function() {
      $(this).show();
      $(this).draggable('enable');
      $(this).removeAttr("added");
    });
    $('#SecurityApplicationPolicyListDiv').find(".categoryList").each(function() {
      $(this).show();
      $(this).removeAttr('disabled');

      //$(this).find('.expandList').find('img').attr("src", "images/key_plus.png");
      $(this).find('.expandList div').addClass('key_plus');
      $(this).find('.expandList div').removeClass('key_minus');
      $(this).find('.appList li').each(function() {
        $(this).show();
        $(this).removeAttr('disabled');
      });
      $(this).find('.appList').each(function() {
        $(this).hide();

      });

    });
    //$('#SecurityNetworkSourceList').append('<li value="Any" ipType=""><a href="#" class="utmNetwork" /><span class="paddingText">ANY</span></li>');
    //$('#SecurityNetworkDestinationList').append('<li value="Any" ipType=""><a href="#" class="utmNetwork" /><span class="paddingText">ANY</span></li>');
    //$('#SecurityPortSourceList').append('<li value="ANY" protocol="ip"><a href="#" class="utmPort" /><span class="paddingText">ANY</span></li>');
    //$('#SecurityPortDestinationList').append('<li value="ANY" protocol="ip"><a href="#" class="utmPort" /><span class="paddingText">ANY</span></li>');
    $('#SecurityNetworkSourceList').append('<li value="Any" ipType=""><a href="#" class="utmSprite network  displayInlineBlock floatLeft" /><span class="paddingText">' + "Any" + '</span></li>');
    $('#SecurityNetworkDestinationList').append('<li value="Any" ipType=""><a href="#" class="utmSprite network displayInlineBlock floatLeft" /><span class="paddingText">' + "Any" + '</span></li>');
    $('#SecurityPortSourceList').append('<li value="ANY" protocol="ip"><a href="#" class="utmSprite port displayInlineBlock" /><span class="paddingText verticalAlignTop">' + "Any" + '</span></li>');
    $('#SecurityPortDestinationList').append('<li value="ANY" protocol="ip"><a href="#" class="utmSprite port displayInlineBlock" /><span class="paddingText verticalAlignTop">' + "Any" + '</span></li>');

    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "resetFields()");

  }
  function cleanAllCntrols() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "cleanAllCntrols()");
    /*
     $("ul#SecuritylanInterfaceList li").each(function () {
     $(this).remove();
     });

     $("ul#SecuritywanInterfaceList li").each(function () {
     $(this).remove();
     });*/
    //$('#SecurityApplicationPolicyListDiv').empty();
    $("ul#SecurityNetworkSourceList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityNetworkDestinationList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityApplicationPolicySelectedList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityPortSourceList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityPortDestinationList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityUserGroupAvailableList li").each(function() {
      $(this).remove();
    });
    $("ul#SecurityUserGroupSelectedList li").each(function() {
      $(this).remove();
    });
    $("#SecurityblockUrlTable").find('tr').each(function() {
      $(this).find('td').each(function() {
        $(this).parents('tr').remove();
      });
    });
    $("ul#SecuritypermittedSitesList li").each(function() {
      $(this).remove();
    });
    /*$("ul#SecurityPortAvailableList li").each(function () {
     $(this).remove();
     });*/
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "cleanAllCntrols()");
  }
  function getUserGroup(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getUserGroup()");

    $(xml).find('aaa attribute list').each(function() {
      //$(xml).find('aaa').each(function () {
      //var groupSplit,  groupType;

      var groupName = $(this).find('Name').text();
      if (groupName != "") {
        //if (groupName.indexOf('local-d_')==0) {
        //   groupSplit=groupName.split('local-d_');
        //    groupName=groupSplit[1];
        //    groupType='Local';
        //}else if (groupName.indexOf('active-d_')==0) {
        //    groupSplit=groupName.split('active-d_');
        //    groupName=groupSplit[1];
        //    groupType='Active';
        //}else{
        //    groupType='';
        //}
        //var groupnamewithtype="";
        //if (groupType=="Active") {
        //    groupnamewithtype="active-d_"+groupName;
        //}
        //if (groupType=="Local") {
        //    groupnamewithtype="local-d_"+groupName;
        //}
        $('#SecurityUserGroupAvailableList').append('<li value="' +
                                                    groupName + '"' + 'groupName="' +
                                                    groupName + '"' + '><a href="#" class="utmSprite top_10_users zoom80Percent displayInlineBlock verticalAlignTop" /><span class="paddingText">' +
                                                    groupName + '</span></li>');
      }
    });
    $("#SecurityUserGroupAvailableList li").draggable({
      helper: "clone",
      tolerance: "touch",
      drag: function() {
      },
      stop: function() {
      }
    });
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getUserGroup()");

  }


  function getAvailableApplication() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getAvailableApplication()");
    var app, cat = "", resp2;
    //var resp;
    try {

      //resp=deviceCommunicator.getExecCmdOutput("show ip nbar port-map");
      resp2 = deviceCommunicator.getExecCmdOutput("show ip nbar protocol-attribute");
      /*respLines=resp.split("\n");
       $.each(respLines,function(index,value){
       if (value.indexOf("port-map")>-1) {
       app=value.trim().split(/\s+/)[1].trim();
       cat=getApplicationCategory(app,resp2);
       if (cat=="") {
       cat="no-category";
       }
       var found=false;
       $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function(){
       if ($(this).attr("data")==cat) {
       var appFound=false;
       $(this).find('.appList li').each(function(){
       if($(this).text().trim()==app){
       appFound=true;
       return false;
       }
       });
       if (!appFound) {
       appArr.push({name:cat, value:app});
       $(this).find('.appList').append('<li val="'+app+'" data="'+cat+'"><a href="#" class="utmApplication" />&nbsp;'+app+'</li>');
       ////consoleLog(app);
       }
       found=true;
       }
       });
       if (!found) {
       appArr.push({name:cat, value:app});
       $('#SecurityApplicationPolicyListDiv').append('<div class="categoryList" data="'+cat+'"><span class="expandList"><img src="images/key_plus.png">'+cat+'</span><ul class="appList connectedSortable"></ul></div>');
       $(".appList:last").append('<li val="'+app+'" data="'+cat+'"><a href="#" class="utmApplication" />&nbsp;'+app+'</li>');
       ////consoleLog(app);
       }

       ////consoleLog("app: "+app+"   cat: "+cat);
       }
       });*/


    } catch (error) {
      errorLogInConsole(error);
    }
    try {
      resp3 = deviceCommunicator.getConfigCmdOutput("class-map type inspect INTERNAL_DOMAIN_FILTER \n match protocol ?");
    }
    catch (error) {
      var responsePro = error.errorResponse;
      var ignoreList = ["stun-ice"];
      protocolLines = responsePro.split("\n");
      $.each(protocolLines, function(index, value) {
        var ignoreCheck = false;
        app = value.trim().split(/\s+/)[0];
        $.each(ignoreList, function(index1, value1) {
          if (app == value1) {
            ignoreCheck = true;
            return false;
          }
        });
        if (!ignoreCheck && app.indexOf("/") == -1) {
          cat = getApplicationCategory(app, resp2);
          if (cat == "") {
            cat = "other";
          }
          var found = false;
          $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function() {
            if ($(this).attr("data") == cat) {
              var appFound = false;
              $(this).find('.appList li').each(function() {
                if ($(this).text().trim() == app) {
                  appFound = true;
                  return false;
                }
              });
              if (!appFound) {
                $(this).find('.appList').append('<li val="' + app + '" data="' + cat + '"><a href="#" class="utmSprite application displayInlineBlock" />&nbsp;' + app + '</li>');
                appArr.push({name: cat, value: app});
                ////consoleLog(app);
              }
              found = true;
            }
          });
          if (!found) {
            $('#SecurityApplicationPolicyListDiv').append('<div class="categoryList" data="' + cat +
                                                          '"><span class="expandList"><div class="utmSprite key_plus displayInlineBlock floatLeft"></div>' + cat +
                                                          '</span><ul class="appList connectedSortable"></ul></div>');
            $(".appList:last").append('<li val="' + app + '" data="' + cat + '"><a href="#" class="utmSprite application displayInlineBlock" />&nbsp;' + app + '</li>');
            appArr.push({name: cat, value: app});
            ////consoleLog(app);
          }
        }
      });
    }
    appArr = sortByKeyValue(appArr);

    /*//consoleLog(appArr);
     totalcount=0;
     categorycount=0;
     $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function(){
     //consoleLog("Category: "+$(this).attr('data').toUpperCase());
     count=1;
     categorycount++;
     $(this).find('.appList li').each(function(){
     //consoleLog(count+". "+$(this).text());
     count++;
     totalcount++
     });
     //consoleLog("Total Applications in "+$(this).attr('data')+": "+count);
     });
     //consoleLog("Total Applications: "+totalcount);
     //consoleLog("Total Categories: "+categorycount);*/
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getAvailableApplication()");
  }

  function sortByKeyValue(array) {
    return array.sort(function(a, b) {
      var x = a['name'];
      var y = b['name'];

      var p = a['value'];
      var q = b['value'];

      if (typeof x == "string")
      {
        x = x.toLowerCase();
        y = y.toLowerCase();
      }

      return ((x < y) ? -1 : ((x > y) ? 1 : (p < q) ? -1 : ((p > q) ? 1 : 0)));
    });
  }

  function getApplicationCategory(application, resp) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getApplicationCategory()");
    try {
      var category = "";
      respLines = resp.split("Protocol Name");
      $.each(respLines, function(index, value) {
        if (value.trim() != "") {
          splitValues = value.trim().split("\n");
          if (splitValues[0].indexOf(":") > -1) {
            appName = splitValues[0].trim().split(":")[1].trim();
            if (appName.toLowerCase() == application.toLowerCase()) {
              $.each(splitValues, function(index, val) {
                if (val.indexOf("category") > -1) {
                  category = val.trim().split(":")[1].trim();
                  //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getApplicationCategory()");
                  return false;
                }

              });
            }
          }
          if (category != "") {
            //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getApplicationCategory()");
            return false;
          }
        }
      });
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getApplicationCategory()");
      return category;
    } catch (error) {
      errorLogInConsole(error);
    }
  }

  function getAvailableCategory() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getAvailableCategory()");
    var response, catApps;
    try {
      response = deviceCommunicator.getExecCmdOutput("show ip nbar attribute category");
      var rows = response.split("\n");
      for (var i = 0; i < rows.length; i++) {
        var newRow = rows[i].split(':');
        if (newRow[0].trim() == "Groups" || newRow[0].trim() == "") {
          catApps = getApplicationPerCategory(newRow[1].trim());
          if (catApps != null) {
            $('#SecurityApplicationPolicyListDiv').append('<div class="categoryList" data="' + newRow[1].trim() +
                                                          '"><span class="expandList"><div class="utmSprite key_plus displayInlineBlock floatLeft"></div>' +
                                                          newRow[1].trim() + '</span><ul class="appList connectedSortable"></ul></div>');
            for (var j = 0; j < catApps.length; j++) {
              $(".appList:last").append('<li val="' + catApps[j] + '" data="' + newRow[1].trim() +
                                        '"><a href="#" class="utmSprite application displayInlineBlock" />&nbsp;' + catApps[j] + '</li>');
              //$('#SecurityApplicationPolicyList').append('<li val="'+catApps[j]+'" data="'+newRow[1].trim()+'"><a href="#" class="utmApplication" />&nbsp;'+catApps[j]+'</li>');
            }
            $(".appList:last").hide();
            catApps.length = 0;
          }
        }
      }

    }
    catch (error) {
      errorLogInConsole(error.response);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getAvailableCategory()");
  }

  function getApplicationPerCategory(category) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getApplicationPerCategory()");
    var appArr = [], response, rows, p;
    var appCli = "show ip nbar attribute category " + category;
    try {
      response = deviceCommunicator.getExecCmdOutput(appCli);
      if (response != "") {
        rows = response.split("\n");
        for (var i = 0; i < rows.length; i++) {
          var newRow = rows[i].split(/\s+/);
          p = newRow;
          if (newRow[0].trim() == "") {
            appArr.push(newRow[1].trim());
          } else {
            appArr.push(newRow[0].trim());
          }
        }
        //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getApplicationPerCategory()");
        return appArr;
      } else {
        //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getApplicationPerCategory()");
        return null;
      }


    } catch (e) {
      errorLogInConsole(e);
    }

  }

  function getAvailablePopularSites() {
    $('#SecuritypermittedSitesList').append(' <li data-id="1"><center><a href="#" class="utmSprite facebook hint--bottom" data-hint="facebook.com" caption="www.facebook.com" titleimg="utmSprite facebook20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="2"><center><a href="#" class="utmSprite youtube hint--bottom" data-hint="youtube.com" caption="www.youtube.com" titleimg="utmSprite youtube20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="3"><center><a href="#" class="utmSprite twitter hint--bottom" data-hint="twitter.com" caption="www.twitter.com" titleimg="utmSprite twitter20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="4"><center><a href="#" class="utmSprite googleplus hint--bottom" data-hint="plus.google.com" caption="https://plus.google.com" titleimg="utmSprite googleplus20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="5"><center><a href="#" class="utmSprite yahoo hint--bottom" data-hint="yahoo.com" caption="www.yahoo.com" titleimg="utmSprite yahoo20" ></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="6"><center><a href="#" class="utmSprite linkedin hint--bottom" data-hint="linkedin.com" caption="www.linkedin.com" titleimg="utmSprite linkedin20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="7"><center><a href="#" class="utmSprite baidu hint--bottom" data-hint="baidu.com" caption="www.baidu.com" titleimg="utmSprite baidu20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="8"><center><a href="#" class="utmSprite blogspot hint--bottom" data-hint="blogspot.com" caption="www.blogspot.com" titleimg="utmSprite blogspot20"></a></center></li>');
    $('#SecuritypermittedSitesList').append(' <li data-id="9"><center><a href="#" class="utmSprite wordpress hint--bottom" data-hint="wordpress.com" caption="www.wordpress.com" titleimg="utmSprite wordpress20"></a></center></li>');
    $("#SecuritypermittedSitesList li").draggable({
      tolerance: "touch",
      revert: true,
      drag: function() {
      },
      stop: function() {
      }
    });
  }
  function getAvailablePorts(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getAvailablePorts()");
    /*$('#SecurityPortAvailableList').append('<li value="tcp" ><a href="#" class="utmPort" /><span class="paddingText">tcp</span></li>');
     $('#SecurityPortAvailableList').append(' <li value="udp" ><a href="#" class="utmPort" /><span class="paddingText">udp</span></li>');
     $('#SecurityPortAvailableList').append('<li value="PCP" ><a href="#" class="utmPort" /><span class="paddingText">PCP</span></li>');
     $('#SecurityPortAvailableList').append('<li value="ICMP" ><a href="#" class="utmPort" /><span class="paddingText">ICP</span></li>');*/
    var found = false;
    var clearPorts = ["eq", "gt", "lt", "range", "source"];
    $(xml).find('object-group').each(function() {
      $(this).find('service').each(function() {
        if ($(this).find('ObjectGroupName').text().trim().indexOf("INTERNAL_UTM_SERVICE") == 0) {
          found = true;
          //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getAvailablePorts()");
          return false;
        }
      });
      if (found){
        //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getAvailablePorts()");
        return false;
      }
    });
    if (!found){
      objectGroupPort("INTERNAL_UTM_SERVICE", "", "", " ", " ", " ", " ");
    }

    try {
      response = deviceCommunicator.getConfigCmdOutput("object-group service INTERNAL_UTM_SERVICE \n tcp ?");
    }
    catch (error) {
      var responseTcp = error.errorResponse;
      tcpLines = responseTcp.split("\n");
      for (var i = 1; i < tcpLines.length - 1; i++) {
        var tcpVal = tcpLines[i].split(/\s+/)[1].trim();
        var portLines = tcpLines[i].split(/\s+/);
        var portNo;
        $.each(portLines, function(index, value) {
          if (value.indexOf('(') > -1 && value.indexOf(')') > -1) {
            if (value.indexOf(',') > -1) {
              splitArr = value.split(',');
              portNo = splitArr[splitArr.length - 1].replace('(', '').replace(')', '').trim();
            } else {
              portNo = value.replace('(', '').replace(')', '').trim();
            }
          }
        });
        //alert(tcpLines[i].split(/\s+/)[0].trim());
        if (tcpVal != "") {
          $('#SecurityPortAvailableList').append('<li portno="' + portNo + '" value="' + tcpVal +
                                                 '" tcp="true" protocol="' + tcpVal +
                                                 '"><a href="#" class="utmSprite port displayInlineBlock" /><span class="paddingText verticalAlignTop">' +
                                                 tcpVal + '</span></li>');
        }

      }
    }
    var responseUdp;
    try {
      responseUdp = deviceCommunicator.getConfigCmdOutput("object-group service INTERNAL_UTM_SERVICE \n udp ?");
    }
    catch (error) {
      responseUdp = error.errorResponse;
      udpLines = responseUdp.split("\n");
      for (var i = 1; i < udpLines.length - 1; i++) {
        var found = false;
        var udpVal = udpLines[i].split(/\s+/)[1].trim();
        var portLines = udpLines[i].split(/\s+/);
        var portNo;
        $.each(portLines, function(index, value) {
          if (value.indexOf('(') > -1 && value.indexOf(')') > -1) {
            if (value.indexOf(',') > -1) {
              splitArr = value.split(',');
              portNo = splitArr[splitArr.length - 1].replace('(', '').replace(')', '').trim();
            } else {
              portNo = value.replace('(', '').replace(')', '').trim();
            }
          }
        });
        //alert(tcpLines[i].split(/\s+/)[0].trim());
        if (udpVal != "") {
          $('#SecurityPortAvailableList>li').each(function() {
            if ($(this).text().trim() == udpVal) {
              $(this).after('<li portno="' + portNo + '" value="' + udpVal +
                            '" udp="true" protocol="' + udpVal + '"><a href="#" class="utmSprite port displayInlineBlock" /><span class="paddingText verticalAlignTop">' +
                            udpVal + ' (udp)</span></li>');
              //$(this).attr("udp","true");
              $(this).find('span').text($(this).text() + " (tcp)");
              found = true;
            }
          });
          if (!found){
            $('#SecurityPortAvailableList').append('<li portno="' + portNo + '" value="' +
                                                   udpVal + '" udp="true" protocol="' +
                                                   udpVal + '"><a href="#" class="utmSprite port displayInlineBlock" /><span class="paddingText verticalAlignTop">' +
                                                   udpVal + '</span></li>');
          }
        }
      }

    }
    $.each(clearPorts, function(index, value) {
      $('#SecurityPortAvailableList li').each(function() {
        if ($(this).attr("protocol") == value){
          $(this).remove();
        }
      });

    });
    $("#SecurityPortAvailableList li").draggable({
      tolerance: "touch",
      helper: "clone",
      drag: function() {
      },
      stop: function() {
      }
    });
    loadPorts = true;
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getAvailablePorts()");

  }
  function intializeDialog(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "intializeDialog()");
    //getAvailabelAppication();
    checkInternalDomainFilter(xml);
    checkNbarClassify(xml);
    if (appArr.length == 0) {
      getAvailableApplication();
    }
    //getAvailableCategory();
    getzone();
    getUserGroup(xml);
    getAvailablePopularSites();
    if (!loadPorts){
      getAvailablePorts(xml);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "intializeDialog()");

  }

  function checkInternalDomainFilter(xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "checkInternalDomainFilter()");
    var found = false;
    $(xml).find('class-map').each(function() {
      $(this).find('type').each(function() {
        $(this).find('inspect').each(function() {
          $(this).find('match-any').each(function() {
            if ($(this).find('ClassMapName').text().trim().toUpperCase() == "INTERNAL_DOMAIN_FILTER") {
              found = true;
            }
          });
        });
      });
    });
    if (!found) {
      ClassMapApp("INTERNAL_DOMAIN_FILTER", "msnmsgr");
      ClassMapApp("INTERNAL_DOMAIN_FILTER", "ymsgr");
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "checkInternalDomainFilter()");
  }

  function classMapURL(classMapPolicyName_url, PolicyName_urllist) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "classMapURL()");
    var arr = [],
      response, container;
    if ($('#PolicyAction').val() == "inspect") {
      container = "msnmsgr";
    } else {
      container = "ymsgr";
    }
    arr.push({
      name: "policyName_url",
      value: classMapPolicyName_url
    }, {
      name: "policyName_urllist",
      value: PolicyName_urllist
    }, {
      name: "container",
      value: container
    }
    );
    response = deviceCommunicator.configureCommandsFromTemplate("classMapURL.txt", arr, true);

    arr.length = 0;
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "classMapURL()");
    return response;
  }

  function applyParameterMapURL(policyName) {
    //code
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applyParameterMapURL()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var PolicyName_urllist = policyName + "_urllist";
      var classMapPolicyName_url = policyName + "_url"
      var arr = [], response = "";
      if (($("#SecurityblockUrlTable > tbody > tr").length) > 0) {
        blockUrl = "";
        $("#SecurityblockUrlTable").find('tr').each(function(index) {
          $(this).find('td.SecurityblockUrlText').each(function() {
            keyword = $(this).text().replace("www.", "").replace("http://", "").replace("https://", "").replace(".com", "").replace(".in", "").trim();
            keyword = ".*" + keyword + ".*";
            blockUrl = keyword.toLowerCase();
            //alert(blockUrl);
            arr.push({
              name: "policyName_urllist",
              value: PolicyName_urllist
            }, {
              name: "url",
              value: blockUrl
            });
            response = response + deviceCommunicator.configureCommandsFromTemplate("parameterMapURL.txt", arr, true) + "\n";
            arr.length = 0;
          });
        });
        response = response + classMapURL(classMapPolicyName_url, PolicyName_urllist) + "\n";
        var resp3 = deviceCommunicator.getConfigCmdOutput(response);
      }
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("classMapURL:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applyParameterMapURL()");
  }
  function ClassMapApp(policyName_app, appName) {
    //code
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "ClassMapApp()");
    var arr = [],
      response;
    arr.push({
      name: "policyName_app",
      value: policyName_app
    }, {
      name: "appName",
      value: appName
    });
    try {
      response = deviceCommunicator.configureCommandsFromTemplate("classMapApp.txt", arr, false);
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("classMapApps:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    arr.length = 0;
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "ClassMapApp()");
  }

  function ClassMapCat(policyName_app, categoryClassMap) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "ClassMapCat()");
    var arr = [],
      response;
    arr.push({
      name: "policyName_app",
      value: policyName_app
    }, {
      name: "categoryName",
      value: categoryClassMap
    });
    try {
      response = deviceCommunicator.configureCommandsFromTemplate("classMapCategory.txt", arr, false);
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("classMapCategory:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    arr.length = 0;
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "ClassMapCat()");

  }

  function mapCategoryToClass(categoryName, policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "mapCategoryToClass()");
    var found = false, catCount = 0, returnVal = [];
    $('#securityPolicytable').find('.applicationCatList').each(function() {
      var polName = $(this).siblings('.securityPolicyName').text();
      if (policyName.toLowerCase().trim() != polName.toLowerCase().trim()) {
        var list = $(this).attr("category").split(",");
        var catData = $(this).attr("catData").split(",");
        $.each(list, function(index1, value1) {
          if (value1 == categoryName) {
            found = true;
            catCount = catData[index1];
          }
        });
      }

    });
    returnVal.push({name: found, value: catCount});
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "mapCategoryToClass()");
    return returnVal;
    /*var cli="show class-map type inspect "+categoryName;
     var resp=deviceCommunicator.getExecCmdOutput(cli);
     if (resp.trim()=="") {
     return true;
     }else{
     return false;
     }*/
  }

  function ApplyClassMapApp(policyName) {
    //code
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "ApplyClassMapApp()");
    try {
      var PolicyName_app = policyName + "_app";
      //var arr = [];
      var response;
      $("#SecurityApplicationPolicySelectedListDiv .categoryList").each(function() {
        //alert($(this).find('.expandList').text());
        var appCount = 0, postfix = 0, temp, categoryClassMap = [], addClass = false, concantenateClass = "",
            categoryMap = "class-map type inspect match-any " + PolicyName_app + "\n";
        var categoryClassName = "CATEGORY_" + $(this).find('.expandList').text().trim().toUpperCase();
        var categoryCheck = mapCategoryToClass($(this).find('.expandList').text().trim(), policyName);
        temp = categoryClassName;
        if (!categoryCheck[0]['name']) {
          var classMapCli = "class-map type inspect match-any " + categoryClassName + "\n";
          $(this).find('.appList li').each(function() {
            appCount++;
            if (appCount > 73) {
              classMapCli = classMapCli + "match protocol " + $(this).attr("val").trim() + "\n";
              appCount = 0;
              postfix++;
              addClass = true;
            }
            if (addClass) {
              categoryClassMap.push({name: temp, value: classMapCli});
              temp = categoryClassName + "_" + postfix;
              classMapCli = "class-map type inspect match-any " + temp + "\n";
              addClass = false;
              //ClassMapApp(temp,$(this).attr("val").trim());
            }
            else{
              classMapCli = classMapCli + "match protocol " + $(this).attr("val").trim() + "\n";
            }
          });
          if (appCount <= 73) {
            categoryClassMap.push({name: temp, value: classMapCli});
          }

          $.each(categoryClassMap, function(index, value) {
            concantenateClass = concantenateClass + value['value']
            categoryMap = categoryMap + "match class-map " + value['name'] + "\n";
          });
          try {
            resp = deviceCommunicator.getConfigCmdOutput(concantenateClass);
            ////consoleLog(concantenateClass);
          } catch (error) {
            errorLogInConsole(error);
          }
          try {
            resp = deviceCommunicator.getConfigCmdOutput(categoryMap);
            ////consoleLog(categoryMap);
          } catch (error) {
            errorLogInConsole(error);
          }
        } else {
          subCat = categoryCheck[0]['value'];
          for (var i = 0; i < parseInt(subCat); i++) {
            if (i == 0) {
              categoryMap = categoryMap + "match class-map " + categoryClassName + "\n";
            } else {
              categoryMap = categoryMap + "match class-map " + categoryClassName + "_" + i + "\n";
            }
          }
          try {
            resp = deviceCommunicator.getConfigCmdOutput(categoryMap);
          } catch (error) {
            errorLogInConsole(error);
          }
        }

      });
      $("ul#SecurityApplicationPolicySelectedList").children('li').each(function() {
        ClassMapApp(PolicyName_app, $(this).text().trim());
      });
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("ClassMapApp:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole("ClassMapApp:" + error.response);
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "ApplyClassMapApp()");
  }

  function ClassMapUserGroup(policyName_user, userGroup) {
    //code
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "ClassMapUserGroup()");
    var arr = [],
      response;
    arr.push({
      name: "policyName_user",
      value: policyName_user
    }, {
      name: "userGroup",
      value: userGroup
    });
    try {
      response = deviceCommunicator.configureCommandsFromTemplate("classMapUserGroup.txt", arr, true);
      arr.length = 0;
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "ClassMapUserGroup()");
      return response;
    } catch (e) {
      errorLogInConsole(e);
      //consoleLogMethodDetailsEndWithError("configureSecurityPolicy.js", "ClassMapUserGroup()", e);
      return "";
    }


  }
  function ApplyClassMapUserGroup(policyName) {
    //code
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "ApplyClassMapUserGroup()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim();
      var PolicyName_user = policyName + "_user", response = "";
      //var arr = [];
      var response;
      $("ul#SecurityUserGroupSelectedList li").each(function() {
        response = response + ClassMapUserGroup(PolicyName_user, $(this).attr('groupname').trim());
      });
      var resp3 = deviceCommunicator.getConfigCmdOutput(response);
      ////consoleLog(response);
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("ClassMapUserGroup:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "ApplyClassMapUserGroup()");
  }

  function sourceNetwork(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "sourceNetwork()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_network = policyName + "_src_net";
      //var arr = [];
      var response = "";
      $("ul#SecurityNetworkSourceList li").each(function() {
        if ($(this).text().trim().indexOf("/") != -1) {
          splitSubnet = $(this).text().trim().split('/');
          response = response + objectGroupNetwork(policyName_network, $(this).attr('ipType'), splitSubnet[0] + " /" + splitSubnet[1], "Source") + "\n";
        } else {
          response = response + objectGroupNetwork(policyName_network, $(this).attr('ipType'), $(this).text().trim(), "Source") + "\n";
        }
      });
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "sourceNetwork()");
      return response;
    } catch (error) {
      errorLogInConsole(error);
      //consoleLogMethodDetailsEndWithError("configureSecurityPolicy.js", "sourceNetwork()", error);
      return "";
    }
  }

  function DestinationNetwork(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "DestinationNetwork()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_network = policyName + "_dst_net";
      //var arr = [];
      var response = "";
      $("ul#SecurityNetworkDestinationList li").each(function() {
        if ($(this).text().trim().indexOf("/") != -1) {
          splitSubnet = $(this).text().trim().split('/');
          response = response + objectGroupNetwork(policyName_network, $(this).attr('ipType'), splitSubnet[0] + " /" + splitSubnet[1], "Destination") + "\n";
        }
        else {
          response = response + objectGroupNetwork(policyName_network, $(this).attr('ipType'), $(this).text().trim(), "Destination") + "\n";
        }
      });
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "DestinationNetwork()");
      return response;
    } catch (error) {
      //consoleLogMethodDetailsEndWithError("configureSecurityPolicy.js", "DestinationNetwork()", error);
      errorLogInConsole(error);
      return "";
    }
  }
  function objectGroupNetwork(policyName_network, ipType, ipOrRange, sourceorDest) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "objectGroupNetwork()");
    try {
      var arr = [],
        response = "";
      arr.push({
        name: "policyName_network",
        value: policyName_network
      }, {
        name: "ipType",
        value: ipType
      }, {
        name: "ipOrRange",
        value: ipOrRange
      });
      response = deviceCommunicator.configureCommandsFromTemplate("objectGroupNetwork.txt", arr, true);
      arr.length = 0;
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "objectGroupNetwork()");
      return response;
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("objectGroupNetwork:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
      //consoleLogMethodDetailsEndWithError("configureSecurityPolicy.js", "objectGroupNetwork()", error);
      return "";
    }
  }

  function applyobjectGroupNetwork(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applyobjectGroupNetwork()");
    try {
      var sourceCli = sourceNetwork(policyName);
      var desCli = DestinationNetwork(policyName);
      var resp3 = deviceCommunicator.getConfigCmdOutput(sourceCli + desCli);
      ////consoleLog(sourceCli+desCli);
    } catch (error) {
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applyobjectGroupNetwork()");
  }


  function sourcePort(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "sourcePort()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_service = policyName + "_svc";
      $("ul#SecurityPortSourceList li").each(function() {
        if (($(this).text().toLowerCase().trim().indexOf(':')) <= -1) {
          var parentProtocol;
          if ($(this).attr('tcp') == "true") {
            parentProtocol = "tcp";
          } else if ($(this).attr('udp') == "true") {
            parentProtocol = "udp";
          }
          objectGroupPort(policyName_service, parentProtocol, $(this).attr('source'), $(this).attr('protocol'), " ", " ", " ");
          //checkFlagACL=true;
        } else {
          portresult = $(this).text().split(":");
          protocol = portresult[0];
          portOrRange = portresult[1];
          objectGroupPort(policyName_service, protocol, $(this).attr('source'), $(this).attr('portType'), portOrRange, " ", " ");
          //checkFlagACL=true;
        }
      });
    } catch (error) {
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "sourcePort()");
  }

  function DestinationPort(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "DestinationPort()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_service = policyName + "_svc";
      $("ul#SecurityPortDestinationList li").each(function() {
        if (($(this).text().toLowerCase().trim().indexOf(':')) <= -1) {
          var parentProtocol;
          if ($(this).attr('tcp') == "true") {
            parentProtocol = "tcp";
          } else if ($(this).attr('udp') == "true") {
            parentProtocol = "udp";
          }
          objectGroupPort(policyName_service, parentProtocol, " ", $(this).attr('protocol'), " ", " ", " ");
          //checkFlagACL=true;
        } else {
          portresult = $(this).text().split(":");
          protocol = portresult[0];
          portOrRange = portresult[1];
          objectGroupPort(policyName_service, protocol, $(this).attr('source'), $(this).attr('portType'), portOrRange, " ", " ");
          //checkFlagACL=true;
        }
      });
    } catch (error) {
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "DestinationPort()");
  }
  function objectGroupPort(policyName_service, protocol, source, portType, portOrRange, portDesType, portDesorRange) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "objectGroupPort()");
    try {
      var arr = [],
        response;
      arr.push({
        name: "policyName_service",
        value: policyName_service
      }, {
        name: "protocol",
        value: protocol
      }, {
        name: "source",
        value: source
      }, {
        name: "portType",
        value: portType
      }, {
        name: "portOrRange",
        value: portOrRange
      }, {
        name: "portDesType",
        value: portDesType
      }, {
        name: "portDesorRange",
        value: portDesorRange
      });
      response = deviceCommunicator.configureCommandsFromTemplate("objectGroupPort.txt", arr, false);
      arr.length = 0;
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("objectGroupPort:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "objectGroupPort()");
  }
  function applyobjectGroupPort(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applyobjectGroupPort()");
    try {
      var policyName_service = policyName + "_svc";
      /*var anySource=false,anyDes=false;
       if ($('ul#SecurityPortSourceList').find('li').length==1 && $('ul#SecurityPortSourceList').find('li').text().trim().toUpperCase()=="ANY")
       anySource=true;
       if ($('ul#SecurityPortDestinationList').find('li').length==1 && $('ul#SecurityPortDestinationList').find('li').text().trim().toUpperCase()=="ANY")
       anyDes=true;
       */
      var destCheck = checkTCPUDP($('#SecurityPortDestinationList'), false, null);
      var sourceCheck = checkTCPUDP($('#SecurityPortSourceList'), false, null);
      if (destCheck == "" && sourceCheck == ""){
        objectGroupPort(policyName_service, " ", " ", "ip", " ", " ", " ");
      }

      if (destCheck == "" && sourceCheck != ""){
        sourcePort(policyName);
      }

      if (destCheck != "" && sourceCheck == ""){
        DestinationPort(policyName);
      }

      if (destCheck != "" && sourceCheck != "") {
        $("ul#SecurityPortSourceList li").each(function() {
          var parentProtocol = "", protocol = "", portOrRange = "";
          if (($(this).text().toLowerCase().trim().indexOf(':')) <= -1) {
            protocol = "eq " + $(this).attr('protocol');
            if ($(this).attr('tcp') == "true") {
              parentProtocol = "tcp";
            } else if ($(this).attr('udp') == "true") {
              parentProtocol = "udp";
            }
            //objectGroupPort(policyName_service, parentProtocol,$(this).attr('source'), $(this).attr('protocol'), " ", " "," ");
            //checkFlagACL=true;
          } else {
            portresult = $(this).text().split(":");
            parentProtocol = portresult[0];
            portOrRange = portresult[1];
            protocol = $(this).attr('portType');
            //objectGroupPort(policyName_service, protocol,$(this).attr('source'), $(this).attr('portType'), portOrRange, " ", " ");
          }

          $("ul#SecurityPortDestinationList li").each(function() {
            if (($(this).text().toLowerCase().trim().indexOf(':')) <= -1) {
              objectGroupPort(policyName_service, parentProtocol, "source", protocol, portOrRange, "eq " + $(this).attr('protocol'), " ");
              //checkFlagACL=true;
            } else {
              portDesresult = $(this).text().split(":");
              protocolDes = portDesresult[0];
              portOrRangeDes = portDesresult[1];
              objectGroupPort(policyName_service, parentProtocol, "source", protocol, portOrRange, $(this).attr('portType'), portOrRangeDes);
              //checkFlagACL=true;
            }
          });

        });
      }
      //sourcePort(policyName);
      //DestinationPort(policyName);
    } catch (error) {
      // return false;
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applyobjectGroupPort()");
  }


  function networkPortAccessList(policyName_acl, policyName_service, policyName_srcNWObjGrp, policyName_destNWObjGrp) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "networkPortAccessList()");
    try {
      var arr = [],
        response;
      arr.push({
        name: "policyName_acl",
        value: policyName_acl
      }, {
        name: "policyName_service",
        value: policyName_service
      }, {
        name: "policyName_srcNWObjGrp",
        value: policyName_srcNWObjGrp
      }, {
        name: "policyName_destNWObjGrp",
        value: policyName_destNWObjGrp
      });
      response = deviceCommunicator.configureCommandsFromTemplate("networkPortAccessList.txt", arr, false);
      arr.length = 0;
    } catch (error) {
      // $('#securityPolicyDialogMessage').html("networkPortAccessList:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "networkPortAccessList()");
  }
  function applynetworkPortAccessList(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applynetworkPortAccessList()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_acl = policyName + "_acl";
      var policyName_service = policyName + "_svc";
      var policyName_srcNWObjGrp = policyName + "_src_net";
      var policyName_destNWObjGrp = policyName + "_dst_net";
      networkPortAccessList(policyName_acl, policyName_service, policyName_srcNWObjGrp, policyName_destNWObjGrp);
    } catch (error) {
      //alert(error.errorResponse);
      // return false;
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applynetworkPortAccessList()");
  }
  function classMapACL(policyName_acl) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "classMapACL()");
    try {
      var arr = [],
        response;
      arr.push({
        name: "policyName_acl",
        value: policyName_acl
      });
      response = deviceCommunicator.configureCommandsFromTemplate("classMapACL.txt", arr, false);
      arr.length = 0;
    } catch (error) {
      // $('#securityPolicyDialogMessage').html("classMapACL:"+error.response);
      // $('#securityPolicyDialogError').show();
      errorLogInConsole(error);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "classMapACL()");
  }

  function applyclassMapACL(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applyclassMapACL()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_acl = policyName + "_acl";
      classMapACL(policyName_acl);
    } catch (error) {
      isEmptyBlock = true;
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applyclassMapACL()");
  }
  function classMapPolicy(policyName, groupType, classOrAclName, desc) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "classMapPolicy()");
    try {
      var arr = [],
        response;
      arr.push({
        name: "policyName",
        value: policyName
      }, {
        name: "groupType",
        value: groupType
      }, {
        name: "classOrAclName",
        value: classOrAclName
      }, {
        name: "desc",
        value: desc
      });
      response = deviceCommunicator.configureCommandsFromTemplate("classMapPolicy.txt", arr, true);
      arr.length = 0;
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "classMapPolicy()");
      return response;
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("classMapPolicy:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
      //consoleLogMethodDetailsEndWithError("configureSecurityPolicy.js", "classMapPolicy()",error);
      return "";
    }
  }

  function applyclassMapPolicy(policyName) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applyclassMapPolicy()");
    try {
      //var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      var policyName_acl = policyName + "_acl";
      var PolicyName_user = policyName + "_user";
      var PolicyName_app = policyName + "_app";
      var classMapPolicyName_url = policyName + "_url";
      var desc = "", response = "";
      if ($('#SecurityPolicyDescription').val().trim() != "") {
        desc = "desc " + $('#SecurityPolicyDescription').val().trim();
      }
      applcheck = 0;
      usergroupcheck = 0;
      //var policyMapList = [["access-group name",policyName_acl]];
      var policyMapList = [];
      //if (checkFlagACL) {
      policyMapList.push({name: "access-group name", value: policyName_acl});
      //}

      $("ul#SecurityApplicationPolicySelectedList li").each(function() {
        applcheck = applcheck + 1;
      });
      $("ul#SecurityUserGroupSelectedList li").each(function() {
        usergroupcheck = usergroupcheck + 1;
      });
      if (usergroupcheck > 0) {
        policyMapList.push({name: "class-map", value: PolicyName_user});
      }
      if (applcheck > 0) {
        policyMapList.push({name: "class-map", value: PolicyName_app});
      }
      if (($("#SecurityblockUrlTable > tbody > tr").length) > 0) {
        policyMapList.push({name: "class-map", value: classMapPolicyName_url});
      }
      //var policyMapList = [["access-group name",policyName_acl],["class-map",PolicyName_user],["class-map",PolicyName_app],["class-map",classMapPolicyName_url]];
      for (i = 0; i < policyMapList.length; i++) {
        response = response + classMapPolicy(policyName, policyMapList[i]['name'], policyMapList[i]['value'], desc) + "\n";
        desc = "";
      }
      policyMapList.length = 0;
      var resp3 = deviceCommunicator.getConfigCmdOutput(response);

    } catch (error) {
      errorLogInConsole(error.errorResponse);
      return false;
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applyclassMapPolicy()");
  }


  function getEditDetails(row) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "getEditDetails()");
    $('#SecurityPolicyName').val(row.children().get(1).textContent);
    var zonePolicy = row.parent().find('tr:first').find('td:first').text().trim().split(/\s+/);
    sourceZone = zonePolicy[0].split('-')[0];
    destZone = zonePolicy[0].split('-')[1];
    $("#sourceZone").val(sourceZone);
    $("#destinationZone").val(destZone);
    if (row.find('.securityPolicyDes').text().trim() != "-") {
      $('#SecurityPolicyDescription').val(row.find('.securityPolicyDes').text().trim());
    }

    //getting details for networks
    var nsource = row.children(".networkSource").attr("datalist");
    var ndes = row.children(".networkDes").attr("datalist");
    var networkSource = [], networkDes = [];
    if (nsource != "") {
      if (nsource.indexOf(',') == -1) {
        networkSource.push(nsource.trim());
      } else {
        networkSource = nsource.trim().split(',');
      }
    }
    if (ndes != "") {
      if (ndes.indexOf(',') == -1) {
        networkDes.push(ndes.trim());
      } else {
        networkDes = ndes.trim().split(',');
      }
    }
    if (networkSource.length != 0) {
      $('#SecurityNetworkSourceList').empty();
      iptype = "host";
      $.each(networkSource, function(index, value) {
        if (value.indexOf('-') != -1) {
          value = value.replace("-", " ");
          iptype = "range";
        }
        if (value.indexOf('/') != -1) {
          iptype = "";
        }
        $('#SecurityNetworkSourceList').append('<li value="' + value + '" iptype="' + iptype +
                                               '"><a href="#" class="utmSprite network displayInlineBlock floatLeft"></a><span class="paddingText">' + value +
                                               '</span><a class="utmSprite close removeNetwork ccpexpCSSReplaceClass599" ></a></li>');
      });
    }

    if (networkDes.length != 0) {
      $('#SecurityNetworkDestinationList').empty();
      iptype = "host";
      $.each(networkDes, function(index, value) {
        if (value.indexOf('-') != -1) {
          value = value.replace("-", " ");
          iptype = "range";
        }
        if (value.indexOf('/') != -1) {
          iptype = "";
        }
        $('#SecurityNetworkDestinationList').append('<li value="' + value + '" iptype="' + iptype +
                                                    '"><a href="#" class="utmSprite network displayInlineBlock floatLeft"></a><span class="paddingText">' + value +
                                                    '</span><a class="utmSprite close removeNetwork ccpexpCSSReplaceClass600" ></a></li>');
      });
    }

    //getting details for url
    var url = row.children(".urlLists").attr("datalist");
    var urlList = [];
    if (url != "") {
      if (url.indexOf(',') == -1) {
        urlList.push(url.trim());
      } else {
        urlList = url.trim().split(',');
      }
    }
    $.each(urlList, function(index, value) {
      var found = false;
      $('#SecuritypermittedSitesList li').each(function() {
        if ($(this).find('a').attr('data-hint').toLowerCase().trim() == value.trim() + ".com".toLowerCase().trim()) {
          $('#SecurityblockUrlTable').append('<tr class="Securitybordertr"><td class="SecurityblockUrlText"><a class="' +
                                             $(this).find("a").attr("titleimg") +
                                             '"/><span class="ccpexpCSSReplaceClass601">' +
                                             $(this).find("a").attr("caption") +
                                             '</span></td><td class="ccpexpCSSReplaceClass602">'+
                                             '<a class="utmSprite close deleteSite" dataid="' +
                                             $(this).attr("data-id") + '"/></td>');
          $(this).hide();
          found = true;
          return false;
        }
      });
      if (!found) {
        $('#SecurityblockUrlTable').append('<tr class="Securitybordertr"><td class="SecurityblockUrlText"><a class="utmSprite empty"/>'+
                                           '<span class="ccpexpCSSReplaceClass603">' + value +
                                           '</span></td><td class="ccpexpCSSReplaceClass604">'+
                                           '<a class="utmSprite close deleteSite" dataid="0"/></td>');
      }
    });

    //getting user groups
    var groups = row.children(".usersGroupList").attr("grouplist");
    var groupList = [];
    if (groups != "") {
      if (groups.indexOf(',') == -1) {
        groupList.push(groups.trim());
      } else {
        groupList = groups.trim().split(',');
      }
    }
    $.each(groupList, function(index, value) {
      var groupName = value;
      //var groupName="";
      //if (value.indexOf('local-d_')==0) {
      //          var groupSplit=value.split('local-d_');
      //          groupName=groupSplit[1];
      //          //groupType='Local';
      //
      //        }else if (value.indexOf('active-d_')==0) {
      //          var groupSplit=value.split('active-d_');
      //          groupName=groupSplit[1];
      //          //groupType='Active';
      //}
      $('#SecurityUserGroupSelectedList').append('<li value="' + groupName +
                                                 '" class="ui-draggable"' + 'groupname="' +
                                                 value + '" >' + "<a href='#' class='utmSprite top_10_users zoom80Percent displayInlineBlock verticalAlignTop' />" + " " +
                                                 groupName + '<a class="utmSprite close removeGroup ccpexpCSSReplaceClass605" ></a></li>');
      $('#SecurityUserGroupAvailableList li').each(function() {
        if ($(this).attr("groupname") == value) {
          $(this).hide();
        }
      });
    });

    //getting details for category and apps
    var apps = row.children(".applicationCatList").attr("datalist").split(',');
    var type = row.children(".applicationCatList").attr("data");
    $.each(apps, function(index, value) {
      //if (type=="category") {
      //$('#categoryBasedRadio').attr("checked","checked");
      $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function() {
        if ($(this).attr('data').trim() == value.trim()) {
          $('#SecurityApplicationPolicySelectedList').append('<div class="categoryList" data="' +
                                                             $(this).find('.expandList').text().trim() +
                                                             '">' + $(this).html() + '</div>');
          $('#SecurityApplicationPolicySelectedList .expandList:last').append('<a class="utmSprite close removeApp ccpexpCSSReplaceClass606" ></a>');
          $(this).find('.appList li').each(function() {
            $(this).attr("disabled", "true");
          });
          $(this).hide();
          $(this).attr("disabled", "true");
          $('#SecurityApplicationPolicySelectedList').find(".expandList:last").click(function() {
            if ($(this).hasClass('key_plus')) {
              //$(this).find('img').attr("src", "images/key_minus.png");
              $(this).find('div').addClass('key_minus');
              $(this).find('div').removeClass('key_plus');
              $(this).parent().find('.appList').show();
            } else {
              //$(this).find('img').attr("src", "images/key_plus.png");
              $(this).find('div').addClass('key_plus');
              $(this).find('div').removeClass('key_minus');
              $(this).parent().find('.appList').hide();
            }
          });
        }
      });
      $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function() {
        $(this).find('.appList li').each(function() {
          if ($(this).text().trim().toLowerCase() == value.trim().toLowerCase()) {
            $('#SecurityApplicationPolicySelectedList').append('<li val="' + $(this).text().trim() +
                                                               '" class="ui-draggable" data="' +
                                                               $(this).attr("data") + '">' +
                                                               "<a href='#' class='utmSprite application displayInlineBlock' />" + " " +
                                                               $(this).text() + '<a class="utmSprite close removeApp"></a></li>');
            $(this).hide();
            $(this).attr("disabled", true);
          }

        });
      });

      //}
      //if (type=="application") {
      //$('#applicationBasedRadio').attr("checked","checked");

      //}
    });
    //if (type="application") {
    //  $('.expandList').trigger('click');
    //}

    //getting details for ports
    if (row.children(".sourcePorts").text().trim().toUpperCase() != "ANY") {
      var sourcePorts = [], sourcePortsProtocol = [];
      if (row.children(".sourcePorts").attr("datalist").indexOf(',') > -1 && row.children(".sourcePorts").attr("data").indexOf(',') > -1) {
        sourcePorts = row.children(".sourcePorts").attr("datalist").split(',');
        sourcePortsProtocol = row.children(".sourcePorts").attr("data").split(',');
      } else {
        sourcePorts.push(row.children(".sourcePorts").attr("datalist"));
        sourcePortsProtocol.push(row.children(".sourcePorts").attr("data"));
      }
      if (sourcePorts.length > 0) {
        $('#SecurityPortSourceList').empty();
      }
      $.each(sourcePorts, function(index, value) {
        if (value.indexOf(':') == -1) {
          $('#SecurityPortSourceList').append('<li value="' + value.trim().toLowerCase() + '" protocol="' +
                                              value.trim().toLowerCase() + '" source="source" ' +
                                              sourcePortsProtocol[index].toLowerCase() +
                                              '="true"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' +
                                              value.trim().toLowerCase() +
                                              '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass607" ></a></li>');
          $('#SecurityPortAvailableList li').each(function() {
            if (($(this).attr("protocol") == value.trim().toLowerCase()) &&
                (($(this).attr("tcp") == "true" && $('#SecurityPortSourceList li:last').attr("tcp") == "true") ||
                 ($(this).attr("udp") == "true" && $('#SecurityPortSourceList li:last').attr("udp") == "true")))
            {
              $('#SecurityPortSourceList li:last').attr("portno", $(this).attr("portno"));
              $('#SecurityPortSourceList li:last').find('span').text($(this).text());
            }
          });
        } else {
          var portType = " ";
          if (value.indexOf('-') > -1) {
            portType = "range"
          }
          $('#SecurityPortSourceList').append('<li protocol="' + value.trim().replace("-", " ") + '" ' +
                                              value.trim().split(':')[0].trim() + '="true" value="' +
                                              value.trim().replace("-", " ") + '" source="source" porttype="' +
                                              portType + '" ' + sourcePortsProtocol[index].toLowerCase() +
                                              '="true"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' +
                                              value.trim().replace("-", " ") +
                                              '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass608" ></a></li>');
        }
      });
    }

    if (row.children(".desPorts").text().trim().toUpperCase() != "ANY") {

      var destinationPorts = [], destinationPortsProtocol = [];
      if (row.children(".desPorts").attr("datalist").indexOf(',') > -1 && row.children(".desPorts").attr("data").indexOf(',') > -1) {
        destinationPorts = row.children(".desPorts").attr("datalist").split(',');
        destinationPortsProtocol = row.children(".desPorts").attr("data").split(',');
      } else {
        destinationPorts.push(row.children(".desPorts").attr("datalist"));
        destinationPortsProtocol.push(row.children(".desPorts").attr("data"));
      }

      if (destinationPorts.length > 0) {
        $('#SecurityPortDestinationList').empty();
      }
      $.each(destinationPorts, function(index, value) {
        if (value.indexOf(':') == -1) {
          $('#SecurityPortDestinationList').append('<li value="' + value.trim().toLowerCase() +
                                                   '" protocol="' + value.trim().toLowerCase() +
                                                   '" source=" " ' + destinationPortsProtocol[index].toLowerCase() +
                                                   '="true"><a href="#" class="utmSprite port displayInlineBlock" ></a><span class="paddingText verticalAlignTop">' +
                                                   value.trim().toLowerCase() +
                                                   '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass609" ></a></li>');
          $('#SecurityPortAvailableList li').each(function() {
            if (($(this).attr("protocol") == value.trim().toLowerCase()) &&
                (($(this).attr("tcp") == "true" && $('#SecurityPortDestinationList li:last').attr("tcp") == "true") ||
                 ($(this).attr("udp") == "true" && $('#SecurityPortDestinationList li:last').attr("udp") == "true")))
            {
              $('#SecurityPortDestinationList li:last').attr("portno", $(this).attr("portno"));
              $('#SecurityPortDestinationList li:last').find('span').text($(this).text());
            }
          });
        } else {
          var portType = " ";
          if (value.indexOf('-') > -1) {
            portType = "range"
          }
          $('#SecurityPortDestinationList').append('<li protocol="' + value.trim().replace("-", " ") + '" ' +
                                                   value.trim().split(':')[0].trim() + '="true" value="' +
                                                   value.trim().replace("-", " ") + '" source=" " porttype="' +
                                                   portType + '" ' + destinationPortsProtocol[index].toLowerCase() +
                                                   '="true"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' +
                                                   value.trim().replace("-", " ") +
                                                   '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass610" ></a></li>');
        }
      });
    }
    var destCheck = checkTCPUDP($('#SecurityPortDestinationList'), false, null);
    var sourceCheck = checkTCPUDP($('#SecurityPortSourceList'), false, null);

    $('#SecurityPortAvailableList li').each(function() {
      if (destCheck == sourceCheck && destCheck != "" && sourceCheck != "") {
        enableDisableAvailablePorts(destCheck);
        $('#SecurityPortSourceProtocol').attr("disabled", true);
        $('#SecurityPortSourceProtocol').val(destCheck.toUpperCase());
        $('#SecurityPortDestinationProtocol').attr("disabled", true);
        $('#SecurityPortDestinationProtocol').val(destCheck.toUpperCase());

      }
      else {
        if ((destCheck == "tcp-udp" && sourceCheck == "") || (sourceCheck == "tcp-udp" && destCheck == "")) {
          if (destCheck == "tcp-udp") {
            $('#SecurityPortSourceFieldSet').droppable('disable');
            $('#SecurityPortSourceProtocol').attr("disabled", true);
            $('#SecurityPortSource').attr("disabled", true);
          }
          if (sourceCheck == "tcp-udp") {
            $('#SecurityPortDestinationFieldSet').droppable('disable');
            $('#SecurityPortDestinationProtocol').attr("disabled", true);
            $('#SecurityPortDestination').attr("disabled", true);
          }
        } else {
          if ((destCheck != "" && sourceCheck == "") || (sourceCheck != "" && destCheck == "")) {
            if (destCheck != "") {
              $('#SecurityPortSourceProtocol').attr("disabled", true);
              //$('#SecurityPortSource').attr("disabled",true);
              $('#SecurityPortSourceProtocol').val(destCheck.toUpperCase());
            }
            if (sourceCheck != "") {
              $('#SecurityPortDestinationProtocol').attr("disabled", true);
              //$('#SecurityPortDestination').attr("disabled",true);
              $('#SecurityPortDestinationProtocol').val(sourceCheck.toUpperCase());
            }
          }
        }

      }
      var port = $(this);
      var foundSource = false, foundDes = false;
      $('#SecurityPortSourceList li').each(function() {
        if ($(this).text().trim() == port.text().trim()) {
          foundSource = true;
          return false;
        }
      });
      $('#SecurityPortDestinationList li').each(function() {
        if ($(this).text().trim() == port.text().trim()) {
          foundDes = true;
          return false;
        }
      });
      if (foundSource && foundDes) {
        port.attr("added", "added");
        port.hide();
      }
    });



    //getting details for action
    var action = row.children(".policyAction").text().trim();
    if (action == $.i18n.prop("block")) {
      $('#PolicyAction').val("drop log");
    }
    if (action == $.i18n.prop("allow")) {
      $('#PolicyAction').val("inspect");
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "getEditDetails()");

  }

  function deleteZonePairAndPolicyMap(policyName, zoneSource, zoneDes, deleteZonePairFlag, xml) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "deleteZonePairAndPolicyMap()");
    var arr = [], response, zonePair, policyMapName;
    zonePair = zoneSource + "-" + zoneDes;
    policyMapName = zonePair + "-" + "POLICY";

    /*$.each(zoneSource, function(sourceindex, sourceValue){
     $.each(zoneDes, function(desindex, desValue){
     zonePair="",policyMapName="";
     zonePair=policyName+"_"+sourceValue.trim()+"_"+desValue.trim();
     //policyMapName=policyName+"_"+zonePair;
     //alert(zonePair);
     //alert(policyMapName);*/
    if ($(xml).find('zone-pair').length != 0) {
      $(xml).find('zone-pair').each(function() {
        var zoneArr = $(this).find('service-policy').find('PolicyMapName').text().trim().split('-');
        if (zoneSource == zoneArr[0].trim() && zoneDes == zoneArr[1].trim()) {
          var policyMapZPName = $(this).find('service-policy').find('PolicyMapName').text().trim();
          deleteClassFromPolicyMap(policyMapZPName, policyName);
          return false;
        }
      });
    }
    if (deleteZonePairFlag) {
      arr.push({
        name: "zonepairName",
        value: zonePair
      },
      {
        name: "sourceZone",
        value: zoneSource
      },
      {
        name: "destZone",
        value: zoneDes
      },
      {
        name: "policyzpName",
        value: policyMapName
      }
      );
      try {
        response = deviceCommunicator.configureCommandsFromTemplate("deleteZonePair.txt", arr, false);
      } catch (e) {
        errorLogInConsole(e);
      }
      try {
        response = deviceCommunicator.configureCommandsFromTemplate("deletePolicyMap.txt", arr, false);
      } catch (e) {
        errorLogInConsole(e);
      }
    }
    arr.length = 0;
    //});
    //});

    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "deleteZonePairAndPolicyMap()");


  }

  function deleteClassFromPolicyMap(policyMapName, className) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "deleteClassFromPolicyMap()");
    try {
      var delArr = [];
      delArr.push({
        name: "policy_zpName",
        value: policyMapName
      },
      {
        name: "policyName",
        value: className
      }
      );
      response = deviceCommunicator.configureCommandsFromTemplate("deletePolicyMapClass.txt", delArr, false);
      delArr.length = 0;
    } catch (e) {
      errorLogInConsole(e);
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "deleteClassFromPolicyMap()");

  }

  function deletePolicy(policyName, row) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "deletePolicy()");
    var response = "", arr = [], urlClassMap = policyName + "_url",
      urlListMap = policyName + "_urllist",
      appClassMap = policyName + "_app",
      userGroupClassMap = policyName + "_user",
      objectGroupPort = policyName + "_svc",
      objectGroupNetworkDestination = policyName + "_dst_net",
      objectGroupNetworkSource = policyName + "_src_net",
      ipAccessList = policyName + "_acl";


    arr.push({
      name: "policyName",
      value: policyName
    },
    {
      name: "url",
      value: urlClassMap
    },
    {
      name: "urllist",
      value: urlListMap
    },
    {
      name: "appList",
      value: appClassMap
    },
    {
      name: "userGroup",
      value: userGroupClassMap
    },
    {
      name: "aclClassName",
      value: ipAccessList
    },
    {
      name: "objectService",
      value: objectGroupPort
    },
    {
      name: "objectGroup",
      value: objectGroupNetworkSource
    }
    );

    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deletePolicyClassMap.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    if (row.children('.urlLists').text().trim().toUpperCase() != "ANY") {
      try {
        response = response + deviceCommunicator.configureCommandsFromTemplate("deleteClassMapUrl.txt", arr, true) + "\n";
      }
      catch (e) {
        errorLogInConsole(e);
      }
      try {
        response = response + deviceCommunicator.configureCommandsFromTemplate("deleteParameterMap.txt", arr, true) + "\n";
      }
      catch (e) {
        errorLogInConsole(e);
      }
    }
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deleteClassMapApp.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deleteUserClassMap.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    /*try{
     response = deviceCommunicator.configureCommandsFromTemplate("deleteAclClassMap.txt", arr, false);
     }
     catch(e){
     //consoleLog(e);
     }*/
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deleteIpAccessList.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deleteObjectService.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deleteObjectGroupNetwork.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    arr.length = 0;
    arr.push({name: "objectGroup",
      value: objectGroupNetworkDestination});
    try {
      response = response + deviceCommunicator.configureCommandsFromTemplate("deleteObjectGroupNetwork.txt", arr, true) + "\n";
    }
    catch (e) {
      errorLogInConsole(e);
    }
    //delete Category
    categoryList = row.children('.applicationCatList').attr("category").split(",");
    categoryClassCount = row.children('.applicationCatList').attr("catdata").split(",");
    response = response + deleteCategory(categoryList, categoryClassCount);
    try {
      resp3 = deviceCommunicator.getConfigCmdOutput(response);
    } catch (error) {
      errorLogInConsole(error);
    }
    ////consoleLog(response);
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "deletePolicy()");
  }

  function deleteCategory(categoryList, categoryClassCount) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "deleteCategory()");
    var delCli = ""
    $.each(categoryList, function(index, value) {
      var count = 0;
      $('#securityPolicytable').find('.applicationCatList').each(function() {
        var list = $(this).attr("category").split(",");
        $.each(list, function(index1, value1) {
          if (value1 == value) {
            count++;
          }
        });
      });
      if (count == 1) {
        for (var i = 0; i < parseInt(categoryClassCount[index]); i++) {
          if (i == 0) {
            delCli = delCli + "no class-map type inspect CATEGORY_" + value.toUpperCase() + "\n";
          }
          else {
            delCli = delCli + "no class-map type inspect CATEGORY_" + value.toUpperCase() + "_" + i + "\n";
          }
        }
      }
    });
    ////consoleLog(delCli);
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "deleteCategory()");
    return delCli;

  }

  function zonePair(zonepairName, sourceZone, destZone, policy_zpName, flag) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "zonePair()");
    try {
      var arr = [],
        response;
      arr.push({
        name: "zonepairName",
        value: zonepairName
      }, {
        name: "sourceZone",
        value: sourceZone
      }, {
        name: "destZone",
        value: destZone
      }, {
        name: "policy_zpName",
        value: policy_zpName
      });
      response = deviceCommunicator.configureCommandsFromTemplate("zonePair.txt", arr, flag);
      arr.length = 0;
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "zonePair()");
      return response;
    } catch (error) {
      //$('#securityPolicyDialogMessage').html("zonePair:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
      return "";
    }
  }
  function policyMap(policy_zpName, policyName, action, flag) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "policyMap()");
    try {
      var arr = [],
        response;
      arr.push({
        name: "policy_zpName",
        value: policy_zpName
      }, {
        name: "policyName",
        value: policyName
      }, {
        name: "action",
        value: action
      });
      response = deviceCommunicator.configureCommandsFromTemplate("policyMap.txt", arr, flag);
      arr.length = 0;
      //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "policyMap()");
      return response;
    } catch (error) {
      // $('#securityPolicyDialogMessage').html("policyMap:"+error.response);
      //$('#securityPolicyDialogError').show();
      errorLogInConsole(error);
      return "";
    }
  }
  function applyzonePairandpolicyMap(policyName, policyOrderArr) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "applyzonePairandpolicyMap()");
    try {
      // var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
//      var zonename;
      var action;
      var action = "";
      $('#PolicyAction option:selected').each(function(i, selected) {
        action = ($(selected).val().toString().trim());
      });
      var xml = getAllConfig(false);
      var sourceZone = $('#sourceZone').val().trim();
      var destZone = $('#destinationZone').val().trim();
      var found = false, policyMapName = "";
      zonepairName = sourceZone + "-" + destZone;
      policyZpname = zonepairName + "-POLICY";
      /*
       $("ul#SecuritylanInterfaceList li").each(function () {
       sourcezonename=$(this).text().trim();
       $("ul#SecuritywanInterfaceList li").each(function () {
       var found=false,policyMapName="";
       destzonename=$(this).text().trim();
       zonepairName=sourcezonename.trim()+"-"+destzonename.trim();
       policyZpname=zonepairName+"-POLICY"
       sourceZone=sourcezonename.trim();
       destZone=destzonename.trim();
       //policy_zpName=policyName+"_"+zonepairName;
       */
      if ($(xml).find('zone-pair').length != 0) {
        $(xml).find('zone-pair').each(function() {
          policyMapName = $(this).find('service-policy').find('PolicyMapName').text().trim();
          var zoneArr = policyMapName.split('-');
          if (sourceZone == zoneArr[0].trim() && destZone == zoneArr[1].trim()) {
            found = true;
            return false;
          }
        });
        if (found) {
          if (!editPolicyFlag) {
            reorderPolicy(policyName, policyMapName, action, xml);
          }
          else {
            reorderAllPolicies($('#sourceZone').val() + "-" + $('#destinationZone').val() + "-POLICY", policyOrderArr);
          }
          //policyMap(policyMapName,policyName,action);
        } else {
          policyMap(policyZpname, policyName, action, false);
          policyMap(policyZpname, "INTERNAL_DOMAIN_FILTER", "inspect", false);
          zonePair(zonepairName, sourceZone, destZone, policyZpname, false);
        }
      }
      else {
        policyMap(policyZpname, policyName, action, false);
        policyMap(policyZpname, "INTERNAL_DOMAIN_FILTER", "inspect", false);
        zonePair(zonepairName, sourceZone, destZone, policyZpname, false);
      }


      /*
       });
       });*/
    } catch (error) {
      //alert(error.errorResponse);
      // return false;
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "applyzonePairandpolicyMap()");

  }

  /* function applyClassMapParameterMap(policyName){
   var parameterMapName=policyName+"_urllist";
   var arr = [],
   response;
   arr.push({
   name: "policyName",
   value: policyName
   },{
   name: "policyName_urllist",
   value: parameterMapName
   });
   try{
   response = deviceCommunicator.configureCommandsFromTemplate("classMapParameterMap.txt", arr, false);
   }
   catch(e){

   }
   }*/

  function checkZonePair() {
    if ($('#sourceZone').val() == $('#destinationZone').val()) {
      //$('#securityPolicyDialogMessage').html("Source and Destination Zones cannot be same");
      $('#securityPolicyDialogMessage').html($.i18n.prop("sourceDestSame"));
      $('#securityPolicyDialogError').show();
      return false;
    }
    else {
      $('#securityPolicyDialogError').hide();
      return true;
    }
  }
  function createPolicy(policyOrderArr, changeZoneFlag) {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "createPolicy()");
    try {
      var policyName = $("#SecurityPolicyName").val().trim().toLowerCase();
      //checkFlagACL=false;
      applyParameterMapURL(policyName);
      ApplyClassMapApp(policyName);
      ApplyClassMapUserGroup(policyName);
      applyobjectGroupNetwork(policyName);
      applyobjectGroupPort(policyName);
      //if (checkFlagACL) {
      applynetworkPortAccessList(policyName);
      //applyclassMapACL(policyName);
      //}
      //if (checkFlagACL) {
      applyclassMapPolicy(policyName);
      //}else{
      //applyClassMapParameterMap(policyName);
      //}
      if (editPolicyFlag && !changeZoneFlag){
        reorderAllPolicies($('#sourceZone').val() + "-" + $('#destinationZone').val() + "-POLICY", policyOrderArr);
      }
      else{
        applyzonePairandpolicyMap(policyName, policyOrderArr);
      }


      deviceCommunicator.doWriteMemory();
      var xml = getAllConfig(true);
      refreshPolicyTable(xml);

    } catch (error) {
      $.unblockUI();
    }
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "createPolicy()");

  }

  function unbindClicks() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "unbindClicks()");

    $("#addSourcePorts").unbind("click");
    $("#addDestinationPorts").unbind("click");
    $("#addSourceNetworks").unbind("click");
    $("#addDestinationNetworks").unbind("click");
    $("#SecurityblockUrlTable").unbind("click");
    $("#SecurityaddContentName").unbind("click");
    $('#availableAppSearch').unbind("keyup");
    $('#selectedAppSearch').unbind("keyup");
    $("#SecurityTableSearch").unbind("keyup");
    $('#securityPortsSearch').unbind("keyup");
    $('#availableGroupSelectedSearch').unbind("keyup");
    $('#availableGroupSearch').unbind("keyup");
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "unbindClicks()");

  }
  function loadSecurityPolicy() {
    //consoleLogMethodDetailsStart("configureSecurityPolicy.js", "loadSecurityPolicy()");
    //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+"Loading..."+'</h1>'});
    $("#securityPolicytable").hide();
    $("#policyBar").hide();
    blockPage("Loading");
    setTimeout(function() {
      $("#securityPolicytable tr:nth-child(even)").addClass("striped");
      unbindClicks();
      //getzone();
      var xml = getAllConfig(true);

      $("#securityPolicytable tr:nth-child(even)").addClass("striped");
      $("#SaveOrder").hide();
      $("#SaveOrder").button().click(function() {
        //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>Applying Configuration</h1>'});
        blockPage("Applying");
        setTimeout(function() {
          $('#securityPolicytable tbody').each(function() {
            if ($(this).attr("change") == "true") {
              var arrClass = [], action;
              policyMapName = $(this).attr("id").replace("sortThis", "") + "-POLICY";
              if ($(this).attr("change") == "true") {
                $(this).find('tr').each(function() {
                  if ($(this).attr('head') == "true") {
                    isEmptyBlock = true;
                  } else {
                    if ($(this).children(".policyAction").text().trim() == $.i18n.prop("allow")) {
                      action = "inspect";
                    } else {
                      action = "drop log";
                    }
                    arrClass.push({name: $(this).children().eq(1).text().trim(), value: action});
                  }
                });
              }
              reorderAllPolicies(policyMapName, arrClass);
            }
          });
          refreshPolicyTable(getAllConfig(true));
          $.unblockUI();
        }, 1000);
        return false;
      });
      cleanAllCntrols();
      resetFields();
      intializeDialog(xml);


      //filling table
      refreshPolicyTable(xml);
      /*focus and focus out functions for port and network*/
      $('#SecurityPortSource').on('focusout', function() {
        if ($(this).val().length == 0) {
          $(this).css('color', 'gray');
          //$(this).val('Source Ports');
          $(this).val($.i18n.prop("policySourcePorts"));
        }
      });
      $('#SecurityPortSource').on('focus', function() {
        //if ($(this).val().trim().toLowerCase() == "Source Ports".toLowerCase()) {
        if ($(this).val().trim().toLowerCase() == $.i18n.prop("policySourcePorts").toLowerCase()) {
          $(this).css('color', 'black');
          $(this).val('');
        }
      });
      $('#SecurityPortSource').on('keyup', function() {
        if ($("#SecurityPortSourceErrorSpan").hasClass('hint--top')) {
          $("#SecurityPortSourceErrorSpan").removeAttr("data-hint");
          $("#SecurityPortSourceErrorSpan").removeClass("hint--top");
          $("#SecurityPortSource").removeClass("highlightTextBox");
        }
      });
      $('#SecurityPortDestination').on('focusout', function() {
        if ($(this).val().length == 0) {
          $(this).css('color', 'gray');
          //$(this).val('Destination Ports');
          $(this).val($.i18n.prop("SecurityPortDestination"));
        }
      });
      $('#SecurityPortDestination').on('focus', function() {
        //if ($(this).val().trim().toLowerCase() == "Destination Ports".toLowerCase()) {
        if ($(this).val().trim().toLowerCase() == $.i18n.prop("SecurityPortDestination").toLowerCase()) {
          //code
          $(this).css('color', 'black');
          $(this).val('');
        }
      });
      $('#SecurityPortDestination').on('keyup', function() {
        if ($("#SecurityPortDestinationErrorSpan").hasClass('hint--top')) {
          $("#SecurityPortDestinationErrorSpan").removeAttr("data-hint");
          $("#SecurityPortDestinationErrorSpan").removeClass("hint--top");
          $("#SecurityPortDestination").removeClass("highlightTextBox");
        }
      });

      $('#destinationZone').change(function() {
        checkZonePair();
      });

      $('#sourceZone').change(function() {
        checkZonePair();
      });

      $('#SecurityNetworkSource').on('focusout', function() {
        if ($(this).val().length == 0) {
          $(this).css('color', 'gray');
          //$(this).val('Source Network Address');
          $(this).val($.i18n.prop("SecurityNetworkSource"));
        }
      });
      $('#SecurityNetworkSource').on('focus', function() {
        // if ($(this).val().trim().toLowerCase() == "Source Network Address".toLowerCase()) {
        if ($(this).val().trim().toLowerCase() == $.i18n.prop("SecurityNetworkSource").toLowerCase()) {
          $(this).css('color', 'black');
          $(this).val('');
        }
      });
      $('#SecurityNetworkSource').on('keyup', function() {
        if ($("#SecurityNetworkSourceErrorSpan").hasClass('hint--top')) {
          $("#SecurityNetworkSourceErrorSpan").removeAttr("data-hint");
          $("#SecurityNetworkSourceErrorSpan").removeClass("hint--top");
          $("#SecurityNetworkSource").removeClass("highlightTextBox");
        }
      });
      $('#SecurityNetworkDestination').on('focusout', function() {
        if ($(this).val().length == 0) {
          $(this).css('color', 'gray');
          //$(this).val('Destination Network Address');
          $(this).val($.i18n.prop("SecurityNetworkDestination"));
        }
      });
      $('#SecurityNetworkDestination').on('focus', function() {
        //if ($(this).val().trim().toLowerCase() == "Destination Network Address".toLowerCase()) {
        if ($(this).val().trim().toLowerCase() == $.i18n.prop("SecurityNetworkDestination").toLowerCase()) {
          //code
          $(this).css('color', 'black');
          $(this).val('');
        }
      });
      $('#SecurityNetworkDestination').on('keyup', function() {
        if ($("#SecurityNetworkDestinationErrorSpan").hasClass('hint--top')) {
          $("#SecurityNetworkDestinationErrorSpan").removeAttr("data-hint");
          $("#SecurityNetworkDestinationErrorSpan").removeClass("hint--top");
          $("#SecurityNetworkDestination").removeClass("highlightTextBox");
        }
      });
      /*ends focus and focusout function for network and ports*/

      $("#addSourcePorts").on('click', function(e) {
        chekFlag = false;
        if (($("#SecurityPortSource").val().trim().length > 0) &&
            ($("#SecurityPortSource").val().trim().toLowerCase() == "Source Ports".toLowerCase())) {
          $("#SecurityPortSourceErrorSpan").addClass("hint--top");
          // $("#SecurityPortSourceErrorSpan").attr("data-hint", "Field is empty");
          $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#SecurityPortSource").addClass("highlightTextBox");
        }
        if (($("#SecurityPortSource").val().trim().length > 0) &&
            ($("#SecurityPortSource").val().trim().toLowerCase() != "Source Ports".toLowerCase())) {
          var sourcePort = $("#SecurityPortSource").val().trim().toLowerCase();
          source = "source";
          portType = " ";
          if (sourcePort.indexOf("-") > -1) {
            portType = "range";
            var sourcePortResult = sourcePort.split("-");
            if (sourcePortResult.length == 2) {
              if (!isNaN(sourcePortResult[0].trim()) && !isNaN(sourcePortResult[1].trim())) {
                if (parseInt(sourcePortResult[0]) < parseInt(sourcePortResult[1]) &&
                    parseInt(sourcePortResult[0]) <= 65535 && parseInt(sourcePortResult[1]) <= 65535) {
                  if (checkPortRange(parseInt(sourcePortResult[0]), parseInt(sourcePortResult[1]), $('#SecurityPortSourceList'))) {
                    $("#SecurityPortSource").val(sourcePortResult[0] + " " + sourcePortResult[1]);
                  } else {
                    chekFlag = true;
                    $("#SecurityPortSourceErrorSpan").addClass("hint--top");
                    //$("#SecurityPortSourceErrorSpan").attr("data-hint", "Range already exists");
                    $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("rangeAlreadyExists"));
                    $("#SecurityPortSource").addClass("highlightTextBox");
                  }


                } else {
                  chekFlag = true;
                  $("#SecurityPortSourceErrorSpan").addClass("hint--top");
                  //$("#SecurityPortSourceErrorSpan").attr("data-hint", "Not a valid Port Range");
                  $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidPortRange"));
                  $("#SecurityPortSource").addClass("highlightTextBox");
                }

              }
              else {
                chekFlag = true;
                $("#SecurityPortSourceErrorSpan").addClass("hint--top");
                //$("#SecurityPortSourceErrorSpan").attr("data-hint", "Not a valid Port Number");
                $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidPortNumber"));
                $("#SecurityPortSource").addClass("highlightTextBox");
              }

            } else {
              chekFlag = true;
              $("#SecurityPortSourceErrorSpan").addClass("hint--top");
              //$("#SecurityPortSourceErrorSpan").attr("data-hint", "Not a valid Port");
              $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
              $("#SecurityPortSource").addClass("highlightTextBox");
            }
          } else {
            portType = " ";
            if (isNaN(sourcePort)) {
              chekFlag = true;
              $("#SecurityPortSourceErrorSpan").addClass("hint--top");
              // $("#SecurityPortSourceErrorSpan").attr("data-hint", "Not a valid Port Number");
              $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidPortNumber"));
              $("#SecurityPortSource").addClass("highlightTextBox");
            }
            if (parseInt(sourcePort) > 65535) {
              chekFlag = true;
              $("#SecurityPortSourceErrorSpan").addClass("hint--top");
              //  $("#SecurityPortSourceErrorSpan").attr("data-hint", "Not a valid Port Number");
              $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidPortNumber"));
              $("#SecurityPortSource").addClass("highlightTextBox");
            }
          }

          var protocol = "";
          $('#SecurityPortSourceProtocol option:selected').each(function(i, selected) {
            protocol = ($(selected).text().toString().trim());
          });
          $('#SecurityPortSourceList li').each(function() {
            if ($(this).text().trim().indexOf(":") == -1 && $(this).text().trim().indexOf(protocol) > -1) {
              $(this).remove();
              $('#SecurityPortAvailableList li').each(function() {
                if ($(this).text().trim().toLowerCase() == protocol.toLowerCase().trim()) {
                  $(this).show();
                }
              });
            }
          });
          if (checkDuplicates($('#SecurityPortSourceList'), protocol + ":" + $("#SecurityPortSource").val().trim())) {
            chekFlag = true;
            $("#SecurityPortSourceErrorSpan").addClass("hint--top");
            //$("#SecurityPortSourceErrorSpan").attr("data-hint", "Port already exists");
            $("#SecurityPortSourceErrorSpan").attr("data-hint", $.i18n.prop("portAlreadyExists"));
            $("#SecurityPortSource").addClass("highlightTextBox");
          }
          if (!chekFlag) {
            $("ul#SecurityPortSourceList li").each(function() {
              if ($(this).text().trim() == "Any") {
                $(this).remove();
              }
            });
          }
          move = $('<li protocol="' + protocol.toLowerCase() + '" ' + protocol.toLowerCase() +
                   '="true" value="' + protocol + ":" + $("#SecurityPortSource").val() + '"' +
                   'source="' + source + '"' + 'portType="' + portType + '"' +
                   ' ><a href="#" class="utmSprite port displayInlineBlock" /><span class="paddingText verticalAlignTop">' + protocol + ":" +
                   $("#SecurityPortSource").val() + '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass611" ></a></li>');
          //move.innerHTML='<a href="#" class="utmPort" /><span class="paddingText">' + protocol+":"+$("#SecurityPortSource").val() +
          '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass612" ></a>';
          //$(move).attr($("#SecurityPortSource").val().toLowerCase(),"true");
          //$(move).attr("protocol",$("#SecurityPortSource").val().toLowerCase());
          //$(move).attr("source",source);
          //$(move).attr("portType",portType);
          //var move=$.parseHTML('<li '+$("#SecurityPortSource").val().toLowerCase()+'="true" value="'+protocol+":"+$("#SecurityPortSource").val() + '"'+'source="'+source+'"'+'portType="'+portType+'"'+' ><a href="#" class="utmPort" /><span class="paddingText">' + protocol+":"+$("#SecurityPortSource").val() +
          //                                '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass613" ></a></li>');
          if (checkSourcePorts(move, false) && !chekFlag) {
            $('#SecurityPortSourceList').append(move);
            $("#SecurityPortSource").val('');
            $("#SecurityPortSource").focusout();
          }
        }
        e.preventDefault();
        return false;
      });

      $("#addDestinationPorts").on('click', function(e) {
        chekFlag = false;
        if (($("#SecurityPortDestination").val().trim().length > 0) &&
            ($("#SecurityPortDestination").val().trim().toLowerCase() == "Destination Ports".toLowerCase())) {
          $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
          //$("#SecurityPortDestinationErrorSpan").attr("data-hint", "Field is empty");
          $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#SecurityPortDestination").addClass("highlightTextBox");
        }
        if (($("#SecurityPortDestination").val().trim().length > 0) &&
            ($("#SecurityPortDestination").val().trim().toLowerCase() != "Destination Ports".toLowerCase())) {
          var destinationPort = $("#SecurityPortDestination").val().trim().toLowerCase();
          source = " ";
          portType = " ";
          if (destinationPort.indexOf("-") > -1) {
            portType = "range";
            var destinationPortResult = destinationPort.split("-");
            if (destinationPortResult.length == 2) {
              if (!isNaN(destinationPortResult[0].trim()) && !isNaN(destinationPortResult[1].trim())) {
                if (parseInt(destinationPortResult[0]) < parseInt(destinationPortResult[1]) &&
                    parseInt(destinationPortResult[0]) <= 65535 &&
                    parseInt(destinationPortResult[1]) <= 65535) {
                  if (checkPortRange(parseInt(destinationPortResult[0]), parseInt(destinationPortResult[1]), $('#SecurityPortDestinationList'))) {
                    $("#SecurityPortDestination").val(destinationPortResult[0] + " " + destinationPortResult[1]);
                  }
                  else {
                    chekFlag = true;
                    $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
                    //$("#SecurityPortDestinationErrorSpan").attr("data-hint", "Range already exists");
                    $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("rangeAlreadyExists"));
                    $("#SecurityPortDestination").addClass("highlightTextBox");
                  }
                } else {
                  chekFlag = true;
                  $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
                  //$("#SecurityPortDestinationErrorSpan").attr("data-hint", "Not a valid Port Range");
                  $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidPortRange"));
                  $("#SecurityPortDestination").addClass("highlightTextBox");
                }

              }
              else {
                chekFlag = true;
                $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
                $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidPortNumber"));
                $("#SecurityPortDestination").addClass("highlightTextBox");
              }

              //$("#SecurityPortDestination").val(destinationPortResult[0].trim()+" "+destinationPortResult[1].trim());

            } else {
              chekFlag = true;
              $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
              //$("#SecurityPortDestinationErrorSpan").attr("data-hint", "Not a valid Port");
              $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
              $("#SecurityPortDestination").addClass("highlightTextBox");
            }
          } else {
            portType = " ";
            if (isNaN(destinationPort)) {
              chekFlag = true;
              $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
              //$("#SecurityPortDestinationErrorSpan").attr("data-hint", "Not a valid Port Number");
              $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidPortNumber"));
              $("#SecurityPortDestination").addClass("highlightTextBox");
            }
            if (parseInt(destinationPort) > 65535) {
              chekFlag = true;
              $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
              //$("#SecurityPortDestinationErrorSpan").attr("data-hint", "Invalid Port Number");
              $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidPortNumber"));
              $("#SecurityPortDestination").addClass("highlightTextBox");
            }
          }

          var protocol = "";
          $('#SecurityPortDestinationProtocol option:selected').each(function(i, selected) {
            protocol = ($(selected).text().toString().trim());
          });
          $('#SecurityPortDestinationList li').each(function() {
            if ($(this).text().trim().indexOf(":") == -1 && $(this).text().trim().indexOf(protocol) > -1) {
              $(this).remove();
              $('#SecurityPortAvailableList li').each(function() {
                if ($(this).text().trim().toLowerCase() == protocol.toLowerCase().trim()) {
                  $(this).show();
                }
              });
            }

          });
          if (checkDuplicates($('#SecurityPortDestinationList'), protocol + ":" + $("#SecurityPortDestination").val().trim())) {
            chekFlag = true;
            $("#SecurityPortDestinationErrorSpan").addClass("hint--top");
            // $("#SecurityPortDestinationErrorSpan").attr("data-hint", "Port already exists");
            $("#SecurityPortDestinationErrorSpan").attr("data-hint", $.i18n.prop("portAlreadyExists"));
            $("#SecurityPortDestination").addClass("highlightTextBox");
          }
          if (!chekFlag) {
            $("ul#SecurityPortDestinationList li").each(function() {
              if ($(this).text().trim() == "Any") {
                $(this).remove();
              }
            });
          }
          move = $('<li protocol="' + protocol.toLowerCase() + '" ' + protocol.toLowerCase() +
                   '="true" value="' + protocol + ":" + $("#SecurityPortDestination").val() +
                   '"' + 'source="' + source + '"' + 'portType="' + portType + '"' +
                   ' ><a href="#" class="utmSprite port" /><span class="paddingText verticalAlignTop">' + protocol + ":" +
                   $("#SecurityPortDestination").val() +
                   '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass614" ></a></li>');
          if (checkDestinationPorts(move, false) && !chekFlag) {
            $('#SecurityPortDestinationList').append(move);
            $("#SecurityPortDestination").val('');
            $("#SecurityPortDestination").focusout();
          }
        }
        e.preventDefault();
        return false;
      });

      $("#addSourceNetworks").on('click', function(e) {
        chekFlag = false;
        if (($("#SecurityNetworkSource").val().trim().length > 0) &&
            ($("#SecurityNetworkSource").val().trim().toLowerCase() == "Source NetWork Address".toLowerCase())) {
          $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
          //  $("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Field is empty");
          $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#SecurityNetworkSource").addClass("highlightTextBox");
        }
        if (($("#SecurityNetworkSource").val().trim().length > 0) &&
            ($("#SecurityNetworkSource").val().trim().toLowerCase() != "Source Network Address".toLowerCase())) {
          if ($("#SecurityNetworkSourceErrorSpan").hasClass('hint--top')) {
            $("#SecurityNetworkSourceErrorSpan").removeAttr("data-hint");
            $("#SecurityNetworkSourceErrorSpan").removeClass("hint--top");
            $("#SecurityNetworkSource").removeClass("highlightTextBox");
          }
          var ipType = "";
          var checkVal = 0;
          var sourceNetwork = $("#SecurityNetworkSource").val().trim().toLowerCase();
          if (sourceNetwork.indexOf("/") > -1) {
            var sourceNetworkResult = sourceNetwork.split("/");
            if (sourceNetworkResult.length == 2) {
              if (includeWildIPaddress(sourceNetworkResult[0].trim())) {
                if (parseInt(sourceNetworkResult[1].trim().toString()) <= 32) {
                  checkVal = 1;
                  ipType = " ";
                } else {
                  $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
                  //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP/Subnet");
                  $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
                  $("#SecurityNetworkSource").addClass("highlightTextBox");
                }
              } else {
                $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
                //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP/Subnet");
                $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
                $("#SecurityNetworkSource").addClass("highlightTextBox");
              }
            } else {
              $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
              //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP/Subnet");
              $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
              $("#SecurityNetworkSource").addClass("highlightTextBox");
            }
          } else if (sourceNetwork.indexOf("-") > -1) {
            var sourceNetworkResult = sourceNetwork.split("-");
            if (sourceNetworkResult.length == 2) {
              if (includeWildIPaddress(sourceNetworkResult[0].trim())) {
                if (includeWildIPaddress(sourceNetworkResult[1].trim()) && sourceNetworkResult[0].trim() != sourceNetworkResult[1].trim()) {
                  if (checkNetworkIP(sourceNetworkResult[0].trim(), sourceNetworkResult[1].trim())) {
                    if (checkNetworkIPRange(sourceNetworkResult[0].trim(), sourceNetworkResult[1].trim(), $('#SecurityNetworkSourceList'))) {
                      checkVal = 1;
                      $("#SecurityNetworkSource").val(sourceNetworkResult[0].trim() + " " + sourceNetworkResult[1].trim());
                      ipType = "range";
                    }
                    else {
                      $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
                      //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Range already exists");
                      $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("rangeAlreadyExists"));
                      $("#SecurityNetworkSource").addClass("highlightTextBox");
                    }
                  }
                  else {
                    $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
                    //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP range");
                    $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
                    $("#SecurityNetworkSource").addClass("highlightTextBox");
                  }

                } else {
                  $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
                  //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP range");
                  $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
                  $("#SecurityNetworkSource").addClass("highlightTextBox");
                }
              } else {
                $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
                //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP range");
                $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
                $("#SecurityNetworkSource").addClass("highlightTextBox");
              }
            } else {
              $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
              //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP range");
              $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
              $("#SecurityNetworkSource").addClass("highlightTextBox");
            }
          } else {
            if (includeWildIPaddress(sourceNetwork)) {
              ipType = "host";
              checkVal = 1;
            } else {
              $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
              //$("#SecurityNetworkSourceErrorSpan").attr("data-hint", "Not a valid IP");
              $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIp"));
              $("#SecurityNetworkSource").addClass("highlightTextBox");
            }
          }


          if (!checkDuplicates($('#SecurityNetworkSourceList'), $("#SecurityNetworkSource").val())) {
            if (checkVal == 1) {
              $("ul#SecurityNetworkSourceList li").each(function() {
                if ($(this).text().trim() == "Any") {
                  $(this).remove();
                }
              });
              $('#SecurityNetworkSourceList').append('<li value="' + $("#SecurityNetworkSource").val() + '"' +
                                                     ' ipType=' + ipType + ' ><a href="#" class="utmSprite network displayInlineBlock floatLeft" /><span class="paddingText">' +
                                                     $("#SecurityNetworkSource").val() +
                                                     '</span><a class="utmSprite close removeNetwork ccpexpCSSReplaceClass615" ></a></li>');
              $("#SecurityNetworkSource").val('');
              $("#SecurityNetworkSource").focusout();
            }
          }
          else {
            $("#SecurityNetworkSourceErrorSpan").addClass("hint--top");
            $("#SecurityNetworkSourceErrorSpan").attr("data-hint", $.i18n.prop("networkAlreadyExists"));
            $("#SecurityNetworkSource").addClass("highlightTextBox");
          }
        }
        e.preventDefault();
        return false;
      });

      $("#addDestinationNetworks").on('click', function(e) {
        chekFlag = false;
        if (($("#SecurityNetworkDestination").val().trim().length > 0) &&
            ($("#SecurityNetworkDestination").val().trim().toLowerCase() == "Destination NetWork Address".toLowerCase())) {
          $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
          $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#SecurityNetworkDestination").addClass("highlightTextBox");
        }
        if (($("#SecurityNetworkDestination").val().trim().length > 0) &&
            ($("#SecurityNetworkDestination").val().trim().toLowerCase() != "Destination NetWork Address".toLowerCase())) {
          if ($("#SecurityNetworkDestinationErrorSpan").hasClass('hint--top')) {
            $("#SecurityNetworkDestinationErrorSpan").removeAttr("data-hint");
            $("#SecurityNetworkDestinationErrorSpan").removeClass("hint--top");
            $("#SecurityNetworkDestination").removeClass("highlightTextBox");
          }
          var ipType = " ";
          var checkVal = 0;
          var destNetwork = $("#SecurityNetworkDestination").val().trim().toLowerCase();
          if (destNetwork.indexOf("/") > -1) {
            //code
            var destNetworkResult = destNetwork.split("/");
            if (destNetworkResult.length == 2) {
              if (includeWildIPaddress(destNetworkResult[0].trim())) {
                if (parseInt(destNetworkResult[1].trim().toString()) <= 32) {
                  checkVal = 1;
                  ipType = " ";
                } else {
                  $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
                  $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
                  $("#SecurityNetworkDestination").addClass("highlightTextBox");
                }
              } else {
                $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
                $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
                $("#SecurityNetworkDestination").addClass("highlightTextBox");
              }
            } else {
              $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
              $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
              $("#SecurityNetworkDestination").addClass("highlightTextBox");
            }
          } else if (destNetwork.indexOf("-") > -1) {
            var destNetworkResult = destNetwork.split("-");
            if (destNetworkResult.length == 2) {
              if (includeWildIPaddress(destNetworkResult[0].trim())) {
                if (includeWildIPaddress(destNetworkResult[1].trim()) && destNetworkResult[0].trim() != destNetworkResult[1].trim()) {
                  if (checkNetworkIP(destNetworkResult[0].trim(), destNetworkResult[1].trim())) {
                    if (checkNetworkIPRange(destNetworkResult[0].trim(), destNetworkResult[1].trim(), $('#SecurityNetworkDestinationList'))) {
                      checkVal = 1;
                      ipType = "range";
                      $("#SecurityNetworkDestination").val(destNetworkResult[0].trim() + " " + destNetworkResult[1].trim());
                    }
                    else {
                      $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
                      //$("#SecurityNetworkDestinationErrorSpan").attr("data-hint", "Range already exists");
                      $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("rangeAlreadyExists"));
                      $("#SecurityNetworkDestination").addClass("highlightTextBox");
                    }
                  } else {
                    $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
                    $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
                    $("#SecurityNetworkDestination").addClass("highlightTextBox");
                  }

                } else {
                  $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
                  $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
                  $("#SecurityNetworkDestination").addClass("highlightTextBox");
                }
              } else {
                $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
                $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
                $("#SecurityNetworkDestination").addClass("highlightTextBox");
              }
            } else {
              $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
              $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIpRange"));
              $("#SecurityNetworkDestination").addClass("highlightTextBox");
            }
          } else {
            if (includeWildIPaddress(destNetwork)) {
              ipType = "host";
              checkVal = 1;
            } else {
              $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
              $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("notValidIp"));
              $("#SecurityNetworkDestination").addClass("highlightTextBox");
            }
          }
          if (!checkDuplicates($('#SecurityNetworkDestinationList'), $("#SecurityNetworkDestination").val())) {
            if (checkVal == 1) {
              $("ul#SecurityNetworkDestinationList li").each(function() {
                if ($(this).text().trim() == "Any") {
                  $(this).remove();
                }
              });
              $('#SecurityNetworkDestinationList').append('<li value="' + $("#SecurityNetworkDestination").val() + '"' +
                                                          ' ipType=' + ipType +
                                                          ' ><a href="#" class="utmSprite network displayInlineBlock floatLeft" /><span class="paddingText">' +
                                                          $("#SecurityNetworkDestination").val() +
                                                          '</span><a class="utmSprite close removeNetwork ccpexpCSSReplaceClass616" ></a></li>');
              $("#SecurityNetworkDestination").val('');
              $("#SecurityNetworkDestination").focusout();
            }
          } else {
            $("#SecurityNetworkDestinationErrorSpan").addClass("hint--top");
            $("#SecurityNetworkDestinationErrorSpan").attr("data-hint", $.i18n.prop("networkAlreadyExists"));
            $("#SecurityNetworkDestination").addClass("highlightTextBox");
          }

        }
        e.preventDefault();
        return false;
      });
      /*
       $("#SecurityApplicationPolicySelectedList li").draggable({
       tolerance: "touch",
       revert: true,
       drag: function () {},
       stop: function () {}
       });

       $(".expandList").toggle(function() {
       $(this).parent().find('.appList').show();
       }, function() {
       $(this).parent().find('.appList').hide();
       });*/

      $(".expandList").unbind("click").click(function() {
        /*$(this).toggle(function() {
         $(this).parent().find('.appList').show();
         $(this).find('img').attr("src","images/key_minus.png");
         }, function() {
         $(this).parent().find('.appList').hide();
         $(this).find('img').attr("src","images/key_plus.png");
         });
         $(this).trigger('click');*/
        if ($(this).find('div').hasClass("key_plus")) {
          //$(this).find('img').attr("src", "images/key_minus.png");
          $(this).find('div').addClass("key_minus");
          $(this).find('div').removeClass("key_plus");
          $(this).parent().find('.appList').show();
        } else {
          //$(this).find('img').attr("src", "images/key_plus.png");
          $(this).find('div').addClass("key_plus");
    $(this).find('div').removeClass("key_minus");
          $(this).parent().find('.appList').hide();
        }
      });


      $(".removeGroup").live("click", function() {
        var group = $(this);
        group.parent().remove();
        $('#SecurityUserGroupAvailableList li').each(function() {
          if ($(this).attr("groupname") == group.parent().attr("groupname")) {
            $(this).show();
            $(this).removeAttr("added");
          }

        });
      });

      $(".removeNetwork").live("click", function() {
        $(this).parent().remove();
        if ($('#SecurityNetworkSourceList').find('li').length == 0) {
          //$('#SecurityNetworkSourceList').append('<li value="Any" iptype=""><a href="#" class="utmNetwork"></a><span class="paddingText">ANY</span></li>');
          $('#SecurityNetworkSourceList').append('<li value="Any" iptype=""><a href="#" class="utmSprite network displayInlineBlock floatLeft"></a><span class="paddingText">' + "Any" + '</span></li>');
        }
        if ($('#SecurityNetworkDestinationList').find('li').length == 0) {
          //$('#SecurityNetworkDestinationList').append('<li value="Any" iptype=""><a href="#" class="utmNetwork"></a><span class="paddingText">ANY</span></li>');
          $('#SecurityNetworkDestinationList').append('<li value="Any" iptype=""><a href="#" class="utmSprite network displayInlineBlock floatLeft"></a><span class="paddingText">' + "Any" + '</span></li>');
        }
      });

      $('.removePorts').live("click", function() {
        var port = $(this);
        if (port.parent().text().trim().indexOf(":") == -1) {
          $('#SecurityPortAvailableList li').each(function() {
            if ($(this).text().trim() == port.parent().text().trim()) {
              $(this).show();
              $(this).removeAttr("added");
            }
          });
        }

        if (port.parent().attr("source") == "source") {
          checkSourcePorts(port.parent(), true);
        } else {
          checkDestinationPorts(port.parent(), true);
        }
        port.parent().remove();
        if ($('#SecurityPortSourceList').find('li').length == 0) {
          //$('#SecurityPortSourceList').append('<li value="ANY" protocol="ip"><a href="#" class="utmPort"></a><span class="paddingText">ANY</span></li>');
          $('#SecurityPortSourceList').append('<li value="ANY" protocol="ip"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' + "Any" + '</span></li>');
          $('#SecurityPortDestination').attr('disabled', false);
          $('#SecurityPortDestinationProtocol').attr('disabled', false);
          $('#SecurityPortDestinationFieldSet').droppable('enable');
          $('ul#SecurityPortAvailableList>li').each(function() {
            //$(this).draggable('enable');
            if ($(this).hasClass('ui-draggable-disabled')) {
              try {
                $(this).draggable('enable');
              }
              catch (e) {
                errorLogInConsole(e);
              }
            }
          });

        }
        if ($('#SecurityPortDestinationList').find('li').length == 0) {
          //$('#SecurityPortDestinationList').append('<li value="ANY" protocol="ip"><a href="#" class="utmPort"></a><span class="paddingText">ANY</span></li>');
          $('#SecurityPortDestinationList').append('<li value="ANY" protocol="ip"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' + "Any" + '</span></li>');
          $('#SecurityPortSource').attr('disabled', false);
          $('#SecurityPortSource').attr('disabled', false);
          $('#SecurityPortSourceProtocol').attr('disabled', false);
          $('#SecurityPortSourceFieldSet').droppable('enable');
          $('ul#SecurityPortAvailableList>li').each(function() {
            //$(this).draggable('enable');
            if ($(this).hasClass('ui-draggable-disabled')) {
              try {
                $(this).draggable('enable');
              }
              catch (e) {
                errorLogInConsole(e);
              }
            }
          });
        }
        if ($('#SecurityPortDestinationList').find('li').length == 1 &&
            $('#SecurityPortSourceList').find('li').length == 1 &&
            $('#SecurityPortSourceList').find('li').text() == "ANY" &&
            $('#SecurityPortDestinationList').find('li').text() == "ANY") {
          $('#SecurityPortSource').attr('disabled', false);
          $('#SecurityPortSourceProtocol').attr('disabled', false);
          $('#SecurityPortDestination').attr('disabled', false);
          $('#SecurityPortDestinationProtocol').attr('disabled', false);
          $('#SecurityPortSourceProtocol').val("TCP");
          $('#SecurityPortDestinationProtocol').val("TCP");
        }
        /*if ($('#SecurityPortSourceList').find('li').length==1 && $('#SecurityPortSourceList').find('li').attr("protocol")=="ip" && $('#SecurityPortDestinationList').find('li').length==1 && $('#SecurityPortDestinationList').find('li').attr("protocol")=="ip") {
         $('#SecurityPortAvailableList li').each(function(){
         $(this).draggable("enable");
         $('#SecurityPortDestinationProtocol').removeAttr("disabled");
         $('#SecurityPortSource').removeAttr("disabled");
         });
         }*/
      });
      $(".removeApp").live("click", function() {
        var category;
        if ($(this).parent().hasClass('expandList')) {
          category = $(this).parent().parent().attr("data");
          $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function() {
            if ($(this).attr("data") == category) {
              $(this).find('.appList li').each(function() {
                $(this).removeAttr("disabled")
              });
              $(this).removeAttr("disabled");
              $(this).show();
              if (!$(this).find('.appList').is(':hidden')) {
                $(this).find('.expandList').trigger('click');
              }
            }

          });
          $(this).parent().parent().remove();
        } else {
          category = $(this).parent().attr("data");
          var application = $(this).parent().attr("val");
          $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function() {
            if ($(this).attr("data") == category) {
              $(this).find('.appList li').each(function() {
                if ($(this).attr("val") == application) {
                  $(this).removeAttr("disabled");
                  $(this).show();
                }
              });
            }

          });
          $(this).parent().remove();
        }
        enableDisableDomain();
      });

      $("#SecurityApplicationPolicySelectedListDiv").droppable({
        tolerance: "touch",
        drop: function(event, ui) {
          move = ui.draggable;
          if (checkPerPolicyAppLimit(move)) {
            SecuritySelectedApp(move);
            enableDisableDomain();
            move.attr("disabled", "true");
            if (move.hasClass('categoryList')) {
              move.find('.appList li').each(function() {
                $(this).attr("disabled", "true")
              });
            }
            move.hide();
            $("#SecurityblockedSiteFieldSet").show();
          }
          else {
            $('#maxLimitApp').dialog('open');
          }
          event.preventDefault();
        }
      });
      /*
       $("#SecurityApplicationPolicyListDiv").droppable({
       tolerance: "touch",
       drop: function (event, ui) {
       move = ui.draggable;
       SecurityAvailApp(move);
       move.hide();
       $("#SecurityblockedSiteFieldSet").show();
       event.preventDefault();
       }
       });*/

      $("#SecurityUserGroupSelectedList li").draggable({
        tolerance: "touch",
        revert: true,
        drag: function() {
        },
        stop: function() {
        }
      });

      $("#SecurityUserGroupSelectedListDiv").droppable({
        tolerance: "touch",
        drop: function(event, ui) {
          move = ui.draggable;
          SecuritySelectedGroup(move);
          move.attr("added", "added");
          move.hide();
          $("#SecurityblockedSiteFieldSet").show();
          event.preventDefault();
        }
      });

      /*$("#SecurityUserGroupAvailableListDiv").droppable({
       tolerance: "touch",
       drop: function (event, ui) {
       move = ui.draggable;
       SecurityAvailGroup(move);
       move.hide();
       $("#SecurityblockedSiteFieldSet").show();
       event.preventDefault();
       }
       });*/

      $("#SecurityPortSourceFieldSet").droppable({
        tolerance: "touch",
        drop: function(event, ui) {
          move = ui.draggable;
          SecurityPortSource(move);
          //move.hide();
          $("#SecurityblockedSiteFieldSet").show();
          event.preventDefault();
        }

      });
      $("#SecurityPortDestinationFieldSet").droppable({
        tolerance: "touch",
        drop: function(event, ui) {
          move = ui.draggable;
          SecurityPortDestination(move);
          //move.hide();
          $("#SecurityblockedSiteFieldSet").show();
          event.preventDefault();
        }
      });


      $("#SecurityblockedSiteFieldSet").droppable({
        tolerance: "touch",
        drop: function(event, ui) {
          move = ui.draggable;
          SecurityaddBlockUrl(move);
          move.hide();
          $("#SecurityblockedSiteFieldSet").show();
          enableDisableApplications();
          event.preventDefault();
        }
      });
      $("#SecurityaddContentName").button().click(function(e) {
        if ($("#SecuritysiteName").val().trim().length > 0) {
          $('#SecurityblockUrlTable').append('<tr class="Securitybordertr"><td class="SecurityblockUrlText"><a class="fa fa-globe fontSize19px"/>'+
                                             '<span class="ccpexpCSSReplaceClass617">' +
                                             $("#SecuritysiteName").val() +
                                             '</span></td><td class="ccpexpCSSReplaceClass618">'+
                                             '<a class="utmSprite close deleteSite" dataid="0"/></td>');
          $("#SecuritysiteName").val("");
          enableDisableApplications();
        } else {
          $("#SecuritysiteNameErrorSpan").addClass("hint--top");
          $("#SecuritysiteNameErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
          $("#SecuritysiteName").addClass("highlightTextBox");
        }
        e.preventDefault();
        return false;
      });

      $("#SecurityblockUrlTable").on('click', '.deleteSite', function() {
        var i = $(this).attr('dataid');
        $(this).parents('tr').remove();
        var keyword = $(this).text().replace("www.", "").replace("http://", "").replace("https://", "").replace(".com", "").replace(".in", "");
        $("ul#SecuritypermittedSitesList li").each(function() {
          if (i == $(this).attr('data-id')){
            $(this).show();
          }
        });
        enableDisableApplications();
      });

      $("#SecuritysiteName").on("keyup", function(event) {
        if ($("#SecuritysiteNameErrorSpan").hasClass('hint--top')) {
          $("#SecuritysiteNameErrorSpan").removeAttr("data-hint");
          $("#SecuritysiteNameErrorSpan").removeClass("hint--top");
          $("#SecuritysiteName").removeClass("highlightTextBox");
        }
      });



      $("#SecurityPolicyName").on("keydown", function(e) {
        return e.which !== 32;
      });

      $("#SecuritysiteName").on("keydown", function(e) {
        return e.which !== 32;
      });

      $('#securityPortsSearch').on("keyup", function(event) {
        var keyword = $('#securityPortsSearch').val();
        $('#SecurityPortAvailableList li').each(function() {
          if ($(this).attr("added") == "added") {
            isEmptyBlock = true;
          } else {
            if ($(this).attr("protocol").indexOf(keyword) > -1) {
              $(this).show();
            } else {
              $(this).hide();
            }
          }

        });
      });
      $('#availableGroupSearch').on("keyup", function(event) {
        var keyword = $('#availableGroupSearch').val();
        $('#SecurityUserGroupAvailableList li').each(function() {
          if ($(this).attr("added") == "added") {
            isEmptyBlock = true;
          } else {
            if ($(this).attr("groupname").indexOf(keyword) > -1) {
              $(this).show();
            } else {
              $(this).hide();
            }
          }
        });
      });
      $('#availableGroupSelectedSearch').on("keyup", function(event) {
        var keyword = $('#availableGroupSelectedSearch').val();
        $('#SecurityUserGroupSelectedList li').each(function() {
          if ($(this).attr("added") == "added") {
            isEmptyBlock = true;
          } else {
            if ($(this).attr("groupname").indexOf(keyword) > -1) {
              $(this).show();
            } else {
              $(this).hide();
            }
          }
        });
      });
      $('#selectedAppSearch').on("keyup", function(event) {
        var searchKeyword = $(this).val().trim();

        if (searchKeyword != '' && searchKeyword != null) {
          $('#SecurityApplicationPolicySelectedList').children('li').each(function() {
            if ($(this).text().indexOf(searchKeyword) > -1) {
              $(this).show();
            }
            else {
              $(this).hide();
            }
          });
          $('#SecurityApplicationPolicySelectedListDiv').find(".categoryList").each(function() {
            if (!($(this).attr("disabled"))) {
              var exists = false;
              $(this).find('.appList li').each(function() {
                if (!($(this).attr("disabled"))) {
                  if ($(this).text().trim().indexOf(searchKeyword) > -1) {
                    //$(this).parent().show();

                    if ($(this).parent().is(':hidden')) {
                      $(this).parent().parent().find('.expandList').trigger('click');
                    }
                    $(this).parent().parent().show();
                    exists = true;
                    return false;
                  } else {
                    //$(this).parent().hide();

                    if ($(this).parent().is(':not(:hidden)')) {
                      $(this).parent().parent().find('.expandList').trigger('click');
                    }
                    $(this).parent().parent().hide();

                  }
                }
              });

              $(this).find('.appList li').each(function() {
                if (!($(this).attr("disabled"))) {
                  if (exists) {
                    if ($(this).text().trim().indexOf(searchKeyword) > -1) {
                      $(this).show();
                    } else {
                      $(this).hide();
                    }
                  } else {
                    $(this).show();
                    $(this).parent().hide();
                  }
                }
              });
            }
            /*if ($(this).attr("data").indexOf(searchKeyword)>-1 && !$('#applicationBasedRadio').is(':checked') && !exists) {
             $(this).find('.appList li').each(function(){$(this).show();});
             if (!$(this).find('.appList').is(':hidden')) {
             $(this).find('.expandList').trigger('click');
             }
             $(this).show();
             }*/
          });
        } else {
          $('#SecurityApplicationPolicySelectedList').children('li').each(function() {
            $(this).show();
          });
          $('#SecurityApplicationPolicySelectedListDiv').find(".categoryList").each(function() {
            if (!($(this).attr("disabled"))) {
              $(this).show();
              $(this).find('.appList li').each(function() {
                if (!($(this).attr("disabled"))) {
                  /*
                   if ($('#applicationBasedRadio').is(':checked')) {
                   if ($(this).parent().is(':hidden')) {
                   $(this).parent().parent().find('.expandList').trigger('click');
                   }
                   }else{*/
                  if (!$(this).parent().is(':hidden')) {
                    $(this).parent().parent().find('.expandList').trigger('click');
                  }
                  //}
                  $(this).show();
                }
              });
            }
          });

        }
      });

      $('#availableAppSearch').on("keyup", function(event) {
        var searchKeyword = $(this).val().trim();
        //regExp = new RegExp('^'+searchKeyword+'([\s\S]*)+', "gi");
        if (searchKeyword != '' && searchKeyword != null) {
          $('#SecurityApplicationPolicyListDiv').find(".categoryList").each(function() {
            if (!($(this).attr("disabled"))) {
              var exists = false;
              $(this).find('.appList li').each(function() {
                if (!($(this).attr("disabled"))) {
                  if ($(this).text().trim().indexOf(searchKeyword) > -1) {
                    //$(this).parent().show();

                    if ($(this).parent().is(':hidden')) {
                      $(this).parent().parent().find('.expandList').trigger('click');
                    }
                    $(this).parent().parent().show();
                    exists = true;
                    return false;
                  } else {
                    //$(this).parent().hide();

                    if ($(this).parent().is(':not(:hidden)')) {
                      $(this).parent().parent().find('.expandList').trigger('click');
                    }
                    $(this).parent().parent().hide();

                  }
                }
              });

              $(this).find('.appList li').each(function() {
                if (!($(this).attr("disabled"))) {
                  if (exists) {
                    if ($(this).text().trim().indexOf(searchKeyword) > -1) {
                      $(this).show();
                    } else {
                      $(this).hide();
                    }
                  } else {
                    $(this).show();
                    $(this).parent().hide();
                  }
                }
              });
            }
            /*
             if ($(this).attr("data").indexOf(searchKeyword)>-1 && !$('#applicationBasedRadio').is(':checked') && !exists) {
             $(this).find('.appList li').each(function(){$(this).show();});
             if (!$(this).find('.appList').is(':hidden')) {
             $(this).find('.expandList').trigger('click');
             }
             $(this).show();
             }*/
          });
        } else {
          $('#SecurityApplicationPolicyListDiv').find(".categoryList").each(function() {
            if (!($(this).attr("disabled"))) {
              $(this).show();
              $(this).find('.appList li').each(function() {
                if (!($(this).attr("disabled"))) {
                  /*if ($('#applicationBasedRadio').is(':checked')) {
                   if ($(this).parent().is(':hidden')) {
                   $(this).parent().parent().find('.expandList').trigger('click');
                   }
                   }else{*/
                  if (!$(this).parent().is(':hidden')) {
                    $(this).parent().parent().find('.expandList').trigger('click');
                  }
                  //}
                  $(this).show();
                }
              });
            }
          });

        }
      });

      $("#SecurityTableSearch").on("keyup", function(event) {
        var searchKeyword = $("#SecurityTableSearch").val().toLowerCase();
        if (searchKeyword.length <= 0) {
          $("#SecurityblockUrlTable").find('tr').each(function() {
            $(this).find('td').each(function() {
              $(this).parents('tr').show();
            });
          });
        } else {
          $("#SecurityblockUrlTable").find('tr').each(function(index) {
            $(this).find('td.SecurityblockUrlText').each(function() {
              if ($(this).text().toLowerCase().indexOf(searchKeyword) > -1) {
                $(this).parents('tr').show();
              } else {
                $(this).parents('tr').hide();
              }
            });
          });
        }
      });
      $.unblockUI();
    }, 1000);
    //consoleLogMethodDetailsEnd("configureSecurityPolicy.js", "loadSecurityPolicy()");

  }

  function getzone() {
    $('#sourceZone').empty();
    $('#destinationZone').empty();
    regExp = new RegExp('^' + "zone " + '([a-zA-Z0-9])+', "gi");
    var xml = deviceCommunicator.getExecCmdOutput("show zone security");
    var reg = new RegExp("[,\\n]"), rows;
    //var rowsOne, rowsOneSplit;
    //$.blockUI({ blockMsgClass: 'blocked', message: '<h1>'+$.i18n.prop("Loading")+'</h1>' });
    rows = xml.split(reg);
    for (i = 0; i < rows.length; i++) {
      if (rows[i].trim() != "zone self") {
        //code
        if (regExp.test(rows[i].trim())) {
          var zoneName = rows[i].replace("zone", "").trim().toUpperCase();
          if (zoneName == "LAN" || zoneName == "WAN" || zoneName == "DMZ" || zoneName == "VPN") {
            $('#sourceZone').append('<option value="' + rows[i].trim().replace("zone", "").trim() + '">' +
                                    rows[i].trim().replace("zone", "").trim() + '</option>');
            $('#destinationZone').append('<option value="' + rows[i].trim().replace("zone", "").trim() + '">' +
                                         rows[i].trim().replace("zone", "").trim() + '</option>');
          }

        }
      }
    }
  }

  function SecurityaddBlockUrl(move) {
    $('#SecurityblockUrlTable').append('<tr class="Securitybordertr"><td class="SecurityblockUrlText"><a class="' +
                                       move.find("a ").attr("titleimg") +
                                       '"/><span class="ccpexpCSSReplaceClass619">' +
                                       move.find("a").attr("caption") +
                                       '</span></td><td class="ccpexpCSSReplaceClass620">'+
                                       '<a class="utmSprite close deleteSite" dataid="' +
                                       move.attr("data-id") + '"/></td>');
  }
  /*
   function SecurityZoneSource(move) {
   $('#SecuritylanInterfaceList').append('<li value="' + move.text() + '" >' + "<a href='#' class='utmZone' />" + " " + move.text() + '</li>');
   }

   function SecurityZoneDestination(move) {
   $('#SecuritywanInterfaceList').append('<li value="' + move.text() + '" >' + "<a href='#' class='utmZone' />" + " " + move.text() + '</li>');
   }
   */
  function SecurityAvailGroup(move) {
    $('#SecurityUserGroupList').append('<li value="' + move.text() + '" >' + "<a href='#' class='utmSprite top_10_users zoom80Percent displayInlineBlock verticalAlignTop' />" + " " + move.text() + '</li>');
  }

  function SecuritySelectedGroup(move) {
    $('#SecurityUserGroupSelectedList').append('<li value="' + move.text() + '" class="ui-draggable"' +
                                               'groupname="' + move.attr('groupname') + '" >' +
                                               "<a href='#' class='utmSprite top_10_users zoom80Percent displayInlineBlock verticalAlignTop' />" + " " + move.text() +
                                               '<a class="utmSprite close removeGroup ccpexpCSSReplaceClass621" ></a></li>');
  }

  /*function SecurityAvailApp(move) {
   $('#SecurityApplicationPolicyList').append('<li value="' + move.text() + '" >' + "<a href='#' class='utmApplication' />" + " " + move.text() + '</li>');
   }*/

  function checkPerPolicyAppLimit(move) {
    count = 0;
    $('#SecurityApplicationPolicySelectedList').children('.categoryList').each(function() {
      totalClassMap = parseInt($(this).find('.appList').find('li').length / 74);
      remainder = $(this).find('.appList').find('li').length % 74;
      count = count + totalClassMap
      if (remainder > 0){
        count++;
      }
    });
    count = count + $('#SecurityApplicationPolicySelectedList').children('li').length;
    if (move.hasClass('categoryList')) {
      totalClassMap = parseInt(move.find('.appList').find('li').length / 74);
      remainder = move.find('.appList').find('li').length % 74;
      count = count + totalClassMap
      if (remainder > 0){
        count++;
      }
    } else {
      count++;
    }
    if (count > 74){
      return false;
    }
    else{
      return true;
    }
  }

  function SecuritySelectedApp(move) {
    //var exists=false;
    if (move.hasClass('categoryList')) {
      if ($('#SecurityApplicationPolicySelectedList').find('.categoryList').length == 0) {
        $('#SecurityApplicationPolicySelectedList').prepend('<div class="categoryList" data="' +
                                                            move.find('.expandList').text().trim() + '">' + move.html() + '</div>');
        $('#SecurityApplicationPolicySelectedList .expandList').append('<a class="utmSprite close removeApp ccpexpCSSReplaceClass622" ></a>');
        $('#SecurityApplicationPolicySelectedList .expandList:last').click(function() {
          if ($(this).find('div').hasClass("key_plus")) {
            //$(this).find('img').attr("src", "images/key_minus.png");
            $(this).find('div').addClass("key_minus");
      $(this).find('div').removeClass("key_plus");
          $(this).parent().find('.appList').show();
          } else {
            //$(this).find('img').attr("src", "images/key_plus.png");
            $(this).find('div').addClass("key_plus");
      $(this).find('div').removeClass("key_minus");
          $(this).parent().find('.appList').hide();
          }

        });
        $('#SecurityApplicationPolicySelectedList .appList li').each(function() {
          $(this).removeAttr("disabled");
          $(this).show();
        });
        if (!$("#SecurityApplicationPolicySelectedList .appList").is(':hidden')) {
          $('#SecurityApplicationPolicySelectedList .expandList').trigger('click');
        }
      } else {
        /*
         $('.categoryList').each(function(){
         if($(this).attr("data")==move.find('.expandList').text()){
         exists=true;
         }
         });*/
        $("#SecurityApplicationPolicySelectedList .categoryList:last").after('<div class="categoryList" data="' +
                                                                             move.find('.expandList').text() + '">' +
                                                                             move.html().trim() + '</div>');
        $('#SecurityApplicationPolicySelectedList .expandList:last').append('<a class="utmSprite close removeApp ccpexpCSSReplaceClass623" ></a>');
        $('#SecurityApplicationPolicySelectedList .appList:last li').each(function() {
          $(this).removeAttr("disabled");
          $(this).show;
        });
        $('#SecurityApplicationPolicySelectedList .expandList:last').click(function() {
          if ($(this).find('div').hasClass("key_plus")) {
            //$(this).find('img').attr("src", "images/key_minus.png");
            $(this).find('div').addClass("key_minus");
      $(this).find('div').removeClass("key_plus");
            $(this).parent().find('.appList').show();
          } else {
            //$(this).find('img').attr("src", "images/key_plus.png");
            $(this).find('div').addClass("key_plus");
      $(this).find('div').removeClass("key_minus");
            $(this).parent().find('.appList').hide();
          }

        });
        if (!$("#SecurityApplicationPolicySelectedList .appList:last").is(':hidden')) {
          $('#SecurityApplicationPolicySelectedList .expandList:last').trigger('click');
        }
      }
      $("ul#SecurityApplicationPolicySelectedList").children('li').each(function() {
        app = $(this);
        move.find('.appList li').each(function() {
          if (app.text().trim() == $(this).text().trim()) {
            app.remove();
            category = $(this).attr("data");
            var application = $(this).attr("val");
            $('#SecurityApplicationPolicyListDiv').find('.categoryList').each(function() {
              if ($(this).attr("data") == category) {
                $(this).find('.appList li').each(function() {
                  if ($(this).attr("val") == application) {
                    $(this).removeAttr("disabled");
                    $(this).show();
                  }
                });
              }

            });
          }
        });
      });
    } else {
      $('#SecurityApplicationPolicySelectedList').append('<li val="' + move.text().trim() + '" class="ui-draggable" data="' +
                                                         move.attr("data") + '">' + "<a href='#' class='utmSprite application displayInlineBlock' />" + " " +
                                                         move.text() + '<a class="utmSprite close removeApp"></a></li>');
    }
  }

  function checkTCPUDP(list, removeFlag, move) {
    var tcpFound = false, udpFound = false, flag = "";
    list.find('li').each(function() {
      if (removeFlag && $(this).text() == move.text()) {
        return true;
      }
      if ($(this).attr("tcp") == "true"){
        tcpFound = true;
      }
      if ($(this).attr("udp") == "true"){
        udpFound = true;
      }

    });
    if (tcpFound && !udpFound) {
      flag = "tcp";
    }
    if (!tcpFound && udpFound) {
      flag = "udp";
    }
    if (tcpFound && udpFound) {
      flag = "tcp-udp";
    }
    return flag;
  }
  function checkSourcePorts(move, removeFlag) {
    var flag = true;
    var destCheck = checkTCPUDP($('#SecurityPortDestinationList'), false, move);
    var sourceCheck = checkTCPUDP($('#SecurityPortSourceList'), removeFlag, move);
    if ((move.attr(destCheck) == "true" && !removeFlag) || (removeFlag && destCheck == sourceCheck && sourceCheck != "" && destCheck != "")) {
      enableDisableAvailablePorts(destCheck);
    } else {
      $('ul#SecurityPortAvailableList>li').each(function() {
        //$(this).draggable('enable');
        if ($(this).hasClass('ui-draggable-disabled')) {
          try {
            $(this).draggable('enable');
          }
          catch (e) {
            errorLogInConsole(e);
          }
        }
      });
      //var elem=move;
      //if (removeFlag) {
      //elem=move.prev();
      //}
      if ((sourceCheck == "tcp" && move.attr("udp") == "true" && !removeFlag) ||
          (sourceCheck == "udp" && move.attr("tcp") == "true" && !removeFlag) ||
          sourceCheck == "tcp-udp") {
        $('ul#SecurityPortDestinationList').empty();
        //$('#SecurityPortDestinationList').append('<li value="ANY" protocol="ip"><a href="#" class="utmPort"></a><span class="paddingText">ANY</span></li>');
        $('#SecurityPortDestinationList').append('<li value="ANY" protocol="ip"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' + "Any" + '</span></li>');
        $('#SecurityPortDestinationProtocol').attr('disabled', true);
        $('#SecurityPortDestination').attr('disabled', true);
        $('#SecurityPortDestinationFieldSet').droppable('disable');
      } else {
        if (removeFlag) {
          $('#SecurityPortDestinationProtocol').val(sourceCheck.toUpperCase());
        } else {
          if (move.attr("tcp") == "true") {
            $('#SecurityPortDestinationProtocol').val("TCP");
          }
          if (move.attr("udp") == "true") {
            $('#SecurityPortDestinationProtocol').val("UDP");
          }
        }
        $('#SecurityPortDestinationProtocol').attr('disabled', true);
        $('#SecurityPortDestinationFieldSet').droppable('enable');
        $('#SecurityPortDestination').attr('disabled', false);

      }
    }
    var tcpDesFound = false, udpDesFound = false;
    $('#SecurityPortDestinationList li').each(function() {
      if ($(this).attr("tcp") == "true") {
        tcpDesFound = true;
      }
      if ($(this).attr("udp") == "true") {
        udpDesFound = true;
      }
    });
    if (tcpDesFound && move.attr("udp") == "true" && !udpDesFound) {
      $('#SecurityPortDestinationProtocol').val("TCP");
      $('#SecurityPortDestinationProtocol').attr('disabled', false);
      flag = false;
    }
    if (udpDesFound && move.attr("tcp") == "true" && !tcpDesFound) {
      $('#SecurityPortDestinationProtocol').val("TCP");
      $('#SecurityPortDestinationProtocol').attr('disabled', false);
      flag = false;
    }
    $('#SecurityPortSourceList li').each(function() {
      if ($(this).text().trim() == move.text().trim()) {
        flag = false;
        return false;
      }

    });
    return flag;
  }

  function enableDisableAvailablePorts(sourceCheck) {
    $('#SecurityPortDestinationProtocol').val(sourceCheck.toUpperCase());
    $('#SecurityPortDestinationProtocol').attr('disabled', true);
    $('#SecurityPortDestination').attr('disabled', false);
    $('#SecurityPortSourceProtocol').val(sourceCheck.toUpperCase());
    $('#SecurityPortSourceProtocol').attr('disabled', true);
    $('#SecurityPortSource').attr('disabled', false);
    $('ul#SecurityPortAvailableList>li').each(function() {
      if ($(this).attr(sourceCheck) == "true") {
        if ($(this).hasClass('ui-draggable-disabled')) {
          try {
            $(this).draggable('enable');
          }
          catch (e) {
            errorLogInConsole(e);
          }
        }
      } else {
        if ($(this).hasClass('ui-draggable')) {
          try {
            $(this).draggable('disable');
          }
          catch (e) {
            errorLogInConsole(e);
          }
        }

      }
    });
  }
  function checkDestinationPorts(move, removeFlag) {
    var flag = true;
    var destCheck = checkTCPUDP($('#SecurityPortDestinationList'), removeFlag, move);
    var sourceCheck = checkTCPUDP($('#SecurityPortSourceList'), false, move);
    if ((removeFlag && destCheck == sourceCheck && sourceCheck != "" && destCheck != "") || (move.attr(sourceCheck) == "true" && !removeFlag)) {
      enableDisableAvailablePorts(sourceCheck);
    } else {
      $('ul#SecurityPortAvailableList>li').each(function() {
        if ($(this).hasClass('ui-draggable-disabled')) {
          try {
            $(this).draggable('enable');
          }
          catch (e) {
            errorLogInConsole(e);
          }
        }
      });
      //var elem=move;
      //if (removeFlag) {
      //elem=move.prev();
      //}
      if ((destCheck == "tcp" && move.attr("udp") == "true" && !removeFlag) ||
          (destCheck == "udp" && move.attr("tcp") == "true" && !removeFlag) ||
          destCheck == "tcp-udp") {
        $('ul#SecurityPortSourceList').empty();
        $('#SecurityPortSourceList').append('<li value="ANY" protocol="ip"><a href="#" class="utmSprite port displayInlineBlock"></a><span class="paddingText verticalAlignTop">' + "Any" + '</span></li>');
        $('#SecurityPortSourceProtocol').attr('disabled', true);
        $('#SecurityPortSource').attr('disabled', true);
        $('#SecurityPortSourceFieldSet').droppable('disable');
      } else {
        if (removeFlag) {
          $('#SecurityPortSourceProtocol').val(destCheck.toUpperCase());
        } else {
          if (move.attr("tcp") == "true") {
            $('#SecurityPortSourceProtocol').val("TCP");
          }
          if (move.attr("udp") == "true") {
            $('#SecurityPortSourceProtocol').val("UDP");
          }
        }
        $('#SecurityPortSourceProtocol').attr('disabled', true);
        $('#SecurityPortSourceFieldSet').droppable('enable');
        $('#SecurityPortSource').attr('disabled', false);

      }
    }
    var tcpDesFound = false, udpDesFound = false;
    $('#SecurityPortSourceList li').each(function() {
      if ($(this).attr("tcp") == "true") {
        tcpDesFound = true;
      }
      if ($(this).attr("udp") == "true") {
        udpDesFound = true;
      }
    });
    if (tcpDesFound && move.attr("udp") == "true" && !udpDesFound) {
      $('#SecurityPortSourceProtocol').val("TCP");
      $('#SecurityPortSourceProtocol').attr('disabled', false);
      flag = false;
    }
    if (udpDesFound && move.attr("tcp") == "true" && !tcpDesFound) {
      $('#SecurityPortSourceProtocol').val("UDP");
      $('#SecurityPortSourceProtocol').attr('disabled', false);
      flag = false;
    }
    $('#SecurityPortDestinationList li').each(function() {
      if ($(this).text().trim() == move.text().trim()) {
        flag = false;
        return false;
      }
    });
    return flag;
  }
  function SecurityPortSource(move) {


    $('#SecurityPortDestinationList li').each(function() {
      if ($(this).text().trim() == move.text().trim()) {
        move.attr("added", "added");
        move.hide();
      }
    });
    var protocolType;
    if (move.attr("tcp") == "true"){
      protocolType = "tcp";
    }
    else if (move.attr("udp") == "true"){
      protocolType = "udp";
    }
    if (checkSourcePorts(move, false)) {

      $("ul#SecurityPortSourceList li").each(function() {
        if ($(this).text().trim() == "Any") {
          $(this).remove();
        }
        if ($(this).text().trim().indexOf(move.text().trim()) > -1) {
          $(this).remove();
        }
      });
      $('ul#SecurityPortSourceList').append('<li value="' + move.attr("protocol") + '"' + 'protocol="' +
                                            move.attr("protocol") + '" source="source" ' + protocolType + '="true" portno=' +
                                            move.attr("portno") + '>' + "<a href='#' class='utmSprite port displayInlineBlock'/>" +
                                            "<span class='paddingText verticalAlignTop'>" + move.text() +
                                            '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass624" ></a></li>');
    }
  }

  function SecurityPortDestination(move) {
    $('ul#SecurityPortSourceList li').each(function() {
      if ($(this).text().trim() == move.text().trim()) {
        move.attr("added", "added");
        move.hide();
      }
    });
    var protocolType;
    if (move.attr("tcp") == "true"){
      protocolType = "tcp";
    }
    else if (move.attr("udp") == "true"){
      protocolType = "udp";
    }
    if (checkDestinationPorts(move, false)) {
      $("ul#SecurityPortDestinationList li").each(function() {
        if ($(this).text().trim() == "Any") {
          $(this).remove();
        }
        if ($(this).text().trim().indexOf(move.text().trim()) > -1) {
          $(this).remove();
        }
      });

      $('#SecurityPortDestinationList').append('<li value="' + move.attr("protocol") + '"' + 'protocol="' +
                                               move.attr("protocol") + '" source=" " ' + protocolType + '="true" portno=' +
                                               move.attr("portno") + '>' + "<a href='#' class='utmSprite port displayInlineBlock'/>" +
                                               "<span class='paddingText verticalAlignTop'>" + move.text() +
                                               '</span><a class="utmSprite close removePorts ccpexpCSSReplaceClass625" ></a></li>');
    }
  }
  function securityPolicyLoading() {
    $("#selectaRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      //buttons: {
      //  "Ok": function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#deletePolicyRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      //buttons: {
      //  "Ok": function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
            if (deletePolicyFlag) {
              $("#delete").trigger("click");
            }
          }
        }, {
          //"Cancel": function () {
          text: $.i18n.prop("cancel"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#maxLimitApp").dialog({
      autoOpen: false,
      height: 200,
      width: 550,
      modal: true,
      //buttons: {
      //  "Ok": function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#maxLimitPol").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      //buttons: {
      //  "Ok": function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });
    $("#add").button().unbind('click').click(function(event) {
      if (checkPolicyLimit()) {
        editPolicyFlag = false;
        resetFields();
        $("#policyTabs").tabs({
          active: 0
        });
        $('#PolicyAction').val("inspect");
        $("#sourceZone").val($('#sourceZone').children('option').eq(0).val());
        $("#destinationZone").val($('#destinationZone').children('option').eq(1).val());
        $("#SecurityNetworkSource").val('');
        $("#SecurityNetworkSource").focusout();
        $("#SecurityNetworkDestination").val('');
        $("#SecurityNetworkDestination").focusout();
        $("#SecurityPortDestination").val('');
        $("#SecurityPortDestination").focusout();
        $("#SecurityPortSource").val('');
        $("#SecurityPortSource").focusout();
        $('#securityPolicyDialog').dialog('open', 'title', $.i18n.prop("securityPolicy"));
        $('#securityPolicyDialogError').hide();
        $('#applicationList').hide();
        $('#SecurityApplicationPolicyListDiv').show();
        //$('#categoryBasedRadio').attr('checked','checked');
        $('#SecurityApplicationPolicySelectedList').empty();
        $('#SecurityPortDestinationFieldSet').droppable('enable');
        $('#SecurityPortSourceFieldSet').droppable('enable');

        $("#SecurityApplicationPolicyList li").draggable({
          helper: "clone",
          drag: function() {
          },
          stop: function() {
          }
        });
        /*$("#SecurityzonableInterfaceList li").draggable({
         tolerance: "touch",
         revert: true,
         drag: function () {},
         stop: function () {}
         });*/
        $("#SecurityApplicationPolicyListDiv .categoryList").draggable({
          helper: "clone",
          drag: function() {
          },
          stop: function() {
          }
        });
        $("#SecurityApplicationPolicyListDiv .appList li").draggable({
          helper: "clone",
          drag: function() {
          },
          stop: function() {
          }
        });
        enableDisableApplications();
        enableDisableDomain();
      }
      return false;

    });
    $('#securityPolicytable tbody input:checkbox').live('click', function() {
      var $this = $(this);
      if ($this.is(":checked")) {
        //$("#securityPolicytable tbody tr").removeClass('hilite');
        $this.closest("tr").addClass("hilite");
      } else {
        $this.closest("tr").removeClass("hilite");
        $("thead input:checkbox").prop('checked', false);
      }
      var checkedCount = $("#securityPolicytable tbody input:checkbox:checked").length;
      var policyCount = $('#securityPolicytable tbody input:checkbox').length;
      if (checkedCount == policyCount) {
        $("thead input:checkbox").prop('checked', true);
      }
      /*if (checkedCount == 1) {
       $("#securityPolicytable tbody input:checkbox:checked").closest("tr").addClass("hilite");
       $("#securityPolicytable tbody input:checkbox:checked").closest("tr").siblings().removeClass('hilite');
       }*/
      enableDisableButton("securityPolicytable", "add");
    });
    $(".secPolicyEdit").live("click", function() {
      $this = $(this).closest("tr");
      triggerPolicyEdit($this);
    });
    $('#securityPolicytable tbody tr').live('dblclick', function(e) {
      $this = $(this).closest("tr");
      if(!($this.hasClass("policyhead"))){
        triggerPolicyEdit($this);
      }
      enableDisableButton("securityPolicytable", "add");
    });
    //trigger edit button
    function triggerPolicyEdit($this) {
      $('#securityPolicytable input:checkbox').removeAttr('checked');
      $("#securityPolicytable tbody tr").removeClass('hilite');
      $this.addClass("hilite");
      $this.find('input:checkbox').eq(0).prop('checked', true);
      if ($this.hasClass('disabledObjectGroup') === false) {
        enableDisableButton("securityPolicytable", "add");
        $("#edit").trigger("click");
      } else {
        $this.removeClass("hilite");
        $('#securityPolicytable input:checkbox').removeAttr('checked');
      }
    }

    $("#edit").button().unbind('click').click(function() {
      $(".reloadtable").trigger("click");
      editRowSelected = $('#securityPolicytable tr.hilite');
      if (editRowSelected.children().get(1)) {
        editPolicyFlag = true;
        $("#add").trigger("click");
        editPolicyFlag = true;
        getEditDetails(editRowSelected);
        enableDisableApplications();
        enableDisableDomain();

      } else {
        $("#selectaRow").dialog("open");
      }
      return false;
    });
    $(".secPolicyDelete").live("click", function() {
      $this = $(this).closest("tr");
      $("#securityPolicytable tbody tr").removeClass('hilite');
      $this.addClass("hilite");
      $this.find('input:checkbox').eq(0).prop('checked', true);
      deletePolicyFlag = true;
      enableDisableButton("securityPolicytable", "add");
      $("#deletePolicyRowStr").text($.i18n.prop("deletePolicyDoYou"));
      $("#deletePolicyRow").dialog("open");
      //$("#delete").trigger("click");
    });


    $("#delete").button().click(function() {
      var deleterow = $('#securityPolicytable tr.hilite');
      var selectedRows = $("#securityPolicytable tbody input:checkbox:checked").length;
      //var zoneSource = [], zoneDes = [];

      if (selectedRows == 0) {
        $.unblockUI();
        $("#selectaRow").dialog("open");
      } else {
        blockPage("Applying");
        setTimeout(function() {
          var xml = getAllConfig(false);
          if (selectedRows > 1 && !deletePolicyFlag) {
            $("#securityPolicytable tbody input:checkbox").each(function() {
              if (this.checked) {
                deleterow = $(this).closest("tr");
                deleteSecurityPolicy(deleterow, xml);
                $(this).closest('tr').remove();
              }
            });
          } else {
            deleteSecurityPolicy(deleterow, xml);
          }
          deletePolicyFlag = false;
          deviceCommunicator.doWriteMemory();
          xml = getAllConfig(true);
          refreshPolicyTable(xml);
          $.unblockUI();
        }, 1000);
      }

      return false;
    });
    function deleteSecurityPolicy(deleterow, xml) {
      zonePolicy = deleterow.parent().find('tr:first').find('td:first').text().trim().split(/\s+/);
      source = zonePolicy[0].split('-')[0];
      des = zonePolicy[0].split('-')[1];
      if (source != "" && des != "") {
        deleteZonePairAndPolicyMap(deleterow.children().get(1).textContent, source.trim(), des.trim(), checkZonePolicyCount(deleterow), xml);
      }
      deletePolicy(deleterow.children().get(1).textContent, deleterow);
    }
    $("#securityPolicyDialog").dialog({
      autoOpen: false,
      modal: true,
      height: 700,
      width: 900,
      position: ['middle', 20],
      //buttons: {
      //"Save": function () {
      buttons: [{
          text: $.i18n.prop("save"),
          click: function() {
            //var sourceZonelen,destZonlen=0;
            /*
             $("ul#SecuritylanInterfaceList li").each(function () {
             sourceZonelen=sourceZonelen+1;
             });
             $("ul#SecuritywanInterfaceList li").each(function () {
             destZonlen=destZonlen+1;
             });*/
            // $.blockUI({ blockMsgClass: 'blocked', message: '<h1>Applying Configuration</h1>'});
            blockPage("Applying");
            setTimeout(function() {
              try {
                var policyNamecheckFlag = 0;

                var policycheckName = $("#SecurityPolicyName").val().trim().toLowerCase();
                if (!editPolicyFlag) {
                  $("#securityPolicytable").find('tr').each(function() {
                    $(this).find('td.securityPolicyName').each(function() {
                      if ($(this).text() == policycheckName) {
                        policyNamecheckFlag = 1;
                      }
                    });
                  });
                }
                if (policycheckName.length == 0) {
                  $('#securityPolicyDialogMessage').html($.i18n.prop("policyNameReq"));
                  $('#securityPolicyDialogError').show();
                } else if (policyNamecheckFlag == 1) {
                  $('#securityPolicyDialogMessage').html($.i18n.prop("policyNameExists"));
                  $('#securityPolicyDialogError').show();
                } else if (!checkZonePair()) {
                  //$('#securityPolicyDialogMessage').html("Source and Destination Zones cannot be same");
                  $('#securityPolicyDialogMessage').html($.i18n.prop("sourceDestSame"));
                  $('#securityPolicyDialogError').show();
                }else if (policycheckName == "web"|| policycheckName == "others") {
                 $('#securityPolicyDialogMessage').html($.i18n.prop("defPolicyMessage"));
                 $('#securityPolicyDialogError').show();
                 }else {
                  $('#securityPolicyDialogError').hide();
                  if (editPolicyFlag) {
                    policyName = editRowSelected.children().get(1).textContent;
                    var zonePolicy = editRowSelected.parent().find('tr:first').find('td:first').text().trim().split(/\s+/);
                    source = zonePolicy[0].split('-')[0];
                    des = zonePolicy[0].split('-')[1];
                    var policyOrderArr = [], action, changeZoneFlag = false;
                    if (source != $('#sourceZone').val() || des != $('#destinationZone').val()) {
                      changeZoneFlag = true;
                    }

                    if (!changeZoneFlag) {
                      editRowSelected.parent().find('tr').each(function() {
                        policyClassName = $(this).children().eq(1).text().trim();
                        if ($(this).attr('head') == "true") {
                          //code
                        } else {
                          if ($(this).children(".policyAction").text().trim() == $.i18n.prop("allow")) {
                            action = "inspect";
                          } else {
                            action = "drop log";
                          }
                          if (policyName == $(this).children().eq(1).text().trim()) {
                            if (policyName.trim().toLowerCase() != policycheckName){
                              policyClassName = $("#SecurityPolicyName").val().trim().toLowerCase();
                            }
                            if (action != $('#PolicyAction').val()){
                              action = $('#PolicyAction').val();
                            }

                          }

                          policyOrderArr.push({name: policyClassName, value: action});

                        }
                      });
                    }
                    else {
                      policyOrderArr.push({name: $('#SecurityPolicyName').val().trim().toLowerCase(), value: $('#PolicyAction').val()});
                      $('#securityPolicytable').find('tr').each(function() {
                        if ($(this).attr('head') == "true") {
                          var temp = $(this).children('td').first().text();
                          zoneLine = temp.trim().split(/\s+/)[0].split("-");
                          zoneS = zoneLine[0];
                          zoneD = zoneLine[1];

                          if (zoneS == $('#sourceZone').val() && zoneD == $('#destinationZone').val()) {
                            $(this).parent().find('tr').each(function() {
                              //alert($(this).html());
                              policyClassName = $(this).children().eq(1).text().trim();
                              if ($(this).attr('head') == "true") {
                                //code
                              } else {
                                if ($(this).children(".policyAction").text().trim() == $.i18n.prop("allow")) {
                                  action = "inspect";
                                } else {
                                  action = "drop log";
                                }
                                if (policyName == $(this).children().eq(1).text().trim()) {
                                  if (policyName.trim().toLowerCase() != policycheckName){
                                    policyClassName = $("#SecurityPolicyName").val().trim();
                                  }
                                  if (action != $('#PolicyAction').val()){
                                    action = $('#PolicyAction').val();
                                  }

                                }

                                policyOrderArr.push({name: policyClassName, value: action});

                              }
                            });
                            return false;
                          }

                        }

                      });
                    }
                    var xml = getAllConfig(false);
                    deleteZonePairAndPolicyMap(policyName, source.trim(), des.trim(), false, xml);
                    deletePolicy(policyName, editRowSelected);

                  }
                  createPolicy(policyOrderArr, changeZoneFlag);
                  //$('#securityPolicytable tbody').append('<tr class="bordertr"><td class="securityPolicyName">'+policycheckName+'</td><td>Any</td><td>Any</td><td>Any</td><td>Any</td><td>UTM TEAM</td><td>Skype</td><td>ANY</td><td>ANY</td><td>FaceBook</td><td>Allow</td></tr>');
                  //$("#securityPolicytable tr:nth-child(even)").addClass("striped");
                  $('#securityPolicyDialog').dialog("close");
                  editPolicyFlag = false;
                }
              }
              catch (e) {
                $.unblockUI();
                errorLogInConsole(e);
              }
              $.unblockUI();
            }, 1000);
          }
        }, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
            editPolicyFlag = false;
          }
        }],
      close: function() {
        editPolicyFlag = false;
      }
    });
    $("#work_in_progress_dialog").dialog({
      autoOpen: false,
      modal: true,
      height: 500,
      width: 800,
      position: ['middle', 50],
      // buttons: {
      //  "OK": function () {
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {

            $(this).dialog("close");

          }

        }],
      close: function() {
      }
    });

  }
  return {
    securityPolicyLoading: securityPolicyLoading,
    loadSecurityPolicy: loadSecurityPolicy,
    getzone:getzone
  };
}());
var upgradeCCP = (function() {
var files,ellipseInterval,flashUploadEnabled,regExpCCPTarName = /^ccpexpressAdmin_[0-9]+_[0-9]+_[0-9\_a-z]*.tar$/,regExpDeafultConfigName=/^cpconfig-.*.cfg$/,currentDir="",diskSelected="";
var isBoot=false;
var fullDir="";
var deleteBoot = false;
function upgradeCCPLoading(feature){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "upgradeCCPLoading()");
    currentDir=deviceCommunicator.getInstallDir();
    hideElementsOnStart();
    initializeDialogs();
    if (feature=="upgradeCCP") {
        loadUpgrade();
    }else if (feature=="reset") {
        loadReload();
    }
  else if (feature=="upgradeIOS"){
    loadUpdate();
  }
    $('#tryAgain').unbind('click').click(function(e) {
        //if ($(this).attr("errordata")=="upload") {
            $('.reloadDiv').show();
            $('.errorMsgHDiv').hide();
            $('.reloadMsgH').text($.i18n.prop("initUpload"));
            enableUploadOnFlash();
      var fileType=$('#tryAgain').attr("errordata");
      if (fileType=="cfg") {
    uploadFile("cfg");
      }else if(fileType=="upload"){
    uploadFile("tar");
      }
    });
  //For IOS upload
  $('#tryAgainIos').unbind('click').click(function(e) {
            $('.reloadDiv').show();
            $('.errorMsgHDiv').hide();
            $('.reloadMsgH').text($.i18n.prop("initUpload"));
            enableUploadOnFlash();
      uploadFile("ios");
    });

    $('#goBack').unbind('click').click(function(e) {
  $('.errorMsgHDiv').hide();
  var fileType=$('#tryAgain').attr("errordata");
  if (fileType=="cfg") {
    $('#contentReload').show()
  }else if(fileType=="upload"){
    $('#contentUpgrade').show();
  }
        $('.reloadDiv').hide();
  $("#bottomnav").show();
  $('.pull-right').show();
    });
  //For IOS upload
  $('#goBackIos').unbind('click').click(function(e) {
  $('.errorMsgHDiv').hide();
  $('#contentUpdate').show()
  $('.reloadDiv').hide();
  $("#bottomnav").show();
  $('.pull-right').show();
    });

 //consoleLogMethodDetailsEnd("upgradeCCP.js", "upgradeCCPLoading()");
}

function loadUpgrade(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "loadUpgrade()");
  flashUploadEnabled = enableUploadOnFlash();
  if (flashUploadEnabled){
    $('#contentReload').hide();
    $('#contentUpgrade').show();
  $('#uploadSupportDiv').hide();
    loadAndDisplayLanguages();
    addEvents();
    enableDisableSelectTarClick(true);
    enableDisableUpgradeButton(false);
    $('input[name=fileSource]').change();
  }else {
    $('#contentReload').hide();
    $('#contentUpgrade').hide();
    $("#uploadSupportDiv").show();
    $("#uploadSupport").text($.i18n.prop("incompatibleDevice"));
  }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "loadUpgrade()");
}
function loadUpdate(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "loadUpdate()");
  isBoot=false;
  fullDir="";
  flashUploadEnabled = enableUploadOnFlash();
  createIosFileList();
  iosButtonActions();
  toggleIosUpdateType();
  loadAndDisplayLanguages();
  $("#uploadSupportDiv").hide();
  $("#contentDesktop").hide();
  $("#contentFlash").show();
  showDeviceIosDetails();
  var bootOrder=getBootIosList();
  $("#iconInfo").prop('title',bootOrder);
  //consoleLogMethodDetailsEnd("upgradeCCP.js", "loadUpdate()");
}
function createIosFileList(){
  $(".iosFileTable").empty();
  var arrayIos=getIosFilesOnFlash();
  var bootInfo=getBootIosList();
  var bootTrim=bootInfo.substring(bootInfo.indexOf("start-marker"),bootInfo.indexOf("boot-end")).replace("start-marker","").trim();
  var bootArr=bootTrim.split("\n");
  var primaryBoot="";
  if(bootArr[0].indexOf("boot system")>-1){
	primaryBoot=bootArr[0].trim();
  }
  $('.iosFileTable').append('<table id="iosListTable>');
  $('.iosFileTable').append('<tr><td id="fileName" class="iosTableHeader">File Name</td><td id="disk" class="iosTableHeader">Disk</td><td class="iosTableHeader iosActions">Actions</td>');
          for(i=0;i<arrayIos.length;i++){
            var iosFileData=arrayIos[i];
            var iosFile=iosFileData.split(" ")[0];
            var disk=iosFileData.split(" ")[1];
            if(primaryBoot.indexOf(iosFile)>-1){
			$('.iosFileTable').append('<tr><td><div class="radioFileList radioFileListSelected"><input type="radio" name="iosRadio" value="'+iosFile+'" class="iosFileList" id="imageIndex-'+i+'">'+iosFile+'</div></td><td class="diskName"><span id="diskIndex-'+i+'"  value="'+disk+'">'+disk+'</span></td><td class="diskName"></td>');
			}else{
            $('.iosFileTable').append('<tr><td><div class="radioFileList radioFileListSelected"><input type="radio" name="iosRadio" value="'+iosFile+'" class="iosFileList" id="imageIndex-'+i+'">'+iosFile+'</div></td><td class="diskName"><span id="diskIndex-'+i+'"  value="'+disk+'">'+disk+'</span></td><td class="iosDeleteButtonClass"><em id="deleteIosFile" class="fa fa-trash-o"></em></td>');
            }
			}
    $('.iosFileTable').append('</table>');
            iosListOnFlashActions();
    var selectedId=$('input[name=iosRadio]:checked').attr('id');
    diskSelected=$('#'+selectedId).closest('tr').find('td:eq(1)').text();
    deleteButtonClick();

}
function getDiskList(){
    diskDir = deviceCommunicator.getExecCmdOutput("sh file systems");
  var diskArray= [];
  var dirSplit=diskDir.split("\n");
  var isDisk;
  var diskArray=[];
  for(i=0;i<dirSplit.length;i++){
      var dirLine=dirSplit[i];
      var splitLine=dirLine.split(/\s+/);
      isDisk=splitLine[3];
      if(isDisk=="disk"){
      var diskName=splitLine[5].split(":")[0];
      diskArray.push(diskName+":");
      }
    }
  return diskArray;
}
function redirectToList(){
  $('.errorMsgHDiv').hide();
  $('#contentUpdate').show()
  $('.reloadDiv').hide();
  $("#bottomnav").show();
  $('.pull-right').show();
  $("#uploadSupportDiv").hide();
  $("#contentDesktop").hide();
  $('#contentFlash').show();
  $("#uploadSupportDiv").hide();
  $("#installErrorDiv").hide();
  $(".uploadMsg").hide();
  $('.loaderUpgrade').hide();
  $('#sourceRouterIos').prop('checked',true);
    $('#iosUpload').val('');
  $("input[name=iosRadio][value=" + iosSelected + "]").prop('checked', true);
  var iosRadioVal=$("input[name$='iosRadio']").val();
  if(iosRadioVal.length>0){
  $('.upgradeApplyButton').removeClass('disableButton');
  }
  iosButtonActions();
}


function toggleIosUpdateType(){
  $('input[name=fileSourceIos]').unbind('change').change(function(){
        if ($('#sourceRouterIos').is(':checked')) {
      $("#uploadSupportDiv").hide();
      $("#contentDesktop").hide();
      $('#contentFlash').show();
      $("#uploadSupportDiv").hide();
      iosButtonActions();
        }
    else if ($('#sourceDesktopIos').is(':checked')) {
       enableDisableSelectIosClick(true);
       if(flashUploadEnabled){
       $('#contentUpdate').show();
       $('#contentDesktop').show();
       $("#contentFlash").hide();
       $('#reloadDiv').hide();
       $('#errorMsgHDiv').hide();
       addIosEvents();
       if($("#iosUpload").val()== undefined || $("#iosUpload").val()==''){
       enableDisableUpgradeButtonIos(false);
       }else{
        enableDisableUpgradeButtonIos(true);
       }
       }
       else{
        showDeviceIosDetails();
        $('#contentDesktop').hide();
        $("#contentFlash").hide();
        $("#uploadSupportDiv").show();
        $("#uploadSupport").text($.i18n.prop("incompatibleDevice"));

          }
       }
    });

}
function iosButtonActions(){
    $('.upgradeApplyButton').button();
    var iosFileValue = $("input[name$='iosRadio']").val();
    $("input[name$='iosRadio']").click(function() {
    if(iosFileValue.length>0){
    $('.upgradeApplyButton').removeClass('disableButton');
    }else{
      $('.upgradeApplyButton').addClass('disableButton');
    }
    });
    $('.upgradeApplyButton').click(function(){
    if($("#deleteBootList").is(':checked')) {
    deleteBoot = true;
    }
    else{
      deleteBoot=false;
    }
    if(iosFileValue==undefined || iosFileValue.length==0){
      $('.upgradeApplyButton').addClass('disableButton');
    }else{
    $("#confirmApplyIos").dialog("option", "title", $.i18n.prop("alertTitle"));
    $("#confirmApplyIos").dialog("open");
    }
  });

}
function deleteButtonClick(){
$(".iosDeleteButtonClass").click(function(){
  var fileName=$(this).closest('tr').find('td:eq(0)').text().trim();
  var flashName=$(this).closest('tr').find('td:eq(1)').text().trim();
  deleteFileIos(fileName,flashName);
});
}

function deleteFileIos(fileName,flashName){
	fullDir=flashName+"/"+fileName;
	var bootInfo=getBootIosList();
	if(bootInfo.indexOf(fullDir)>-1){
	isBoot=true;
	}else{
	isBoot=false;
	$("#confirmIosDeleteText").text($.i18n.prop("deleteWarningIOS"));
	$("#confirmIosDelete").dialog("open");
	}
	if(isBoot){
		var bootArr=bootInfo.split("\n");
		if(bootArr.length==4){
		//Only one entry.Cannot be deleted
		}else if(bootArr.length>4){
		$("#confirmIosDeleteText").text($.i18n.prop("deleteBootFile"));
	    $("#confirmIosDelete").dialog("open");
		}
	}
}


function showDeviceIosDetails(){
  showVer = deviceCommunicator.getExecCmdOutput("sh ver");
  currentIos=showVer.trim().split("\n")[10];
  var deviceTypeAndSoftware = showVer.trim().split(",")[1];
  var deviceType=deviceTypeAndSoftware.trim().split(" ")[0];
  $("#iosWarning").text($.i18n.prop("iosWarning")+"("+deviceType+")"+$.i18n.prop("fullStop")+$.i18n.prop("afterUpload"));

}

function getConfigFilesInFlash(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "getConfigFilesInFlash()");
    var resp=deviceCommunicator.getExecCmdOutput("dir");
    var splitLines=resp.split("\n");
    var found=false;
    $.each(splitLines,function(index,value){
        var splitSpace=value.trim().split(/\s+/);
        if (splitSpace.length>8) {
            var fileNameCheck = splitSpace[8].match(regExpDeafultConfigName);
            if (fileNameCheck == null || fileNameCheck == undefined || fileNameCheck == '') {
                return true;
            }else{
                $('.configFiles').append('<div class="radioFileList"><input type="radio" name="configFileList" value="'+fileNameCheck+'" class="configFileList"> '+fileNameCheck+'</div>');
                found=true;
            }

        }


    });
    //$('.configFiles').append('<div class="radioFileList"><input type="radio" name="configFileList" value="'+"test"+'" class="configFileList"> '+"test"+'</div>');
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "getConfigFilesInFlash()");
}

function iosListOnFlashActions(){
  var lengthOfFile=$('.iosFileTable').find('.radioFileList').length;
    if (lengthOfFile>0) {
    if (lengthOfFile==1) {
            $('.radioFileList').find('.iosFileList').hide();
            $('.radioFileList').first().prepend('<em class="fa fa-check"><i> ');
            $('.radioFileList').first().find('.iosFileList').prop('checked',true);
            $('.radioFileList').first().addClass('radioFileListSelected');
            $('.upgradeApplyButton').removeClass('disableButton');
    }
    }else{
        $('.iosFileTable').text($.i18n.prop("noIosFileDetected"));
        $('.upgradeApplyButton').addClass('disableButton');
    }


   $('.radioFileList').unbind('click').click(function(){
        $(this).find('.iosFileList').prop('checked',true);
        $(this).find('.iosFileList').change();
        diskSelected=$(this).closest('tr').find('td:eq(1)').text();

    });
    $('.iosFileList').unbind('change').change(function(){
        $(this).siblings().removeClass('radioFileListSelected');
        $(this).parent().addClass('radioFileListSelected');
    });

}


function loadReload(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "loadReload()");
    loadAndDisplayLanguagesReload();
    $('#contentUpgrade').hide();
    $('#contentReload').show();
	$('#uploadSupportDiv').hide();
    getConfigFilesInFlash();
    addEventsReload();
    enableDisableSelectFileClick(true);
    enableDisableReloadButton(false);
    var lengthOfFile=$('.configFiles').find('.radioFileList').length;
    if (lengthOfFile>0) {
        if (lengthOfFile==1) {
            $('.radioFileList').find('.configFileList').hide();
            $('.radioFileList').prepend('<em class="fa fa-check"><em> ');
            $('.radioFileList').first().find('.configFileList').prop('checked',true);
            $('.radioFileList').first().addClass('radioFileListSelected');
            //$('.reloadButton').removeClass('disableButton');
            enableDisableReloadButton(true);
        }else{
            $('.radioFileList').first().find('.configFileList').prop('checked',true);
            $('.radioFileList').first().addClass('radioFileListSelected');
            //$('.reloadButton').removeClass('disableButton');
            enableDisableReloadButton(true);
        }
    }else{
        $('.configFiles').text($.i18n.prop("noFileDetected"));
        //$('.reloadButton').addClass('disableButton');
        enableDisableReloadButton(false);
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "loadReload()");
}

function initializeDialogs(){
    $("#confirmUpgrade").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yesStr"),
          click: function() {
            $('#contentUpgrade').hide()
            $('.reloadDiv').show();
      $("#bottomnav").fadeOut("fast");
      $('.pull-right').fadeOut("fast");
            $('.reloadMsgH').text($.i18n.prop("initUpload"));
            setTimeout(function(){
                 enableUploadOnFlash();
                 uploadFile("tar");
            },2000);
            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("noStr"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

  $("#confirmUpgradeIos").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yesStr"),
          click: function() {
      iosSelected=files[0].name;
            $('#contentUpdate').hide();
      $("#contentFlash").hide();
            $('.reloadDiv').show();
      $("#bottomnav").fadeOut("fast");
      $('.pull-right').fadeOut("fast");
            $('.reloadMsgH').text($.i18n.prop("initUpload"));
            setTimeout(function(){
                 enableUploadOnFlash();
                 uploadFile("ios");
            },2000);
            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("noStr"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

  $("#confirmApplyIos").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yesStr"),
          click: function() {
      var iosFileSelectedName= $('input[name=iosRadio]:checked').val();
      var iosFileSelected=diskSelected+"/"+iosFileSelectedName;
      if($("#deleteBootList").is(':checked')) {
      var deleteBoot = true;
      }
      else{
        deleteBoot=false;
      }
      $('#contentUpdate').hide()
      $('.reloadDiv').show();
      $("#bottomnav").fadeOut("fast");
      $('.pull-right').fadeOut("fast");
      $('.reloadMsgH').text($.i18n.prop("setBoot"));
      addEllipses('.reloadMsgH');
      setTimeout(function(){
      startWebWorkerIosUpdate(iosFileSelected,deleteBoot);
      },2000);
            $(this).dialog("close");
      }}, {
          text: $.i18n.prop("noStr"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

      $("#confirmIosDelete").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
        text: $.i18n.prop("yesStr"),
        click: function() {
		$(this).dialog("close");    
		blockPage("Applying");
		setTimeout(function(){
        if(isBoot){
		deviceCommunicator.getConfigCmdOutput("no boot system "+fullDir+"\n"+"exit");
		deviceCommunicator.doWriteMemory();
		deviceCommunicator.getExecCmdOutput("delete "+fullDir);
		}else{
		deviceCommunicator.getExecCmdOutput("delete "+fullDir);
		}
		loadUpdate();
		$.unblockUI();
		},2000);
		}}, {
          text: $.i18n.prop("noStr"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {
      }
    });



    $("#confirmReset").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yesStr"),
          click: function() {
            $('#contentReload').hide();
            $('.reloadDiv').show();
      $("#bottomnav").fadeOut("fast");
      $('.pull-right').fadeOut("fast");
            if ($('#sourceDesktop').is(':checked')) {
                $('.reloadMsgH').text($.i18n.prop("initUpload"));
                setTimeout(function(){
                    enableUploadOnFlash();
                    uploadFile("cfg");
                },2000);
            }else if ($('#sourceRouter').is(':checked')) {
                $('.reloadMsgH').text($.i18n.prop("copyDefaultConfig"));
                setTimeout(function(){
                    startWebWorkerReload();
                },2000);

            }


            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("noStr"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

    $("#lowVersionWarning").dialog({
      autoOpen: false,
      height: 200,
      width: 400,
      modal: true,
      buttons: [{
          text: $.i18n.prop("yesStr"),
          click: function() {
      $("#lowVersionWarning").attr("optionSelected","yes");
            enableDisableSelectTarClick(true);
      enableDisableUpgradeButton(true);
      $('#installErrorDiv').hide();
      var selectedFileName = files[0].name;
      $('.uploadMsg').append("<b>"+selectedFileName+"</b> is selected.");
      $('.uploadMsg').addClass("alert-info");
      $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonTextChange"));
      enableDisableSelectTarClick(true);
      enableDisableUpgradeButton(true);
      $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonTextChange"));
      $('.uploadMsg').show();
            $(this).dialog("close");
          }}, {
          text: $.i18n.prop("noStr"),
          click: function() {
      $("#lowVersionWarning").attr("optionSelected","no");
      $(this).dialog("close");
          }
        }],
      close: function() {
  if ($("#lowVersionWarning").attr("optionSelected")!="yes") {
      enableDisableSelectTarClick(true);
      enableDisableUpgradeButton(false);
      $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonText"));
      $('.uploadMsg').hide();
      $('#tarUpload').val('');
  }
      }
    });
}

function hideElementsOnStart(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "hideElementsOnStart()");
    $('.uploadMsg').hide();
    $('.reloadResetMsg').hide()
    $('#installErrorDiv').hide();
    $('#reloadErrorDiv').hide();
    $('.loaderUpgrade').hide();
    $('.loaderReload').hide();
    $('.uploadConfigButton').hide();
    //$('#chooseCustomDir').hide();
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "hideElementsOnStart()");
}

/* if flag=true click is enabled else disabled*/
function enableDisableSelectTarClick(flag){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableDisableSelectTarClick()");
    if (flag) {
        $('.uploadTarButton').unbind("click").click(function(e){
            e.preventDefault();
            $('#tarUpload').click();
            return false;
        });

    }else{
        $('.uploadTarButton').unbind("click").click(function(e){
            e.preventDefault();
            return false;
        });
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableDisableSelectTarClick()");
}

function enableDisableSelectIosClick(flag){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableDisableSelectIosClick()");
    if (flag) {
        $('.uploadIosButton').unbind("click").click(function(e){
            e.preventDefault();
            $('#iosUpload').click();
            return false;
        });

    }else{
        $('.uploadIosButton').unbind("click").click(function(e){
            e.preventDefault();
            return false;
        });
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableDisableSelectIosClick()");
}

/* if flag=true click is enabled else disabled*/
function enableDisableSelectFileClick(flag){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableDisableSelectFileClick()");
    if (flag) {
        $('.uploadConfigButton').unbind("click").click(function(e){
            e.preventDefault();
            $('#fileUpload').click();
            return false;
        });

    }else{
        $('.uploadConfigButton').unbind("click").click(function(e){
            e.preventDefault();
            return false;
        });
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableDisableSelectFileClick()");
}

function enableDisableUpgradeButton(flag){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableDisableUpgradeButton()");
    if (flag) {
        $('.upgradeButton').unbind('click').click(function(){
            $("#confirmUpgrade").dialog("open");
        });
        $('.upgradeButton').removeClass('disableButton');
    }else{
        $('.upgradeButton').unbind('click');
        $('.upgradeButton').addClass('disableButton');
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableDisableUpgradeButton()");
}

function enableDisableUpgradeButtonIos(flag){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableDisableUpgradeButtonIos()");
    if (flag) {
        $('.upgradeButton').unbind('click').click(function(){
    $("#confirmUpgradeIos").dialog("option", "title", $.i18n.prop("alertTitle"));
    $("#confirmUpgradeIos").dialog("open");
        });
        $('.upgradeButton').removeClass('disableButton');
    }else{
        $('.upgradeButton').unbind('click');
        $('.upgradeButton').addClass('disableButton');
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableDisableUpgradeButtonIos()");
}

function enableDisableReloadButton(flag){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableDisableReloadButton()");
    if (flag) {
        $('.reloadButton').unbind('click').click(function(){
            $("#confirmReset").dialog("open");
        });
        $('.reloadButton').removeClass('disableButton');
    }else{
        $('.reloadButton').unbind('click');
        $('.reloadButton').addClass('disableButton');
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableDisableReloadButton()");

}

function prepareUploadReload(event){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "prepareUploadReload()");
    enableDisableSelectFileClick(false);
    $('.reloadResetMsg').empty();
    $('#reloadErrorDiv').empty();
    $('.reloadResetMsg').removeClass("alert-danger");
    $('.reloadResetMsg').removeClass("alert-info");
    files = event.target.files;
    if (files != null && files != undefined && files.length > 0) {
        var selectedFileName = files[0].name;
        var fileNameCheck = selectedFileName.match(regExpDeafultConfigName);
        if (fileNameCheck == null || fileNameCheck == undefined || fileNameCheck == '') {
            $('.reloadResetMsg').text($.i18n.prop("selectDefaultFile"));
      $('.reloadResetMsg').addClass("alert-danger");
            $('#uploadConfigButtonText').append('<em class="fa fa-info-circle"></em>&nbsp;&nbsp;'+$.i18n.prop("uploadConfigButtonText"));
            $('.loaderReload').hide();
            enableDisableSelectFileClick(true);
            enableDisableReloadButton(false);
            $('#uploadConfigButtonText').text($.i18n.prop("uploadConfigButtonText"));
            $('.reloadResetMsg').show();
            $('#fileUpload').val('');
        }
        else {
    var flashFreeSpace = parseInt(configureIPS.getFlashFreeSpace());
    var selectedFileSize = parseInt(files[0].size);
    var requiredSpace=parseInt(selectedFileSize);
    if (flashFreeSpace<requiredSpace){
        $('#reloadErrorDiv').append('<em class="fa fa-warning"></em>&nbsp;&nbsp;'+$.i18n.prop("requiredSpace")+" "+requiredSpace+" bytes"+$.i18n.prop("freeSpaceLowMess")+" ("+flashFreeSpace+" bytes). "+$.i18n.prop("freeUpSpace"));
        $('#reloadErrorDiv').show();
        $('.loaderReload').hide();
        enableDisableSelectFileClick(true);
        enableDisableReloadButton(false);
        $('#uploadConfigButtonText').text($.i18n.prop("uploadConfigButtonText"));
        //$('.uploadMsg').show();
        $('#fileUpload').val('');
    }else{

        $('#reloadErrorDiv').hide();
        $('.reloadResetMsg').append("<b>"+selectedFileName+"</b> is selected.");
        $('.reloadResetMsg').addClass("alert-info");
        $('#uploadConfigButtonText').text($.i18n.prop("uploadConfigButtonChangeText"));
         $('.loaderReload').hide();
         enableDisableSelectFileClick(true);
         enableDisableReloadButton(true);
         $('#uploadConfigButtonText').text($.i18n.prop("uploadConfigButtonChangeText"));
         $('.reloadResetMsg').show();
    }
        }
    }else{
        $('.loaderReload').hide();
        enableDisableSelectFileClick(true);
        enableDisableReloadButton(false);
        $('#uploadConfigButtonText').text($.i18n.prop("uploadConfigButtonText"));
        $('.reloadResetMsg').hide();
        $('#fileUpload').val('');
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "prepareUploadReload()");
}

function prepareUpload(event){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "prepareUpload()");
    enableDisableSelectTarClick(false);
    $('.uploadMsg').empty();
    $('#installErrorDiv').empty();
    $('.uploadMsg').removeClass("alert-danger");
    $('.uploadMsg').removeClass("alert-info");
    files = event.target.files;
    if (files != null && files != undefined && files.length > 0) {
        var selectedFileName = files[0].name;
        var fileNameCheck = selectedFileName.match(regExpCCPTarName);
        if (fileNameCheck == null || fileNameCheck == undefined || fileNameCheck == '') {
            $('.uploadMsg').text($.i18n.prop("selectTar"));
      $('.uploadMsg').addClass("alert-danger");
            $('#uploadTarButtonText').append('<em class="fa fa-info-circle"></em>&nbsp;&nbsp;'+$.i18n.prop("uploadTarButtonText"));
            $('.loaderUpgrade').hide();
            enableDisableSelectTarClick(true);
            enableDisableUpgradeButton(false);
            $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonText"));
            $('.uploadMsg').show();
            $('#tarUpload').val('');
        }
        else {
        var flashFreeSpace = parseInt(configureIPS.getFlashFreeSpace());
        var selectedFileSize = parseInt(files[0].size);
        var requiredSpace=parseInt(selectedFileSize*2.5);
        if (flashFreeSpace<requiredSpace){
      $('#installErrorDiv').append('<em class="fa fa-warning"></em>&nbsp;&nbsp;'+$.i18n.prop("requiredSpace")+" "+requiredSpace+" bytes. "+$.i18n.prop("freeSpaceLowMess")+" ("+flashFreeSpace+" bytes). "+$.i18n.prop("freeUpSpace"));
      $('#installErrorDiv').show();
      $('.loaderUpgrade').hide();
      enableDisableSelectTarClick(true);
      enableDisableUpgradeButton(false);
      $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonText"));
      //$('.uploadMsg').show();
      $('#tarUpload').val('');
        }else{
          var selectedFileName = files[0].name;
          var splitFileName=selectedFileName.split("_");
          var versionArray=[];
          var versionCheck=false;
          $.each(splitFileName,function(index,value){
        if (index!=0 && index!=splitFileName.length-1) {
            versionArray.push(parseInt(value));
        }
          });
          if (versionArray.length==0) {
        versionArray.push(parseInt(3));
        versionArray.push(parseInt(1));
          }
          var currentVersion=$('.popUpMenuVersion').text().trim().split(/\s+/)[1];
          var currentVersionArray = currentVersion.split('.').map(function(item) {
        return parseInt(item);
          });
          if (versionArray[0]>currentVersion[0]) {
            versionCheck=true;
          }else if (versionArray[1]>currentVersion[1]) {
            versionCheck=true;
          }else if (versionArray.length==3 && currentVersionArray.length==3) {
        if (versionArray[0]==currentVersion[0] && versionArray[1]==currentVersion[1]) {
            if ( versionArray[3]>=currentVersion[3]) {
          versionCheck=true;
            }
        }
          }else if (versionArray.length==3 && currentVersionArray.length==2) {
        if (versionArray[0]==currentVersion[0] && versionArray[1]==currentVersion[1]) {
            versionCheck=true;
        }
          }
          if (!versionCheck) {
        $("#lowVersionWarning").attr("optionSelected","");
        $("#lowVersionWarning").dialog("open");
        $('.loaderUpgrade').hide();
          }else{
        $('#installErrorDiv').hide();
        $('.uploadMsg').append("<b>"+selectedFileName+"</b> is selected.");
        $('.uploadMsg').addClass("alert-info");
        $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonTextChange"));
        $('.loaderUpgrade').hide();
        enableDisableSelectTarClick(true);
        enableDisableUpgradeButton(true);
        $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonTextChange"));
        $('.uploadMsg').show();
           }
        }
        }
    }else{
        $('.loaderUpgrade').hide();
        enableDisableSelectTarClick(true);
        enableDisableUpgradeButton(false);
        $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonText"));
        $('.uploadMsg').hide();
        $('#tarUpload').val('');
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "prepareUpload()");
}

function prepareUploadIOS(event){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "prepareUploadIOS()");
    enableDisableSelectIosClick(false);
    $('.uploadMsg').empty();
    $('#installErrorDiv').empty();
    $('.uploadMsg').removeClass("alert-danger");
    $('.uploadMsg').removeClass("alert-info");
    files = event.target.files;
  var selectedFileName=files[0].name;
    if (files != null && files != undefined && files.length > 0) {

      //Additional space after file upload that must be free in bytes.Keeping it 10mb for now
      var freeSpaceParam=5000000;
        var flashFreeSpace = parseInt(configureIPS.getFlashFreeSpace());
        var selectedFileSize = parseInt(files[0].size);
        var requiredSpace=parseInt(selectedFileSize+freeSpaceParam);
        if (flashFreeSpace<requiredSpace){
      $('#installErrorDiv').append('<em class="fa fa-warning"></em>&nbsp;&nbsp;'+$.i18n.prop("requiredSpace")+" "+requiredSpace+" bytes. "+$.i18n.prop("freeSpaceLowMess")+" ("+flashFreeSpace+" bytes). "+$.i18n.prop("freeUpSpace"));
      $('#installErrorDiv').show();
      $('.loaderUpgrade').hide();
      enableDisableSelectIosClick(true);
      enableDisableUpgradeButtonIos(false);
      $('#uploadIosButtonText').text($.i18n.prop("uploadIosButtonText"));
      //$('.uploadMsg').show();
      $('#iosUpload').val('');
        }else{
        var flashDir=deviceCommunicator.getExecCmdOutput("dir flash:");
        if(flashDir.indexOf(selectedFileName)>=0){
        $('#iosWarning').empty();
        showDeviceIosDetails();
        $('#installErrorDiv').append('<em class="fa fa-warning"></em>&nbsp;&nbsp;'+$.i18n.prop("fileWithSameName")+" "+selectedFileName+" "+$.i18n.prop("fileExistsOverrite"));
        $('#installErrorDiv').show();
        }else{
        $('#iosWarning').empty();
        showDeviceIosDetails();
        }
        $('.uploadMsg').append("<b>"+selectedFileName+"</b>"+" "+$.i18n.prop("isSelected"));
        $('.uploadMsg').addClass("alert-info");
        $('#uploadIosButtonText').text($.i18n.prop("uploadIosButtonTextChange"));
        $('.loaderUpgrade').hide();
        enableDisableSelectIosClick(true);
        enableDisableUpgradeButtonIos(true);
        $('#uploadIosButtonText').text($.i18n.prop("uploadIosButtonTextChange"));
        $('.uploadMsg').show();

        }

    }else{
        $('.loaderUpgrade').hide();
        enableDisableSelectIosClick(true);
        enableDisableUpgradeButtonIos(false);
        $('#uploadIosButtonText').text($.i18n.prop("uploadIosButtonText"));
        $('.uploadMsg').hide();
        $('#iosUpload').val('');
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "prepareUploadIOS()");
}

function addEventsReload(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "addEventsReload()");
    $('.uploadConfigButton').button();
    $('.radioFileList').unbind('click').click(function(){
        $(this).find('.configFileList').prop('checked',true);
         $(this).find('.configFileList').change();

    });
    $('.configFileList').unbind('change').change(function(){
        $(this).parent().siblings().removeClass('radioFileListSelected');
        $(this).parent().addClass('radioFileListSelected');
    });


    $('input[name=fileSource]').unbind('change').change(function(){
        var lengthOfFiles=$('.configFiles').find('.radioFileList').length;
        if ($('#sourceRouter').is(':checked')) {

            $('.uploadConfigButton').hide();
            $('.fileWindow').show();
            $('.loaderReload').hide();
            $('.reloadResetMsg').hide();
            if (lengthOfFiles>0) {
               $('.reloadButton').removeClass('disableButton');
               enableDisableReloadButton(true);
            }else{
                $('.reloadButton').addClass('disableButton');
                enableDisableReloadButton(false);
            }
        }else if ($('#sourceDesktop').is(':checked')) {
            $('.uploadConfigButton').show();
            $('.fileWindow').hide();
            if ($('#fileUpload').val()!='') {
                $('.reloadResetMsg').show();
                 $('.reloadButton').removeClass('disableButton');
                 enableDisableReloadButton(true);
            }else{
                $('.reloadButton').addClass('disableButton');
                $('.reloadResetMsg').hide();
                enableDisableReloadButton(false);
            }
        }

    });
    $('#fileUpload').unbind('change').change(function(event){
                        $('input[name=fileSource]').prop('disabled',true);
                        $('.reloadResetMsg').hide();
                        $('#reloadErrorDiv').hide();
                        $('.reloadResetMsg').empty();
                        $('.reloadResetMsg').removeClass("alert-danger");
                        $('.reloadResetMsg').removeClass("alert-info");
                        $('.loaderReload').show();
                        setTimeout(function(){
                            prepareUploadReload(event);
                            $('input[name=fileSource]').prop('disabled',false);
                        },500);

    });
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "addEventsReload()");
}

function addEvents(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "addEvents()");
    $('.uploadTarButton').button();
    $('#tarUpload').unbind('change').change(function(event){
                        $('.uploadMsg').hide();
                        $('#installErrorDiv').hide();
                        $('.uploadMsg').empty();
                        $('.uploadMsg').removeClass("alert-danger");
                        $('.uploadMsg').removeClass("alert-info");
                        $('.loaderUpgrade').show();
                        setTimeout(function(){prepareUpload(event);},1000);

    });
    $('#chooseCustomDir').button().unbind('click').click(function(e) {
        e.preventDefault();
        $('#chooseCustomDir').removeClass('ui-state-focus');
        $('#chooseCustomDir').removeClass('ui-state-hover');
        return false;

     });
    /*$('#useDefaultDir').unbind('change').change(function(){
        if ($(this).is(':checked'))
            $('#chooseCustomDir').hide();
        else
            $('#chooseCustomDir').show();
    });*/
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "addEvents()");
}
function addIosEvents(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "addIosEvents()");
    $('.uploadIosButton').button();
    $('#iosUpload').unbind('change').change(function(event){
                        $('.uploadMsg').hide();
                        $('#installErrorDiv').hide();
                        $('.uploadMsg').empty();
                        $('.uploadMsg').removeClass("alert-danger");
                        $('.uploadMsg').removeClass("alert-info");
                        $('.loaderUpgrade').show();
                        setTimeout(function(){prepareUploadIOS(event);},1000);

    });
 //consoleLogMethodDetailsEnd("upgradeCCP.js", "addIosEvents()");
}




function startWebWorkerReload(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "startWebWorkerReload()");
    var messagePost;
    worker = new Worker('../js/settingsWorker.js');
    if ($("#sourceRouter").is(':checked')) {
        messagePost = [{
        "name": "reset",
        "file": $('input[name="configFileList"]:checked').val()
      }];
    }else{
        messagePost = [{
        "name": "reset",
        "file": files[0].name
      }];
    }
    worker.postMessage(JSON.stringify(messagePost));
    worker.onmessage = function(event) {
      var resp = JSON.parse(event.data);
      if (resp[0]['cliName']=="copyConfig") {
            $('.reloadMsgH').text($.i18n.prop("routerReload"));
            addEllipses('.reloadMsgH');
      }else if (resp[0]['cliName']=="deviceStatus") {
        if (resp[0]['output']=="up") {
            $('.reloadMsgH').text($.i18n.prop("reloadSuccess"));
            setTimeout(function(){
                $('.reloadMsgH').text($.i18n.prop("redirectingToMain"));
                var currentUrl=location.href.toString().split("/html/")[0];
                location.replace(currentUrl+"/home.html");
            },2000);
        }
      }
    };
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "startWebWorkerReload()");
}


function startWebWorker(){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "startWebWorker()");
    var deleteTar=true;
    worker = new Worker('../js/settingsWorker.js');
    $('.reloadMsgH').text($.i18n.prop("validatingUploadTar"));
    addEllipses('.reloadMsgH');
    if (!$('#deleteTarAfterInstallation').is(':checked')) {
        deleteTar=false;
    }
    var messagePost = [{
        "name": "upgradeCCP",
        "dir": currentDir,
        "file": files[0].name,
        "deleteTar": deleteTar,
        "fileSize": files[0].size
      }];
    worker.postMessage(JSON.stringify(messagePost));
    worker.onmessage = function(event) {
      var resp = JSON.parse(event.data);
      if (resp[0]['cliName'] == "checkDir") {
        if (resp[0]['output']) {
            $('.reloadMsgH').text($.i18n.prop("uninstall"));
            addEllipses('.reloadMsgH');
        }else{
            showError($.i18n.prop("tarUploadFailed"),"upload");
            worker.terminate();
        }
      }else if (resp[0]['cliName'] == "deleteDir") {
        $('.reloadMsgH').text($.i18n.prop("install"));
        addEllipses('.reloadMsgH');
      }else if (resp[0]['cliName'] == "extractTar") {
        $('.reloadMsgH').text($.i18n.prop("verifyingInstall"));
        addEllipses('.reloadMsgH');
      }else if (resp[0]['cliName']=="checkXtract") {
        if (resp[0]['output']) {
            if (deleteTar) {
                $('.reloadMsgH').text($.i18n.prop("removingTar"));
                addEllipses('.reloadMsgH');
            }else{
                clearInterval(ellipseInterval);
                $('.reloadMsgH').text($.i18n.prop("upgradeSuccess"));

            }
        }else{
            showError($.i18n.prop("extractionFailed"),"upload");
            $('#goBack').remove();
            worker.terminate();
        }
      }else if (resp[0]['cliName'] == "deleteTar") {
            clearInterval(ellipseInterval);
            $('.reloadMsgH').text($.i18n.prop("upgradeSuccess"));
      }else if (resp[0]['cliName'] == "stop") {
        setTimeout(function(){
            $('.reloadMsgH').text($.i18n.prop("redirectingToMain"));
            addEllipses('.reloadMsgH');
            worker.terminate();
            history.pushState({}, '', "ccpExpress.html");
            window.location.reload(true);
        },2000);
      }
    };
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "startWebWorker()");
}

function startWebWorkerIos(){
   //consoleLogMethodDetailsStart("upgradeCCP.js", "startWebWorkerIos()");
   worker = new Worker('../js/settingsWorker.js');
    var messagePost = [{
        "name": "upgradeIOS",
        "dir": currentDir,
        "file": files[0].name,
        "fileSize": files[0].size
      }];
    worker.postMessage(JSON.stringify(messagePost));
    worker.onmessage = function(event) {
      var resp = JSON.parse(event.data);
      if (resp[0]['cliName'] == "checkDir") {
        if (resp[0]['output']) {
    $('.reloadMsgH').text($.i18n.prop("verifyingImage"));
    addEllipses('.reloadMsgH');
    }
    else{
            showErrorIos($.i18n.prop("iosUploadFailed"),"upload");
            worker.terminate();
      }
    }
    else if (resp[0]['cliName'] == "imageCheck"){
    if (resp[0]['output']=="valid"){
      $('.reloadMsgH').text($.i18n.prop("validImage"));
      createIosFileList();
      addEllipses('.reloadMsgH');
      $('.reloadMsgH').text($.i18n.prop("redirectingToMain"));
      addEllipses('.reloadMsgH');
      //After Upload
      redirectToList();
      //Terminate worker
      worker.terminate();


    }
    else{
      showErrorIos($.i18n.prop("invalidImage"),"upload");
      upgradeCCPLoading("upgradeIOS");
      var loc=window.location.href.toString();
      var splitLoc=loc.split("/html/");
      window.location.replace(splitLoc[0]+"/html/frames.html?feature=upgradeIOS");
      worker.terminate();
      }

    }

    };
   //consoleLogMethodDetailsEnd("upgradeCCP.js", "startWebWorkerIos()");
}

function startWebWorkerIosUpdate(iosFileName,deleteBoot){
   //consoleLogMethodDetailsStart("upgradeCCP.js", "startWebWorkerIos()");
   worker = new Worker('../js/settingsWorker.js');
    var messagePost = [{
        "name": "upgradeIosViaDialog",
        "dir": currentDir,
        "file": iosFileName,
    "deleteBootList":deleteBoot
      }];
    worker.postMessage(JSON.stringify(messagePost));
    worker.onmessage = function(event) {
      var resp = JSON.parse(event.data);
    if(deleteBootList){
    $('.reloadMsgH').text($.i18n.prop("deleteBootList"));
            }
    else{
    $('.reloadMsgH').text($.i18n.prop("setBoot"));
        }
    addEllipses('.reloadMsgH');
    if (resp[0]['cliName'] == "deleteBoot") {
        $('.reloadMsgH').text($.i18n.prop("setBoot"));
        addEllipses('.reloadMsgH');
      }
    else if (resp[0]['cliName'] == "setBoot") {
        $('.reloadMsgH').text($.i18n.prop("reloading"));
        addEllipses('.reloadMsgH');
      }
    else if (resp[0]['cliName']=="deviceStatus") {
        if (resp[0]['output']=="up") {
            $('.reloadMsgH').text($.i18n.prop("reloadSuccess"));
            setTimeout(function(){
            $('.reloadMsgH').text($.i18n.prop("reloadSuccess"));
            var loc=window.location.href.toString();
      var splitLoc=loc.split("/html/");
      window.location.replace(splitLoc[0]+"/html/frames.html?feature=upgradeIOS");
      worker.terminate();
            },2000);
        }
      }
    };
   //consoleLogMethodDetailsEnd("upgradeCCP.js", "startWebWorkerIos()");
}

function addEllipses(id){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "addEllipses()");
    $('#ellipses').remove();
    $(id).append('<span id="ellipses" class="ccpexpCSSReplaceClass828"></span>');
    if (ellipseInterval!=undefined) {
        clearInterval(ellipseInterval);
    }
    count=0;
    ellipseInterval=setInterval(function(){
        if (count==3) {
            count=0;
            $('#ellipses').text("");
        }
        $('#ellipses').append(".");
        count++;

    },700);
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "addEllipses()");
}

/*To enable http upload*/
function enableUploadOnFlash()
  {
    //consoleLogMethodDetailsStart("upgradeCCP.js", "enableUploadOnFlash()");
    var flashUploadEnabled = true;
    try {
      var resp = deviceCommunicator.getConfigCmdOutput("ip http upload enable path flash: \n\n ip http upload overwrite");
    } catch (e) {
      ////consoleLog(e.message);
      flashUploadEnabled = false;
    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "enableUploadOnFlash()");
    return flashUploadEnabled;
  }

/*To Upload Tar file*/
function uploadFile(type){
    //consoleLogMethodDetailsStart("upgradeCCP.js", "uploadFile()");
    $('.reloadMsgH').empty();

    var pageURL = $(location), urlofPage,uploadPercent,selectedFileName,selectedFileSize;
    var varProtocol = pageURL.attr('protocol').match(/https/);
    if (varProtocol != null && varProtocol != undefined && varProtocol != '') {
      urlofPage = 'https://'
    } else {
      urlofPage = 'http://'
    }
    urlofPage = urlofPage + pageURL.attr('host') + '/flash:';
    selectedFileName = files[0].name;
    selectedFileSize = files[0].size;
    $('.reloadMsgH').append($.i18n.prop("uploadInProgress")+'&nbsp;&nbsp;(<span id="uploadPercent">0</span>%)');
    var xhr = new XMLHttpRequest();
    xhr.upload.onprogress = function(e) {
      uploadPercent = Math.round((e.loaded / e.total) * 100);
      $('#uploadPercent').text(uploadPercent);
    };
    xhr.onreadystatechange = function(e) {
      if (this.readyState === 4) {
        if (uploadPercent == 100) {
            $('.reloadMsgH').empty();
            $('.reloadMsgH').text($.i18n.prop("upComplete"));
            setTimeout(function(){
                if (type=="tar") {
                    startWebWorker();
                }else if (type=="cfg") {
                    startWebWorkerReload();
                }
        else if(type=="ios"){
          startWebWorkerIos();
        }

            },1000);

        }
      }
    };
    xhr.open('PUT', urlofPage + selectedFileName, true);
    xhr.onerror = function() {
  if (type=="cfg") {
      showError($.i18n.prop("cfgUploadFailed"),"reset");
  }else if (type=="tar") {
      showError($.i18n.prop("tarUploadFailed"),"upload");
  }else if (type=="ios") {
      showError($.i18n.prop("iosUploadFailed"),"upload");
  }
    };
    xhr.setRequestHeader('X-FileName', selectedFileName);
    xhr.setRequestHeader("Content-Type", "multipart/form-data");

    try {
      xhr.send(files[0]);
    } catch (err) {
      onUploadError(err);
      if (type=="cfg") {
      showError($.i18n.prop("cfgUploadFailed"),"reset");
  }else if (type=="tar") {
      showError($.i18n.prop("tarUploadFailed"),"upload");
  }
  else if(type=="ios") {
     showErrorIos($.i18n.prop("iosUploadFailed"),"upload");
  }

    }
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "uploadFile()");
}

function showError(msg,tag){
    $('.reloadDiv').hide();
    $('#errorMessageCustomSpan').text(msg);
    $('.errorMsgHDiv').show();
    $('#tryAgain').attr("errordata",tag);
}
function showErrorIos(msg,tag){
    $('.reloadDiv').hide();
    $('#errorMessageCustomSpan').text(msg);
    $('.errorMsgHDiv').show();
    $('#tryAgainIos').attr("errordata",tag);
}

function onUploadError(err)
  {
    //consoleLogMethodDetailsStart("upgradeCCP.js", "onUploadError()");
    var errorString = 'Errors during upload';
    if (err != null && err != undefined) {
      if (typeof err === 'string') {
        errorString = errorString + ': ' + err;
      } else if (err.description != null && err.description != undefined) {
        errorString = errorString + err.description;
      }
    }
    //consoleLog(errorString);
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "onUploadError()");
  }

 function getIosFilesOnFlash(){
  var flashArray=[];
  flashArray=getDiskList();
  var iosArray= [];
  for(i=0;i<flashArray.length;i++){
  var flashDir = deviceCommunicator.getExecCmdOutput("dir"+" "+flashArray[i]);
  var dirSplit=flashDir.split("\n");
  for(j=0;j<dirSplit.length;j++){
    var dirLine=dirSplit[j];
      var splitLine=dirLine.split(/\s+/);
      var fileName=splitLine[9];
    var imageCheckVar=deviceCommunicator.getExecCmdOutput("sh file information "+flashArray[i]+"/"+fileName);
      if(imageCheckVar.indexOf("image")!==-1){
      var fileTypeLine=imageCheckVar.trim().split("\n")[1];
      var imageCheck=fileTypeLine.trim().split(/\s/)[2];
      if (imageCheck=="image"){
      iosArray.push(fileName+" "+flashArray[i]);
      }
      }
    }
  }

    return iosArray;
}

function getBootIosList(){
  var fullBootList=deviceCommunicator.getExecCmdOutput("sh run | i boot");
  var trimmedBootList=fullBootList.substring(fullBootList.indexOf("start-marker"),fullBootList.indexOf("boot-end")).replace("start-marker","").trim();
  var bootArray=trimmedBootList.split("\n");
  var bootInfo= $.i18n.prop("currentBootOrder")+"\n"+"boot-start-marker" + "\n";
  for (i=0;i<bootArray.length;i++){
    bootInfo=bootInfo+bootArray[i]+"\n";
  }
  bootInfo=bootInfo+"boot-end-marker";
  return bootInfo;
}

 /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {

    //consoleLogMethodDetailsStart("upgradeCCP.js", "loadAndDisplayLanguages()");
    $('#upgradeCCPLegend').text($.i18n.prop("upgradeCCP"));
    $('#upgradeListCCPItem1').text($.i18n.prop("upgradeListCCPItem1"));
    $('#upgradeListCCPItem2').text($.i18n.prop("upgradeListCCPItem2"));
    $('#upgradeListCCPItem3').text($.i18n.prop("upgradeListCCPItem3"));
    $('#upgradeListCCPItem4').text($.i18n.prop("upgradeListCCPItem4"));
    $('#upgradeListCCPItem5').text($.i18n.prop("upgradeListCCPItem5"));
    $('#downloadVersion').text($.i18n.prop("downloadVersion"));
    $('#downloadVersionIos').text($.i18n.prop("downloadVersionIos"));
    $('#uploadTarButtonText').text($.i18n.prop("uploadTarButtonText"));
    $('#upgradeButtonText').text($.i18n.prop("upgradeCCP"));
    $('#upgradestep1').text($.i18n.prop("upgradestep1"));
    $('#upgradestep2').text($.i18n.prop("upgradestep2"));
    $('#chooseDir').text($.i18n.prop("chooseDir"));
    $('.reloadNote').text($.i18n.prop("reloadNote"));
    $('#deleteTar').text($.i18n.prop("deleteTar"));
    $(".loadingUpgradeTitle").text($.i18n.prop("loadingUpgradeTitle"));
    $("#confirmUpgradeText").text($.i18n.prop("confirmUpgradeText"));
    $("#confirmUpgradeTextIos").text($.i18n.prop("confirmUploadIos"));
    $("#confirmApplyTextIos").text($.i18n.prop("confirmApplyIos"));
    $('#reloadButtonText').text($.i18n.prop("reloadButtonText"));
    $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));
    $(".errorMsgH").text($.i18n.prop("ccpExpressInstallation"));
    $("#errorMessageSpan").text($.i18n.prop("errorMessageSpan"));
    $("#errorDivTryAgain").text($.i18n.prop("tryAgain"));
    $("#errorDivBack").text($.i18n.prop("goBack"));
    $("#lowVersionText").text($.i18n.prop("lowerVersion"));
    $('#filesDetected').text($.i18n.prop("filesDetected"));
    $('#downloadVersionIOS').text($.i18n.prop("downloadVersionIOS"));
  $('#upgradestep2ios').text($.i18n.prop("upgradestep2ios"));

    $('#upgradeIOSLegend').text($.i18n.prop("IosUpdate"));
    $('#upgradeListIOSItem1').text($.i18n.prop("upgradeListIOSItem1"));
    $('#upgradeListIOSItem2').text($.i18n.prop("upgradeListIOSItem2"));
    $('#upgradeListIOSItem3').text($.i18n.prop("upgradeListIOSItem3"));
    $('#upgradeListIOSItem4').text($.i18n.prop("upgradeListIOSItem4"));
    $('#upgradeListIOSItem5').text($.i18n.prop("upgradeListIOSItem5"));
    $(".loadingUpgradeTitleIOS").text($.i18n.prop("loadingUpgradeTitleIOS"));
    $('#upgradeIOSButtonText').text($.i18n.prop("updateIos"));
    $('#uploadIosButtonText').text($.i18n.prop("uploadIosButtonText"));
    $('#uploadIOSButtonText').text($.i18n.prop("uploadIOS"));
    $('#filesDetectedIos').text($.i18n.prop("filesDetectedIos"));
  $('#deleteIosList').text($.i18n.prop("deleteIosList"));
  $('#moveFirst').text($.i18n.prop("moveFirst"));
  $('#bootList').text($.i18n.prop("bootList"));
  $(".errorMsgHIos").text($.i18n.prop("iosFail"));
  $('#fileName').text($.i18n.prop("fileName"));
  $('#disk').text($.i18n.prop("disk"));
  $('.selectFromIos').text($.i18n.prop("selectFrom"));
  $('.selectIosFileSpan').text($.i18n.prop("selectIosFileText"));
  $('#routerSourceIos').text($.i18n.prop("routerSource"));
  $('#desktopSourceIos').text($.i18n.prop("desktopSource"));
    //consoleLogMethodDetailsEnd("upgradeCCP.js", "loadAndDisplayLanguages()");
  }

  function loadAndDisplayLanguagesReload(){
    $('#upgradeCCPLegend').text($.i18n.prop("factoryReset"));
    $('.selectDefaultFile').text($.i18n.prop("selectDefaultFileText"));
    $('.selectFrom').text($.i18n.prop("selectFrom"));
    $('#routerSource').text($.i18n.prop("routerSource"));
    $('#desktopSource').text($.i18n.prop("desktopSource"));
    $('.loadingReloadTitle').text($.i18n.prop("loadingReloadTitle"));
    $('#reloadButtonText').text($.i18n.prop("reloadButtonText"));
    $('#uploadConfigButtonText').text($.i18n.prop("uploadConfigButtonText"));
    $("#confirmResetText").text($.i18n.prop("confirmResetText"));
    $('.reloadNote').text($.i18n.prop("reloadNote"));
    $('#filesDetected').text($.i18n.prop("filesDetected"));
    $('#factoryNote').text($.i18n.prop("factoryNote"));
    $(".errorMsgH").text($.i18n.prop("ccpExpressUploadConfig"));

  }

 return {
    upgradeCCPLoading: upgradeCCPLoading
  };
}());var appListObj = {};
var taxonomyResponse = "";

var interfaceStatus = {};
var isNbarServicesIsConfig=false;
var avcFuture = (function () {
    var gridId = "trafficTable";
    var gridObj;
    var applicationPointsHashMap = [];
    var dataForGridHashMap = [];
    var bandwidthAreaChartId = "dashboardAreaChart";
    var PieChartId = "dashboardPieChart";
    var selectedZoomValue = 48;
    var selectedInterface;
    var intervalId;
    var AVAG_VALUE_24H = 5;
    var AVAG_VALUE_48H = 10;
    var selectedAverageValue = AVAG_VALUE_48H;
    var autoHash = [];
    var taxHashMap = [];
    var customHashMap = [];
    var selectedDirection = "both";
    var messages="";
    var maxRowsPerPage=8;
    var maxRetry = 5;
    var tried = 0;
    var colorArray = ['#0ed6ae', '#41dfbf', '#74e7d0', '#f08616', '#f3a047',
        '#f6b978', '#de698c', '#e589a4', '#eca8bd', '#c89b18', '#d4b049',
        '#dfc57a', '#ffde0d', '#ffe540', '#ffec73', '#c22f3c', '#cf5b65',
        '#dc878e', '#99cd52', '#aed776', '#c3e29b', '#66278a', '#8654a3',
        '#a782bb', '#df7575', '#e69292', '#ecafaf', '#ced60e', '#d8df41',
        '#e2e774', '#0e5c73', '#417e90', '#74a1ae', '#3ca242', '#65b66a',
        '#8ec992', '#5e7fc5', '#809ad1', '#a2b5de'];

    var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug",
        "Sep", "Oct", "Nov", "Dec"];

    /**
     * Contains references to all created main charts.
     */
    var mainCharts = {};
    var interfaceObj = {};
    var removeIntList = {};
    /*
     * Copyright (c) 2015-2016 by Cisco Systems, Inc.
     */
    var byteCountWindowsResponse = "";
    var customAutoLearnResponse = "";
    var top100HostsResponse = "";
    var blockedPolocys = {};
    var pleaseBlockMe = [];
    var cliObj = {};
    var interfaceText = "";
    var isSecurityEnable = true;
    var isZoneApirsAvailable = true;
    /*
     * on first time Load
     */
    function loadAvcFuture() {
         blockPage("Loading");
        if (worker !== undefined) {
            worker.terminate();
        }
        worker = new Worker("../js/avcCliWorker.js");
        //consoleLogMethodDetailsStart("avcFuture.js", "loadAvcFuture()");
        //$(document).tooltip();
        $("#avcDashboardPage").tooltip({
      content: function () {
        return $(this).prop('title');
        }
        });
        $("#avcError").hide();
        $("#enableAvc").hide();
        $("#infoIcon").show();
        $("#refreshCharts").bind("click",refreshCharts);
        $("#configAvc,#enableAvcCheckBox").bind("click",configAVCInterfaces);
        $("#AVCApplicationSearchMain").keyup(function (event) {
            var grid = $("#" + gridId);
            var searchFiler = $("#AVCApplicationSearchMain").val(), f;

            if (searchFiler.length === 0) {
                grid[0].p.search = false;
                $.extend(grid[0].p.postData, {
                    filters: ""
                });
            }
            f = {
                groupOp: "OR",
                rules: []
            };
            f.rules.push({
                field: "pName",
                op: "cn",
                data: searchFiler
            });

            grid[0].p.search = true;
            $.extend(grid[0].p.postData, {
                filters: JSON.stringify(f)
            });
            grid.trigger("reloadGrid", [{
                    page: 1,
                    current: true
                }]);

        });
        $("#blockApp").click(function () {
            isValiedBlockApplication();
            $('#dialog-form-block-application').dialog("open");

        });



        //$("#configAvc,#enableAvcCheckBox").click(function () {


       // });

        // $("#infoIcon").mouseover(function () {
//
        //       var valiedForm = isValiedBlockApplication();
        //       if (valiedForm == false) {
        // $('#dialog-form-block-application').dialog("open");
        //       }

        //    });
        
        languageLocaleCCPExpress = $.i18n.prop("langwage");
          if (languageLocaleCCPExpress == "en") {
            $('#configAvc').css('left', '80px');
        }
        
        $('.fa-refresh').tooltip({
          tooltipClass: "custom-tooltip-styling"
        });
        
        $("#dialog-form-confAvc").dialog(
                {
                    autoOpen: false,
                    title: $.i18n.prop("avcConfiguration"),
                    height: 450,
                    width: 650,
                    modal: true,
                    buttons: [
                        {
                            text: $.i18n.prop("ok"),
                            click: function (e) {
                                 blockPage("Loading");
                                setTimeout(function () {
                                    configAvcForInterfaces();
                                }, 1000);

                            }
                        }, {
                            text: $.i18n.prop("cancel"),
                            "class": 'entranslationSizeReplace',
                            click: function () {
                                $("#enableAvcCheckBox i").removeClass("fa-check-square-o");
                                $("#enableAvcCheckBox i").addClass("fa-square-o");
                                $(this).dialog("close");
                                // cancelLdap();
                            }
                        }],
                    close: function () {
                        $(this).dialog("close");
                    }
                });
        $("#dialog-form-block-application").dialog(
                {
                    autoOpen: false,
                    height: 430,
                    width: 650,
                    modal: true,
                    buttons: [
                        {
                            text: $.i18n.prop("ok"),
                            click: function (e) {
                                blockPage("Loading");
                                $("#blockAppError").hide();
                                var sourceZone = $(
                                        "#sourceZone option:selected")
                                        .val();
                                var destinationZone = $(
                                        "#destinationZone option:selected")
                                        .val();
                                if (sourceZone == destinationZone) {
                                    $("#blockAppErrorMessage").text($.i18n.prop("sorceAndDistinationNotEqual"));
                                    $("#blockAppError").show();
                                    $.unblockUI();
                                    return;
                                }
                                blockPolicy(pleaseBlockMe, sourceZone,
                                        destinationZone);

                            }

                        }, {
                            text: $.i18n.prop("cancel"),
                            click: function () {
                                $(this).dialog("close");
                                // cancelLdap();
                            }
                        }],
                    close: function () {
                        $(this).dialog("close");
                    }
                });

        loadAndDisplayLanguages();
         if (!isAVCSuport) {
                $("#avcDashboardPage").hide();
                $('#avcErrorMessage').html($.i18n.prop("avcNotSuport"));
                //"IOS will not suport for AVC");
                $('#avcError').show();
               $.unblockUI();
                return;
         }
        checkNbarServicesIsConfig();
        getApplicationArry();
        isAvcEnabled();
        validateBlockPolicyButton();
        //consoleLogMethodDetailsEnd("avcFuture.js", "loadAvcFuture()");

    }
    function loadAndDisplayLanguages() {
        $("#avcInterfaceLabelen").text($.i18n.prop("interfaceIandC"));
        $("#avcDirectionLabel").text($.i18n.prop("avcDirection"));
        $("#avcPeriodLabel").text($.i18n.prop("avcPeriod"));
        $("#avcUsageLabel").text($.i18n.prop("avcUsage"));
        $("#avcApplicationLabel").text($.i18n.prop("avcApplicationLabel"));
        $("#policySourceZoneTitle").text($.i18n.prop("policySourceZoneTitle") + ":");
        $("#policyDestZoneTitle").text($.i18n.prop("policyDestZoneTitle") + ":");
        $("#avcInfoDesc").text($.i18n.prop("avcInfoDesc"));
        $("#avcConfigDesc").text($.i18n.prop("avcConfigDesc"));
        $("#blockApp").text($.i18n.prop("block"));
        $("#avcBlockDesc").text($.i18n.prop("avcBlockDesc"));

        $("#avcWAN").text($.i18n.prop("avcInterfaces"));
        $("#allAvailInterf").text($.i18n.prop("zoneAvailInterf"));
        $("#dialog-form-confAvc").attr("title",$.i18n.prop("avcConfiguration"));
        $("#interfacesComboBoxOptionAll").text($.i18n.prop("avcAllInterfaces"));
        $("#directionComboBoxAll").text($.i18n.prop("avcDirectionAll"));
        $("#directionComboBoxIngress").text($.i18n.prop("avcDirectionIngress"));
        $("#directionComboBoxEgress").text($.i18n.prop("avcDirectionEgress"));
        $("#zoomComboBox2Hrs").text("2 "+$.i18n.prop("avcHours"));
        $("#zoomComboBox24Hrs").text("24 "+$.i18n.prop("avcHours"));
        $("#zoomComboBox48Hrs").text("48 "+$.i18n.prop("avcHours"));
        $("#refreshCharts").attr("title",$.i18n.prop("refresh"));
        $("#AVCApplicationSearchMain").attr('placeholder',$.i18n.prop("searchApplications"));
    }
    function isValiedBlockApplication() {
        var isValidForm = true;
        var grid = $("#" + gridId);
        var myIds = grid.jqGrid('getGridParam', 'selarrrow');
        var size=0;
        if(myIds!=undefined){
         pleaseBlockMe = myIds;
         size = pleaseBlockMe.length;
        }
        if (!isSecurityEnable || !isZoneApirsAvailable || size == 0) {
            $("#blockAppForm").hide();
            messages = "<ol class='square'>";
            if (!isSecurityEnable) {
                messages = messages + "<li>"+$.i18n.prop("securityEnableForAvc") + "</li>";
            }
            if (!isZoneApirsAvailable) {
                messages = messages +"<li>"+ $.i18n.prop("atlest2ZonePair") +  "</li>";
            }
            if (size == 0) {
                messages = messages +"<li>"+  $.i18n.prop("atlestOneApplication") + "</li>";
            }
            messages=messages+"</ol>";
            $("#blockAppErrorMessage").html(messages);
            $("#blockAppError").show();
            $("#infoIcon").attr('title', messages);
            isValidForm = false;
        } else {
            $("#blockAppForm").show();
            $("#blockAppError").hide();
        }

        return isValidForm;
    }
    function configAvcForInterfaces() {
      //  addRefreshing("#refreshIcon");
        $("#" + gridId).jqGrid("clearGridData", true).trigger("reloadGrid");
        var addList = {};
        var hasAvcInterface=false;
        $("#avcInterfaceList li").each(function () {
            //   var addList = {};
            hasAvcInterface=true;
            var name = $.trim($(this).text());
            if (interfaceObj[name]) {
                delete removeIntList[name];
            } else {
                addList[name] = name;
            }

        });
        tried = 0;
        var confNbarDiscovary = "";
        var ispushingNbar = false;
        for (var intName in removeIntList) {
            if (removeIntList.hasOwnProperty(intName)) {
            confNbarDiscovary = confNbarDiscovary + "interface " + intName + " \n no ip nbar protocol-discovery \n exit \n  ";
            }
        }
        for (var intName in addList) {
            if (addList.hasOwnProperty(intName)) {
            confNbarDiscovary = confNbarDiscovary + "interface " + intName + " \n ip nbar protocol-discovery \n exit \n  ";
            }
        }
        if (!isNbarServicesIsConfig && hasAvcInterface) {
            ispushingNbar = true;
            confNbarDiscovary = confNbarDiscovary + " ip nbar http-services \n";
        }
        if (!hasAvcInterface) {
            confNbarDiscovary = confNbarDiscovary + " no ip nbar http-services \n";
        }

        if (!isEmpty(confNbarDiscovary)) {
            try{
            deviceCommunicator.getConfigCmdOutput(confNbarDiscovary);
                if (ispushingNbar) {
                    isNbarServicesIsConfig = true;
                }
            }catch(error){
  isEmptyBlock = true;
      }
            //deviceCommunicator.doWriteMemory();
            // httpPai("writeMemory.shtml");
             var cliJson = [{"name": "writeMemory", "cliName": "writeMemory", "cliNamesAndCliObj": "cliNames"}];
            worker.postMessage(JSON.stringify(cliJson));

            if (hasAvcInterface && isNbarServicesIsConfig) {
                 $("#avcDashboardPage").show();
                 $("#enableAvc").hide();
                // isAvcEnabled();
             }else{
                 $("#avcDashboardPage").hide();
                 $("#enableAvcCheckBox i").removeClass("fa-check-square-o");
                 $("#enableAvcCheckBox i").addClass("fa-square-o");
                 $("#avcDashboardPage").hide();
                 $("#enableAvc").show();
                isNbarServicesIsConfig = false;
             }
                if (taxonomyResponse != "") {
                    httpPai("showInterfaces.shtml");
                } else {
                    httpPai("getTaxonomy.shtml,getUpInterfaces.shtml,showInterfaces.shtml");
                }
         $("#dialog-form-confAvc").dialog("close");
        }



    }
    function loader(action, id) {

        if (action == "add") {
            $("#" + id).children().hide();
            if (id == "controlPanelDiv") {
                $("#" + id)
                        .append(
                                '<div id="dashletLoading" style="text-align: center;font-size: larger;margin-top:5px"><div class="facebook"><div></div><div></div><div></div><span style="vertical-align: super;font-size: 1.1em;padding-left: 5px;color: #7F7C7C;" class="loadingBgTitle">'
                                + $.i18n.prop("loadingBgTitle")
                                + '</span></div></div>');
      }
            else if (id == "areaChartContainerDIV") {
                $("#" + id)
                        .append(
                                '<div id="dashletLoading" style="text-align: center;font-size: larger;margin-top:18%"><div class="facebook"><div></div><div></div><div></div><span style="vertical-align: super;font-size: 1.1em;padding-left: 5px;color: #7F7C7C;" class="loadingBgTitle">'
                                + $.i18n.prop("loadingBgTitle")
                                + '</span></div></div>');
      }
            else if (id == "pieChartContainerDIV") {
                $("#" + id)
                        .append(
                                '<div id="dashletLoading" style="text-align: center;font-size: larger;margin-top:48%"><div class="facebook"><div></div><div></div><div></div><span style="vertical-align: super;font-size: 1.1em;padding-left: 5px;color: #7F7C7C;" class="loadingBgTitle">'
                                + $.i18n.prop("loadingBgTitle")
                                + '</span></div></div>');
      }
            else if (id == "tableContainerDIV") {
                $("#" + id)
                        .append(
                                '<div id="dashletLoading" style="text-align: center;font-size: larger;margin-top:37%"><div class="facebook"><div></div><div></div><div></div><span style="vertical-align: super;font-size: 1.1em;padding-left: 5px;color: #7F7C7C;" class="loadingBgTitle">'
                                + $.i18n.prop("loadingBgTitle")
                                + '</span></div></div>');
      }
            $("#" + id).css("background", "#ffffff");
        } else {
            $("#" + id).find("#dashletLoading").remove();
            $("#" + id).children().show();

        }

    }

    function isAvcEnabled() {
        addRefreshing("#refreshIcon");
        initClisArray();
        /// allValiedInterfaces=loadAllValiedInterfaces();
        $("#avcDashboardPage").hide();
        //var isAVCSuport = checkAVCSaport();
       // if(){
        //}
            loader("add", "controlPanelDiv");
            //loader("add", "tableContainerDIV");
            if(taxonomyResponse!=""){
                 httpPai("showInterfaces.shtml");
            }else{
                 httpPai("getTaxonomy.shtml,getUpInterfaces.shtml,showInterfaces.shtml");
            }
            //httpPai("getUpInterfaces.shtml");
            //httpPai("showInterfaces.shtml");

            receiveMessages();
        // getUpInterfaces();
    }
    function loadInterfaceByCheckCallComplete() {
        var isEnableAvc = false;

        isEnableAvc = loadInterfacesForConfigAvc();
        if (isNbarServicesIsConfig && isEnableAvc) {
           $("#avcDashboardPage").show();
            $("#enableAvc").hide();
            loadAvcInit();
        } else {
            $("#enableAvcCheckBox i").removeClass("fa-check-square-o");
            $("#enableAvcCheckBox i").addClass("fa-square-o");
            $("#avcDashboardPage").hide();
            $("#enableAvc").show();


        }
        $.unblockUI();
    }
    function loadInterfacesForConfigAvc() {
        var isEnableAvc = false;
        $("#avcInterfaceList").children().remove();
        $("#allInterfaceList").children().remove();
        //var size = interfaceObj.length;
        //image = '<div id="primaryPort" class="portImageBoxSmall" style="background: rgb(38, 201, 119);"><img src="images/interfacePort.png"></div>';
        var imageUp = '<div id="primaryPort" class="portImageBoxSmall interfaceUpGreenBgColor" ><div class="utmSprite interfacePortSmall displayInlineBlock"></div></div>';
        var imageDown = '<div id="primaryPort" class="portImageBoxSmall interfaceDownRedBgColor" ><div class="utmSprite interfacePortSmall displayInlineBlock"></div></div>';
        //for (var i = 0; i < size; i++) {
        var image = imageDown;
        for (var name in interfaceObj) {
            //  var obj = interfaceObj[i];
            //var interfaceName = obj.name;
            if (interfaceObj.hasOwnProperty(name)) {
            if (interfaceStatus[name]) {
                image = imageUp;
            }else{
                image = imageDown;
            }
            ;
            if (interfaceObj[name]) {
                isEnableAvc = true;
                removeIntList[name] = name;
                $('#avcInterfaceList').append(
                        '<li value="' + name + '" >' + image + " "
                        + name + '</li>');
            } else {
                $('#allInterfaceList').append(
                        '<li value="' + name + '" >' + image + " "
                        + name + '</li>');
                }
            }

        }
        $("#allInterfaceList li,#avcInterfaceList li").draggable({
            tolerance: "touch",
            helper: "clone",
            drag: function () {
  isEmptyBlock = true;
      },
            stop: function () {
  isEmptyBlock = true;
      }

        });
        $("#availableInterfaceDiv,#avcFieldSet").droppable({
            drop: function (event, ui) {
                $(this).find("ul").append(ui.helper.clone(false).css({
                    position: 'relative',
                    left: '0px',
                    top: '0px'
                }));
                move = ui.draggable;
                move.remove();
                $(this).find("li").draggable({
                    tolerance: "touch",
                    helper: "clone",
                    drag: function () {
  isEmptyBlock = true;
      },
                    stop: function () {
  isEmptyBlock = true;
      }
                });
            }

        });
        return isEnableAvc;
    }
    function loadAvcInit() {

        // loader("add", "areaChartContainerDIV");
        // loader("add", "pieChartContainerDIV");
        // loader("add", "tableContainerDIV");

        loader("add", "areaChartContainerDIV");
        loader("add", "pieChartContainerDIV");
        $("#blockApp").prop("disabled", "disabled");

        httpPai("customAutoLearn.shtml,topHost100.shtml,byteCountWindow48h.shtml");
        //httpPai("topHost100.shtml");
        //httpPai("byteCountWindow48h.shtml");
        initZoomConfigsAndRefresh();
        initIngressEgressConfigs();
        var messagePost = [{
                "name": "getBlockedApps"
            }];
        worker.postMessage(JSON.stringify(messagePost));
        // initBlockPolacy(sendRequests);

        // set resize event on jqgrid
        $(window).bind('resize', function () {
            $("#" + gridId).setGridWidth($("#dashboardPage").width() - 40);
        }).trigger('resize');

    }
    ;

    function initClisArray() {
        cliObj["byteCountWindow48h.shtml"] = "show ip nbar protocol-discovery stats byte-count-window 48h raw";
        cliObj["byteCountWindow5Min.shtml"] = "show ip nbar protocol-discovery stats byte-count-window 5m";
        cliObj["cpuUtilizationASR.shtml"] = "show platform hardware qfp active datapath utilization summary | inc Processing: Load";
        cliObj["cpuUtilizationISR.shtml"] = "show processes cpu | inc CPU utilization";
        cliObj["customAutoLearn.shtml"] = "show ip nbar protocol-discovery stats auto-custom";
        cliObj["getTaxonomy.shtml"] = "show ip nbar protocol-pack active  taxonomy";
        cliObj["osVersion.shtml"] = "show version | inc Version";
        cliObj["ppVersion.shtml"] = "show ip nbar protocol-pack active | inc Version";
        cliObj["showInterfaces.shtml"] = "show  run | inc ^interface|ip nbar protocol-discovery";
        cliObj["topHost100.shtml"] = "show ip nbar classification auto-learn top-hosts 100 detail";
        cliObj["checkForHttpService.shtml"] = "sh run | i ip nbar http-services";
        cliObj["getUpInterfaces.shtml"] = "sh ip interface brief | i up";

    }

    /**
     * request the top100hosts and autolearn to update them
     */
    function requestTopHostAndAutoLearn() {
        httpPai("customAutoLearn.shtml");

//        httpPai("customAutoLearn.shtml", function (response) {
//            makeCustomAutoLearnHashMap(response);
//            requesttopHost100();
//        }, function () {
//            setTimeout(function () {
//                httpPai("customAutoLearn.shtml", function (response) {
//                    makeCustomAutoLearnHashMap(response);
//                    requesttopHost100();
//
//                }, function () {
//                    setTimeout(function () {
//                        httpPai("customAutoLearn.shtml", function (response) {
//                            makeCustomAutoLearnHashMap(response);
//                            requesttopHost100();
//                        }, undefined);
//                    }, 500);
//                });
//            }, 500);

        //       });
    }

    function requesttopHost100() {
        httpPai("topHost100.shtml");
//        httpPai("topHost100.shtml", function (response) {
//            makeTop100HostsHashMap(response);
//            requestNewPoint();
//        }, function () {
//            setTimeout(function () {
//                httpPai("topHost100.shtml", function (response) {
//                    makeTop100HostsHashMap(response);
//                    requestNewPoint();
//                }, function () {
//                    // if faild, after 0.5 second re-request again
//                    setTimeout(function () {
//                        httpPai("topHost100.shtml", function (response) {
//                            makeTop100HostsHashMap(response);
//                            requestNewPoint();
//                        }, undefined);
//                    }, 500);
//                });
//            }, 500);
//        });

    }

    // /**
    // *
    // * dropPoints function
    // */
    // function dropPoints(arrayOfPoints, arrayOfDates) {
    //
    // var arrayLength = arrayOfPoints.length - 1;
    // var hoursLimitPoints = 24 * 60;
    // if (arrayLength > hoursLimitPoints) {
    // var xAxisType = arrayOfDates[0];
    // var yAxisType = arrayOfPoints[0];
    // arrayOfPoints.shift();
    // arrayOfDates.shift();
    // arrayOfPoints.shift();
    // arrayOfDates.shift();
    // arrayOfDates.unshift(xAxisType);
    // arrayOfPoints.unshift(yAxisType);
    // }
    // }

    // /**
    // *
    // * smoothing function
    // */
    //
    // function smoothCpuChart(arrayOfPoints, arrayOfDates) {
    // var maxPoints = 100;
    // var xAxisType = arrayOfDates[0];
    // var yAxisType = arrayOfPoints[0];
    // var arrayLength = arrayOfPoints.length - 1;
    // var period = Math.ceil(arrayLength / maxPoints);
    // var tempPoint = [];
    // var tempDate = [];
    // var numberOfNewPoints = Math.floor(arrayLength / period);
    // if (arrayLength > maxPoints) {
    // if (arrayLength % period == 0) {
    // var sum = 0;
    // var tempIndex = 0;
    // while (tempIndex != numberOfNewPoints) {
    // var arrayOfPointsIndex = tempIndex * period + 1;
    // var counter = 0;
    // tempPoint[tempIndex] = 0;
    // while (counter != period) {
    // sum += arrayOfPoints[arrayOfPointsIndex];
    // counter++;
    // arrayOfPointsIndex++;
    // }
    // tempPoint.push(sum / period);
    // tempDate.push(arrayOfDates[tempIndex * period + 1]);
    // tempIndex++;
    // }
    // arrayOfPoints = [];
    // arrayOfDates = [];
    // tempPoint.unshift(yAxisType);
    // tempDate.unshift(xAxisType);
    // arrayOfPoints = tempPoint;
    // arrayOfDates = tempDate;
    // }
    // else {
    // var sum = 0;
    // var tempIndex = 0;
    // while (tempIndex != numberOfNewPoints) {
    // var arrayOfPointsIndex = tempIndex * period + 1;
    // var counter = 0;
    // tempPoint[tempIndex] = 0;
    // while (counter != period) {
    // sum += arrayOfPoints[arrayOfPointsIndex];
    // counter++;
    // arrayOfPointsIndex++;
    // }
    // tempPoint.push(sum / period);
    // tempDate.push(arrayOfDates[tempIndex * period + 1]);
    // tempIndex++;
    // }
    // sum = 0;
    // tempIndex = numberOfNewPoints;
    // var arrayOfPointsIndex = tempIndex * period + 1;
    // var counter = 0;
    // tempPoint[tempIndex] = 0;
    // while (counter != (arrayLength - tempIndex * period)) {
    // sum += arrayOfPoints[arrayOfPointsIndex];
    // counter++;
    // arrayOfPointsIndex++;
    // }
    // tempPoint.push(sum / counter);
    // tempDate.push(arrayOfDates[tempIndex * period + 1]);
    // arrayOfPoints = [];
    // arrayOfDates = [];
    // tempPoint.unshift(yAxisType);
    // tempDate.unshift(xAxisType);
    // arrayOfPoints = tempPoint;
    // arrayOfDates = tempDate;
    // }
    // }
    // }

    /**
     * requests new point (previous 5 minutes)
     */
    function requestNewPoint() {
        httpPai("byteCountWindow5Min.shtml");
    }
    function processRequestNewPoint(response) {
        var fiveMinByteCountWindowsResponse = response;

        var responseData = fiveMinByteCountWindowsResponse
                .split(selectedInterface + "\r\n");
        if (responseData[1] == undefined) {
            responseData = fiveMinByteCountWindowsResponse
                    .split(selectedInterface + " \r\n");
        }
        if (responseData.length <= 1) {
            addNewPointToMissingInterfaces();
            refreshZoomValue(selectedZoomValue);
            // return;
        } else {
            var responseData = responseData[1].split("Last clearing of");
            var responseData = responseData[1]
                    .split("------------------------ ------------------------ ------------------------");
            responseData = responseData[1];
            responseData = responseData.split('\r\n');
            var protocolData = {};
            var fiveMinutesHashMap = {};
            for (var i = 0; i < responseData.length - 2; i++) {
                var line = responseData[i].trim();
                if (line.length == 0 /* || $.isNumeric(line) */) {
                    continue;
                }
                line = line.replace(/ +(?= )/g, '');
                line = line.replace(/ /g, '&');
                var result = line.split("&");
                if (result.length == 3) {
                    protocolData = {};
                    protocolData.id = result[0];
                    // no need for now
                    protocolData.name = result[0];
                    protocolData.inputPoints = result[1].split(",");
                    protocolData.outputPoints = result[2].split(",");
                    protocolData = calculateTotalArray(protocolData);
                    fiveMinutesHashMap[protocolData.name] = protocolData;
                }
            }
            addNewPointToData(fiveMinutesHashMap);
            refreshZoomValue(selectedZoomValue);
        }




    }

    /**
     * add a new point to the protocol hashmap
     *
     * @param fiveMinutesHashMap
     *            hashmap contains protocols and their 5 mins points
     */
    function addNewPointToData(fiveMinutesHashMap) {
        var numberOfPoints = (48 * 60) / 5;
        var length;
        var oldestInputPoint;
        var oldestOutputPoint;
        var oldestTotalPoint;

        var newestInputPoint;
        var newestOutputPoint;
        var newestTotalPoint;

        for (var name in applicationPointsHashMap) {
            if (typeof fiveMinutesHashMap[name] == "undefined") {

                var protocolData = {};
                protocolData.id = name;
                // no need for now
                protocolData.name = name;
                protocolData.inputPoints = [0];
                protocolData.outputPoints = [0];
                protocolData = calculateTotalArray(protocolData);
                fiveMinutesHashMap[protocolData.name] = protocolData;
            }
        }

        for (var name in fiveMinutesHashMap) {
            if (typeof applicationPointsHashMap[name] == "undefined") {

                applicationPointsHashMap[name] = fiveMinutesHashMap[name];
                for (var i = 0; i < numberOfPoints - 1; i++) {
                    applicationPointsHashMap[name].inputPoints.unshift(0);
                    applicationPointsHashMap[name].outputPoints.unshift(0);
                    applicationPointsHashMap[name].totalPoints.unshift(0);
                }
                continue;
            }
            length = applicationPointsHashMap[name].inputPoints.length;
            newestInputPoint = fiveMinutesHashMap[name].inputPoints[0];
            newestOutputPoint = fiveMinutesHashMap[name].outputPoints[0];
            newestTotalPoint = fiveMinutesHashMap[name].totalPoints[0];
            if (length == numberOfPoints) {
                // save oldest and newest points
                oldestInputPoint = applicationPointsHashMap[name].inputPoints[0];
                oldestOutputPoint = applicationPointsHashMap[name].outputPoints[0];
                oldestTotalPoint = applicationPointsHashMap[name].totalPoints[0];
                // remove old points
                applicationPointsHashMap[name].inputPoints.shift();
                applicationPointsHashMap[name].outputPoints.shift();
                applicationPointsHashMap[name].totalPoints.shift();
                // add new points
                applicationPointsHashMap[name].inputPoints
                        .push(newestInputPoint);
                applicationPointsHashMap[name].outputPoints
                        .push(newestOutputPoint);
                applicationPointsHashMap[name].totalPoints
                        .push(newestTotalPoint);
                // recalculate total
                applicationPointsHashMap[name].inputTotal -= oldestInputPoint
                        - newestInputPoint;
                applicationPointsHashMap[name].outputTotal -= oldestOutputPoint
                        - newestOutputPoint;
            }
            // if the array is not complete which the data is not enough
            else {
                // add new points
                applicationPointsHashMap[name].inputPoints
                        .push(newestInputPoint);
                applicationPointsHashMap[name].outputPoints
                        .push(newestOutputPoint);
                applicationPointsHashMap[name].totalPoints
                        .push(newestTotalPoint);
                // recalculate total
                applicationPointsHashMap[name].inputTotal += newestInputPoint;
                applicationPointsHashMap[name].outputTotal += newestOutputPoint;
            }
        }

    }

    /**
     * ADD NEW DATA TO MISSING INTERFACE IN fiveMinutesHashMap
     */

    function addNewPointToMissingInterfaces() {
        var numberOfPoints = (48 * 60) / 5;
        var length;
        var oldestInputPoint;
        var oldestOutputPoint;
        var newestInputPoint;
        var newestOutputPoint;
        // for every application
        for (var name in applicationPointsHashMap) {
            if (applicationPointsHashMap.hasOwnProperty(name)) {
            newestInputPoint = 0;
            newestOutputPoint = 0;
            length = applicationPointsHashMap[name].inputPoints.length;

            // if the points are the same as length, which the array is full of
            // data
            // needed
            if (length == numberOfPoints) {
                // save oldest and newest points
                oldestInputPoint = applicationPointsHashMap[name].inputPoints[0];
                oldestOutputPoint = applicationPointsHashMap[name].outputPoints[0];
                // remove old points
                applicationPointsHashMap[name].inputPoints.shift();
                applicationPointsHashMap[name].outputPoints.shift();
                // add new points
                applicationPointsHashMap[name].inputPoints
                        .push(newestInputPoint);
                applicationPointsHashMap[name].outputPoints
                        .push(newestOutputPoint);
                // recalculate total
                applicationPointsHashMap[name].inputTotal -= oldestInputPoint
                        - newestInputPoint;
                applicationPointsHashMap[name].outputTotal -= oldestOutputPoint
                        - newestOutputPoint;
            }
            // if the array is not complete which the data is not enough
            else {
                // add new points
                applicationPointsHashMap[name].inputPoints
                        .push(newestInputPoint);
                applicationPointsHashMap[name].outputPoints
                        .push(newestOutputPoint);
                // recalculate total
                applicationPointsHashMap[name].inputTotal -= oldestInputPoint += newestInputPoint;
                applicationPointsHashMap[name].outputTotal -= oldestOutputPoint += newestOutputPoint;
                }
            }
        }

    }

//    /**
//     * add a new point to the protocol missing in the fiveMinutesHashMap hashmap
//     *
//     * @param fiveMinutesHashMap
//     *            hashmap contains protocols and their 5 mins points
//     */
//    // add new points to the missing data
//    function addNewPointToMissingData(fiveMinutesHashMap) {
//        var numberOfPoints = (48 * 60) / 5;
//        var length;
//        var oldestInputPoint;
//        var oldestOutputPoint;
//        var newestInputPoint;
//        var newestOutputPoint;
//        // for every application
//        for (var name in applicationPointsHashMap) {
//            // if it is not exist ,just add it to the Hash map
//            // if(name == "AppOutAfter10Min")
//            // console.log("");
//            if (typeof fiveMinutesHashMap[name] == "undefined") {
//                newestInputPoint = 0;
//                newestOutputPoint = 0;
//            }
//            length = applicationPointsHashMap[name].inputPoints.length;
//
//            // if the points are the same as length, which the array is full of
//            // data
//            // needed
//            if (length == numberOfPoints) {
//                // save oldest and newest points
//                oldestInputPoint = applicationPointsHashMap[name].inputPoints[0];
//                oldestOutputPoint = applicationPointsHashMap[name].outputPoints[0];
//                // remove old points
//                applicationPointsHashMap[name].inputPoints.shift();
//                applicationPointsHashMap[name].outputPoints.shift();
//                // add new points
//                applicationPointsHashMap[name].inputPoints
//                        .push(newestInputPoint);
//                applicationPointsHashMap[name].outputPoints
//                        .push(newestOutputPoint);
//                // recalculate total
//                applicationPointsHashMap[name].inputTotal -= oldestInputPoint
//                        - newestInputPoint;
//                applicationPointsHashMap[name].outputTotal -= oldestOutputPoint
//                        - newestOutputPoint;
//            }
//            // if the array is not complete which the data is not enough
//            else {
//                // add new points
//                applicationPointsHashMap[name].inputPoints
//                        .push(newestInputPoint);
//                applicationPointsHashMap[name].outputPoints
//                        .push(newestOutputPoint);
//                // recalculate total
//                applicationPointsHashMap[name].inputTotal/*-= oldestInputPoint*/ += newestInputPoint;
//                applicationPointsHashMap[name].outputTotal/*
//                 * -=
//                 * oldestOutputPoint
//                 */ += newestOutputPoint;
//            }
//        }
//
//    }

    /**
     * function to set click listener on windowZoom select when change
     */
    function initZoomConfigsAndRefresh() {

        // default value is 2h
        $("#zoomComboBox").val('2');
        // on change, assign to selectedZoomValue
        $("#zoomComboBox").change(function () {
            addRefreshing("#refreshIcon");
            selectedZoomValue = Number(this.value);
            // refresh the charts to new points
            refreshZoomValue(selectedZoomValue);
            removeRefreshing();
        });

    }
    function refreshCharts(){
     // $("#refreshCharts").click(function () {
            // otherInterfaceSelected();
            addRefreshing("#refreshIcon");

            httpPai("byteCountWindow48h.shtml");
        //});
    }
    function configAVCInterfaces(){
            $("#enableAvcCheckBox i").removeClass("fa-square-o");
            $("#enableAvcCheckBox i").addClass("fa-check-square-o");

        loadInterfacesForConfigAvc();
            $('#dialog-form-confAvc').dialog("open");
        }

    /**
     * function changes the drawn points in the chart based on selected
     * zoomWindow
     *
     * @param selectedZoomValue
     *            2|| 24|| 48
     */
    function refreshZoomValue(selectedZoomValue) {
        // number of points is the multiplication of zoome value by 60 mins,
        // divided
        // by 5 mins
        var numberOfPoints = selectedZoomValue * 60 / 5;
        // keep original data safe , make a copy and remove extra points
        var selectedPointsinWindow = $.extend(true, {},
                applicationPointsHashMap);
        var length;
        var fromIndex;
        // for every application
        for (protocol in selectedPointsinWindow) {
            if (selectedPointsinWindow.hasOwnProperty(protocol)) {
            // remove previous history
            selectedPointsinWindow[protocol].selectedWindowPoints = undefined;

            // check if an application is zero in the last 48 hours, then delete
            // it

            var summation = selectedPointsinWindow[protocol].inputTotal
                    + selectedPointsinWindow[protocol].outputTotal;
            if (summation <= 0) {
                delete applicationPointsHashMap[protocol];
                continue;
            }
            // process input points
            // length of input points
            length = selectedPointsinWindow[protocol].inputPoints.length;
            // start from 0 if there are not enough points, otherwise start from
            // needed points
            fromIndex = length >= numberOfPoints ? (length - numberOfPoints)
                    : 0;
            // get needed points and save it in selectedPointsInWindow
            selectedPointsinWindow[protocol].inputPoints = selectedPointsinWindow[protocol].inputPoints
                    .slice(fromIndex, length);

            // process output points
            // length of output points
            length = selectedPointsinWindow[protocol].outputPoints.length;
            // start from 0 if there are not enough points, otherwise start from
            // needed points
            fromIndex = length >= numberOfPoints ? (length - numberOfPoints)
                    : 0;
            // get needed points and save it in selectedPointsInWindow
            selectedPointsinWindow[protocol].outputPoints = selectedPointsinWindow[protocol].outputPoints
                    .slice(fromIndex, length);

            // process total points
            length = selectedPointsinWindow[protocol].totalPoints.length;
            fromIndex = length >= numberOfPoints ? (length - numberOfPoints)
                    : 0;
            selectedPointsinWindow[protocol].totalPoints = selectedPointsinWindow[protocol].totalPoints
                    .slice(fromIndex, length);

            // calculate new summation of input and output arrays
            selectedPointsinWindow[protocol].inputTotal = 0;
            selectedPointsinWindow[protocol].outputTotal = 0;
            for (var i = 0; i < selectedPointsinWindow[protocol].inputPoints.length; i++) {
                selectedPointsinWindow[protocol].inputTotal += selectedPointsinWindow[protocol].inputPoints[i];
                selectedPointsinWindow[protocol].outputTotal += selectedPointsinWindow[protocol].outputPoints[i];
            }
            // save reference to selected window array
            applicationPointsHashMap[protocol].selectedWindowPoints = selectedPointsinWindow[protocol];
            }
        }

        // initialize grid data and refresh it
        initDataForGrid(applicationPointsHashMap);
        // redraw charts
        displayDataInCharts(applicationPointsHashMap, selectedZoomValue,
                selectedDirection);

        // $(gridObj).jqGrid('clearGridData');
       // $(gridObj).setGridParam({
       //     data: dataForGridHashMap
        //});
        $(gridObj).jqGrid('setGridParam',{data: dataForGridHashMap}).trigger("reloadGrid");
      //  $(gridObj)[0].refreshIndex();
      //  $(gridObj).trigger("reloadGrid");
    }

    /**
     * Initiate the ingress/egress radio buttons to change the charts onChange
     */
    function initIngressEgressConfigs() {
        $("#directionComboBox").change(
                function () {
                    addRefreshing("#refreshIcon");
                    selectedDirection = this.value;
                    // refresh the charts to new points
                   // displayDataInCharts(applicationPointsHashMap, selectedZoomValue, selectedDirection);
                    initDataForGrid(applicationPointsHashMap);
                   // redraw charts
                    displayDataInCharts(applicationPointsHashMap, selectedZoomValue, selectedDirection);
                    gridObj.setGridParam({
                        rowNum: maxRowsPerPage
                    });
                    $(gridObj).jqGrid('setGridParam',{data: dataForGridHashMap}).trigger("reloadGrid");
                    removeRefreshing();
                });
    }
    function initBlockPolacy(outPut, onCompleteFunction) {


        try {

            var size = outPut.length;
            var appBlock = {};
            for (var i = 0; i < size; i++) {
                var objDir = outPut[i];
                var dir = objDir.name;
                var array = dir.split("-");
                var descPolicy = array[0] + " to "
                        + array[1] + " Policy";
                var applicationList = objDir.value;
                var pSize = applicationList.length;
                for (var j = 0; j < pSize; j++) {
                    var pObj = applicationList[j];

                    var appNameList = pObj.value;
                    var appNameSize = appNameList.length;
                    for (var k = 0; k < appNameSize; k++) {
                        var appName = appNameList[k];
                        var desc = appBlock[appName];
                        if (appBlock[appName]) {
                            desc = appBlock[appName] + ","
                                    + descPolicy;
                        } else {
                            desc = descPolicy;
                        }

                        appBlock[appName] = desc;
                    }
                }
            }

            blockedPolocys = appBlock;
        } catch (error) {
            errorLogInConsole(error.message);
        }


        if (onCompleteFunction != undefined) {
            onCompleteFunction.call();
        }

    }
    /**
     * send requests needed: taxonomy, custom auto learn, top 100 host and byte
     * count window
     */
    function sendRequests() {

//         if(isTexonomy==false || isCustomAutoLearn==false || isTopHost==false || isByteCount48==false ){
//             setTimeout(function (){
//                 sendRequests();
//             },1000);
//             return;
//         }

        makeHashMapsFromResponses(taxonomyResponse,
                byteCountWindowsResponse, customAutoLearnResponse,
                top100HostsResponse);

        initDataForGrid(applicationPointsHashMap);
        if (dataForGridHashMap.length === 0 && (maxRetry >= tried)) {
            setTimeout(function () {

                httpPai("customAutoLearn.shtml,topHost100.shtml,byteCountWindow48h.shtml");
            }, 3000);
            tried++;
            return;
        }
        displayDataInCharts(applicationPointsHashMap, selectedZoomValue,
                selectedDirection);
        displayDataInTable();

        loader("remove", "areaChartContainerDIV");
        loader("remove", "pieChartContainerDIV");
        removeRefreshing();
        // loader("remove", "tableContainerDIV");
        intervalId = setInterval(function () {
            requestTopHostAndAutoLearn();
        }, 5 * 60 * 1000);
        // on load select 2 hr zoom value
        $("#zoomComboBox").val(2);
        // $("#zoomComboBox").val(48);
        $("#zoomComboBox").change();

    }



    /**
     * show charts , redraw with new data
     *
     * @param chartsData
     *            data of area chart and pie
     * @param selectedZoomValue
     *            zoom value of charts (48 | 24 | 2)
     * @param direction
     *            shows the direction of the charts
     */
    function displayDataInCharts(chartsData, selectedZoomValue, direction) {

        // check if there is no data at all
         $(gridObj).jqGrid('clearGridData');
        if (typeof chartsData["Total"] == "undefined") {
            if (typeof mainCharts[PieChartId] != "undefined") {
                mainCharts[PieChartId].hide();
            }
            if (typeof mainCharts[bandwidthAreaChartId] != "undefined") {
                mainCharts[bandwidthAreaChartId].hide();
            }

            return;
        }
        // decide which array to draw (ingress or egress)
        var areaChartPointsToDisplay = [];
        var pieChartPercToDisplay;
        // check the direction
        if (direction == "ingress") {
            areaChartPointsToDisplay = chartsData["Total"].selectedWindowPoints.inputPoints;
            pieChartPercToDisplay = makePieChartData(chartsData, direction);
        } else if (direction == "egress") {
            areaChartPointsToDisplay = chartsData["Total"].selectedWindowPoints.outputPoints;
            pieChartPercToDisplay = makePieChartData(chartsData, direction);
        } else {
            areaChartPointsToDisplay = chartsData["Total"].selectedWindowPoints.totalPoints;
            pieChartPercToDisplay = makePieChartData(chartsData, direction);
        }

        // decide the smoothing variable (WE DONT NEED THIS FUNCTION NOW)
        // setSmoothingVariables(areaChartPointsToDisplay.length, "mainChart");

        var coeff = 1000 * 60 * 5;
        var currentDate = new Date();
        // round time to last five hours
        var lastFiveMinsRoundedTime = new Date(Math.floor(currentDate.getTime()
                / coeff)
                * coeff).getTime();
        var toDate = lastFiveMinsRoundedTime;
        var configObj = getChartsConfig(selectedZoomValue);
        var period = configObj.period;
        var tickInterval = configObj.tickInterval;
        var interval = configObj.interval;
        selectedAverageValue = configObj.smoothAverageValue;
        var fromDate = toDate - period;
        var dates = generateDates(fromDate, period, interval);
        var bandwidthChartData = genereteBandwidthChartData(dates,
                getAveragePointsArray(areaChartPointsToDisplay,
                        selectedAverageValue));

        if (mainCharts[bandwidthAreaChartId] == undefined) {

            mainCharts[bandwidthAreaChartId] = generateBandwidthAreaChart(
                    bandwidthChartData, {
                        renderTo: bandwidthAreaChartId,
                        type: "area"
                    });
            mainCharts[PieChartId] = generatePieChart(pieChartPercToDisplay, {
                renderTo: PieChartId,
                type: "pie"
            });
        } else {
            updateSeries(bandwidthAreaChartId, bandwidthChartData);
            updateSeries(PieChartId, pieChartPercToDisplay);
        }
    }
    ;

    /**
     * function to smooth chart data by taking avarage point for each set of
     * points
     *
     * @param originalArray
     * @param averageValue
     *            number of points in each set for avarage taking
     * @returns smoother array
     */
    function getAveragePointsArray(originalArray, averageValue) {
        if (averageValue == 1){
            return originalArray;
    }
        var updatedArray = [];
        var indexToSplice = averageValue;
        var sum;
        var i;
        // get average of points
        for (i = 0; indexToSplice < originalArray.length; i++) {
            average = 0;
            sum = 0;
            for (j = indexToSplice - averageValue; j < indexToSplice; j++) {
                sum += originalArray[j];
            }
            updatedArray.push(sum / averageValue);
            indexToSplice += averageValue;
        }
        sum = 0;
        // remaining values
        for (i = indexToSplice - averageValue; i < originalArray.length; i++) {
            sum += originalArray[i];
        }
        // the average of them
        updatedArray.push(sum / (originalArray.length - (indexToSplice - averageValue)));
        return updatedArray;
    }

    /**
     * displays the data in table
     */
    function displayDataInTable() {
        //consoleLogMethodDetailsStart("avcFuture.js", "displayDataInTable()");
        gridObj = $("#" + gridId);
        $(gridObj)
                .jqGrid(
                        {
                            data: dataForGridHashMap,
                            datatype: "local",
                            colModel: [{
                                    label: 'Protocal id',
            //label: $.i18n.prop('avcProtocol'),
                                    name: 'protocolNameId',
                                    title: false,
                                    hidden: true,
                                    key: true
                                }, {
                                    label: $.i18n.prop('avcTableApplication'),
                                    name: 'pName',
                                    resizable: false,
                                    title: false,
                                    width: 350
                                }, {
                                    label: $.i18n.prop('avcTableDest'),
                                    name: 'dest',
                                    resizable: false,
                                    title: false,
                                    width: 220
                                }, {
                                    label: $.i18n.prop('avcTableProtocal'),
                                    name: 'protocol',
                                    resizable: false,
                                    title: false,
                                    width: 90
                                }, {
                                    label: $.i18n.prop('avcTablePort'),
                                    name: 'port',
                                    resizable: false,
                                    title: false
                                }, {
                                    label: $.i18n.prop('avcTableUsagePercent'),
                                    name: 'usage',
                                    sortable: true,
                                    sorttype: "number",
                                    title: false,
                                    resizable: false,
                                    width: 110
                                }, {
                                    label: $.i18n.prop('avcTableUsage'),
                                    name: 'total',
                                    sortable: true,
                                    width: 110,
                                    sortfunc: function (a, b, direction) {
                                        return customSortForSizes(a, b, direction);
                                    },
                                    resizable: false,
                                    title: false
                                }, {
                                    label: $.i18n.prop('avcTableReceived'),
                                    name: 'input',
                                    resizable: false,
                                    width: 112,
                                    sortable: true,
                                    sortfunc: function (a, b, direction) {
                                        return customSortForSizes(a, b, direction);
                                    },
                                    title: false
                                }, {
                                    label: $.i18n.prop('avcTableSent'),
                                    name: 'output',
                                    resizable: false,
                                    width: 110,
                                    sortable: true,
                                    sortfunc: function (a, b, direction) {
                                        return customSortForSizes(a, b, direction);
                                    },
                                    title: false
                                }, {
                                    label: $.i18n.prop('avcTableActivity'),
                                    name: 'trending',
                                    resizable: true,
                                    sortable: true,
                                    sorttype: function (cell, obj) {
                                        return obj.trendingValue;
                                    },
                                    title: false,
                                    width: 80
                                }],
                            rowNum: maxRowsPerPage,
                            autowidth: true,
                            shrinkToFit: true,
                            scrollOffset: 0,
                            multiselect: true,
                            multiselectWidth: 30,
                            height: 180,
                            ignoreCase: true,
                            loadComplete: function () {
                                // add colors to odd and even rows
                                $(this).find(">tbody>tr.jqgrow:odd").addClass(
                                        "myAltRowClassEven");
                                $(this).find(">tbody>tr.jqgrow:even").addClass(
                                        "myAltRowClassOdd");

                                jQuery("#jqGridPager").html('');
                                var dataTableLength=dataForGridHashMap.length;
                                var maxPerPage=$(gridObj).jqGrid("getGridParam","rowNum");
                                var pageCount=0;
                                if(maxPerPage!==dataTableLength){
                                    pageCount = Math.ceil(dataTableLength/maxPerPage);
                                }else{
                                    pageCount = Math.ceil(dataTableLength/maxRowsPerPage);
                                }
                                if (pageCount > 1) {
                                    var custom_pager = buildGroupedPagination(
                                            parseInt(this.p.page), pageCount,
                                            gridId,dataTableLength);

                                    jQuery("#jqGridPager").append(custom_pager);
                                    $(".tableContainer .pagerNumbers")
                                            .click(
                                                    function () {
                                                        $(
                                                                ".tableContainer .pagerNumbers.selected")
                                                                .removeClass(
                                                                        "selected");
                                                        $(this).addClass(
                                                                "selected");
                                                    });
                                }
                                // on hover function change background color and
                                // show chart
                                $(
                                        "#avcDashboardPage .pieChartContainer .pieChartTitle-value")
                                        .text(
                                                (jQuery(gridObj).jqGrid(
                                                        'getGridParam',
                                                        'records'))
                                                //+ " Discovered");
            + $.i18n.prop("avcDiscovered"));
                                $('.jqgrow')
                                        .mouseover(
                                                function (e) {
                                                    var rowId = $(this).attr(
                                                            'id');
                                                    var ret = jQuery(gridObj)
                                                            .jqGrid(
                                                                    'getRowData',
                                                                    rowId);
                                                    $(this)[0].style
                                                            .setProperty(
                                                                    'background',
                                                                    applicationPointsHashMap[ret.protocolNameId].color,
                                                                    'important');
                                                    $(this)[0].style
                                                            .setProperty(
                                                                    'color',
                                                                    "#FFFFFF",
                                                                    'important');
                                                    showBandwidthOnChart(ret.protocolNameId);

                                                });
                                // when mouse out remove the partial series
                                $('.jqgrow').mouseout(function (e) {
                                    // var rowId = $(this).attr('id');
                                    // var ret = jQuery(gridObj)
                                    // .jqGrid('getRowData',
                                    // rowId);
                                    $(this).attr("style", "");
                                    // var chart =
                                    // mainCharts[bandwidthAreaChartId].mainChart;
                                    // if (chart.series[1] != undefined)
                                    // chart.series[1]
                                    // .remove(true);
                                    // var index = $
                                    // .map(
                                    // dataForGridHashMap,
                                    // function(obj,
                                    // index) {
                                    // if (obj.protocolNameId ==
                                    // ret.protocolNameId) {
                                    // return index;
                                    // }
                                    // });
                                    // chart.series[0].onMouseOut();
                                });
                                var chart = mainCharts[bandwidthAreaChartId];
                                $("#trafficTable").mouseleave(
                                        function () {
                                            // data1 will be hidden.
                                            // chart.hide('data2');
                                            mainCharts[bandwidthAreaChartId]
                                                    .hide('data2');
                                            // chart.unload({
                                            // ids : [ 'data2' ]
                                            // });
                                        });
                                desableCheckBoxesForNotSuportBlocking();
                            },
                            onSelectRow: function (rowid) {
                                var row = $(this).getLocalRow(rowid);

                                var myIds = $(this).jqGrid('getGridParam', 'selarrrow');
                                if (myIds.length > 0) {
                                    $("#blockApp").removeProp("disabled");
                                    $("#infoIcon").hide();
                                 } else {
                                    $("#blockApp").prop("disabled", "disabled");
                                    $("#infoIcon").show();
                                }
                            },
                            onSelectAll: function (id, status) {

                                var size = id.length;
                                for (i = 0; i < size; i++) {
                                    var rowId = id[i];

                                    if (appListObj[rowId] == undefined) {
                                        jQuery("#jqg_trafficTable_" + rowId).removeAttr('checked');
                                    }
                                }
                                var myIds = $(this).jqGrid('getGridParam', 'selarrrow');
                                if (myIds.length > 0) {
                                    $("#blockApp").removeProp("disabled");
                                    $("#infoIcon").hide();
                                } else {
                                    $("#blockApp").prop("disabled", "disabled");
                                    $("#infoIcon").show();
                                }
                            },
                            pager: "#jqGridPager"
                            // ,
                            // afterInsertRow : function(rowid, rowdata, rowelem) {
                            // $($("#" + rowid).children()[0]).text('0');
                            // },
                        });
        // add tool tip on column 9 header (Trending column)
        // setTooltipsOnColumnHeader(gridObj, 9, "Activity based on the last
        // hour");
        //consoleLogMethodDetailsEnd("avcFuture.js", "displayDataInTable()");

    }

    /**
     * make custom sort for grid, that contains sizes or volumes (TB, GB, MB,
     * KB, B)
     *
     * @param size1
     *            the size of first element
     * @param size2
     *            the size of second element
     * @param direction
     *            the directin asc || desc
     * @return -1 if second size bigger || 1 if first size bigger
     */
    function convertAllInBytes(number,units){
        var conversionFactor=0;
        if(units=="b"){
            conversionFactor=1;
        }else if(units=="kb"){
            conversionFactor=1024;
        }else if(units=="mb"){
            conversionFactor=1048576;
        }else if(units=="gb"){
            conversionFactor=1073741824;
        }
        return Number(number)*conversionFactor;
    }
    function customSortForSizes(size1, size2, direction) {
        var unit1;
        var unit2;
        var value1;
        var value2;
        // get the units
        unit1 = size1.match(/[a-zA-z].*/g)[0];
        unit2 = size2.match(/[a-zA-z].*/g)[0];
        // get the values (numbers)
        var sizeValue1=size1.replace(unit1,"");
        var sizeValue2=size2.replace(unit2,"");
        value1 = convertAllInBytes(sizeValue1,unit1);//Number(size1.split(unit1)[0]);
        value2 = convertAllInBytes(sizeValue2,unit2);//Number(size2.split(unit2)[0]);
       // var sizes = ["TB", "GB", "MB", "KB", "B"];
       if (direction == 1) {
        if (value1 > value2) {

                return 1;
            }if (value1 == value2){
                return 0;
            }else {
                return -1;
            }
        } else{
            if (value1 > value2) {
                return -1;
            }if (value1 == value2){
                return 0;
            }else{
                return 1;
            }
        }
        // if it is the same units, compare values
//        if (unit1 == unit2) {
//            if (value1 > value2) {
//                // check direction
//                if (direction == -1)
//                    return -1;
//                else
//                    return 1;
//            } else {
//                if (direction == -1)
//                    return 1;
//                else
//                    return -1;
//            }
//        } else {
//            // if the units different, check the indexes and decide
//            if (sizes.indexOf(unit1) < sizes.indexOf(unit2))
//                if (direction == -1)
//                    return -1;
//                else
//                    return 1;
//            else if (direction == -1)
//                return 1;
//            else
//                return -1;
//        }
    }

    /**
     * function to add a tooltip on header column in a grid
     *
     * @param grid
     * @param iColumn
     *            (0 based column count)
     * @param text
     */
    function setTooltipsOnColumnHeader(grid, iColumn, text) {
        var thd = jQuery("thead:first", grid[0].grid.hDiv)[0];
        jQuery("tr.ui-jqgrid-labels th:eq(" + iColumn + ")", thd).attr("title",
                text);
    }

    ;

    /**
     * displays the chart of the application on the area chart
     *
     * @param id
     *            the id of the application
     */
    function showBandwidthOnChart(id) {

        if (id == "Other") {
            mainCharts[bandwidthAreaChartId].hide('data2');
            return;
        }

        // var chart = mainCharts[bandwidthAreaChartId].mainChart;
        // if other one exists, remove it
        // if (chart.series[1] != undefined)
        // chart.series[1].remove(true);
        var data = [];
        // check direction o know which points to get
        if (selectedDirection == "ingress") {
            data = applicationPointsHashMap[id].selectedWindowPoints.inputPoints;
        } else if (selectedDirection == "egress") {
            data = applicationPointsHashMap[id].selectedWindowPoints.outputPoints;
        } else {
            data = applicationPointsHashMap[id].selectedWindowPoints.totalPoints;
        }

        addSeries(bandwidthAreaChartId, getAveragePointsArray(data,
                selectedAverageValue), applicationPointsHashMap[id].color);
    }

    /**
     * function to sort HashMap data array based on totalValue
     *
     * @param obj
     * @param direction
     *            ingress || egress || both
     * @returns {Array} return sorted Keys array to be used with the hashMap
     */
    function bySortedValue(obj, direction) {
        var tuples = [];
        var sortedKeysResult = [];

        for (var key in obj) {
            if (typeof obj[key] != "undefined"){
                tuples.push([key, obj[key]]);
            }
        }

        tuples.sort(function (b, a) {
            a = a[1];
            b = b[1];
            if (direction == "ingress") {
                return parseFloat(a.selectedWindowPoints.inputTotal)
                        - parseFloat(b.selectedWindowPoints.inputTotal);

            } else if (direction == "egress") {
                return parseFloat(a.selectedWindowPoints.outputTotal)
                        - parseFloat(b.selectedWindowPoints.outputTotal);
            } else {
                return parseFloat(a.selectedWindowPoints.outputTotal
                        + a.selectedWindowPoints.inputTotal)
                        - parseFloat(b.selectedWindowPoints.outputTotal
                                + b.selectedWindowPoints.inputTotal);
            }

        });

        for (var i = 0; i < tuples.length; i++) {
            var key = tuples[i][0];
            //var value = tuples[i][1];

            // do something with key and value
            sortedKeysResult.push(key);
            // sortedResult[key] = value;
        }
        return sortedKeysResult;
    }

    function isAVCInterface(interfaceName) {
        var isAvcInterface = true;
        try {
            var editInterfaceType;
            try {
                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName);
            } catch (error) {
                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName, true);
            }
            if (editInterfaceType == undefined) {
                //code
                editInterfaceType = deviceCommunicator.getInterfaceType(interfaceName, true);
            }

            //var startReg=new RegExp('^' + "SM", 'i');
            if (editInterfaceType == 6 || editInterfaceType == 5 ) {
                isAvcInterface = false;
            }
        } catch (error) {
            errorLogInConsole(error.message);
        }
        return isAvcInterface;

    }
    function requestAndDisplayInterfaces(myfunction) {

        interfaceObj = {};
        var arrayOfLines = interfaceText.match(/[^\r\n]+/g);
        var arrayLength = arrayOfLines.length;
        var htmlInterfaces = "<option id=\"interfacesComboBoxOptionAll\" value='all'>"+$.i18n.prop("avcAllInterfaces")+"</option>";
        //var selected = " selected=\"selected\"";

        // on load we select interface with nbar word below it.
        var counter = 0;
        var indexOfNBARInteface = 1;
        var isNBARInterfaceFound = false;

        if (arrayLength >= 0) {
            for (var i = 0; i < arrayLength; i++) {
                // if it contains "interface"
                var isNbarDiscovary = -1;

                if ((arrayLength - 1) > i) {
                    isNbarDiscovary = arrayOfLines[i + 1].indexOf("ip nbar protocol-discovery");
                }
                if (arrayOfLines[i].indexOf("interface ") > -1) {
                    // if it contains "alias" then don't add it,
                    // continue
                    var elements = arrayOfLines[i].split(" ");
                    var name = elements[1].trim();

                    if (arrayOfLines[i].indexOf("alias") > -1){
                        continue;
                    }
                    // if it is not nbar ignore it

                    if (isNbarDiscovary == -1) {
                        var isAvcInt = isAVCInterface(name);
                        if (isAvcInt) {
                            interfaceObj[name] = false;
                        }


                        continue;
                    }

                    // split on space
                    interfaceObj[name] = true;
                    // add an option to the select

                    htmlInterfaces += "<option value=\""
                            + elements[1].trim() + "\">"
                            + elements[1].trim() + "</option>";

                    counter++;

                    // check if this is the first nbar interface

                    if (isNbarDiscovary > -1) {
                        indexOfNBARInteface = counter;
                        isNBARInterfaceFound = true;
                    }


                }
            }
        }
        // append the interfaces to the select
        $('#interfacesComboBox').empty();

        $('#interfacesComboBox').append(htmlInterfaces);
        // select first interface
        // var selectedIntTmp = $('#interfacesComboBox').children()[1];
        //$(selectedIntTmp).prop("selected", "true");
        // $("#interfacesComboBox option:first").attr('selected','selected');
        // assign the global variable
        selectedInterface = "all";//$(selectedIntTmp).text();

        // put the change listener to change the selectedInterface
        // variable and
        // change charts and grid for other interface
        loader("remove", "controlPanelDiv");

        if (typeof myfunction != "undefined") {
            myfunction.call();
        }
        $('#interfacesComboBox').change(function () {
            selectedInterface = $('#interfacesComboBox').val();
            addRefreshing("#refreshIcon");
            httpPai("byteCountWindow48h.shtml");
        });




    }
    function formApplicationPointHashMap(byteCountWindowsResponse) {
        applicationPointsHashMap = [];
        if (selectedInterface === "all") {
            // clear all data

            // loop over all interfaces, request data for them and
            // aggreggate
            var listOfInterfaces = $("#interfacesComboBox").children();
            for (var i = 0; i < listOfInterfaces.length; i++) {

                if ($(listOfInterfaces[i]).attr("value") == "all"){
                    continue;
                }

                var interfaceName = $(listOfInterfaces[i]).text();
                var interfaceApplicationsDataMap = makeProtocolDiscoveryHashMap(
                        byteCountWindowsResponse, interfaceName);
                // loop over all applications and add them to main Map
                applicationPointsHashMap = agreggateTowMapsToOneMap(
                        applicationPointsHashMap,
                        interfaceApplicationsDataMap);

            }
            ;

        } else {

            applicationPointsHashMap = makeProtocolDiscoveryHashMap(byteCountWindowsResponse);
        }
    }
    /**
     * build page when selecting other interface, update the charts and grid
     * with new data
     */
    function otherInterfaceSelected() {
//             byteCountWindowsResponse="";
//            httpPai("byteCountWindow48h.shtml");
//
//            if(byteCountWindowsResponse==""){
//                setTimeout(function () {
//                    otherInterfaceSelected();
//                }, 1000);
//             return;
//            }

//            if (selectedInterface === "all") {
//                // clear all data
//                applicationPointsHashMap = [];
//                // loop over all interfaces, request data for them and
//                // aggreggate
//                var listOfInterfaces = $("#interfacesComboBox").children();
//                for (var i = 0; i < listOfInterfaces.length; i++) {
//
//                    if ($(listOfInterfaces[i]).attr("value") == "all")
//                        continue;
//
//                    var interfaceName = $(listOfInterfaces[i]).text();
//                    var interfaceApplicationsDataMap = makeProtocolDiscoveryHashMap(
//                            byteCountWindowsResponse, interfaceName);
//                    // loop over all applications and add them to main Map
//                    applicationPointsHashMap = agreggateTowMapsToOneMap(
//                            applicationPointsHashMap,
//                            interfaceApplicationsDataMap);
//
//                }
//                ;
//
//            } else {
//                // generate the hashmap
//                applicationPointsHashMap = makeProtocolDiscoveryHashMap(byteCountWindowsResponse);
//            }
        formApplicationPointHashMap(byteCountWindowsResponse);
        // int hte data for the grid

        //initDataForGrid(applicationPointsHashMap);

        // take effect of selectedZoomValue
        refreshZoomValue(selectedZoomValue);

        // display the data on the charts, pie and bandwidth charts
      //  displayDataInCharts(applicationPointsHashMap, selectedZoomValue,
        //        selectedDirection);
        // display the data on the grid
      //  displayDataInTable();
        // remove the old timer
        clearInterval(intervalId);
        // make new timer
        intervalId = setInterval(function () {
            requestNewPoint();
        }, 5 * 60 * 1000);


        // request the new byte count window for the selected interface

//        httpPai("byteCountWindow48h.shtml", function (response) {
//            byteCountWindowsResponse = response;
//            onReadyFunction.call();
//
//        }, function () {
//            // if faild, after 0.5 second re-request again
//            setTimeout(function () {
//                httpPai("byteCountWindow48h.shtml", function (response) {
//                    byteCountWindowsResponse = response;
//                    onReadyFunction.call();
//
//                }, function () {
//                    // if faild, after 0.5 second re-request again
//                    setTimeout(function () {
//                        httpPai("byteCountWindow48h.shtml", function (response) {
//                            byteCountWindowsResponse = response;
//                            onReadyFunction.call();
//
//                        }, undefined);
//                    }, 500);
//                });
//            }, 500);
//
//        });
    }

    /**
     * function to combine to map arrays in one map array
     *
     * @param originalMap
     * @param map
     * @returns generated map
     */
    function agreggateTowMapsToOneMap(originalMap, map) {

        for (var protocolName in map) {

            if (typeof originalMap[protocolName] == "undefined") {
                originalMap[protocolName] = map[protocolName];
            } else {
                // add input points
                originalMap[protocolName].inputPoints = sumTwoArrays(
                        originalMap[protocolName].inputPoints,
                        map[protocolName].inputPoints);
                // add total input
                originalMap[protocolName].inputTotal = originalMap[protocolName].inputTotal
                        + map[protocolName].inputTotal;

                // add output points
                originalMap[protocolName].outputPoints = sumTwoArrays(
                        originalMap[protocolName].outputPoints,
                        map[protocolName].outputPoints);
                // add total output
                originalMap[protocolName].outputTotal = originalMap[protocolName].outputTotal
                        + map[protocolName].outputTotal;

                // add both points
                originalMap[protocolName].totalPoints = sumTwoArrays(
                        originalMap[protocolName].totalPoints,
                        map[protocolName].totalPoints);

                originalMap[protocolName].selectedWindowPoints = [];
                var protocolData = originalMap[protocolName];
                // save reference for selected window points ,, by default 48h
                originalMap[protocolName].selectedWindowPoints = $.extend(true,
                        {}, protocolData);
            }
        }

        return originalMap;

    }

    /**
     * function to sum the values of two arrays
     *
     * @param array1
     * @param array2
     * @returns generated Array
     */
    function sumTwoArrays(array1, array2) {

        for (var i = 0; i < array1.length && i < array2.length; i++) {
            array1[i] = array1[i] + array2[i];
        }
        return array1;
    }

    /**
     * function to get chart configurations based on selected zoom value
     *
     * @param zoomValue
     *            2 || 24 || 48
     *
     * @returns cofigObj { period :'total period of chart', tickInterval :
     *          'interval between xAxis tick ', interval: 'interval between
     *          points in chart' , smoothAverageValue: 'number of points used to
     *          smooth chart'}
     */
    function getChartsConfig(zoomValue) {
        var ret = {};

        var FIFE_MIN = 5 * 60 * 1000;
        switch (zoomValue) {
            case 2:
                ret.period = 60 * 60 * 2 * 1000;
                // two hours
                ret.tickInterval = 60 * 10 * 1000;
                // xAxis tick each 10 minutes
                ret.interval = FIFE_MIN;
                // interval between points in chart
                ret.smoothAverageValue = 1;
                // number of points used to smooth chart
                break;
            case 24:
                ret.period = 60 * 60 * 24 * 1 * 1000;
                // one day
                ret.tickInterval = 60 * 60 * 2 * 1000;
                // xAxis tick each 2 hour
                ret.interval = FIFE_MIN * AVAG_VALUE_24H;
                ret.smoothAverageValue = AVAG_VALUE_24H;
                break;
            case 48:
                ret.period = 60 * 60 * 24 * 2 * 1000;
                // two days
                ret.tickInterval = 60 * 60 * 4 * 1000;
                // xAxis tick each 4 hour
                ret.interval = FIFE_MIN * AVAG_VALUE_48H;
                ret.smoothAverageValue = AVAG_VALUE_48H;
                break;
        }

        return ret;
    }

    /**
     * function to build pager for data grid
     */
    function buildGroupedPagination(current_page, total_pages, gridId,dataTableLength) {

        //var strPages = "";
        var intMaxPages = 0;
        var intMinPages = 0;
        var intPaginI = 0;
        var li;
        var link;

        var myPageRefresh = function (e) {
            $(".tableContainer .pagerNumbers#current_page").attr("id", "");
            var newPage = $(e.target).text();
            $(e.target).parent().attr("id", "current_page");

            gridObj.setGridParam({
                rowNum: maxRowsPerPage
            });
            gridObj.setGridParam({
                page: newPage
            });
            $("#" + gridId).trigger("reloadGrid");
            e.preventDefault();
        };

        var viewTotal = function (e) {
            // remove the currentpage id from the link it is currently on
            $(".tableContainer .pagerNumbers#current_page").attr("id", "");
            // add the currentpage id to the 'All' link
            $(e.target).parent().attr("id", "current_page");

             gridObj.setGridParam({
                page: 1
            });

            gridObj
                    .setGridParam({
                        // set the rowNum parameter to display the results in 1
                        // page
                        rowNum: dataTableLength
                        //,
//                        loadComplete: function () {
//                            // add colors to odd and even rows
//                            $(this).find(">tbody>tr.jqgrow:odd").addClass(
//                                    "myAltRowClassEven");
//                            $(this).find(">tbody>tr.jqgrow:even").addClass(
//                                    "myAltRowClassOdd");
//
//                            $(".tableContainer .pagerNumbers")
//                                    .click(
//                                            function () {
//                                                $(
//                                                        ".tableContainer .pagerNumbers.selected")
//                                                        .removeClass("selected");
//                                                $(this).addClass("selected");
//                                            });
//
//                            // on hover function change background color and
//                            // show chart
//                            $('.jqgrow')
//                                    .mouseover(
//                                            function (e) {
//                                                var rowId = $(this).attr('id');
//                                                var ret = jQuery(gridObj)
//                                                        .jqGrid('getRowData',
//                                                                rowId);
//                                                $(this)[0].style
//                                                        .setProperty(
//                                                                'background',
//                                                                applicationPointsHashMap[ret.protocolNameId].color,
//                                                                'important');
//                                                $(this)[0].style.setProperty(
//                                                        'color', "#FFFFFF",
//                                                        'important');
//                                                showBandwidthOnChart(ret.protocolNameId);
//
//                                            });
//                            // when mouse out remove the partial series
//                            $('.jqgrow').mouseout(function (e) {
//                                $(this).attr("style", "");
//                            });
//                            // var chart = mainCharts[bandwidthAreaChartId];
//                            $("#trafficTable").mouseleave(function () {
//                                mainCharts[bandwidthAreaChartId].hide('data2');
//                            });
//
//                        }
                    });

            $("#" + gridId).trigger("reloadGrid");
            e.preventDefault();
        };

        // var custom_pager = $('<ul>', {
        // id : 'custom_pager',
        // class : 'custom_pager'
        // });
        var custom_pager = $('<ul id="custom_pager" class="custom_pager">');

        if (total_pages > 10) {
            if (total_pages > 3) {
                intMaxPages = 3;
            } else {
                intMaxPages = total_pages;
            }

            for (intPaginI = 1; intPaginI <= intMaxPages; intPaginI++) {
                link = jQuery('<a>', {
                    href: 'javascript:void(0);',
                    click: myPageRefresh
                });
                link.text(String(intPaginI) + "  " + "|");

                if (intPaginI == current_page) {
                    current = 'current_page';
                } else {
                    current = '';
                }

                li = jQuery('<div>', {
                    id: current
                }).append(link).addClass("pagerNumbers");

                jQuery(custom_pager).append(li);
            }

            if (total_pages > 3) {
                if ((current_page > 1) && (current_page < total_pages)) {
                    if (current_page > 5) {
                        li = jQuery('<div>', {
                            'class': 'pageMiddle'
                        }).append('...').addClass("pagerNumbers");
                        jQuery(custom_pager).append(li);
                    }

                    if (current_page > 4) {
                        intMinPages = current_page;
                    } else {
                        intMinPages = 5;
                    }

                    if (current_page < total_pages - 4) {
                        intMaxPages = current_page;
                    } else {
                        intMaxPages = total_pages - 4;
                    }

                    for (intPaginI = intMinPages - 1; intPaginI <= intMaxPages + 1; intPaginI++) {
                        link = jQuery('<a>', {
                            href: 'javascript:void(0);',
                            click: myPageRefresh
                        });
                        link.text(String(intPaginI) + "  " + "|");

                        if (intPaginI == current_page) {
                            current = 'current_page';
                        } else {
                            current = '';
                        }

                        li = jQuery('<div>', {
                            id: current
                        }).append(link).addClass("pagerNumbers");

                        jQuery(custom_pager).append(li);
                    }

                    if (current_page < total_pages - 4) {
                        li = jQuery('<div>', {
                            'class': 'pageMiddle'
                        }).append('...').addClass("pagerNumbers");
                        jQuery(custom_pager).append(li);
                    }
                } else {
                    li = jQuery('<div>', {
                        'class': 'pageMiddle'
                    }).append('...').addClass("pagerNumbers");
                    jQuery(custom_pager).append(li);
                }

                for (intPaginI = total_pages - 2; intPaginI <= total_pages; intPaginI++) {
                    link = jQuery('<a>', {
                        href: 'javascript:void(0);',
                        click: myPageRefresh
                    });
                    link.text(String(intPaginI) + "  " + "|");

                    if (intPaginI == current_page) {
                        current = 'current_page';
                    } else {
                        current = '';
                    }

                    li = jQuery('<div>', {
                        id: current
                    }).append(link).addClass("pagerNumbers");

                    jQuery(custom_pager).append(li);
                }
            }
        } else {
            for (intPaginI = 1; intPaginI <= total_pages; intPaginI++) {
                link = jQuery('<a>', {
                    href: 'javascript:void(0);',
                    click: myPageRefresh
                });
                link.text(String(intPaginI) + "  " + "|");

                if (intPaginI == current_page) {
                    current = 'current_page';
                } else {
                    current = '';
                }

                li = jQuery('<div>', {
                    id: current
                }).append(link).addClass("pagerNumbers");

                jQuery(custom_pager).append(li);
            }
        }

        // ADD the 'ALL' link

        link = jQuery('<a>', {
            href: 'javascript:void(0);',
            click: viewTotal
                    // executes the viewTotal event when clicking on the link

        });
        //link.text("All" + "  " + "|");
        link.text($.i18n.prop("avcAll") + "  " + "|");

        li = jQuery('<div>', {
            id: ''
        }).append(link).addClass("pagerNumbers");
        jQuery(custom_pager).append(li);

        return custom_pager;
    }

    /**
     * add Series to chart
     *
     * @param chartId
     * @param data
     *            series array
     * @param color
     *
     * Copyright (c) 2015-2016 by Cisco Systems, Inc.
     */
    function addSeries(chartId, data, color) {
        // first item in the series shoud be its name
        var datesTemp = $.extend(true, [], data);
        datesTemp.unshift("data2");

        // load chart with new series
        mainCharts[chartId].load({
            columns: [datesTemp],
            type: 'area'
        });
        // set the color
        mainCharts[chartId].data.colors({
            data2: color
        });
        // hide legend
        mainCharts[chartId].legend.hide('data2');
        // show the second array in case it was hidden before
        mainCharts[chartId].show('data2');
    }

    /**
     * generate or update Pie chart with given data
     *
     * @param columns
     *            array of data points
     * @param options
     *            general drawing options
     * @returns chart
     */
    function generatePieChart(columns, options) {

        var colors = {};
        for (var i = 0; i < columns.length; i++) {
            colors[(columns[i])[0]] = (columns[i])[3];
        }

        var chart = c3
                .generate({
                    bindto: "#" + options.renderTo,
                    data: {
                        columns: columns,
                        type: options.type,
                        onmouseover: function (d) {
                            showBandwidthOnChart(d.name);
                        },
                        colors: colors,
                        order: null
                    },
                    legend: {
                        show: false
                    },
                    size: {
                        height: 215
                    },
                    pie: {
                        label: {
                            show: false
                        },
                        expand: true
                    },
                    tooltip: {
                        contents: function (d, defaultTitleFormat,
                                defaultValueFormat, color) {
                            var perc = (d[0].ratio * 100).toFixed(2);
                            var applicationName = d[0].name == "Other" ? d[0].name
                                    : applicationPointsHashMap[d[0].name].protocolFixedName;
                            return perc + "% " + applicationName;
                        }
                    }
                });
        $(".c3-chart-arcs").mouseleave(function () {
            mainCharts[bandwidthAreaChartId].hide('data2');

        });

        return chart;
    }

    /**
     * generate or update bandwidth area chart with given data
     *
     * @param columns
     *            array of data points
     * @param options
     *            general drawing options
     * @returns chart
     */
    function generateBandwidthAreaChart(columns, options) {
        var isFirstLableTime = true;
        var chart = c3
                .generate({
                    bindto: "#" + options.renderTo,
                    transition: {
                        duration: 0
                    },
                    padding: {
                        top: 5,
                        right: 8,
                        bottom: 0,
                        left: 65
                    },
                    data: {
                        x: 'xAxisArray',
                        columns: columns,
                        types: {
                            data1: options.type
                        },
                        colors: {
                            data1: "#35c2e9"
                        }

                    },
                    grid: {
                        x: {
                            show: false
                        },
                        y: {
                            show: true
                        }
                    },
                    size: {
                        height: 200
                    },
                    axis: {
                        x: {
                            localtime: true,
                            // If true, treat x value as
                            // localtime. If false, convert to UTC internally.
                            type: 'timeseries',
                            tick: {
                                outer: false,
                                fit: false,
                                format: function (x) {
                                    /*
                                     * if (isFirstLableTime) { isFirstLableTime =
                                     * false; return monthNames[x.getMonth()] + " " +
                                     * x.getDate(); }
                                     */
                                    if (x.getHours() == 0
                                            && x.getMinutes() == 0){
                                        return monthNames[x.getMonth()] + " "
                                                + x.getDate();
                                    }
                                    return x.getHours()
                                            + ":"
                                            + ((x.getMinutes() < 10 ? '0' : '') + x
                                                    .getMinutes());
                                },
                                // format : '%H:%M',
                                culling : {
                                    max: 12
                                }

                            }
                        },
                        y: {
                            tick: {
                                format: function (d) {
                                    var bandwidthValue = convertToBandwidthValue(d);
                                    var ret = formateValue(bandwidthValue,
                                            'bandwidth');
                                    return ret.toString();
                                },
                                count: 4
                            },
                            inner: false,
                            show: true

                        }
                    },
                    colors: {
                        data1: '#66D0ED'
                    },
                    legend: {
                        show: false
                    },
                    point: {
                        show: false
                    },
                    tooltip: {
                        contents: function (d, defaultTitleFormat,
                                defaultValueFormat, color) {
                            var format = d3.time.format('%b %d, %H:%M');
                            var labelDate = format(d[0].x);
                            var bandwidthValue = convertToBandwidthValue(d[0].value);
                            var ret = formateValue(bandwidthValue, 'bandwidth');
                            var x = labelDate + '<br>' + ret.toString();
                            return x;
                        }
                    },
                    // onresize: function () {isFirstLableTime = true; },
                    onrendered: function () {
                        isFirstLableTime = true;
                    }
                });

        return chart;
    }

    /**
     * update chart with new data
     */
    function updateSeries(chartId, data) {
        // gives errors when unload data (onMouseout from row in grid)
        // mainCharts[chartId] = mainCharts[chartId].destroy();
        if (chartId == bandwidthAreaChartId){
            mainCharts[chartId] = generateBandwidthAreaChart(data, {
                renderTo: chartId,
                type: "area"
            });
        }
        else {
            mainCharts[chartId] = generatePieChart(data, {
                renderTo: chartId,
                type: "pie"
            });
        }
    }

    /**
     * generate final data array for chart
     *
     * @param dates
     *            arrayDates
     * @param points
     *            values array
     * @returns {columns Array}
     */
    function genereteBandwidthChartData(dates, points) {
        // x axis dates array should start with item 'x'
        var datesTemp = $.extend(true, [], dates);
        datesTemp.unshift('xAxisArray');
        // any values array should start with dataIndex
        var pointsTemp = $.extend(true, [], points);
        pointsTemp.unshift('data1');

        return [datesTemp, pointsTemp];
    }

    /**
     * generate the data for the pie chart
     *
     * @param dataArray
     *            array of applications
     * @param direction
     *            the direction of the charts
     * @returns {Array} array for the pie chart
     */
    function makePieChartData(dataArray, direction) {
        var data = [];
        var totalValue = 0;
        var sammationOfApps = 0;
        // sort dataArray based on direction
        var sortedKeyDataArray = bySortedValue(dataArray, direction);

        for (var i = 0; i < sortedKeyDataArray.length; i++) {
            var application = sortedKeyDataArray[i];
            var color = colorArray[i % colorArray.length];
            dataArray[application].color = color;
            var pointArray;
            if (direction == "ingress") {
                if (application == "Total") {
                    totalValue = dataArray[application].selectedWindowPoints.inputTotal;
                    continue;
                } else {
                    if (dataArray[application].selectedWindowPoints.inputTotal
                            / dataArray["Total"].selectedWindowPoints.inputTotal > 0.005
                            && data.length < 39) {
                        sammationOfApps += dataArray[application].selectedWindowPoints.inputTotal;
                        pointArray = [];
                        pointArray.push(application);
                        // id
                        pointArray
                                .push(dataArray[application].protocolFixedName);
                        // name
                        pointArray
                                .push(dataArray[application].selectedWindowPoints.inputTotal);
                        // value
                        pointArray.push(color);
                        // color
                        data.push(pointArray);
                    }
                }
            } else if (direction == "egress") {
                if (application == "Total") {
                    totalValue = dataArray[application].selectedWindowPoints.outputTotal;
                } else {
                    if (dataArray[application].selectedWindowPoints.outputTotal
                            / dataArray["Total"].selectedWindowPoints.outputTotal > 0.005
                            && data.length < 39) {
                        sammationOfApps += dataArray[application].selectedWindowPoints.outputTotal;
                        pointArray = [];
                        pointArray.push(application);
                        // id
                        pointArray
                                .push(dataArray[application].protocolFixedName);
                        // name
                        pointArray
                                .push(dataArray[application].selectedWindowPoints.outputTotal);
                        // y
                        // value
                        pointArray.push(color);
                        // color
                        data.push(pointArray);
                    }
                }
            } else {
                if (application == "Total") {
                    totalValue = dataArray[application].selectedWindowPoints.inputTotal
                            + dataArray[application].selectedWindowPoints.outputTotal;
                } else {
                    var inputTotal = dataArray[application].selectedWindowPoints.inputTotal;
                    var outputTotal = dataArray[application].selectedWindowPoints.outputTotal;
                    if ((inputTotal + outputTotal)
                            / (dataArray["Total"].selectedWindowPoints.inputTotal + dataArray["Total"].selectedWindowPoints.outputTotal) > 0.005
                            && data.length < 39) {
                        sammationOfApps += (inputTotal + outputTotal);
                        pointArray = [];
                        pointArray.push(application);
                        // id
                        pointArray
                                .push(dataArray[application].protocolFixedName);
                        // name
                        pointArray.push(inputTotal + outputTotal);
                        // y value
                        pointArray.push(color);
                        // color
                        data.push(pointArray);
                    }
                }
            }

        }

        // other point
        var otherPoint = [];
        otherPoint.push("Other");
        otherPoint.push("Other");
        otherPoint.push(totalValue - sammationOfApps);
        otherPoint.push("#3c3c3c");
        data.push(otherPoint);
        return data;
    }

    /**
     * this class has general functions used all over the project
     */

    /**
     * function to convert byte count value to bandwidth value (bit per second)
     *
     * @param countValue
     *            {int} byte count value
     * @param interval
     *            {int} interval between each two points in seconds
     */
    function convertToBandwidthValue(countValue, interval) {

        if (typeof interval == 'undefined') {
            interval = getChartsConfig(selectedZoomValue).interval;
        }

        return (countValue * 8) / (interval / 1000);
    }

    /**
     * function to convert bandwidth value (bps to appropriate unit value Mbps ,
     * Kbps ..)
     *
     * @param value
     *            bps value
     * @param type
     *            "bandwidth" || "volume"
     * @return obj { value: , unit : }
     *
     */
    function formateValue(mValue, type) {

        var DECIMAL_NUM = 0;

        var value = Math.abs(mValue);
        // Ignore type case sensitivity.
        type = type.toLowerCase();
        var ret = null;

        if (value > 1000000000000000) {
            // Peta
            if (type == 'bandwidth') {
                ret = getValueAsObject((value / 1000000000000000)
                        .toFixed(DECIMAL_NUM), "Pbps");
            } else if (type === 'volume') {
                ret = getValueAsObject((value / 1125899906842624)
                        .toFixed(DECIMAL_NUM), "PB");
            }
        } else if (value > 1000000000000) {
            // Tera
            if (type == 'bandwidth') {
                ret = getValueAsObject((value / 1000000000000)
                        .toFixed(DECIMAL_NUM), "Tbps");
            } else if (type === 'volume') {
                ret = getValueAsObject((value / 1099511627776)
                        .toFixed(DECIMAL_NUM), "TB");

            }
        } else if (value > 1000000000) {
            // Giga
            if (type == 'bandwidth') {
                ret = getValueAsObject((value / 1000000000)
                        .toFixed(DECIMAL_NUM), "Gbps");
            } else if (type === 'volume' || type === 'sitevolume') {
                ret = getValueAsObject((value / 1073741824)
                        .toFixed(DECIMAL_NUM), "GB");

            }
        } else if (value > 1000000) {
            // Mega
            if (type == 'bandwidth') {
                ret = getValueAsObject((value / 1000000).toFixed(DECIMAL_NUM),
                        "Mbps");
            } else if (type === 'volume' || type === 'sitevolume') {
                ret = getValueAsObject((value / 1048576).toFixed(DECIMAL_NUM),
                        "MB");

            }
        } else if (value > 1000) {
            // Kilo
            if (type == 'bandwidth') {
                ret = getValueAsObject((value / 1000).toFixed(DECIMAL_NUM),
                        "Kbps");
            } else if (type === 'volume' || type === 'sitevolume') {
                ret = getValueAsObject((value / 1024).toFixed(DECIMAL_NUM),
                        "KB");

            }
        } else {
            if (type == 'bandwidth') {
                ret = getValueAsObject(value ? parseFloat(value).toFixed(
                        DECIMAL_NUM) : value, "bps");
            } else if (type === 'volume' || type === 'sitevolume') {
                ret = getValueAsObject(value ? parseInt(value).toFixed(
                        DECIMAL_NUM) : value, "B");
            }
        }
        if (mValue < 0) {
            ret.value *= (-1);
        }
        return ret;
    }

    /**
     * Create a formatted value object with the following structure: <br> {<br>
     * value,<br>
     * unite<br> }
     *
     * @param {Object}
     *            mValue
     * @param {Object}
     *            mUnit
     */
    function getValueAsObject(mValue, mUnit) {
        return {
            value: mValue,
            unit: mUnit,
            toString: function () {
                return isNaN(mValue) || mValue == null ? 'N/A' : mValue + mUnit;
            }
        };
    }

    /**
     * generate the Dates array for spesific time period
     *
     * @param fromDate
     *            starting date
     * @param period
     *            full time period
     * @param interval
     *            interval between points
     * @returns {dates Array}
     */
    function generateDates(fromDate, period, interval) {
        var dates = [];
        for (var i = fromDate; i < fromDate + period; i += interval) {
            dates.push(i);
        }
        return dates;
    }

//    /**
//     * process the responses to make hash-maps for them and initialize the data
//     * to display it to in the grid
//     *
//     * @param taxonomyResponse
//     *            the taxonomy response
//     * @param byteCountWindowsResponse
//     *            the byte count windows response
//     * @param customAutoLearnResponse
//     *            the custom auto learn response
//     * @param top100HostsResponse
//     *            the top 100 host response
//     *
//     * Copyright (c) 2015-2016 by Cisco Systems, Inc.
//     */
//    function processResponses(taxonomyResponse, byteCountWindowsResponse,
//            customAutoLearnResponse, top100HostsResponse) {
//
//        makeHashMapsFromResponses(taxonomyResponse, byteCountWindowsResponse,
//                customAutoLearnResponse, top100HostsResponse);
//        initDataForGrid(applicationPointsHashMap);
//    }

    /**
     * create the hashmaps for them
     *
     * @param taxonomyResponse
     *            the taxonomy response
     * @param byteCountWindowsResponse
     *            the byte count windows response
     * @param customAutoLearnResponse
     *            the custom auto learn response
     * @param top100HostsResponse
     *            the top 100 host response
     */
    function makeHashMapsFromResponses(taxonomyResponse,
            byteCountWindowsResponse, customAutoLearnResponse,
            top100HostsResponse) {
        makeTaxonomyHashMap(taxonomyResponse);
        //applicationPointsHashMap = makeProtocolDiscoveryHashMap(byteCountWindowsResponse);
        formApplicationPointHashMap(byteCountWindowsResponse);
        makeCustomAutoLearnHashMap(customAutoLearnResponse);
        makeTop100HostsHashMap(top100HostsResponse);
    }

    /**
     * make hashmap for the taxonomy response
     *
     * @param taxonomyResponse
     *            the response of the taxonomy
     */
    function makeTaxonomyHashMap(taxonomyResponse) {

        var protocol;
        var commonName;
        var name;
        var tcp;
        var udp;

        var arrayOfLines = taxonomyResponse.match(/[^\r\n]+/g);
        var arrayLength = arrayOfLines.length;

        for (var i = 0; i < arrayLength; i++) {
            arrayOfLines[i] = arrayOfLines[i].replace(/&#60;/g, "<");
            arrayOfLines[i] = arrayOfLines[i].replace(/&#62;/g, ">");
        }

        var match = "";
        var inProtocol = false;

        for (var i = 0; i < arrayLength; i++) {
            // search for "<protocol>"
            if (arrayOfLines[i].indexOf("<protocol>") > -1) {
                protocol = {};
                commonName = "";
                name = "";
                tcp = "";
                udp = "";

                continue;
            }
            // search for "<common-name>"
            if (arrayOfLines[i].indexOf("<common-name>") > -1) {
                var commonRegexp = /<common-name>(.*)<\/common-name>/g;
                match = commonRegexp.exec(arrayOfLines[i]);
                commonName = match[1];
                continue;
            }
            // search for "<name>"
            if ((arrayOfLines[i].indexOf("<name>") > -1) && (!inProtocol)) {
                var nameRegexp = /<name>(.*)<\/name>/g;
                match = nameRegexp.exec(arrayOfLines[i]);
                name = match[1].trim();
                inProtocol = true;
                continue;
            }
            // search for "<tcp>"
            if (arrayOfLines[i].indexOf("<tcp>") > -1) {
                var tcpRegexp = /<tcp>(.*)<\/tcp>/g;
                match = tcpRegexp.exec(arrayOfLines[i]);
                tcp = match[1];
                continue;
            }
            // search for "<udp>"
            if (arrayOfLines[i].indexOf("<udp>") > -1) {
                var udpRegexp = /<udp>(.*)<\/udp>/g;
                match = udpRegexp.exec(arrayOfLines[i]);
                udp = match[1];
                continue;
            }
            // search for "</protocol>"
            if (arrayOfLines[i].indexOf("</protocol>") > -1) {
                // put the dat in it
                protocol.commonName = commonName;

                protocol.name = name;
                protocol.tcp = tcp;
                protocol.udp = udp;
                // add it to the hashmap
                taxHashMap[name] = protocol;
                inProtocol = false;

                continue;
            }
        }
    }

    /**
     * make hashmap for the customAutoLearn response
     *
     * @param customAutoLearnResponse
     *            the response of the customAutoLearn
     */
    function makeCustomAutoLearnHashMap(customAutoLearnResponse) {
        customHashMap = buildHashFromText(customAutoLearnResponse);
    }

    /**
     * make hashmap for the top100Hosts response
     *
     * @param top100HostsResponse
     *            the response of the top100Hosts
     */
    function makeTop100HostsHashMap(top100HostsResponse) {

        var topHostText = top100HostsResponse.substring(top100HostsResponse
                .lastIndexOf("----------"), top100HostsResponse.length);
        // split on \r\n
        var arrayOfLines = topHostText.match(/[^\r\n]+/g);
        var arrayLength = arrayOfLines.length;
        for (var i = 1; i < arrayLength; i++) {
            // search for |
            if (arrayOfLines[i].indexOf("|") > -1) {
                // split on |
                var element = arrayOfLines[i].split("|");
                var hostData = {};
                // add data
                hostData.host = element[1].trim();
                // hostData.byte = formateValue(element[2].trim(), "volume");
                hostData.type = element[8].trim();
                // add data to hashmap
                autoHash[hostData.host] = hostData;
            }
        }
    }

    /**
     * build the hashmap from text
     *
     * @param textToParse
     *            the text needed to parse it
     * @returns {Array} the hashmap generated
     */
    function buildHashFromText(textToParse) {
        var hashMap = [];
        var myRegexp = /([A-Za-z0-9-._:]+)\s+([0-9]+)\s+([0-9]+)/g;
        var match = "";
        var input;
        var output;

        while (match != null) {
            // search for name and numbers
            match = myRegexp.exec(textToParse);
            if (match == null) {
                continue;
            }
            var protocolData = {};
            // put data
            input = new Number(match[2]);
            output = new Number(match[3]);
            var total = new Number(input + output);
            protocolData.input = input;
            protocolData.output = output;
            protocolData.total = total;
            // add it to the hashmap
            hashMap[match[1]] = protocolData;
        }
        return hashMap;
    }

    /**
     * initialize the data to send it to the grid
     *
     * @param chartDataPointsArray
     *            the hashmap of applications and their points
     */
    function initDataForGrid(chartDataPointsArray) {

        var pName;
        var dest;
        var protocol;
        var port;
        dataForGridHashMap = [];

        // incase the selected interface has no data


        // for each app
        for (var protocolName in chartDataPointsArray) {
            // skip if this application is removed

            if (typeof chartDataPointsArray[protocolName] == "undefined"){
                continue;
            }
            // skip if doesn't have traffic
            if (chartDataPointsArray[protocolName].selectedWindowPoints.inputTotal
                    + chartDataPointsArray[protocolName].selectedWindowPoints.outputTotal == 0){
                continue;
            }
            var myRow = {};
            // skip if total
            if (protocolName == "Total") {
                continue;
            }

            pName = "-";
            dest = "-";
            protocol = "-";
            port = "-";
            // search in taxonomy hashmap to take the information from there
            // if it doesn't exist in taxonomy, search in autolearn
            if (taxHashMap[protocolName] == undefined) {
                if ((customHashMap[protocolName] != "")
                        && (customHashMap[protocolName] != undefined)) {

                    var fixProtocolName = "";
                    // fix the protocol name
                    if (protocolName.indexOf("-") == 0) {
                        fixProtocolName = protocolName.replace("-.", "*.");
                    } else {
                        fixProtocolName = protocolName;
                    }
                    // search in top100 hosts
                    if ((autoHash[fixProtocolName] != "")
                            && (autoHash[fixProtocolName] != undefined)) {
                        // fix name
                        if (autoHash[fixProtocolName].type == "http") {
                            pName = "Miscellaneous Web"; //$.i18n.prop("avcMiscWeb");
                        } else if (autoHash[fixProtocolName].type == "ssl") {
                            pName = "Miscellaneous Secure Web"; //$.i18n.prop("avcMiscSecureWeb");
                        }
                        // put destination
                        dest = protocolName;
                    } else {
                        // if not found in top100hosts
                        var found = false;
                        // search inside host element in top100host
                        for (var name in autoHash) {
                            if (autoHash[name].host.indexOf(protocolName) > -1) {
                                // fix name
                                if (autoHash[name].type == "http") {
                                    pName = "Miscellaneous Web";
                                } else if (autoHash[name].type == "ssl") {
                                    pName = "Miscellaneous Secure Web";
                                } else {
                                    pName = autoHash[name].type;
                                }
                                // set destination
                                dest = name;
                                found = true;
                                break;
                            }
                        }
                        // if didn't found put the name of it
                        if (!found) {
                            pName = protocolName;
                        }
                    }
                } else {
                    pName = protocolName;
                }

                protocol = "-";
                if (pName == "Miscellaneous Web"
                        || pName == "Miscellaneous Secure Web") {
                    protocol = "TCP";
                }
                if (pName == "http") {
                    port = 80;
                } else {
                    port = 443;
                }
                port = "-";

            } else {
                // if found in taxonomy
                // put name
                var sig = taxHashMap[protocolName];
                pName = sig.commonName;
                // put protocol and ports
                if ((sig.tcp != "") && ((sig.udp != ""))) {
                    protocol = "BOTH";
                    port = sig.tcp;
                } else {
                    if (sig.tcp != "") {
                        protocol = "TCP";
                        port = sig.tcp;
                    } else if (sig.udp != "") {
                        protocol = "UDP";
                        port = sig.udp;
                    } else {
                        protocol = "-";
                    }
                }
            }
            // fix name
            if ((pName == "HyperText Transfer Protocol") || (pName == "http")) {
                pName = "Miscellaneous Web";
            } else if (pName.toUpperCase() == "SSL") {
                pName = "Miscellaneous Secure Web";
            } else if (pName == "Real Time Messaging Protocol") {
                pName = "RTMP";
            } else if (pName == "remote access and desktop sharing") {
                pName = "Remote desktop sharing"; //$.i18n.prop("avcRemoteDesk");
            }
            // calculate usage
            var totalApplication=0;
            var totalAll=0;
            var usage=0;
            if (selectedDirection == "ingress" && chartDataPointsArray[protocolName].selectedWindowPoints.inputTotal>0 && chartDataPointsArray['Total'].selectedWindowPoints.inputTotal>0) {
                 totalApplication = chartDataPointsArray[protocolName].selectedWindowPoints.inputTotal;
                 totalAll = chartDataPointsArray['Total'].selectedWindowPoints.inputTotal;
            }else if(selectedDirection == "egress" && chartDataPointsArray[protocolName].selectedWindowPoints.outputTotal>0 && chartDataPointsArray['Total'].selectedWindowPoints.outputTotal>0){
                totalApplication = chartDataPointsArray[protocolName].selectedWindowPoints.outputTotal;
                totalAll = chartDataPointsArray['Total'].selectedWindowPoints.outputTotal;
            }else{
                 totalApplication = chartDataPointsArray[protocolName].selectedWindowPoints.inputTotal
                    + chartDataPointsArray[protocolName].selectedWindowPoints.outputTotal;
                    totalAll = chartDataPointsArray['Total'].selectedWindowPoints.inputTotal
                    + chartDataPointsArray['Total'].selectedWindowPoints.outputTotal;
            }


            usage = ((totalApplication / totalAll) * 100).toFixed(2);
            // put data
            var out = "";
            if (blockedPolocys[protocolName]) {
                out = "<span class='grouplabel grouplabel-success' title='"
                        + blockedPolocys[protocolName] + "'>Blocked</span>";

            }
            myRow.pName = pName + " " + out;

            myRow.dest = dest;
            myRow.protocol = protocol;
            if (port == ""){
                port = "-";
            }

            var allPorts = port.split(",");
            if (allPorts.length > 3) {
                port = allPorts[0] + ", " + allPorts[1] + ", " + allPorts[2]
                        + ", ...";
            } else if (allPorts.length > 1) {
                port = "";
                for (var k = 0; k < allPorts.length; k++) {
                    if (k == allPorts.length - 1){
                        port += allPorts[k];
                    }
                    else{
                        port += allPorts[k] + ", ";
                    }
                }
            }
            myRow.port = port;
            myRow.protocolNameId = protocolName;

            // trends data
            var totalPoints = chartDataPointsArray[protocolName].selectedWindowPoints.totalPoints;

            // calculate perc
            var trendsPercentage = calculateTrendsPercentage(totalPoints);

            var rowPercentage = parseFloat(trendsPercentage);
            // put arrow to down if it is negative, otherwise up arrow
            var trendArrowClass = rowPercentage < 0 ? "trendDown" : "trendUp";
             var trendFontAwesomeClass = rowPercentage < 0 ? "fa fa-arrow-right fa-rotate-90" : "fa fa-arrow-right fa-rotate-270";
            myRow.trendingValue = rowPercentage;
            rowPercentage = rowPercentage < 0 ? (-1 * rowPercentage)
                    : rowPercentage;
            // if 0 or not a number put -
            if (isNaN(rowPercentage) || rowPercentage == 0) {
                rowPercentage = "-";
                trendArrowClass = "";
                trendImage = "<div class='trendDashClass'>-</div>";
            } else {
                rowPercentage = rowPercentage.toFixed(2) + "%";
                trendImage = "<div class='" + trendArrowClass + "' ><em class='" + trendFontAwesomeClass + "'></em></div>";
            }
            // add divs for arrow and value

            // trendPercentage = "<div style='height:22px;margin-left:15px;'
            // class='trendPercentage'>"
            // + rowPercentage + "</div>";
            trendPercentage = "";
            myRow.trending = trendImage + trendPercentage;
            myRow.usage = usage;
            myRow.total = formateValue(totalApplication, 'volume').toString();
            // format the value to TB GB MB KB B
            myRow.output = formateValue(
                    chartDataPointsArray[protocolName].selectedWindowPoints.outputTotal,
                    'volume').toString();
            // format the value to TB GB MB KB B
            myRow.input = formateValue(
                    chartDataPointsArray[protocolName].selectedWindowPoints.inputTotal,
                    'volume').toString();

            myRow.id = chartDataPointsArray[protocolName].id;

//            if (selectedDirection == "ingress") {
//                if(chartDataPointsArray[protocolName].selectedWindowPoints.inputTotal/ chartDataPointsArray["Total"].selectedWindowPoints.inputTotal > 0.005){
//                    dataForGridHashMap.push(myRow);
//                    applicationPointsHashMap[protocolName].protocolFixedName = pName;
//                  }
//            }else if(selectedDirection == "egress"){
//                if (chartDataPointsArray[protocolName].selectedWindowPoints.outputTotal/ chartDataPointsArray["Total"].selectedWindowPoints.outputTotal > 0.005) {
//                        dataForGridHashMap.push(myRow);
//                        applicationPointsHashMap[protocolName].protocolFixedName = pName;
//                 }
//            }else{
//                dataForGridHashMap.push(myRow);
//                applicationPointsHashMap[protocolName].protocolFixedName = pName;
//            }
                dataForGridHashMap.push(myRow);
                applicationPointsHashMap[protocolName].protocolFixedName = pName;

        }
        // sort array based on usage
        dataForGridHashMap.sort(function (a, b) {
            return b.usage - a.usage;
        });

    }

    /**
     * calculate trends for each application totalSummationLastHour/
     * totalSummationInPreviousHour
     */
    function calculateTrendsPercentage(totalPoints) {
        // interval each five minutes
        // in the last hour we have 60/5 = 12 points
        var totalLastHour = 0;
        var totalPreviousHour = 0;
        if (totalPoints.length >= 24) {
            for (var i = totalPoints.length - 1; i > totalPoints.length - 1 - 24; i--) {
                // calculate sum of point last hour
                if (i > totalPoints.length - 1 - 12) {
                    totalLastHour += totalPoints[i];
                } else {
                    totalPreviousHour += totalPoints[i];
                }
            }
        } else {
  isEmptyBlock = true;
      }

        if (totalPreviousHour == 0) {
            return 0;
        }
        // return perc
        return ((totalLastHour - totalPreviousHour) / totalPreviousHour) * 100;

    }

    /**
     * get request from server
     *
     * @param theUrl
     *            url of server
     * @param isAsynchronous
     *            boolean
     *
     * @param onReadyFuncton
     * @returns
     */
    function httpPai(theUrl, onFailedFunction) {
        //consoleLogMethodDetailsStart("avcFuture.js", "httpPai()");


        try {
            var cliNames = {};
            if (theUrl.indexOf(",") >= 0) {
                var clisPages = theUrl.split(",");
                var size = clisPages.length;
                for (var i = 0; i < size; i++) {
                    var cliPage = clisPages[i];
                    var cli = cliObj[cliPage];
                    cliNames[cliPage] = cli;
                }
            } else {
                var cliPage = theUrl;
                var cli = cliObj[cliPage];
                cliNames[cliPage] = cli;
            }
            //  var cli = cliObj[theUrl];
            var cliJson = [{"name": "exeCli", "cliName": theUrl, "cliNamesAndCliObj": cliNames}];
            worker.postMessage(JSON.stringify(cliJson));


        } catch (error) {
            if (typeof onFailedFunction != "undefined") {
                onFailedFunction.call();
            }
        } finally {
            //consoleLogMethodDetailsEnd("avcFuture.js", "httpPai()");
        }

    }

    /**
     * make hashmap for the byte count window response
     *
     * @param byteCountWindowsResponse
     *            the response of the byte count window
     * @returns new applicationsDataMap
     */
    function makeProtocolDiscoveryHashMap(byteCountWindowsResponse,
            interfaceName) {

        // if parameter interface name is not gived , use the Global
        // selectedInterface
        if (typeof interfaceName == "undefined") {
            interfaceName = selectedInterface;
        }

        var colorIndex = 0;
        // split on interface to get data of selected interface
        var responseData = byteCountWindowsResponse.split(interfaceName
                + "\r\n");
        if (responseData[1] == undefined) {
            responseData = byteCountWindowsResponse.split(interfaceName
                    + " \r\n");
        }
        // in case the response does not contain the required inteface
        // clear old data
        var applicationsDataMap = [];
        var areaChart = mainCharts[bandwidthAreaChartId];
        var pieChart = mainCharts[PieChartId];
        if (interfaceName == "" || responseData.length <= 1) {

            if (areaChart != null && typeof areaChart != "undefined"){
                areaChart = areaChart.hide();
            }

            if (pieChart != null && typeof pieChart != "undefined"){
                pieChart = pieChart.hide();
            }

            return applicationsDataMap;
        }
        var responseData = responseData[1].split("Last clearing of");
        var responseData = responseData[1]
                .split("------------------------ ------------------------");
        responseData = responseData[1];
        // search for "\r\n"
        responseData = responseData.split('\r\n');

        var protocolData = {};
        // clear previous data
        applicationsDataMap = [];

        for (var i = 0; i < responseData.length; i++) {
            var line = responseData[i].trim();
            // skip empty rows
            if (line.length == 0) {
                continue;
            }
            // check if this line is protocol name or data
            if (line.split("  ").length != 1) {
                var result = line.split("  ");
                protocolData = {};
                // put the data
                protocolData.id = result[0];
                // no need for now
                protocolData.name = result[0];
                protocolData.inputPoints = result[result.length - 1].trim()
                        .split(",");
                protocolData.outputPoints = responseData[i + 1].trim().split(
                        ",");
                protocolData.color = colorArray[colorIndex % colorArray.length];
                protocolData = calculateTotalArray(protocolData);
                applicationsDataMap[protocolData.name] = protocolData;
                // save reference for selected window points ,, by default 48h
                applicationsDataMap[protocolData.name].selectedWindowPoints = $
                        .extend(true, {}, protocolData);
                colorIndex++;
            }
        }

        return applicationsDataMap;
    }

    /**
     * function to calculate the total points array from input and output points
     *
     * @param protocolData
     *            the points of the protocol
     */
    function calculateTotalArray(protocolData) {

        protocolData.inputTotal = 0;
        protocolData.outputTotal = 0;
        protocolData.totalPoints = [];

        for (var i = 0; i < protocolData.inputPoints.length; i++) {
            // put points
            protocolData.inputPoints[i] = parseInt(protocolData.inputPoints[i]);
            protocolData.outputPoints[i] = parseInt(protocolData.outputPoints[i]);
            // calculate total
            protocolData.totalPoints.push(protocolData.inputPoints[i]
                    + protocolData.outputPoints[i]);
            protocolData.inputTotal += protocolData.inputPoints[i];
            protocolData.outputTotal += protocolData.outputPoints[i];
        }

        return protocolData;
    }

    function blockPolicy(pleaseBlockMe, sourceZone, destinationZone) {
        blockPage("Loading");
        messagePost = [{
                "name": "createPolicy",
                "appList": pleaseBlockMe,
                "sourceZone": sourceZone,
                "destinationZone": destinationZone
            }];
        worker.postMessage(JSON.stringify(messagePost));

    }

    function checkAVCSaport() {
        var output = "";

        try {
            deviceCommunicator.getConfigCmdOutput("ip nbar ?");
        } catch (error) {
            output = error.errorResponse;
        }

        if (output !== "") {
            var lines = output.split("\n");
            var size = lines.length;
            for (var i = 0; i < size; i++) {
                var line = lines[i];
                var index = line.indexOf("http-services");
                if (index >= 0) {
                    return true;
                }
            }
        }
        return false;

    }
    function checkNbarServicesIsConfig() {
        if(isNbarServicesIsConfig){
            return ;
        };
        var output = "";

        try {
            outPut = deviceCommunicator.getExecCmdOutput("sh run | i ip nbar http-services");
        } catch (error) {
            errorLogInConsole(error.message);
        }

        if (output !== "") {
            isNbarServicesIsConfig= true;
        }

    }
    function getUpInterfaces(output) {

        if (output !== "") {
            var lines = output.split("\n");
            var size = lines.length;
            for (var i = 0; i < size; i++) {
                var line = lines[i];
                var spliteBySpace = line.split(/\s+/);
                interfaceStatus[spliteBySpace[0]] = true;
            }

        }

    }
    function validateBlockPolicyButton() {
        try{
        configureSecurityPolicy.getzone();

        var size = $("#sourceZone option").length;
        if (size < 2) {
            isZoneApirsAvailable = false;
        }else{
             isZoneApirsAvailable = true;
        }
    }catch(error){
        isZoneApirsAvailable = false;
    }
        var checkForSecurity = deviceCommunicator.getExecCmdOutput("show running-config | i nbar-classify");
        if (checkForSecurity == "") {
            isSecurityEnable = false;
        }else{
            isSecurityEnable = true;
        }
        //if (isZoneApirsAvailable == true && isSecurityEnable == true) {
        $("#infoIcon").show();
        //} else {
        //    $("#infoIcon").show();
        //}

    }
    function removeRefreshing() {
        $("#refreshIcon").show();

        $("#refreshIcon").removeClass("fa-spin");
        $("#refreshIcon").children().removeAttr('disabled');
       // $("#configAvc").children().removeAttr('disabled');
       $("#refreshIcon").addClass("settingClick");
       $("#configAvc").addClass("settingClick");
       $("#refreshCharts").bind("click",refreshCharts);
       $("#configAvc").bind("click",configAVCInterfaces);


    }
    function addRefreshing(obj) {
        $(obj).addClass("fa-spin");
        //$(obj).prop('disabled', true);
        $(obj).children().attr('disabled','disabled');
        $("#configAvc").children().attr('disabled','disabled');
        $("#refreshIcon").removeClass("settingClick");
        $("#configAvc").removeClass("settingClick");

         $("#refreshCharts").unbind("click",refreshCharts);
         $("#configAvc").unbind("click",configAVCInterfaces);

        // $("#configAvc").prop('disabled', true);

    }
    function receiveMessages() {
        //consoleLogMethodDetailsStart("avcFuture.js", "receiveMessages()");

        try {
            worker.onmessage = function (event) {

                var resp = JSON.parse(event.data);
                var cliName = resp[0]["cliName"];
                if (cliName == "byteCountWindow48h.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    byteCountWindowsResponse = outputObj["byteCountWindow48h.shtml"];
                    otherInterfaceSelected();
                    removeRefreshing();


                } else if (cliName == "byteCountWindow5Min.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    processRequestNewPoint(outputObj["byteCountWindow5Min.shtml"]);
                } else if (cliName == "customAutoLearn.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    customAutoLearnResponse = outputObj["customAutoLearn.shtml"];
                    makeCustomAutoLearnHashMap(customAutoLearnResponse);
                    requesttopHost100();

                } else if (cliName == "getTaxonomy.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    taxonomyResponse = outputObj["getTaxonomy.shtml"];
                } else if (cliName == "showInterfaces.shtml") {


                    var outputObj = resp[0]['outputObj'];
                   // taxonomyResponse = outputObj["getTaxonomy.shtml"];
                   // getUpInterfaces(outputObj["getUpInterfaces.shtml"]);
                    interfaceText = outputObj["showInterfaces.shtml"];
                    requestAndDisplayInterfaces(loadInterfaceByCheckCallComplete);


                } else if (cliName == "topHost100.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    top100HostsResponse = outputObj["topHost100.shtml"];
                    makeTop100HostsHashMap(top100HostsResponse);
                    requestNewPoint();

                } else if (cliName == "getUpInterfaces.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    getUpInterfaces(outputObj["getUpInterfaces.shtml"]);


                } else if (cliName == "getBlockedApps") {

                    var resp = resp[0]['output'];
                    initBlockPolacy(resp);
                    if (customAutoLearnResponse != "" && top100HostsResponse != "" && byteCountWindowsResponse != "") {
                        sendRequests();
                    }
                     $('#dialog-form-block-application').dialog("close");
                     $.unblockUI();
                } else if (resp[0]['createPolicyStatus'] == "sucess") {
                    var messagePost = [{
                            "name": "getBlockedApps"
                        }];
                    worker.postMessage(JSON.stringify(messagePost));
                } else if (cliName == "getTaxonomy.shtml,getUpInterfaces.shtml,showInterfaces.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    taxonomyResponse = outputObj["getTaxonomy.shtml"];
                    getUpInterfaces(outputObj["getUpInterfaces.shtml"]);
                    interfaceText = outputObj["showInterfaces.shtml"];
                    requestAndDisplayInterfaces(loadInterfaceByCheckCallComplete);

                } else if (cliName == "customAutoLearn.shtml,topHost100.shtml,byteCountWindow48h.shtml") {
                    var outputObj = resp[0]['outputObj'];
                    customAutoLearnResponse = outputObj["customAutoLearn.shtml"];
                    top100HostsResponse = outputObj["topHost100.shtml"];
                    byteCountWindowsResponse = outputObj["byteCountWindow48h.shtml"];
                    sendRequests();
                    isValiedBlockApplication();

                }



            };

        } catch (error) {
  isEmptyBlock = true;
      } finally {
            //consoleLogMethodDetailsEnd("avcFuture.js", "receiveMessages()");
            isEmptyBlock=true;
        }

    }
    function getApplicationArry() {
        if (!$.isEmptyObject(appListObj)) {
            return appListObj;
        }

        try {
            var resp3 = deviceCommunicator.getConfigCmdOutput("class-map type inspect INTERNAL_DOMAIN_FILTER \n match protocol ?");
        }
        catch (error) {
            var responsePro = error.errorResponse;
            var ignoreAppt = "stun-ice";
            var protocolLines = responsePro.split("\n");
            $.each(protocolLines, function (index, value) {

                var app = value.trim().split(/\s+/)[0];
                if (app != ignoreAppt) {
                    appListObj[app] = true;
                }
            });
        }
    }
    function  desableCheckBoxesForNotSuportBlocking() {
        var ids = jQuery("#trafficTable").jqGrid('getDataIDs');
        var size = ids.length;
        for (var i = 0; i < size; i++) {
            var rowId = ids[i];
            // var Status = jQuery("#trafficTable").jqGrid('getCell',ids[i],'Status');
            //if(condition matches){
            if (appListObj[rowId] == undefined) {
                jQuery("#jqg_trafficTable_" + rowId).attr("disabled", true);
            }
            //}
        }
    }
    return {
        loadAvcFuture: loadAvcFuture,
        checkAVCSaport:checkAVCSaport

    };
})();
var acl = (function() {
  /***********************To do Internationalization***********************************/
  function loadAndDisplayLanguages() {
    $("#policyTitle").text($.i18n.prop("policyTitle"));
    $("#aclInfoDesc").text($.i18n.prop("aclInfoDesc"));
    $("#addACL").text($.i18n.prop("addACL"));
    $("#cloneACL").text($.i18n.prop("cloneACL"));
    $("#interfaceACL").text($.i18n.prop("interfaceACL"));
    $("#deleteACL").text($.i18n.prop("deleteACL"));
    $("#sequence").text($.i18n.prop("sequence"));
    $("#rule").text($.i18n.prop("rule"));
    $("#protocol").text($.i18n.prop("protocol"));
    $("#sourceIP").text($.i18n.prop("sourceIP"));
    $("#sourceMask").text($.i18n.prop("sourceMask"));
    $("#destinationIP").text($.i18n.prop("destinationIP"));
    $("#destinationMask").text($.i18n.prop("destinationMask"));
    $("#sourcePort").text($.i18n.prop("sourcePort"));
    $("#destPort").text($.i18n.prop("destPort"));
    $("#action").text($.i18n.prop("action"));
    $("#iptypeID").text($.i18n.prop("iptypeID"));
    $("#stdLabel").text($.i18n.prop("standardAcl"));
    $("#extdLabel").text($.i18n.prop("extendedAcl"));
    $("#addAclName").text($.i18n.prop("addAclName"));
    $("#ruleLabel").text($.i18n.prop("ruleLabel"));
    $("#aclSelectRule option[value='permit']").text($.i18n.prop("permit"));
    $("#aclSelectRule option[value='deny']").text($.i18n.prop("deny"));
    $("#aclIPAddressLabel").text($.i18n.prop("aclIPAddressLabel"));
    $("#addressSelect option[value='Any']").text($.i18n.prop("anyStdAddress"));
    $("#addressSelect option[value='IPAddress']").text($.i18n.prop("ipStdAddress"));
    $("#sourceIp").text($.i18n.prop("sourceIp"));
    $("#srcIPSelect option[value='Any']").text($.i18n.prop("srcIPAddress"));
    $("#srcIPSelect option[value='IPAddress']").text($.i18n.prop("srcIPMaskAddress"));
    $("#destIp").text($.i18n.prop("destIp"));
    $("#destIPSelect option[value='Any']").text($.i18n.prop("destIPAddress"));
    $("#destIPSelect option[value='IPAddress']").text($.i18n.prop("destIPMaskAddress"));
    $("#protocolLabel").text($.i18n.prop("protocolLabel"));
    $("#srcPortLabel").text($.i18n.prop("srcPortLabel"));
    $("#dstPortLabel").text($.i18n.prop("dstPortLabel"));
    $("#srcPortAny option[value='any']").text($.i18n.prop("anySrcPort"));
    $("#dstPortAny option[value='any']").text($.i18n.prop("anyDstPort"));
    $("#aclSelectRowStr").text($.i18n.prop("aclSelectRowStr"));
    $("#aclSelectOneRowStr").text($.i18n.prop("aclSelectOneRowStr"));
    $("#aclDeleteRowStr").text($.i18n.prop("aclDeleteRowStr"));
    $("#lineVtyTitle").text($.i18n.prop("lineVtyTitle"));
    $("#selectInterfaceRouteLabel").text($.i18n.prop("selectRouteLabel"));
    $("#selectVtyRoute").text($.i18n.prop("selectRoute"));
    $("#selectVtyRouteLabel").text($.i18n.prop("selectRouteLabel"));
    $("#in").text($.i18n.prop("in"));
    $("#out").text($.i18n.prop("out"));
    $("#bindVTYName").text($.i18n.prop("bindVTYName"));
    $("#interfaceMappingTitle").text($.i18n.prop("interfaceMappingTitle"));
    $("#selectInterface").text($.i18n.prop("selectRoute"));
    $("#selectInterfaceRoute").text($.i18n.prop("selectRoute"));
    $("#inInt").text($.i18n.prop("in"));
    $("#outInt").text($.i18n.prop("out"));
    $("#bindInterfaceName").text($.i18n.prop("bindInterfaceName"));
    $("#httpMappingTitle").text($.i18n.prop("httpMappingTitle"));
    $("#selectHttpRoute").text($.i18n.prop("selectHttpRoute"));
    $("#bindedInterface").text($.i18n.prop("bindedInterface"));
    $("#typeInterface").text($.i18n.prop("typeInterface"));
    $("#bindRoute").text($.i18n.prop("selectRoute"));
    $("#aclRemovalString").text($.i18n.prop("aclRemovalString"));
    $("#aclMapNotificationString").text($.i18n.prop("aclMapNotificationString"));
    $("#createTab").text($.i18n.prop("createTab"));
    $("#viewTab").text($.i18n.prop("viewTab"));
    $("#applyMapButton").text($.i18n.prop("apply"));
    $("#actionBind").text($.i18n.prop("action"));

    $("div[title='Alert']").attr("title", $.i18n.prop("alertTitle"));
    $("div[title='VTY Mapping']").attr("title", $.i18n.prop("vtyMappingTitle"));
    $("div[title='Interface Mapping']").attr("title", $.i18n.prop("interfaceMapTitle"));
    $("a[title='testphase']").attr("title", $.i18n.prop("plusTooltip"));

    $("#vtyInput").attr("placeholder", $.i18n.prop("selectVtyRange"));
  }

  function refresh(){
    $("#aclRuleError").hide();
    $("#aclBindError").hide();
    $('#aclForm').resetForm();
    $('#aclDialogForm').resetForm();
    $('#aclTable tbody').each(function() {
      $(this).remove();
    });
    $("#bindTable").hide();
    var response = deviceCommunicator.getExecCmdOutput("show ip access-lists");
    var rule,nextline;
    var lines = response.split("\n");
    //var aclName,sequence,type;
    $.each(lines, function(index, value) {
      if (value.indexOf("Standard")>-1 || value.indexOf("Extended")>-1) {
  var sourceip = "N/A";
  var sourcemask = "N/A";
  var destip = "N/A";
  var destmask = "N/A";
  var protocol = "N/A", srcport = "N/A", dstport = "N/A";
  var spaceSplit=value.trim().split(/\s+/);
  var type = spaceSplit[0];
  var aclName = spaceSplit[spaceSplit.length-1];

  $("#aclTable").append("<tbody id='" + aclName.replace(/[^a-zA-Z0-9]/g,'_')  + "'change='false'></tbody>");
  $("#aclTable " +"tbody#" + aclName.replace(/[^a-zA-Z0-9]/g,'_')).append('<tr head="true" class="policyhead" style="background:#E6EEF1;">'+'<td colspan="11" class="ccpexpCSSReplaceClass593"><b>' + "AclName : "+aclName + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+ "Type : "+type + '</b><span class="collapsetable" title="' + $.i18n.prop("collapseACLtable") +'" collapse="true" style="float:right; padding-right:13px;"><div class="utmSprite collapse"></div></span><span class="fa fa-times" title="' + $.i18n.prop("aclRemoval") + '" style="float:right; color:#008ec2; padding-right:13px;font-size: 1.5em"></span><span class="fa fa-sitemap" title="' + $.i18n.prop("aclMapping") + '" style="float:right; color:#008ec2; padding-right:13px;font-size: 1.3em;"></span></td></tr>');

  for(var i=index+1;i<lines.length;i++){
    if (lines[i].indexOf("Standard")>-1 || lines[i].indexOf("Extended")>-1) {
      break;
    }
    if (lines[i].indexOf("object-group") > -1) {
      sourceip = "N/A";
      sourcemask = "N/A";
      networkDes = "N/A";
      networkDesMask = "N/A";
      protocol = "N/A";
      srcport = "N/A";
      dstport = "N/A";
      nextline = lines[i].trim().split(/\s+/);
//      var newaclName = aclName.trim().split('_acl');
      //var splittedAcl = newaclName[0];
      var newFlag = false;
      var json = {
        type: type,
        aclName: aclName.replace(/[^a-zA-Z0-9]/g,'_'),
        sequence: nextline[0],
        rule: nextline[1]
      }

      if (nextline[2] == "ip" || nextline[2] == "tcp" || nextline[2] == "udp") {
        if (nextline[3] == "object-group") {
    var response1 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[4]);
    var lines1 = response1.split("\n");
    $.each(lines1, function(index, value) {
      if (value.indexOf("Service") > -1) {
        newFlag = true;
                    if (lines1[1] != null) {
                      var nextline1 = lines1[1].trim().split(/\s+/);
                      if (nextline1.length > 1) {
                        protocol = nextline1[0];
                        srcport = nextline1[3];
                        dstport = nextline1[5];
                      } else {
                        protocol = nextline1[0];
                        srcport = "N/A";
                        dstport = "N/A";
                      }
                    } else {
                      protocol = "N/A";
                      srcport = "N/A";
                      dstport = "N/A";
                    }
      } else {
                    if (lines1[0] != null && value.indexOf("source") > -1) {
                      var nextline2 = lines1[1].trim().split(/\s+/);
          newFlag = true;
                      if (nextline2.length > 1) {
                        protocol = nextline2[0];
                        srcport = nextline2[3];
                        dstport = nextline2[5];
                      } else {
                        protocol = nextline2[0];
                        srcport = "N/A";
                        dstport = "N/A";
                      }
                    } else {
                      protocol = "N/A";
                      srcport = "N/A";
                      dstport = "N/A";
                    }
      }
    });

        }
        if (newFlag === true) {
    if (nextline[5] == "object-group") {
        var response2 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[6]);
        var lines3 = response2.split("\n");
        $.each(lines3, function(index, value) {
          if (value.indexOf("Network") > -1) {
      if (lines3[1] != null && lines3[1].length >= 1) {
        var nextline3 = lines3[1].trim().split(/\s+/);
        if (nextline3[0] == "host") {
          sourceip = nextline3[1];
          sourcemask = "0.0.0.0";
        } else if (nextline3[0] == "any") {
          sourceip = "any";
          sourcemask = "N/A";
        } else {
          sourceip = nextline3[0];
          sourcemask = nextline3[1];
        }
      }
          }
        });
      }

      if (nextline[7] == "object-group") {
        var response3 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[8]);
        var lines4 = response3.split("\n");
        $.each(lines4, function(index, value) {
          if (value.indexOf("Network") > -1) {
      if (lines4[1] != null && lines4[1].length >= 1) {
        var nextline4 = lines4[1].trim().split(/\s+/);
        if (nextline4[0] == "host") {
          networkDes = nextline4[1];
          networkDesMask = "0.0.0.0";
        } else if (nextline4[0] == "any") {
          networkDes = "any";
          networkDesMask = "N/A";
        } else {
          networkDes = nextline4[0];
          networkDesMask = nextline4[1];
        }
      }
          }
        });
      }

      if (nextline[5] == "any" && nextline[6] == "object-group") {
        sourceip = "any";
        sourcemask = "N/A";
        var response16 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[7]);
        var lines16= response16.split("\n");
        $.each(lines16, function(index, value) {
          if (value.indexOf("Network") > -1) {
      if (lines16[1] != null && lines16[1].length >= 1) {
        var nextline16 = lines16[1].trim().split(/\s+/);
        if (nextline16[0] == "host") {
          networkDes = nextline16[1];
          networkDesMask = "0.0.0.0";
        } else if (nextline16[0] == "any") {
          networkDes = "any";
          networkDesMask = "N/A";
        } else {
          networkDes = nextline16[0];
          networkDesMask = nextline16[1];
        }
      }
          }
        });
      }

      if (nextline[7] == "any") {

          networkDes = "any";
          networkDesMask = "N/A";

      }

        } else {
    if (nextline[3] == "object-group") {
        var response4 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[4]);
        var lines5 = response4.split("\n");
        $.each(lines5, function(index, value) {
          if (value.indexOf("Network") > -1) {
      if (lines5[1] != null && lines5[1].length >= 1) {
        var nextline5 = lines5[1].trim().split(/\s+/);
        if (nextline5[0] == "host") {
          sourceip = nextline5[1];
          sourcemask = "0.0.0.0";
        } else if (nextline5[0] == "any") {
          sourceip = "any";
          sourcemask = "N/A";
        } else {
          sourceip = nextline5[0];
          sourcemask = nextline5[1];
        }
      }
          }
        });
      }

      if (nextline[5] == "object-group") {
        var response5 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[6]);
        var lines6 = response5.split("\n");
        $.each(lines6, function(index, value) {
          if (value.indexOf("Network") > -1) {
      if (lines6[1] != null && lines6[1].length >= 1) {
        var nextline6 = lines6[1].trim().split(/\s+/);
        if (nextline6[0] == "host") {
          networkDes = nextline6[1];
          networkDesMask = "0.0.0.0";
        } else if (nextline6[0] == "any") {
          networkDes = "any";
          networkDesMask = "N/A";
        } else {
          networkDes = nextline6[0];
          networkDesMask = nextline6[1];
        }
      }
          }
        });
      }

      if (nextline[3] == "any" && nextline[4] == "object-group") {
        sourceip = "any";
        sourcemask = "N/A";
        var response15 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[6]);
        var lines15 = response15.split("\n");
        $.each(lines15, function(index, value) {
          if (value.indexOf("Network") > -1) {
      if (lines15[1] != null && lines15[1].length >= 1) {
        var nextline15 = lines5[1].trim().split(/\s+/);
        if (nextline15[0] == "host") {
          networkDes = nextline15[1];
          networkDesMask = "0.0.0.0";
        } else if (nextline15[0] == "any") {
          networkDes = "any";
          networkDesMask = "N/A";
        } else {
          networkDes = nextline15[0];
          networkDesMask = nextline15[1];
        }
      }
          }
        });
      }

      if (nextline[5] == "any") {

          networkDes = "any";
          networkDesMask = "N/A";

      }
        }

      } else {
        if (nextline[2] == "object-group") {
    var response6 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[3]);
    var lines7 = response6.split("\n");
    $.each(lines7, function(index, value) {
      if (value.indexOf("Service") > -1) {
        newFlag = true;
        if (lines7[1] != null) {
          var nextline7 = lines7[1].trim().split(/\s+/);
          if (nextline7.length > 1) {
      protocol = nextline7[0];
      srcport = nextline7[3];
      if (nextline7.length > 5) {
        dstport = nextline7[5];
      } else {
        dstport = "N/A";
      }

          } else {
      protocol = nextline7[0];
      srcport = "N/A";
      dstport = "N/A";
          }
        } else {
          protocol = "N/A";
          srcport = "N/A";
          dstport = "N/A";
        }
      } else {
        if (lines7[0] != null && value.indexOf("source") > -1) {
          newFlag = true;
          var nextline8 = lines7[1].trim().split(/\s+/);
          if (nextline8.length > 1) {
      protocol = nextline8[0];
      srcport = nextline8[3];
      if (nextline8.length > 5) {
        dstport = nextline8[5];
      } else{
        dstport = "N/A";
      }
          } else {
      protocol = nextline8[0];
      srcport = "N/A";
      dstport = "N/A";
          }
        } else {
          protocol = "N/A";
          srcport = "N/A";
          dstport = "N/A";
        }
      }
    });
        }
        if (newFlag === true) {
    if (nextline[4] == "object-group") {
    var response7 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[5]);
    var lines8 = response7.split("\n");
    $.each(lines8, function(index, value) {
      if (value.indexOf("Network") > -1) {
        if (lines8[1] != null && lines8[1].length >= 1) {
          var nextline9 = lines8[1].trim().split(/\s+/);
          if (nextline9[0] == "host") {
      sourceip = nextline9[1];
      sourcemask = "0.0.0.0";
          } else if (nextline9[0] == "any") {
      sourceip = "any";
      sourcemask = "N/A";
          } else {
      sourceip = nextline9[0];
      sourcemask = nextline9[1];
          }
        }
      }
    });
        }

        if (nextline[6] == "object-group") {
    var response8 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[7]);
    var lines9 = response8.split("\n");
    $.each(lines9, function(index, value) {
      if (value.indexOf("Network") > -1) {
        if (lines9[1] != null && lines9[1].length >= 1) {
          var nextline10 = lines9[1].trim().split(/\s+/);
          if (nextline10[0] == "host") {
      networkDes = nextline10[1];
      networkDesMask = "0.0.0.0";
          } else if (nextline10[0] == "any") {
      networkDes = "any";
      networkDesMask = "N/A";
          } else {
      networkDes = nextline10[0];
      networkDesMask = nextline10[1];
          }
        }
      }
    });
        }
        if (nextline[4] == "any" && nextline[5] == "object-group") {
    var response14 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[6]);
    var lines14 = response14.split("\n");
    $.each(lines14, function(index, value) {
      if (value.indexOf("Network") > -1) {
        if (lines14[1] != null && lines14[1].length >= 1) {
          var nextline14 = lines14[1].trim().split(/\s+/);
          if (nextline14[0] == "host") {
      networkDes = nextline14[1];
      networkDesMask = "0.0.0.0";
          } else if (nextline14[0] == "any") {
      networkDes = "any";
      networkDesMask = "N/A";
          } else {
      networkDes = nextline14[0];
      networkDesMask = nextline14[1];
          }
        }
      }
    });
        }
        if (nextline[6] == "any") {
    networkDes = "any";
    networkDesMask = "N/A";
        }
        } else {
    if (nextline[2] == "object-group") {
    var response9 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[3]);
    var lines10 = response9.split("\n");
    $.each(lines10, function(index, value) {
      if (value.indexOf("Network") > -1) {
        if (lines10[1] != null && lines10[1].length >= 1) {
          var nextline11 = lines10[1].trim().split(/\s+/);
          if (nextline11[0] == "host") {
      sourceip = nextline11[1];
      sourcemask = "0.0.0.0";
          } else if (nextline11[0] == "any") {
      sourceip = "any";
      sourcemask = "N/A";
          } else {
      sourceip = nextline11[0];
      sourcemask = nextline11[1];
          }
        }
      }
    });
        }

        if (nextline[4] == "object-group") {
    var response10 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[5]);
    var lines11 = response10.split("\n");
    $.each(lines11, function(index, value) {
      if (value.indexOf("Network") > -1) {
        if (lines11[1] != null && lines11[1].length >= 1) {
          var nextline12 = lines11[1].trim().split(/\s+/);
          if (nextline12[0] == "host") {
      networkDes = nextline12[1];
      networkDesMask = "0.0.0.0";
          } else if (nextline12[0] == "any") {
      networkDes = "any";
      networkDesMask = "N/A";
          } else {
      networkDes = nextline12[0];
      networkDesMask = nextline12[1];
          }
        }
      }
    });
        }

        if (nextline[2] == "any" && nextline[3] == "object-group") {
    sourceip = "any";
    sourcemask = "N/A";
    var response11 = deviceCommunicator.getExecCmdOutput("show object-group " + nextline[4]);
    var lines12 = response11.split("\n");
    $.each(lines12, function(index, value) {
      if (value.indexOf("Network") > -1) {
        if (lines12[1] != null && lines12[1].length >= 1) {
          var nextline13 = lines12[1].trim().split(/\s+/);
          if (nextline13[0] == "host") {
      networkDes = nextline13[1];
      networkDesMask = "0.0.0.0";
          } else if (nextline13[0] == "any") {
      networkDes = "any";
      networkDesMask = "N/A";
          } else {
      networkDes = nextline13[0];
      networkDesMask = nextline13[1];
          }
        }
      }
    });
        }

        if (nextline[4] == "any") {
    networkDes = "any";
    networkDesMask = "N/A";

        }

        }
      }

      $("#aclTable " + "tbody#" + json.aclName).append('<tr class="disabledObjectGroup">' + '<td>' + json.sequence + '</td><td>' + json.rule + '</td><td>' + protocol + '</td><td>' + sourceip + '</td><td>' + sourcemask + '</td><td>' + networkDes + '</td><td>' + networkDesMask + '</td><td>' + srcport + '</td><td>' + dstport + '</td></tr>');
      //$('.disabledObjectGroup').attr('disabled',true);
    } else {
      nextline = lines[i].trim().split(/\s+/);
      var srcport = "N/A";
      var dstport = "N/A";
      var sourceCheck = "N/A";
      var destcheck = "N/A";
      var json={
        type:type,
        aclName:aclName.replace(/[^a-zA-Z0-9]/g,'_'),
        sequence:nextline[0]
            }
      if (type == "Standard") {
        if (nextline.length >3) {
      if(nextline.indexOf("any") > -1){
        rule = nextline[1];
          sourceip = "any";
          sourcemask = "N/A";
        } else {
    rule = nextline[1];
    var hello = nextline[2].replace(",", "");
    sourceip = hello;
    sourcemask = nextline[5];
}
        } else {
    rule = nextline[1];
    if (nextline[2] != "any") {
      sourceip = nextline[2];
      sourcemask = "0.0.0.0";
    } else {
      sourceip = "any";
      sourcemask = "N/A";
    }
        }
      } else {
        rule = nextline[1];
        protocol = nextline[2];
        if (protocol == "tcp" || protocol == "udp") {
    srcport = "any";
    dstport = "any";
    if ((nextline.indexOf("eq") > -1)||(nextline.indexOf("gt") > -1)|| (nextline.indexOf("lt") > -1) || (nextline.indexOf("neq") > -1) || (nextline.indexOf("range") > -1)) {
      var lastValue = nextline[nextline.length-1];
      var lastBefValue = nextline[nextline.length-2];
      if ((lastValue != "any") && ((lastBefValue != "eq") || (lastBefValue != "gt") || (lastBefValue != "lt") || (lastBefValue != "neq") || (lastBefValue != "range"))){
        if (lastBefValue == "host") {
          destip = lastValue;
          destmask = "0.0.0.0";
        } else {
          destip = lastBefValue;
          destmask = lastValue;
        }
      }
      if ((lastValue != "any") && ((lastBefValue == "eq") || (lastBefValue == "gt") || (lastBefValue == "lt") || (lastBefValue == "neq") || (lastBefValue == "range"))) {
        dstport = lastBefValue +' '+lastValue;
        var destIpCal = nextline[nextline.length-3];
        if (destIpCal != "any") {
          if (nextline[nextline.length-4] == "host") {
      destip = nextline[nextline.length-3];
      destmask = "0.0.0.0";
          } else {
      destip = nextline[nextline.length-4];
      destmask = nextline[nextline.length-3];
          }
        }
        if (destIpCal == "any") {
          destip = "any";
          destmask = "N/A";
        }
      }
      if (lastValue == "any") {
        destip = "any";
        destmask = "N/A";
      }
      sourceCheck = nextline[3];
      if ((sourceCheck == "any") && ((nextline[4] == "eq") || (nextline[4] == "gt") || (nextline[4] == "lt") || (nextline[4] == "neq") || (nextline[4] == "range"))) {
        srcport = nextline[4]+' '+nextline[5];
        sourceip = "any";
        sourcemask = "N/A";
      }
      if ((sourceCheck == "any") && ((nextline[4] != "eq") || (nextline[4] != "gt") || (nextline[4] != "lt") || (nextline[4] != "neq") || (nextline[4] != "range"))) {
        sourceip = "any";
        sourcemask = "N/A";
      }
      if (sourceCheck != "any") {
        if (sourceCheck == "host") {
          sourceip = nextline[4];
          sourcemask = "0.0.0.0";
        } else {
          sourceip = nextline[3];
          sourcemask = nextline[4];
        }
        if ((nextline[5] == "eq") || (nextline[5] == "gt") || (nextline[5] == "lt") || (nextline[5] == "neq") || (nextline[5] == "range")) {
          srcport = nextline[5]+' '+nextline[6];
        }
      }
    } else {
      sourceCheck = nextline[3];
      destcheck = nextline[4];
      if (sourceCheck == "any" && destcheck == "any") {
        sourceip = "any";
        sourcemask = "N/A";
        destip = "any";
        destmask = "N/A";
      }
      if (sourceCheck == "any" && destcheck != "any") {
        sourceip = "any";
        sourcemask = "N/A";
        if (destcheck == "host") {
          destip = nextline[5];
          destmask = "0.0.0.0";
        } else {
          destip = nextline[4];
          destmask = nextline[5];
        }
      }
      if (sourceCheck != "any" && nextline[5] == "any") {
        if (sourceCheck == "host") {
          sourceip = nextline[4];
          sourcemask = "0.0.0.0";
        } else {
          sourceip = nextline[3];
          sourcemask = nextline[4];
          destip = "any";
          destmask = "N/A";
        }
      }
      if (sourceCheck != "any" && nextline[5] != "any") {
        if (sourceCheck == "host") {
          sourceip = nextline[4];
          sourcemask = "0.0.0.0";
        } else {
          sourceip = nextline[3];
          sourcemask = nextline[4];
        }
        if (nextline[5] == "host") {
          destip = nextline[6];
          destmask = "0.0.0.0";
        } else {
          destip = nextline[5];
          destmask = nextline[6];
        }
      }
    }
        } else {
    sourceCheck = nextline[3];
    destcheck = nextline[4];
    if (sourceCheck == "any" && destcheck == "any") {
      sourceip = "any";
      sourcemask = "N/A";
      destip = "any";
      destmask = "N/A";
    }
    if (sourceCheck == "any" && destcheck != "any") {
      sourceip = "any";
      sourcemask = "N/A";
      if (destcheck == "host") {
        destip = nextline[5];
        destmask = "0.0.0.0";
      } else {
        destip = nextline[4];
        destmask = nextline[5];
      }
    }
    if (sourceCheck != "any" && nextline[5] == "any") {
      if (sourceCheck == "host") {
        sourceip = nextline[4];
        sourcemask = "0.0.0.0";
      } else {
        sourceip = nextline[3];
        sourcemask = nextline[4];
        destip = "any";
        destmask = "N/A";
      }
    }
    if (sourceCheck != "any" && nextline[5] != "any") {
      if (sourceCheck == "host") {
        sourceip = nextline[4];
        sourcemask = "0.0.0.0";
      } else {
        sourceip = nextline[3];
        sourcemask = nextline[4];
      }
      if (nextline[5] == "host") {
        destip = nextline[6];
        destmask = "0.0.0.0";
      } else {
        destip = nextline[5];
        destmask = nextline[6];
      }
    }
        }
      }
      $("#aclTable " +"tbody#" + json.aclName).append('<tr>'+'<td>' + json.sequence + '</td><td>' + rule + '</td><td>' + protocol + '</td><td>' + sourceip + '</td><td>' + sourcemask + '</td><td>' + destip + '</td><td>' + destmask + '</td><td>' + srcport + '</td><td>' + dstport + '</td></tr>');
    }
  }
      }
    });

    //$("#aclTable").find('tbody:first').before('<tr class="policyhead">'+'<td colspan="11" class="ccpexpCSSReplaceClass760">' + $.i18n.prop("configurInter") + '</td></tr>');
    addTableColumn("aclTable", "aclEdit", "aclDelete");
    $("#aclTable tbody tr:nth-child(odd)").addClass("striped");

    $('.collapsetable').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });
    
    $('.testTooltip').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('.fa-sitemap').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('.fa-times').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    var aclRowCount = $('#aclTable tbody tr').length;
    if (aclRowCount == 0) {
      $("#addACL").show();
      $("#aclTable").hide();
      $("#deleteACL").hide();
      $("#cloneACL").hide();
      $("#interfaceACL").hide();
    } else {
      $("#addACL").show();
      $("#aclTable").show();
      $("#deleteACL").show();
      $("#cloneACL").show();
      $("#interfaceACL").hide();
    }
    //enableDisableButton("aclTable", $.i18n.prop("aclAdd"))
    changeBtnState("aclTable", $.i18n.prop("aclEdit"));
  }

  function portTCPorUDP(protocol, value){
    var aclTCPPorts = ["bgp", "chargen", "cmd", "daytime", "discard", "domain", "echo", "exec", "finger", "ftp", "gopher", "hostname", "ident", "irc", "klogin", "kshell", "login", "lpd", "nntp", "pim-auto-rp", "pop2", "pop3", "smtp", "sunrpc", "tacacs", "talk", "telnet", "time", "uucp", "whois", "www"];
    var aclUDPPorts = ["biff", "bootpc", "bootps", "discard", "dnsix", "domain", "echo", "isakmp", "mobile-ip", "nameserver", "netbios-dgm", "netbios-ns", "netbios-ss", "non500-isakmp", "ntp", "pim-auto-rp", "rip", "snmp", "snmptrap", "sunrpc", "syslog", "tacacs", "talk", "tftp", "time", "who", "xdmcp"];
    if (protocol == "tcp") {
      if (value == "srcvalue") {
  for(var i =0; i<aclTCPPorts.length; i++){
    $("#srcPort").append('<option value="'+aclTCPPorts[i]+'">' + aclTCPPorts[i] + '</option>');
  }
      } else {
  for(var i =0; i<aclTCPPorts.length; i++){
    $("#dstPort").append('<option value="'+aclTCPPorts[i]+'">' + aclTCPPorts[i] + '</option>');
        }
      }
    }
    if(protocol == "udp") {
      if (value == "srcvalue") {
  for(var j =0; j < aclUDPPorts.length; j++){
    $("#srcPort").append('<option value="'+aclUDPPorts[j]+'">' + aclUDPPorts[j] + '</option>');
  }
      } else {
  for(var j =0; j < aclUDPPorts.length; j++){
    $("#dstPort").append('<option value="'+aclUDPPorts[j]+'">' + aclUDPPorts[j] + '</option>');
  }
      }
    }
  }

  function tcpOrUdpcheck(values){
    var aclTCPPorts = ["bgp", "chargen", "cmd", "daytime", "discard", "domain", "echo", "exec", "finger", "ftp", "gopher", "hostname", "ident", "irc", "klogin", "kshell", "login", "lpd", "nntp", "pim-auto-rp", "pop2", "pop3", "smtp", "sunrpc", "tacacs", "talk", "telnet", "time", "uucp", "whois", "www"];
    var aclUDPPorts = ["biff", "bootpc", "bootps", "discard", "dnsix", "domain", "echo", "isakmp", "mobile-ip", "nameserver", "netbios-dgm", "netbios-ns", "netbios-ss", "non500-isakmp", "ntp", "pim-auto-rp", "rip", "snmp", "snmptrap", "sunrpc", "syslog", "tacacs", "talk", "tftp", "time", "who", "xdmcp"];
    var val = false;
    var tcpOrUdpSelect = $("#aclProtocol").val();

    if (tcpOrUdpSelect == "tcp") {
      if (isNaN(values)) {
  for(var i =0; i<aclTCPPorts.length; i++){
    if (aclTCPPorts[i] == values) {
      val = true;
    }
  }
      } else {
  if (values > 0 && values <= 65535) {
    val = true;
  }
      }
    }

    if(tcpOrUdpSelect == "udp") {
      if (isNaN(values)) {
  for(var j =0; j < aclUDPPorts.length; j++){
    if (aclUDPPorts[j] == values) {
      val = true;
    }
  }
      } else {
  if (values > 0 && values <= 65535) {
    val = true;
  }
      }
    }
    return val;
  }

  function ipValidation(passValue){
    var bool = false;
    var ipAddrCheck = passValue;
    if($('#extendedAcl').is(':checked')){
      if($("#srcIPSelect").val() == "IPAddress" && $("#sourceIpInput").val() == ipAddrCheck){
        if(ipAddrCheck == null || ipAddrCheck =="" || ipAddrCheck== undefined){
    $("#extdSrcIPErrorSpan").addClass("hint--top");
    $("#extdSrcIPErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"))
    $("#sourceIpInput").addClass("highlightTextBox");
          bool = true;
        } else {
    if (includeWildIPaddress(ipAddrCheck) !== true) {
      $("#extdSrcIPErrorSpan").addClass("hint--top");
      $("#extdSrcIPErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"))
      $("#sourceIpInput").addClass("highlightTextBox");
      bool = true;
    }
  }
      }
      if($("#destIPSelect").val() == "IPAddress" && $("#deskIPInput").val() == ipAddrCheck){
        if(ipAddrCheck == null || ipAddrCheck =="" || ipAddrCheck== undefined){
    $("#extdDstIPErrorSpan").addClass("hint--top");
    $("#extdDstIPErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"))
    $("#deskIPInput").addClass("highlightTextBox");
          bool = true;
        } else {
    if (includeWildIPaddress(ipAddrCheck) !== true) {
      $("#extdDstIPErrorSpan").addClass("hint--top");
      $("#extdDstIPErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"))
      $("#deskIPInput").addClass("highlightTextBox");
      bool = true;
    }
  }
      }
    } else {
      if($("#addressSelect").val() == "Any"){
        bool = false;
      } else {
        if(ipAddrCheck == null || ipAddrCheck =="" || ipAddrCheck== undefined){
    $("#stdSourceErrorSpan").addClass("hint--top");
          $("#stdSourceErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"))
          $("#aclIPAddress").addClass("highlightTextBox");
          bool = true;
        } else {
    if (includeWildIPaddress(ipAddrCheck) !== true) {
    $("#stdSourceErrorSpan").addClass("hint--top");
          $("#stdSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"))
          $("#aclIPAddress").addClass("highlightTextBox");
          bool = true;
    }
  }
      }
    }
    return bool;
  }

  function maskValidation(passValue){
    var bool = false;
    var maskAddrCheck = passValue;
    if($('#extendedAcl').is(':checked')){
      if($("#srcIPSelect").val() == "IPAddress" && $("#sourceMaskInput").val() == maskAddrCheck){
        if(maskAddrCheck == null || maskAddrCheck =="" || maskAddrCheck== undefined){
    $("#extdSrcMaskErrorSpan").addClass("hint--top");
    $("#extdSrcMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"))
    $("#sourceMaskInput").addClass("highlightTextBox");
          bool = true;
        } else {
    if (isValidMaskAddr(maskAddrCheck) !== true) {
      $("#extdSrcMaskErrorSpan").addClass("hint--top");
      $("#extdSrcMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"))
      $("#sourceMaskInput").addClass("highlightTextBox");
      bool = true;
    }
  }
      }
      if($("#destIPSelect").val() == "IPAddress" && $("#destMaskInput").val() == maskAddrCheck){
        if(maskAddrCheck == null || maskAddrCheck =="" || maskAddrCheck== undefined){
    $("#extdDstMaskErrorSpan").addClass("hint--top");
    $("#extdDstMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"))
    $("#destMaskInput").addClass("highlightTextBox");
          bool = true;
        } else {
    if (isValidMaskAddr(maskAddrCheck) !== true) {
      $("#extdDstMaskErrorSpan").addClass("hint--top");
      $("#extdDstMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"))
      $("#destMaskInput").addClass("highlightTextBox");
      bool = true;
    }
  }
      }
    } else {
      if($("#addressSelect").val() == "Any"){
        bool = false;
      } else {
        if(maskAddrCheck == null || maskAddrCheck =="" || maskAddrCheck== undefined){
    $("#stdMaskErrorSpan").addClass("hint--top");
    $("#stdMaskErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"))
    $("#aclWildCardMask").addClass("highlightTextBox");
          bool = true;
        } else {
    if (isValidMaskAddr(maskAddrCheck) !== true) {
    $("#stdMaskErrorSpan").addClass("hint--top");
    $("#stdMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"))
    $("#aclWildCardMask").addClass("highlightTextBox");
          bool = true;
    }
  }
      }
    }
    return bool;
  }

  function validateVty(value) {
    var vtyVal = value.split("-");
    if (vtyVal.length > 1) {
      var low = Number(vtyVal[0]);
      var high = Number(vtyVal[1]);
      if (isNaN(low) || isNaN(high) || parseInt(low, 10) != low || parseInt(high, 10) != high) {
        return false;
      }

      if (low >= high || low < 0 || high > 15) {
        return false;
      }
    } else {
      var vtyIntegerVal = Number(vtyVal);
      if (isNaN(vtyIntegerVal) || parseInt(vtyIntegerVal, 10) != vtyIntegerVal) {
          return false;
      }
      if (vtyIntegerVal < 0 || vtyIntegerVal > 15) {
        return false
      }
    }
  }

  function uiValidator(){
    $("#aclNameErrorSpan").removeAttr("data-hint");
    $("#aclNameErrorSpan").removeClass("hint--top");
    $("#aclNameInput").removeClass("highlightTextBox");
    $("#stdSourceErrorSpan").removeAttr("data-hint");
    $("#stdSourceErrorSpan").removeClass("hint--top");
    $("#aclIPAddress").removeClass("highlightTextBox");
    $("#stdMaskErrorSpan").removeAttr("data-hint");
    $("#stdMaskErrorSpan").removeClass("hint--top");
    $("#aclWildCardMask").removeClass("highlightTextBox");
    $("#extdSrcIPErrorSpan").removeAttr("data-hint");
    $("#extdSrcIPErrorSpan").removeClass("hint--top");
    $("#sourceIpInput").removeClass("highlightTextBox");
    $("#extdSrcMaskErrorSpan").removeAttr("data-hint");
    $("#extdSrcMaskErrorSpan").removeClass("hint--top");
    $("#sourceMaskInput").removeClass("highlightTextBox");
    $("#extdDstIPErrorSpan").removeAttr("data-hint");
    $("#extdDstIPErrorSpan").removeClass("hint--top");
    $("#deskIPInput").removeClass("highlightTextBox");
    $("#extdDstMaskErrorSpan").removeAttr("data-hint");
    $("#extdDstMaskErrorSpan").removeClass("hint--top");
    $("#destMaskInput").removeClass("highlightTextBox");
    $("#srcPortErrorSpan").removeAttr("data-hint");
    $("#srcPortErrorSpan").removeClass("hint--top");
    $("#srcPortInput").removeClass("highlightTextBox");
    $("#dstPortErrorSpan").removeAttr("data-hint");
    $("#dstPortErrorSpan").removeClass("hint--top");
    $("#dstPortInput").removeClass("highlightTextBox");
  }

  function isValidMaskAddr(ip) {
    var reg = /^(?=\d+\.\d+\.\d+\.\d+$)(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.?){4}$/;
    if (reg.test(ip)) {
      return true;
    }
    else {
      return false;
    }
  }

  function checkIpAddressValidation(){
    var stdAclIp = $("#addressSelect").val();
    var stdIpAddr = $("#aclIPAddress").val();
    var stdAclWildMask = $("#aclWildCardMask").val();
    var extdAclSrcIp = $("#srcIPSelect").val();
    var extdAclDestIp = $("#destIPSelect").val();
    var extdSrcIPAddr = $("#sourceIpInput").val();
    var extdSrcmask = $("#sourceMaskInput").val();
    var extdDestIPAddr = $("#deskIPInput").val();
    var extdDestmask = $("#destMaskInput").val();
    if(stdAclIp == "IPAddress") {
      if(ipValidation(stdIpAddr) || maskValidation(stdAclWildMask)){
  $.unblockUI();
  $("#dialogACL").dialog("open");
      } else {
  dialogAclCall();
      }
    } else if(extdAclSrcIp == "IPAddress" && extdAclDestIp != "IPAddress") {
      if(ipValidation(extdSrcIPAddr) || maskValidation(extdSrcmask)){
  $.unblockUI();
  $("#dialogACL").dialog("open");
      } else {
  dialogAclCall();
      }
    } else if(extdAclDestIp == "IPAddress" && extdAclSrcIp != "IPAddress") {
      if(ipValidation(extdDestIPAddr) || maskValidation(extdDestmask)) {
  $.unblockUI();
  $("#dialogACL").dialog("open");
      } else {
  dialogAclCall();
      }
    } else if(extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress"){
      if(ipValidation(extdDestIPAddr) || maskValidation(extdDestmask) || ipValidation(stdIpAddr) || maskValidation(stdAclWildMask)){
  $.unblockUI();
  $("#dialogACL").dialog("open");
      } else {
  dialogAclCall();
      }
    } else {
      if (stdAclIp == "Any" || extdAclSrcIp == "Any" || extdAclDestIp == "Any") {
  dialogAclCall();
      }
    }
  }

  function dialogAclCall(){
    var arr =[];
    var stdRule = $("#aclSelectRule").val();
    var stdAclName = $("#aclNameInput").val();
    var stdAclIp = $("#addressSelect").val();
    var stdIpAddr = $("#aclIPAddress").val();
    var stdAclWildMask = $("#aclWildCardMask").val();
    var extdAclSrcIp = $("#srcIPSelect").val();
    var extdAclDestIp = $("#destIPSelect").val();
    var extdSrcIPAddr = $("#sourceIpInput").val();
    var extdSrcmask = $("#sourceMaskInput").val();
    var extdDestIPAddr = $("#deskIPInput").val();
    var extdDestmask = $("#destMaskInput").val();
    var protocol = $("#aclProtocol").val();
    var portSrc = $("#srcPortAny").val();
    var portDst = $("#dstPortAny").val();
    var portSrcVal = $("#srcPortInput").val();
    var portDstVal = $("#dstPortInput").val();
    var title = $( "#dialogACL" ).dialog( "option", "title" );

    if (title == $.i18n.prop("editACLHeading")) {
      var checker = deviceCommunicator.getExecCmdOutput("show ip access-lists");
      var lines = checker.split("\n");
      $tr = $('#aclTable tr.hilite').closest('tbody').children('tr:first').children('td');
      var a = $tr.eq(0).text();
      var value = a.split(/\s+/);
      var aclname = value[2].trim();
      var type = value[5].trim();
      var count = 0;
      $td = $('#aclTable tr.hilite').closest('tr').children('td');
      var seq = $td.eq(1).text();
      $.each(lines, function(index, value) {
    if (value.indexOf("Standard") > -1 || value.indexOf("Extended") > -1) {
        var spaceSplit = value.trim().split(/\s+/);
        var aclNameChecker = spaceSplit[spaceSplit.length - 1];
    }
    for (var i = index + 1; i < lines.length; i++) {
        if (lines[i].indexOf("Standard") > -1 || lines[i].indexOf("Extended") > -1) {
      break;
        }
        if (aclname == aclNameChecker) {
      count++;
        }
    }
      });
      if (count > 1) {
  arr = [{name: "aclname", value: aclname}, {name: "type", value: type}, {name: "seq", value: seq}];
  deviceCommunicator.configureCommandsFromTemplate2("aclEdit.txt", arr, false);
      } else {
  arr = [{name: "aclname", value: aclname}, {name: "type", value: type}];
  deviceCommunicator.configureCommandsFromTemplate2("aclDelete.txt", arr, false);
      }
    }
    if ($('#extendedAcl').is(':checked')) {
      if (isNaN(stdAclName)) {
        if (protocol == "tcp" || protocol == "udp") {
          if (portSrc != "any" || portDst != "any") {
            if (portSrc != "any" && portDst != "any") {
              if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
                configCommand = "ip access-list extended " + stdAclName;
                configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
              } else {
                if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
                }
                if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
                }
                if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
                }
              }
              response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
            }
            if (portSrc != "any" && portDst == "any") {
              if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
                configCommand = "ip access-list extended " + stdAclName;
                configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp;
              } else {
                if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask;
                }
                if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp;
                }
                if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask;
                }
              }
              response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
            }
            if (portSrc == "any" && portDst != "any") {
              if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
                configCommand = "ip access-list extended " + stdAclName;
                configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
              } else {
                if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
                }
                if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
                }
                if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
                  configCommand = "ip access-list extended " + stdAclName;
                  configCommand = configCommand + "\n " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
                }
              }
        response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
      }
    } else {
      if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
        arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdAclSrcIp", value: extdAclSrcIp},{name: "extdAclDestIp", value: extdAclDestIp}];
        response = deviceCommunicator.configureCommandsFromTemplate2("extdAclAny.txt", arr, false);
      } else {
        if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
    arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdAclSrcIp", value: extdAclSrcIp},{name: "extdDestIPAddr", value: extdDestIPAddr},{name: "extdDestmask", value: extdDestmask}];
    response = deviceCommunicator.configureCommandsFromTemplate2("extdAclDestIP.txt", arr, false);
        }
        if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
    arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdSrcIPAddr", value: extdSrcIPAddr},{name: "extdSrcmask", value: extdSrcmask},{name: "extdAclDestIp", value: extdAclDestIp}];
    response = deviceCommunicator.configureCommandsFromTemplate2("extdAclSrcIP.txt", arr, false);
        }
        if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
    arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdSrcIPAddr", value: extdSrcIPAddr},{name: "extdSrcmask", value: extdSrcmask},{name: "extdDestIPAddr", value: extdDestIPAddr},{name: "extdDestmask", value: extdDestmask}];
    response = deviceCommunicator.configureCommandsFromTemplate2("extdAclIP.txt", arr, false);
        }
      }
    }
  }else {
    if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
      arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdAclSrcIp", value: extdAclSrcIp},{name: "extdAclDestIp", value: extdAclDestIp}];
      response = deviceCommunicator.configureCommandsFromTemplate2("extdAclAny.txt", arr, false);
    } else {
      if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
        arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdAclSrcIp", value: extdAclSrcIp},{name: "extdDestIPAddr", value: extdDestIPAddr},{name: "extdDestmask", value: extdDestmask}];
        response = deviceCommunicator.configureCommandsFromTemplate2("extdAclDestIP.txt", arr, false);
      }
      if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
        arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdSrcIPAddr", value: extdSrcIPAddr},{name: "extdSrcmask", value: extdSrcmask},{name: "extdAclDestIp", value: extdAclDestIp}];
        response = deviceCommunicator.configureCommandsFromTemplate2("extdAclSrcIP.txt", arr, false);
      }
      if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
        arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "protocol", value: protocol},{name: "extdSrcIPAddr", value: extdSrcIPAddr},{name: "extdSrcmask", value: extdSrcmask},{name: "extdDestIPAddr", value: extdDestIPAddr},{name: "extdDestmask", value: extdDestmask}];
        response = deviceCommunicator.configureCommandsFromTemplate2("extdAclIP.txt", arr, false);
      }
    }
  }
      } else {
  if ((stdAclName >= 100) && (stdAclName <= 199)) {
    if (protocol == "tcp" || protocol == "udp") {
      if (portSrc != "any" || portDst != "any") {
        if (portSrc != "any" && portDst != "any") {
                if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
                  configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
                } else {
                  if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
        configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
      }
      if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
        configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
      }
      if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
        configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
      }
                }
                response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
        }
        if (portSrc != "any" && portDst == "any") {
                if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
                  configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp;
                } else {
                  if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
                    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask;
                  }
                  if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
                    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdAclDestIp;
                  }
                  if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
                    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + portSrc + " " + portSrcVal + " " + extdDestIPAddr + " " + extdDestmask;
                  }
                }
                response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
        }
        if (portSrc == "any" && portDst != "any") {
                if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
                  configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
                } else {
                  if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
                    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
                  }
                  if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
                    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdAclDestIp + " " + portDst + " " + portDstVal;
                  }
                  if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
                    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdDestIPAddr + " " + extdDestmask + " " + portDst + " " + portDstVal;
                  }
                }
                response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
        }
      } else {
        if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdAclDestIp;
        } else {
    if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
      configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdDestIPAddr + " " + extdDestmask;
    }
    if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
      configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdAclDestIp;
    }
    if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
      configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdDestIPAddr + " " + extdDestmask;
    }
        }
        response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
      }
    } else {
      if (extdAclSrcIp == "Any" && extdAclDestIp == "Any") {
        configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdAclDestIp;
      } else {
        if (extdAclSrcIp == "Any" && extdAclDestIp == "IPAddress") {
    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdAclSrcIp + " " + extdDestIPAddr + " " + extdDestmask;
        }
        if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "Any") {
    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdAclDestIp;
        }
        if (extdAclSrcIp == "IPAddress" && extdAclDestIp == "IPAddress") {
    configCommand = "access-list " + stdAclName + " " + stdRule + " " + protocol + " " + extdSrcIPAddr + " " + extdSrcmask + " " + extdDestIPAddr + " " + extdDestmask;
        }
      }
      response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
    }
  }
      }
    } else {
      if (isNaN(stdAclName)) {
  if (stdAclIp == "Any") {
    arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "stdIPAny", value: stdAclIp}];
    response = deviceCommunicator.configureCommandsFromTemplate2("stdAclAny.txt", arr, false);
  } else {
    arr = [{name: "aclName", value: stdAclName},{name: "Rule", value: stdRule},{name: "stdIPAddr", value: stdIpAddr},{name: "stdAclWildMask", value: stdAclWildMask}];
    response = deviceCommunicator.configureCommandsFromTemplate2("stdAclIP.txt", arr, false);
  }
      } else {
  if ((stdAclName >= 1) && (stdAclName <= 99)) {
    if (stdAclIp == "Any") {
      configCommand = "access-list "+ stdAclName+" "+stdRule+" "+stdAclIp ;
    } else {
      configCommand = "access-list "+ stdAclName+" "+stdRule+" "+stdIpAddr+" "+stdAclWildMask ;
    }
    response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
  } else {
    consoleLog("count");
  }
      }
    }
    refresh();
    $.unblockUI();
    deviceCommunicator.doWriteMemory();
  }

  function editOrClone(){
    var $tr = $('#aclTable tr.hilite').closest('tbody').children('tr:first').children('td');
    var a = $tr.eq(0).text();
    var value = a.split(/\s+/);
    var aclname = value[2].trim();
    var type = value[5].trim();
    var $td = $('#aclTable tr.hilite').closest('tr').children('td');
    var rule = $td.eq(2).text();
    var protocol = $td.eq(3).text();
    var sourceip = $td.eq(4).text();
    var sourcemask = $td.eq(5).text();
    var destip = $td.eq(6).text();
    var destmask = $td.eq(7).text();
    var srcport = $td.eq(8).text();
    var srcportvalseparate = srcport.split(/\s+/);
    var dstport = $td.eq(9).text();
    var dstportvalseparate = dstport.split(/\s+/);

    //var aclTCPPorts = ["bgp", "chargen", "cmd", "daytime", "discard", "domain", "echo", "exec", "finger", "ftp", "gopher", "hostname", "ident", "irc", "klogin", "kshell", "login", "lpd", "nntp", "pim-auto-rp", "pop2", "pop3", "smtp", "sunrpc", "tacacs", "talk", "telnet", "time", "uucp", "whois", "www"];

    //var aclUDPPorts = ["biff", "bootpc", "bootps", "discard", "dnsix", "domain", "echo", "isakmp", "mobile-ip", "nameserver", "netbios-dgm", "netbios-ns", "netbios-ss", "non500-isakmp", "ntp", "pim-auto-rp", "rip", "snmp", "snmptrap", "sunrpc", "syslog", "tacacs", "talk", "tftp", "time", "who", "xdmcp"];

    $("#aclNameInput").val(aclname);
    $('#aclNameInput').prop('disabled',true);
    $("#aclNameRow").show();
    $("#ruleRow").show();
    if (rule == "permit") {
      $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
    } else {
      $('#aclSelectRule option[value="deny"]').attr("selected", "selected");
    }
    if (type == "Standard") {
      $('input:radio[name=aclType][value="standard"]').prop('checked', true);
      $('input:radio[name=aclType][value="extended"]').prop('disabled',true);
      $('input:radio[name=aclType][value="standard"]').prop('disabled', false);
      $("#aclStdIPAdd").show();
      $("#sourceIpRow").hide();
      $("#sourceMaskRow").hide();
      $("#destIpRow").hide();
      $("#destMaskRow").hide();
      $("#protocolRow").hide();
      $("#srcportRow").hide();
      $("#destportRow").hide();
      if (sourceip == "any") {
  $('#addressSelect option[value="Any"]').attr("selected", "selected");
        $("#aclIPAddressRow").hide();
      } else {
  $('#addressSelect option[value="IPAddress"]').attr("selected", "selected");
        $("#aclIPAddressRow").show();
  $("#aclIPAddress").val(sourceip);
        $("#aclWildCardMask").val(sourcemask);
      }
    } else {
      $('input:radio[name=aclType][value="extended"]').prop('checked', true);
      $('input:radio[name=aclType][value="standard"]').prop('disabled', true);
      $('input:radio[name=aclType][value="extended"]').prop('disabled', false);
      $("#aclStdIPAdd").hide();
      $("#aclIPAddressRow").hide();
      $("#sourceIpRow").show();
      $("#destIpRow").show();
      $("#protocolRow").show();
      $("#srcportRow").hide()
      $("#destportRow").hide();
      if (sourceip == "any") {
        $('#srcIPSelect option[value="Any"]').attr("selected", "selected");
        $("#sourceMaskRow").hide();
      } else {
  $('#srcIPSelect option[value="IPAddress"]').attr("selected", "selected");
        $("#sourceMaskRow").show();
        $("#sourceIpInput").val(sourceip);
        $("#sourceMaskInput").val(sourcemask);
      }
      if (destip == "any") {
        $('#destIPSelect option[value="Any"]').attr("selected", "selected");
        $("#destMaskRow").hide();
      } else {
  $('#destIPSelect option[value="IPAddress"]').attr("selected", "selected");
        $("#destMaskRow").show();
        $("#deskIPInput").val(destip);
        $("#destMaskInput").val(destmask);
      }
      $('#aclProtocol option[value="'+protocol+'"]').attr("selected", "selected");
      if (protocol == "tcp" || protocol == "udp") {
        $("#srcportRow").show();
        $("#destportRow").show();
  $("#srcPortValSelect").hide();
        $("#dstPortValSelect").hide();
        if (srcport == "any") {
          $('#srcPortAny option[value="any"]').attr("selected", "selected");
  } else {
          $("#srcPortValSelect").show();
    var value = "srcvalue";
    $('#srcPortAny option[value="'+srcportvalseparate[0]+'"]').attr("selected", "selected");
    $("#srcPortInput").val(srcportvalseparate[1]);
          portTCPorUDP(protocol, value);
  }
        if (dstport == "any") {
          $('#dstPortAny option[value="any"]').attr("selected", "selected");
  } else {
          $("#dstPortValSelect").show();
    var value = "dstvalue";
    $('#dstPortAny option[value="'+dstportvalseparate[0]+'"]').attr("selected", "selected");
    $("#dstPortInput").val(dstportvalseparate[1]);
          portTCPorUDP(protocol, value);
  }
      } else {
  $("#srcportRow").hide();
        $("#destportRow").hide();
      }
    }
  }

  $(".fa-sitemap").live('click',function(e) {
      var $tr = $(this).closest('tbody').children('tr:first').children('td');
      $("#aclMappingTab").tabs({
      activate: function(event, ui) {
        loadACLTab(ui.newTab.index());
      },
      active: 0
    });
  $("#aclBindError").hide();
  $("#interfaceSelectErrorSpan").removeAttr("data-hint");
  $("#interfaceSelectErrorSpan").removeClass("hint--top");
  $("#routeInterface").removeClass("highlightTextBox");
  $("#mapInterfaceErrorSpan").removeAttr("data-hint");
  $("#mapInterfaceErrorSpan").removeClass("hint--top");
  $("#selectInterfaceName").removeClass("highlightTextBox");
  $("#vtySelectErrorSpan").removeClass("hint--top");
  $("#vtySelectErrorSpan").removeAttr("data-hint");
  $("#routeVty").removeClass("highlightTextBox");
  $('.vtyMultiplediv').empty();
  $('.interfaceMultipleDiv').empty();
  var a = $tr.eq(0).text();
  var value = a.split(/\s+/);
  var aclname = value[2].trim();
  var type = value[5].trim();
  $("#dialogACLInterface").dialog("open");
  $("#dialogACLInterface").dialog("option", "title", $.i18n.prop("mappingacl")+" "+aclname);
  $('#aclInterfaceDialogForm').resetForm();
  $("#vtyErrorSpan").removeAttr("data-hint");
  $("#vtyErrorSpan").removeClass("hint--top");
  $("#vtyInput").removeClass("highlightTextBox");
  //$("#selectAclName").empty();
  $("#selectInterfaceName").empty();
  $("#selectInterfaceName").append('<option id="selectInterface" value="selectInterface">Select</option>');
  $("#selectInterface").text($.i18n.prop("selectRoute"));
  $('#selectInterfaceName').prop('disabled',true);
  $("#interfaceAddDialog").empty();
  $('#addedPopupButton').hide();
  $('#addedInterfacePopupButton').hide();	
  /*
   *var response = deviceCommunicator.getExecCmdOutput("show ip access-lists");
    var lines = response.split("\n");
  $("#selectAclName").append('<option value="selectAcl">Select</option>');
  $("#selectInterfaceName").append('<option value="selectInterface">Select</option>');
  $.each(lines, function(index, value) {
    if (value.indexOf("Standard")>-1 || value.indexOf("Extended")>-1) {
      var spaceSplit=value.trim().split(/\s+/);
      var type = spaceSplit[0];
      var aclName = spaceSplit[spaceSplit.length-1];
      $("#selectAclName").append('<option value="' + aclName + '">' + aclName + '</option>');
      for(var i=index+1;i<lines.length;i++){
        if (lines[i].indexOf("Standard")>-1 || lines[i].indexOf("Extended")>-1) {
    break;
        }
      }
    }
  });
  */
  $('#vtyInput').prop('disabled',true);
  if (type == "Extended") {
    $('#httpfieldset').prop('disabled', true);
    $('#httpEnable').prop('checked', false);
  } else {
    if (isNaN(aclname)) {
      $('#httpfieldset').prop('disabled', true);
      $('#httpEnable').prop('checked', false);
    } else {
      $('#httpfieldset').prop('disabled', false);
    }
  }

  var xml = deviceCommunicator.getExecCmdOutput("show ip interface brief | format");
  var interfaceNames=[];
        $(xml).find('entry').each(function() {
          interfaceNames.push(($(this).find('Interface').text()));
        });

  var response = deviceCommunicator.getExecCmdOutput("show interfaces switchport | i Name");
  var aclName ={};
  //var nextline;
  var lines = response.split("\n");

  $.each(lines, function(index, value) {
    if (value.indexOf("Name:")>-1) {
      var spaceSplit=value.trim().split(/\s+/);
      var replaceString="";
      var replaceFind="";
      if (spaceSplit[1].search("Gi")>-1) {
        replaceString="GigabitEthernet";
        replaceFind="Gi";
      }
      else if (spaceSplit[1].search("Fa")>-1) {
        replaceString="FastEthernet";
        replaceFind="Fa";
      }
      var intvalue=spaceSplit[1].replace(replaceFind,replaceString);
      aclName[intvalue]=intvalue;
    }
  });

  //var finalArray=[]

  $.each(interfaceNames, function(index, value) {
    if (aclName[value]==undefined || aclName[value]==null || aclName[value]=="") {
      //finalArray.push(value);
      $("#selectInterfaceName").append('<option value="' + value + '">' + value + '</option>');

    }
  });

  e.preventDefault();
  return false;
    });

  $("#interfaceAddDialog").dialog({
      autoOpen: false,
      height: 300,
      width: 480,
      modal: true,
      close: function() {
  $(this).dialog("close");
      }
    });

  function viewMapLoading(){
    var $tr = $("#dialogACLInterface").dialog("option", "title");
      var value = $tr.split(":");
      var aclname = value[1].trim();
//      var type = value[5].trim();
      $('#bindTable tbody tr').each(function() {
  $(this).remove();
      });
  try{
    $("#bindTable").show();
    $("#bindTable").append("<tbody id='" + aclname  + "'change='false'></tbody>");
    var xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
    if (xml.indexOf("Building configuration...") !== -1) {
      xml = xml.substring(25, xml.length);
      xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
    }
    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
    regEx = new RegExp("&#x03;", "g");
    xml = xml.replace(regEx, "");
    try {
      xmlDoc = $.parseXML(xml);
    } catch (error) {
      xmlDoc = xml;
    }

    var httpAcl = deviceCommunicator.getExecCmdOutput("show running-config | sec http access-class");
    var lines = httpAcl.split("\n");

    $.each(lines, function(index, value) {
      if (value.indexOf("http")>-1) {
        var spaceSplit=value.trim().split(/\s+/);
        var httpAclName = spaceSplit[spaceSplit.length-1];
        if (httpAclName == aclname) {
          $("#bindTable").append('<tr><td>'+httpAclName+'</td><td>HTTP</td><td>Enabled</td></tr>');
        }
      }
    });

    var vtyAcl = deviceCommunicator.getExecCmdOutput("show running-config | sec vty");
    var vtylines = vtyAcl.split("\n");

    $.each(vtylines, function(index, value) {
      if (value.indexOf("vty")>-1) {
        var splitvty=value.trim().split(/\s+/);
        if (splitvty.length > 3) {
    var vtyLow = splitvty[2];
    var vtyHigh = splitvty[splitvty.length-1];
    var vtyVal = vtyLow + "-"+vtyHigh;
        } else {
    var vtyLow = splitvty[splitvty.length-1];
    var vtyVal = vtyLow;
        }

        for(var i=index+1;i<vtylines.length;i++){
    if (vtylines[i].indexOf("vty")>-1) {
      break;
    } else {
      nextline = vtylines[i].trim().split(/\s+/);
      if (nextline.indexOf("access-class")>-1) {
        var vtyInputVal = nextline[1];
        var vtyRouteVal = nextline[2];
        if (vtyInputVal == aclname) {
          $("#bindTable").append('<tr><td>'+vtyVal+'</td><td>VTY</td><td>'+vtyRouteVal+'</td></tr>');
        }
      }
    }
        }
      }
    });

    $(xmlDoc).find('interface').each(function() {
      var interfaceValue = $(this).find('Param:first').text();
      $(this).find('ip').each(function() {
        $(this).find('access-group').each(function() {
    if ($(this).find('ACLName').text() === aclname) {
      var routeValue;
      if ($(this).find('out').length > 0) {
        routeValue = "out";
      }
      if ($(this).find('in').length > 0) {
        routeValue = "in";
      }
      $("#bindTable").append('<tr><td>'+interfaceValue+'</td><td>Interface</td><td>'+routeValue+'</td></tr>');
    }
    if ($(this).find('IPACLStandardExtended').text() === aclname) {
      var routeValue;
      if ($(this).find('out').length > 0) {
        routeValue = "out";
      }
      if ($(this).find('in').length > 0) {
        routeValue = "in";
      }
      $("#bindTable").append('<tr><td>'+interfaceValue+'</td><td>Interface</td><td>'+routeValue+'</td></tr>');
    }
        });
      });
    });
    addDeleteTableColumn("bindTable", "bindDelete");
  } catch (error) {
          $.unblockUI();
          return false;
  }
  }

  function aclRemoval(aclnameValue,typeValue){
      var aclname = aclnameValue;
//      var type = value[5].trim();
  try{
    var xml = deviceCommunicator.getExecCmdOutput("show running-config | format");
    if (xml.indexOf("Building configuration...") !== -1) {
      xml = xml.substring(25, xml.length);
      xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + xml;
    }
    xml = xml.substring(xml.indexOf("<?xml"), xml.length);
    regEx = new RegExp("&#x03;", "g");
    xml = xml.replace(regEx, "");
    try {
      xmlDoc = $.parseXML(xml);
    } catch (error) {
      xmlDoc = xml;
    }

    var httpAcl = deviceCommunicator.getExecCmdOutput("show running-config | sec http access-class");
    var lines = httpAcl.split("\n");

    $.each(lines, function(index, value) {
      if (value.indexOf("http")>-1) {
        var spaceSplit=value.trim().split(/\s+/);
        var httpAclName = spaceSplit[spaceSplit.length-1];
        if (httpAclName == aclname) {
          configCommand = "no ip http access-class " + httpAclName;
          configCommand = configCommand + "\n exit"+"\n";
          response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
        }
      }
    });

    var vtyAcl = deviceCommunicator.getExecCmdOutput("show running-config | sec vty");
    var vtylines = vtyAcl.split("\n");

    $.each(vtylines, function(index, value) {
      if (value.indexOf("vty")>-1) {
        var splitvty=value.trim().split(/\s+/);
        if (splitvty.length > 3) {
    var vtyLow = splitvty[2];
    var vtyHigh = splitvty[splitvty.length-1];
    var vtyVal = vtyLow + " "+vtyHigh;
        } else {
    var vtyLow = splitvty[splitvty.length-1];
    var vtyVal = vtyLow;
        }

        for(var i=index+1;i<vtylines.length;i++){
    if (vtylines[i].indexOf("vty")>-1) {
      break;
    } else {
      nextline = vtylines[i].trim().split(/\s+/);
      if (nextline.indexOf("access-class")>-1) {
        var vtyInputVal = nextline[1];
        var vtyRouteVal = nextline[2];
        if (vtyInputVal == aclname) {
          $("#bindTable").append('<tr><td>'+vtyVal+'</td><td>VTY</td><td>'+vtyRouteVal+'</td></tr>');
          configCommand = "line vty "+vtyVal;
          configCommand = configCommand + "\n no access-class " + aclname + " " + vtyRouteVal;
          configCommand = configCommand + "\n exit"+"\n";
          response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
        }
      }
    }
        }
      }
    });

    $(xmlDoc).find('interface').each(function() {
      var interfaceValue = $(this).find('Param:first').text();
      $(this).find('ip').each(function() {
        $(this).find('access-group').each(function() {
    if ($(this).find('ACLName').text() === aclname) {
      var routeValue;
      if ($(this).find('out').length > 0) {
        routeValue = "out";
      }
      if ($(this).find('in').length > 0) {
        routeValue = "in";
      }
      configCommand = "interface " + interfaceValue;
      configCommand = configCommand + "\n no ip access-group " + aclname + " " + routeValue;
      configCommand = configCommand + "\n exit"+"\n";
      response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
    }
    if ($(this).find('IPACLStandardExtended').text() === aclname) {
      var routeValue;
      if ($(this).find('out').length > 0) {
        routeValue = "out";
      }
      if ($(this).find('in').length > 0) {
        routeValue = "in";
      }
      configCommand = "interface " + interfaceValue;
      configCommand = configCommand + "\n no ip access-group " + aclname + " " + routeValue;
      configCommand = configCommand + "\n exit"+"\n";
      response = deviceCommunicator.getConfigCmdOutput(configCommand, false);

    }
        });
      });
    });
  } catch (error) {
          $.unblockUI();
          return false;
  }
  }

  function loadACLTab(index) {
    switch (index) {
      case 0:
        blockPage("Loading");
        setTimeout(function() {
          $('#aclInterfaceDialogForm').resetForm();
          $('#aclBindError').hide();
          $('.vtyMultiplediv').empty();
          $('.interfaceMultipleDiv').empty();
          $('#addedPopupButton').hide();
          $('#addedInterfacePopupButton').hide();
          $("#vtySelectErrorSpan").removeClass("hint--top");
  $("#vtySelectErrorSpan").removeAttr("data-hint");
  $("#routeVty").removeClass("highlightTextBox");
          $("#vtyErrorSpan").removeAttr("data-hint");
  $("#vtyErrorSpan").removeClass("hint--top");
  $("#vtyInput").removeClass("highlightTextBox");
  $("#mapInterfaceErrorSpan").removeAttr("data-hint");
        $("#mapInterfaceErrorSpan").removeClass("hint--top");
        $("#selectInterfaceName").removeClass("highlightTextBox");
        $("#interfaceSelectErrorSpan").removeAttr("data-hint");
        $("#interfaceSelectErrorSpan").removeClass("hint--top");
        $("#routeInterface").removeClass("highlightTextBox");
  
          $.unblockUI();
        }, 1000);
        break;
      case 1:
        blockPage("Loading");
        setTimeout(function() {
          viewMapLoading();
          $.unblockUI();
        }, 1000);
        break;
    }
  }
  //************************To load the ACL Screen********************************

  function aclLoading() {
    $("#aclRuleError").hide();
    $("#aclBindError").hide();
    $('#aclDialogForm').resetForm();
    loadAndDisplayLanguages();
    refresh();
	$('#addedPopupButton').hide();
	$('#addedInterfacePopupButton').hide();
    $("#aclMappingTab").tabs();

    $("#aclMappingTab").tabs({
      activate: function(event, ui) {
        loadACLTab(ui.newTab.index());
      },
      active: 0
    });

    $("#rowSelect").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

    $("#selectOneRow").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

    $("#aclMapNotification").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {

      }
    });

    $("#removeAcl").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
            var arr = [];
      var $tr = testRemove;
      var a = $tr.eq(0).text();
      var value = a.split(/\s+/);
      var aclname = value[2].trim();
      var type = value[5].trim();
      blockPage("Applying");
      setTimeout(function() {
  try{
    aclRemoval(aclname,type);
    arr = [{name: "aclname", value: aclname}, {name: "type", value: type}];
    deviceCommunicator.configureCommandsFromTemplate2("aclDelete.txt", arr, false);
  } catch (error) {
          $.unblockUI();
          return false;
  }
  refresh();
  $.unblockUI();
  deviceCommunicator.doWriteMemory();
      }, 1000);
          }
        }, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {
        $(this).dialog("close");
      }
    });

    $("#rowDelete").dialog({
      autoOpen: false,
      height: 200,
      width: 300,
      modal: true,
      buttons: [{
          text: $.i18n.prop("ok"),
          click: function() {
            $(this).dialog("close");
            blockPage("Applying");
    setTimeout(function() {
      try{
        //var checker = deviceCommunicator.getExecCmdOutput("show ip access-lists");
        //var lines = checker.split("\n");
        var arr=[];
        var selectedRows = $("#aclTable tbody input:checkbox:checked").length;
        $td = $('#aclTable tr.hilite').closest('tr').children('td');
        if (selectedRows > 1) {
    $("#aclTable tbody input:checkbox").each(function() {
      if (this.checked) {
        var checker = deviceCommunicator.getExecCmdOutput("show ip access-lists");
        var lines = checker.split("\n");
        $tr = $(this).closest('tbody').children('tr:first').children('td');
        var a = $tr.eq(0).text();
        var value = a.split(/\s+/);
        var aclname = value[2].trim();
        var type = value[5].trim();
        var count = 0;
        $this = $(this).closest("tr").children('td');
        var seq = $this.eq(1).text();
        $.each(lines, function(index, value) {
          if (value.indexOf("Standard")>-1 || value.indexOf("Extended")>-1) {
      var spaceSplit=value.trim().split(/\s+/);
      var aclNameChecker = spaceSplit[spaceSplit.length-1];
          }
          for(var i=index+1;i<lines.length;i++){
      if (lines[i].indexOf("Standard")>-1 || lines[i].indexOf("Extended")>-1) {
        break;
      }
      if (aclname == aclNameChecker) {
        count ++;
      }
          }
        });
        if (count > 1) {
          arr = [{name: "aclname", value: aclname}, {name: "type", value: type}, {name: "seq", value: seq}];
          deviceCommunicator.configureCommandsFromTemplate2("aclEdit.txt", arr, false);
        } else {
          aclRemoval(aclname,type);
          arr = [{name: "aclname", value: aclname}, {name: "type", value: type}];
          deviceCommunicator.configureCommandsFromTemplate2("aclDelete.txt", arr, false);
        }
      }
    });
        }

        if(selectedRows == 1) {
    var checker = deviceCommunicator.getExecCmdOutput("show ip access-lists");
    var lines = checker.split("\n");
    $tr = $('#aclTable tr.hilite').closest('tbody').children('tr:first').children('td');
    var a = $tr.eq(0).text();
    var value = a.split(/\s+/);
    var aclname = value[2].trim();
    var type = value[5].trim();
    var count = 0;
    $td = $('#aclTable tr.hilite').closest('tr').children('td');
    var seq = $td.eq(1).text();
    $.each(lines, function(index, value) {
      if (value.indexOf("Standard")>-1 || value.indexOf("Extended")>-1) {
        var spaceSplit=value.trim().split(/\s+/);
        var aclNameChecker = spaceSplit[spaceSplit.length-1];
      }
      for(var i=index+1;i<lines.length;i++){
        if (lines[i].indexOf("Standard")>-1 || lines[i].indexOf("Extended")>-1) {
          break;
        }
        if (aclname == aclNameChecker) {
          count ++;
        }
      }
    });
    if (count > 1) {
      arr = [{name: "aclname", value: aclname}, {name: "type", value: type}, {name: "seq", value: seq}];
      deviceCommunicator.configureCommandsFromTemplate2("aclEdit.txt", arr, false);
    } else {
      aclRemoval(aclname,type);
      arr = [{name: "aclname", value: aclname}, {name: "type", value: type}];
      deviceCommunicator.configureCommandsFromTemplate2("aclDelete.txt", arr, false);
    }
        }
      }catch (error) {
                $('#aclErrorMessage').html(error.errorResponse);
                $('#aclRuleError').show();
    $.unblockUI();
                return false;
            }
      refresh();
      $.unblockUI();
      deviceCommunicator.doWriteMemory();
    }, 1000);
    e.preventDefault();
    return false;
          }
        }, {
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
          }
        }],
      close: function() {
        $(this).dialog("close");
      }
    });

    $('#aclTable tbody input:checkbox').live('click', function() {
      var $tr = $(this);
      if ($tr.is(":checked")) {
        $tr.closest("tr").addClass("hilite");
  $("#addACL").hide();
      } else {
        $tr.closest("tr").removeClass("hilite");
        $("thead input:checkbox").prop('checked', false);
  $("#addACL").show();
      }
      var checkedCount = $("#aclTable tbody input:checkbox:checked").length;
      var policyCount = $('#aclTable tbody input:checkbox').length;
      if (checkedCount == policyCount) {
        $("thead input:checkbox").prop('checked', true);
      }
      if (checkedCount > 1) {
  $("#cloneACL").hide();
  $("#interfaceACL").hide();
      }else if(checkedCount == 1){
  $("#addACL").hide();
  $("#cloneACL").show();
  $("#interfaceACL").show();
      } else {
  $("#addACL").show();
  $("#cloneACL").show();
  $("#interfaceACL").hide();
      }
    });

    /*$('#aclTable thead input:checkbox').live('click', function() {
      var checkedCount = $("#aclTable tbody input:checkbox:checked").length;
      var policyCount = $('#aclTable tbody input:checkbox').length;
      if (checkedCount == policyCount) {
  $("thead input:checkbox").prop('checked', true);
  $("#addACL").hide();
  $("#cloneACL").hide();
  $("#interfaceACL").hide();
      } else {
  $("thead input:checkbox").prop('checked', false);
  $("#addACL").show();
  $("#cloneACL").show();
  $("#interfaceACL").show();
      }
    });*/

    $('#aclTable tbody tr').live('dblclick', function() {
      $this = $(this).closest("tr");
      triggerACLEdit($this);
    });

    $(".aclEdit").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerACLEdit($this);
    });

    $(".aclDelete").live('click', function(e) {
      $this = $(this).closest("tr");
      triggerDelete($this);
    });

    $(".bindDelete").live('click', function(e) {
      $this = $(this).closest("tr").children('td');
      blockPage("Applying");
      setTimeout(function() {
  try{
    var titleChecking = $("#dialogACLInterface").dialog("option", "title");
    var value = titleChecking.split(":");
    var aclname = value[1].trim();
    var intName = $this.eq(0).text();
    var type = $this.eq(1).text();
    var routevalue = $this.eq(2).text();
    if (type == "Interface") {
      configCommand = "interface " + intName;
      configCommand = configCommand + "\n no ip access-group " + aclname + " " + routevalue;
      response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
    }
    if (type == "HTTP") {
      configCommand = "no ip http access-class " + intName;
      response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
    }
    if (type == "VTY") {
      var vtylength = intName.split("-");
      if (vtylength.length > 1) {
        var vtyleft = Number(vtylength[0]);
        var vtyRight = Number(vtylength[1]);
        configCommand = "line vty "+vtyleft+" "+vtyRight;
      } else{
        configCommand = "line vty "+intName;
      }
      configCommand = configCommand + "\n no access-class " + aclname + " " + routevalue;
      response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
    }
    $.unblockUI();
    deviceCommunicator.doWriteMemory();
    viewMapLoading();
  } catch (error) {
          $.unblockUI();
          return false;
  }
  $.unblockUI();
      }, 1000);
    });

    $(".collapsetable").live('click',function(e) {
      if ($(this).attr('collapse') == "true") {
        $("#aclTable " + "tbody#" + $(this).parents('tbody').attr('id') + " tr").each(function() {
    if ($(this).attr('head') == "true") {
      isEmptyBlock = true;
    }
    else {
      $(this).hide();
    }
  });

  $(this).find('div').removeClass('collapse');
  $(this).find('div').addClass('expand');
  $(this).attr('collapse', "false");
      } else {
  $("#aclTable " + "tbody#" + $(this).parents('tbody').attr('id') + " tr").each(function() {
    if ($(this).attr('head') == "true") {
            //code
          }
          else {
            $(this).show();
          }
        });
        $(this).find('div').addClass('collapse');
        $(this).find('div').removeClass('expand');
        $(this).attr('collapse', "true");
      }
    });

    $(".fa-times").live('click',function(e) {
      testRemove = $(this).closest('tbody').children('tr:first').children('td');
      $("#removeAcl").dialog("open");
      e.preventDefault();
      return false;
    });

    $('.collapsetable').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('.fa-sitemap').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $('.fa-times').tooltip({
      tooltipClass: "custom-tooltip-styling"
    });

    $("input:radio[name='aclType']").change(function() {
      uiValidator();
      //$('#aclDialogForm').resetForm();
      var titleChecking = $("#dialogACL").dialog("option", "title");
      if ($('#extendedAcl').is(':checked')) {
  $("#ruleRow").show();
  $("#aclNameRow").show();
  $("#sourceIpRow").show();
  $("#destIpRow").show();
  $("#protocolRow").show();
  $("#aclStdIPAdd").hide();
  $("#aclIPAddressRow").hide();
  $("#srcportRow").hide();
  $("#destportRow").hide();
  if (titleChecking == $.i18n.prop("addACLHeading")) {
          $("#sourceMaskRow").hide();
          $("#destMaskRow").hide();
    $('#aclProtocol option[value="ip"]').attr("selected", "selected");
          $('#srcIPSelect option[value="Any"]').attr("selected", "selected");
          $('#destIPSelect option[value="Any"]').attr("selected", "selected");
          $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
  }
        if(titleChecking == $.i18n.prop("editACLHeading")){
    var $tr = $('#aclTable tr.hilite').closest('tbody').children('tr:first').children('td');
    var a = $tr.eq(0).text();
    var value = a.split(/\s+/);
    var aclname = value[2].trim();
    var type = value[5].trim();
    var $td = $('#aclTable tr.hilite').closest('tr').children('td');
    var rule = $td.eq(2).text();
    var protocol = $td.eq(3).text();
    var sourceip = $td.eq(4).text();
    var sourcemask = $td.eq(5).text();
    var destip = $td.eq(6).text();
    var destmask = $td.eq(7).text();
    var srcport = $td.eq(8).text();
    var srcportvalseparate = srcport.split(/\s+/);
    var dstport = $td.eq(9).text();
    var dstportvalseparate = dstport.split(/\s+/);

//    var aclTCPPorts = ["bgp", "chargen", "cmd", "daytime", "discard", "domain", "echo", "exec", "finger", "ftp", "gopher", "hostname", "ident", "irc", "klogin", "kshell", "login", "lpd", "nntp", "pim-auto-rp", "pop2", "pop3", "smtp", "sunrpc", "tacacs", "talk", "telnet", "time", "uucp", "whois", "www"];

//    var aclUDPPorts = ["biff", "bootpc", "bootps", "discard", "dnsix", "domain", "echo", "isakmp", "mobile-ip", "nameserver", "netbios-dgm", "netbios-ns", "netbios-ss", "non500-isakmp", "ntp", "pim-auto-rp", "rip", "snmp", "snmptrap", "sunrpc", "syslog", "tacacs", "talk", "tftp", "time", "who", "xdmcp"];
    if (type == "Extended") {
      $("#aclNameInput").val(aclname);
      if (rule == "permit") {
        $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
      } else {
        $('#aclSelectRule option[value="deny"]').attr("selected", "selected");
      }
      if (sourceip == "any") {
        $('#srcIPSelect option[value="Any"]').attr("selected", "selected");
        $("#sourceMaskRow").hide();
      } else {
        $('#srcIPSelect option[value="IPAddress"]').attr("selected", "selected");
        $("#sourceMaskRow").show();
        $("#sourceIpInput").val(sourceip);
        $("#sourceMaskInput").val(sourcemask);
      }
      if (destip == "any") {
        $('#destIPSelect option[value="Any"]').attr("selected", "selected");
        $("#destMaskRow").hide();
      } else {
        $('#destIPSelect option[value="IPAddress"]').attr("selected", "selected");
        $("#destMaskRow").show();
        $("#deskIPInput").val(destip);
        $("#destMaskInput").val(destmask);
      }
      $('#aclProtocol option[value="'+protocol+'"]').attr("selected", "selected");
      if (protocol == "tcp" || protocol == "udp") {
        $("#srcportRow").show();
        $("#destportRow").show();
        $("#srcPortValSelect").hide();
        $("#dstPortValSelect").hide();
        if (srcport == "any") {
    $('#srcPortAny option[value="anySrcPort"]').attr("selected", "selected");
        } else {
    $("#srcPortValSelect").show();
    var value = "srcvalue";
    $('#srcPortAny option[value="'+srcportvalseparate[0]+'"]').attr("selected", "selected");
    $("#srcPortInput").val(srcportvalseparate[1]);
    portTCPorUDP(protocol, value);
        }
        if (dstport == "any") {
    $('#dstPortAny option[value="any"]').attr("selected", "selected");
        } else {
    $("#dstPortValSelect").show();
    var value = "dstvalue";
    $('#dstPortAny option[value="'+dstportvalseparate[0]+'"]').attr("selected", "selected");
    $("#dstPortInput").val(dstportvalseparate[1]);
    portTCPorUDP(protocol, value);
        }
      } else {
        $("#srcportRow").hide();
        $("#destportRow").hide();
      }
    } else {
      $('#aclProtocol option[value="ip"]').attr("selected", "selected");
      $('#srcIPSelect option[value="Any"]').attr("selected", "selected");
      $('#destIPSelect option[value="Any"]').attr("selected", "selected");
      $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
    }
  }
      } else {
  $("#ruleRow").show();
  $("#aclNameRow").show();
  $("#aclStdIPAdd").show();
  $("#sourceIpRow").hide();
  $("#sourceMaskRow").hide();
  $("#destIpRow").hide();
  $("#destMaskRow").hide();
  $("#protocolRow").hide();
  $("#srcportRow").hide();
  $("#destportRow").hide();
  if (titleChecking == $.i18n.prop("addACLHeading")) {
          $("#aclIPAddressRow").hide();
    $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
    $('#addressSelect option[value="Any"]').attr("selected", "selected");
  }
  if (titleChecking == $.i18n.prop("editACLHeading")) {

    var $tr = $('#aclTable tr.hilite').closest('tbody').children('tr:first').children('td');
    var a = $tr.eq(0).text();
    var value = a.split(/\s+/);
    var aclname = value[2].trim();
    var type = value[5].trim();
    var $td = $('#aclTable tr.hilite').closest('tr').children('td');
    var rule = $td.eq(2).text();
    var protocol = $td.eq(3).text();
    var sourceip = $td.eq(4).text();
    var sourcemask = $td.eq(5).text();
    var destip = $td.eq(6).text();
    var destmask = $td.eq(7).text();
    var srcport = $td.eq(8).text();
    var srcportvalseparate = srcport.split(/\s+/);
    var dstport = $td.eq(9).text();
    var dstportvalseparate = dstport.split(/\s+/);

 //   var aclTCPPorts = ["bgp", "chargen", "cmd", "daytime", "discard", "domain", "echo", "exec", "finger", "ftp", "gopher", "hostname", "ident", "irc", "klogin", "kshell", "login", "lpd", "nntp", "pim-auto-rp", "pop2", "pop3", "smtp", "sunrpc", "tacacs", "talk", "telnet", "time", "uucp", "whois", "www"];

//    var aclUDPPorts = ["biff", "bootpc", "bootps", "discard", "dnsix", "domain", "echo", "isakmp", "mobile-ip", "nameserver", "netbios-dgm", "netbios-ns", "netbios-ss", "non500-isakmp", "ntp", "pim-auto-rp", "rip", "snmp", "snmptrap", "sunrpc", "syslog", "tacacs", "talk", "tftp", "time", "who", "xdmcp"];
    if (type == "Standard") {
      $("#aclNameInput").val(aclname);

      if (rule == "permit") {
        $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
      } else {
        $('#aclSelectRule option[value="deny"]').attr("selected", "selected");
      }
      if (sourceip == "any") {
        $('#addressSelect option[value="Any"]').attr("selected", "selected");
        $("#aclIPAddressRow").hide();
      } else {
        $('#addressSelect option[value="IPAddress"]').attr("selected", "selected");
        $("#aclIPAddressRow").show();
        $("#aclIPAddress").val(sourceip);
        $("#aclWildCardMask").val(sourcemask);
      }
    } else {
      $("#aclIPAddressRow").hide();
      $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
      $('#addressSelect option[value="Any"]').attr("selected", "selected");
    }
  }
      }
    });

    $("#addressSelect").live("change", function() {
      addressSelect = $("#addressSelect").val();
      if (addressSelect.trim() == "Any") {
        $("#aclIPAddressRow").hide();
      } else {
        $("#aclIPAddressRow").show();
      }
    });

    $("#srcIPSelect").live("change", function() {
      srcIPSelect = $("#srcIPSelect").val();
      if (srcIPSelect.trim() == "Any") {
        $("#sourceMaskRow").hide();
      } else {
        $("#sourceMaskRow").show();
      }
    });

    $("#destIPSelect").live("change", function() {
      destIPSelect = $("#destIPSelect").val();
      if (destIPSelect.trim() == "Any") {
        $("#destMaskRow").hide();
      } else {
        $("#destMaskRow").show();
      }
    });

    $("#aclProtocol").live("change",function () {
      var titleChecking = $("#dialogACL").dialog("option", "title");
      var protocol = $("#aclProtocol").val();
      if(($("#aclProtocol").val() == "tcp") || ($("#aclProtocol").val() == "udp")){
  $("#srcPortErrorSpan").removeAttr("data-hint");
  $("#srcPortErrorSpan").removeClass("hint--top");
  $("#srcPortInput").removeClass("highlightTextBox");
  $("#dstPortErrorSpan").removeAttr("data-hint");
  $("#dstPortErrorSpan").removeClass("hint--top");
  $("#dstPortInput").removeClass("highlightTextBox");
  $("#srcportRow").show();
  $("#destportRow").show();
  $("#srcPortValSelect").hide();
  $("#dstPortValSelect").hide();
  if (titleChecking == $.i18n.prop("addACLHeading")) {
    $('#srcPortAny option[value="any"]').attr("selected", "selected");
    $('#dstPortAny option[value="any"]').attr("selected", "selected");
    $('#srcPortInput').val('');
    $('#dstPortInput').val('');
  }
  if (titleChecking == $.i18n.prop("editACLHeading") || titleChecking == $.i18n.prop("cloneACLHeading")) {
    if($("#dstPortAny").val() == "any"){
  $("#dstPortValSelect").hide();
      } else {
  $("#dstPortValSelect").show();
  var value1= "dstvalue";
  portTCPorUDP(protocol,value1);
      }
    if($("#srcPortAny").val() == "any"){
  $("#srcPortValSelect").hide();
      } else {
  $("#srcPortValSelect").show();
  var value2= "srcvalue";
  portTCPorUDP(protocol,value2);
      }
  }
      } else {
  $("#srcportRow").hide();
  $("#destportRow").hide();
      }
    });

    $("#srcPortAny").live("change",function () {
      var protocol = $("#aclProtocol").val();
      var value= "srcvalue";
      if($("#srcPortAny").val() == "any"){
  $("#srcPortValSelect").hide();
      } else {
  $("#srcPortValSelect").show();
  portTCPorUDP(protocol,value);
      }
    });

    $("#dstPortAny").live("change",function () {
      var protocol = $("#aclProtocol").val();
      var value= "dstvalue";
      if($("#dstPortAny").val() == "any"){
  $("#dstPortValSelect").hide();
      } else {
  $("#dstPortValSelect").show();
  portTCPorUDP(protocol,value);
      }
    });

    $("#routeVty").live("change", function() {
      routeVty = $("#routeVty").val();
      $("#vtyErrorSpan").removeAttr("data-hint");
      $("#vtyErrorSpan").removeClass("hint--top");
      $("#vtyInput").removeClass("highlightTextBox");
      if (routeVty.trim() == "select") {
        $('#vtyInput').prop('disabled',true);
  $("#vtyInput").val('');
      } else {
        $('#vtyInput').prop('disabled',false);
      }
    });

    $("#routeInterface").live("change", function() {
      var routeInterface = $("#routeInterface").val();
      $("#selectInterfaceName option").each(function() {
  $(this).show();
      });

      if (routeInterface.trim() == "select") {
        $('#selectInterfaceName').prop('disabled',true);
  $('#selectInterfaceName option[value="select"]').attr("selected", "selected");
      } else {
        $('#selectInterfaceName').prop('disabled',false);
  if (routeInterface == "in") {
    $('#selectInterfaceName option[value="in"]').attr("selected", "selected");
    $(".interfaceMultiplediv div.in").each(function() {
      var intValue=$(this).find("div.intfaceroutediv").html();
        $("#selectInterfaceName option[value='"+intValue+"']").hide();
    });
  }
  if (routeInterface == "out") {
    $('#selectInterfaceName option[value="out"]').attr("selected", "selected");
    $(".interfaceMultiplediv div.out").each(function() {
      var intValue=$(this).find("div.intfaceroutediv").html();
        $("#selectInterfaceName option[value='"+intValue+"']").hide();
    });
  }
      }
    });

    $("#vtyInput").on('focusout', function() {
      var vtyValue = $("#vtyInput").val().trim();
      var vtyValidation = validateVty(vtyValue);
      if (vtyValue.length <= 0 ) {
  $("#vtyErrorSpan").addClass("hint--top");
  $("#vtyErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
  $("#vtyInput").addClass("highlightTextBox");
      } else if (vtyValidation === false) {
  $("#vtyErrorSpan").addClass("hint--top");
  $("#vtyErrorSpan").attr("data-hint", $.i18n.prop("vtyErrorMessage"))
  $("#vtyInput").addClass("highlightTextBox");
      } else {
  $("#vtyErrorSpan").removeAttr("data-hint");
  $("#vtyErrorSpan").removeClass("hint--top");
  $("#vtyInput").removeClass("highlightTextBox");
      }
    });

    $("#aclNameInput").on('focusout', function() {
      var aclnumber = $("#aclNameInput").val().trim();
      var hello = aclKeyup();
      if (aclnumber.length <= 0 ) {
  $("#aclNameErrorSpan").addClass("hint--top");
  $("#aclNameErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
  $("#aclNameInput").addClass("highlightTextBox");
      } else if (hello) {
  $("#aclNameErrorSpan").addClass("hint--top");
    $("#aclNameErrorSpan").attr("data-hint", $.i18n.prop("aclError"))
    $("#aclNameInput").addClass("highlightTextBox");
  } else {
    $("#aclNameErrorSpan").removeAttr("data-hint");
    $("#aclNameErrorSpan").removeClass("hint--top");
    $("#aclNameInput").removeClass("highlightTextBox");
  }
    });

    $("#aclIPAddress").on('focusout', function() {
      var stdIP = $("#aclIPAddress").val().trim();
      if (includeWildIPaddress(stdIP) === true) {
  $("#stdSourceErrorSpan").removeAttr("data-hint");
        $("#stdSourceErrorSpan").removeClass("hint--top");
        $("#aclIPAddress").removeClass("highlightTextBox");
      } else {
        $("#stdSourceErrorSpan").addClass("hint--top");
        $("#stdSourceErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
        $("#aclIPAddress").addClass("highlightTextBox");
      }
    });

    $("#aclWildCardMask").on('focusout', function() {
      var stdIP = $("#aclWildCardMask").val().trim();
      if (isValidMaskAddr(stdIP) === true) {
  $("#stdMaskErrorSpan").removeAttr("data-hint");
        $("#stdMaskErrorSpan").removeClass("hint--top");
        $("#aclWildCardMask").removeClass("highlightTextBox");
      } else {
        $("#stdMaskErrorSpan").addClass("hint--top");
        $("#stdMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"));
        $("#aclWildCardMask").addClass("highlightTextBox");
      }
    });

    $("#sourceIpInput").on('focusout', function() {
      var extdSrcIP = $("#sourceIpInput").val().trim();
      if (includeWildIPaddress(extdSrcIP) === true) {
  $("#extdSrcIPErrorSpan").removeAttr("data-hint");
        $("#extdSrcIPErrorSpan").removeClass("hint--top");
        $("#sourceIpInput").removeClass("highlightTextBox");
      } else {
        $("#extdSrcIPErrorSpan").addClass("hint--top");
        $("#extdSrcIPErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
        $("#sourceIpInput").addClass("highlightTextBox");
      }
    });

    $("#sourceMaskInput").on('focusout', function() {
      var stdIP = $("#sourceMaskInput").val().trim();
      if (isValidMaskAddr(stdIP) === true) {
  $("#extdSrcMaskErrorSpan").removeAttr("data-hint");
        $("#extdSrcMaskErrorSpan").removeClass("hint--top");
        $("#sourceMaskInput").removeClass("highlightTextBox");
      } else {
        $("#extdSrcMaskErrorSpan").addClass("hint--top");
        $("#extdSrcMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"));
        $("#sourceMaskInput").addClass("highlightTextBox");
      }
    });

    $("#deskIPInput").on('focusout', function() {
      var extdDstIP = $("#deskIPInput").val().trim();
      if (includeWildIPaddress(extdDstIP) === true) {
  $("#extdDstIPErrorSpan").removeAttr("data-hint");
        $("#extdDstIPErrorSpan").removeClass("hint--top");
        $("#deskIPInput").removeClass("highlightTextBox");
      } else {
        $("#extdDstIPErrorSpan").addClass("hint--top");
        $("#extdDstIPErrorSpan").attr("data-hint", $.i18n.prop("notValidIpSubnet"));
        $("#deskIPInput").addClass("highlightTextBox");
      }
    });

    $("#destMaskInput").on('focusout', function() {
      var stdIP = $("#destMaskInput").val().trim();
      if (isValidMaskAddr(stdIP) === true) {
  $("#extdDstMaskErrorSpan").removeAttr("data-hint");
        $("#extdDstMaskErrorSpan").removeClass("hint--top");
        $("#destMaskInput").removeClass("highlightTextBox");
      } else {
        $("#extdDstMaskErrorSpan").addClass("hint--top");
        $("#extdDstMaskErrorSpan").attr("data-hint", $.i18n.prop("notValidWildcardBits"));
        $("#destMaskInput").addClass("highlightTextBox");
      }
    });

    $("#srcPortInput").on('focusout', function() {
      var stdIP = $("#srcPortInput").val().trim();
      if (isPortValid(stdIP) === true && tcpOrUdpcheck(stdIP)) {
  $("#srcPortErrorSpan").removeAttr("data-hint");
        $("#srcPortErrorSpan").removeClass("hint--top");
        $("#srcPortInput").removeClass("highlightTextBox");
      } else {
        $("#srcPortErrorSpan").addClass("hint--top");
        $("#srcPortErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
        $("#srcPortInput").addClass("highlightTextBox");
      }
    });

    $("#dstPortInput").on('focusout', function() {
      var stdIP = $("#dstPortInput").val().trim();
      if (isPortValid(stdIP) === true && tcpOrUdpcheck(stdIP)) {
  $("#dstPortErrorSpan").removeAttr("data-hint");
        $("#dstPortErrorSpan").removeClass("hint--top");
        $("#dstPortInput").removeClass("highlightTextBox");
      } else {
        $("#dstPortErrorSpan").addClass("hint--top");
        $("#dstPortErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
        $("#dstPortInput").addClass("highlightTextBox");
      }
    });

    $("#addVty").on('click', function(e) {	
      var vtyValue = $("#vtyInput").val().trim();
      var routeVty = $("#routeVty").val()
      var vtyValidation = validateVty(vtyValue);
      if(routeVty == "select"){
  $("#vtySelectErrorSpan").addClass("hint--top");
  $("#vtySelectErrorSpan").attr("data-hint", $.i18n.prop("mapRoute"));
  $("#routeVty").addClass("highlightTextBox");
      } else if (vtyValue.length <= 0 ) {
  $("#vtyErrorSpan").addClass("hint--top");
  $("#vtyErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
  $("#vtyInput").addClass("highlightTextBox");
      } else if (vtyValidation === false) {
  $("#vtyErrorSpan").addClass("hint--top");
  $("#vtyErrorSpan").attr("data-hint", $.i18n.prop("vtyErrorMessage"))
  $("#vtyInput").addClass("highlightTextBox");
      } else {
  var hi = $(".vtyMultiplediv").find("div.vtyroutediv").length;
  var count = 1;
  if (hi >= 1) {
    var splitVty = vtyValue.split("-");
    if (splitVty.length > 1) {
      var low = Number(splitVty[0]);
      var high = Number(splitVty[1]);
      $(".vtyMultiplediv > div").each(function() {
        var checkingValue=$(this).find('div.vtyroutediv').text();
        var checkingRoute=$(this).find('div.vtyInputdiv').text().trim();
        var checkSplitArr = checkingValue.split("-");
    if (checkingRoute == routeVty) {
    if (checkSplitArr.length > 1) {
      var valueLow = Number(checkSplitArr[0]);
      var valueHigh = Number(checkSplitArr[1]);
      if ((low >= valueLow && low <= valueHigh) || (high >= valueLow && high <= valueHigh)){
        count++;
      }
    } else {
      if (low == checkSplitArr || high == checkSplitArr) {
        count++;
      }
    }
    }
      });
    } else {
      var vtyIntegerVal = Number(splitVty);
      $(".vtyMultiplediv > div").each(function() {
        var intValue=$(this).find('div.vtyroutediv').text();
        var intRoute=$(this).find('div.vtyInputdiv').text().trim();
        var splitAddedVty = intValue.split("-");
        if (intRoute == routeVty) {
        if (splitAddedVty.length > 1) {
    var addedLow = Number(splitAddedVty[0]);
    var addedHigh = Number(splitAddedVty[1]);
    if (vtyIntegerVal >= addedLow && vtyIntegerVal <= addedHigh ) {
      count++;
    }
        } else {
    if (vtyIntegerVal == splitAddedVty) {
      count++;
    }
        }
        }
      });
    }
    if (count > 1) {
      $("#vtyErrorSpan").addClass("hint--top");
      //$("#vtyErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
      $("#vtyErrorSpan").attr("data-hint", "Value added already");
      $("#vtyInput").addClass("highlightTextBox");
    } else {
      $("#vtyErrorSpan").removeAttr("data-hint");
      $("#vtyErrorSpan").removeClass("hint--top");
      $("#vtyInput").removeClass("highlightTextBox");
      $('.vtyMultiplediv').append('<div class='+routeVty+'><div class="vtyroutediv">' + $('#vtyInput').val() +
              '</div><div class="vtyInputdiv">' + $('#routeVty').val() + '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteDestAddrMask class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass634" /></div>');
      $('#routeVty option[value="select"]').attr("selected", "selected");
      $("#vtyInput").val('');
      $('#vtyInput').prop('disabled',true);
      $('#addedPopupButton').show();
	  
    }
  } else {
    $("#vtyErrorSpan").removeAttr("data-hint");
    $("#vtyErrorSpan").removeClass("hint--top");
    $("#vtyInput").removeClass("highlightTextBox");

    $('.vtyMultiplediv').append('<div class="'+routeVty+'"><div class="vtyroutediv">' + $('#vtyInput').val() +
              '</div><div class="vtyInputdiv">' + $('#routeVty').val() + '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteDestAddrMask class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass634" /></div>');
    $('#routeVty option[value="select"]').attr("selected", "selected");
    $("#vtyInput").val('');
    $('#vtyInput').prop('disabled',true);
	$('#addedPopupButton').show();
  }
      }
      return false;
    });

    $("#addIF").on('click', function(e) {	
      var routeInterface = $("#routeInterface").val();
      var selectInterfaceName = $("#selectInterfaceName").val();
      if (routeInterface == "select") {
        $("#interfaceSelectErrorSpan").addClass("hint--top");
        //$("#mapInterfaceErrorSpan").attr("data-hint", $.i18n.prop("mapRoute"));
        $("#interfaceSelectErrorSpan").attr("data-hint", $.i18n.prop("mapRoute"));
        $("#routeInterface").addClass("highlightTextBox");
      } else if (selectInterfaceName == "selectInterface") {
        $("#mapInterfaceErrorSpan").addClass("hint--top");
        //$("#mapInterfaceErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#mapInterfaceErrorSpan").attr("data-hint", $.i18n.prop("mapInterfaceText"));
        $("#selectInterfaceName").addClass("highlightTextBox");
      } else {
        //$('#interfaceAddDialog').append('<div class="'+routeInterface+'"><div class="intfaceroutediv">' + $('#selectInterfaceName').val() +
        //                                 '</div><div class="intfaceInputdiv">' + $('#routeInterface').val() + '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteDestAddrMask class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass634" /></div></div>');
        $(function(){ $('#interfaceAddDialog').append('<div class="'+routeInterface+'"><div class="intfaceroutediv">' + $('#selectInterfaceName').val() + '</div><div class="intfaceInputdiv">' + $('#routeInterface').val() + '&nbsp; &nbsp; &nbsp;<a id=dmvpnDeleteDestAddrMask class="utmSprite close deleteDestAddrMask ccpexpCSSReplaceClass634" /></div></div>');});
        $('#routeInterface option[value="select"]').attr("selected", "selected");
        $('#selectInterfaceName option[value="selectInterface"]').attr("selected", "selected");
        $('#selectInterfaceName').prop('disabled',true);
		$('#addedInterfacePopupButton').show();
      }
      return false;
    });

    $('#routeVty').on('focusout', function() {
      if ($("#vtySelectErrorSpan").hasClass('hint--top')) {
        $("#vtySelectErrorSpan").removeAttr("data-hint");
        $("#mapInterfaceErrorSpan").removeClass("hint--top");
        $("#routeVty").removeClass("highlightTextBox");
      }
    });

    $('#routeInterface').on('focusout', function() {
      if ($("#interfaceSelectErrorSpan").hasClass('hint--top')) {
        $("#interfaceSelectErrorSpan").removeAttr("data-hint");
        $("#interfaceSelectErrorSpan").removeClass("hint--top");
        $("#routeInterface").removeClass("highlightTextBox");
      }
    });

    $('#selectInterfaceName').on('focusout', function() {
      if ($("#mapInterfaceErrorSpan").hasClass('hint--top')) {
        $("#mapInterfaceErrorSpan").removeAttr("data-hint");
        $("#mapInterfaceErrorSpan").removeClass("hint--top");
        $("#selectInterfaceName").removeClass("highlightTextBox");
      }
    });

    $('#routeHttp').on('focusout', function() {
      if ($("#httpErrorSpan").hasClass('hint--top')) {
        $("#httpErrorSpan").removeAttr("data-hint");
        $("#httpErrorSpan").removeClass("hint--top");
        $("#routeHttp").removeClass("highlightTextBox");
      }
    });

    $("#addedPopupButton").click(function(e){
      $('#vtyDialog').dialog("open");
      e.preventDefault();
    });

    $("#addedInterfacePopupButton").click(function(e){
      $('#interfaceAddDialog').dialog("open");
      e.preventDefault();
    });

    $("#addedHttpPopupButton").click(function(e){
      $('#httpAddDialog').dialog("open");
      e.preventDefault();
    });

    $('#dmvpnDeleteDestAddrMask').on('click', function() {
      $(".content").css({'min-height': '-=20px'});
    });

    $(".vtyMultiplediv").on('click', '.deleteDestAddrMask', function() {
      $(this).parent('div').parent().remove();
      return false;
    });

    $(".interfaceMultipleDiv").on('click', '.deleteDestAddrMask', function() {
      $(this).parent('div').prev('div').remove();
      $(this).parent('div').remove();
      return false;
    });

    $(".httpMultipleDiv").on('click', '.deleteHttpRow', function() {
      var httpVal = $(this).parent("div.httproutediv").text().trim();
      $(this).parent('div').remove();
      $('#routeHttp option[value="'+httpVal+'"]').show();
      return false;
    });

    function aclKeyup(){
      var stdorextd = $('input[name=aclType]:checked').val();
      var aclnumber = $("#aclNameInput").val().trim();
      var regex = new RegExp("^[a-zA-Z0-9=.*!@#$%^&*_-]+$");

      var val = false;
      if (aclnumber.length > 0) {
  if(regex.test(aclnumber)){
    if (stdorextd == "extended") {
      if (isNaN(aclnumber)) {
        val = false;
        //$("#aclNameErrorSpan").hide();
      } else {
        if (aclnumber < 100 || aclnumber > 199) {
    val = true;
    //$("#aclNameErrorSpan").show();
        }
      }
    }
    if (stdorextd == "standard") {
      if (isNaN(aclnumber)) {
        val = false;
        //$("#aclNameErrorSpan").hide();
      } else {
        if (aclnumber < 1 || aclnumber > 99) {
    val = true;
    //$("#aclNameErrorSpan").show();
        }
      }
    }
  } else {
    val = true;
  }
      }
      return val;
    }

    function triggerDelete($this){
      $('#aclTable input:checkbox').removeAttr('checked');
      $("#aclTable tbody tr").removeClass('hilite');
      $this.find('input:checkbox').eq(0).prop("checked", true);
      var selectedRows = $("#aclTable tbody input:checkbox:checked").length;
      if (selectedRows == 1 && $this.hasClass('disabledObjectGroup') === false) {
  $this.addClass("hilite");
  //enableDisableButton("aclTable", "Add");
  $("#addACL").hide();
  $("#cloneACL").show();
  $("#interfaceACL").show();
  $("#rowDelete").dialog("open");
      }else {
  $("#rowSelect").dialog("open");
      }
      if ($this.hasClass('disabledObjectGroup')) {
  $('#aclTable input:checkbox').removeAttr('checked');
      }
    }

    function triggerACLEdit($this) {
      $('#aclTable input:checkbox').removeAttr('checked');
      $("#aclTable tbody tr").removeClass('hilite');
      $this.find('input:checkbox').eq(0).prop("checked", true);
      var selectedRows = $("#aclTable tbody input:checkbox:checked").length;
      if (selectedRows == 1 && $this.hasClass('disabledObjectGroup') === false) {
  $this.addClass("hilite");
  //enableDisableButton("aclTable", "Add");
  $("#addACL").hide();
  $("#cloneACL").show();
  $("#interfaceACL").show();
  $("#addACL").trigger("click");
      }else {
  $("#rowSelect").dialog("open");
      }
      if ($this.hasClass('disabledObjectGroup')) {
  $('#aclTable input:checkbox').removeAttr('checked');
      }
    }

    $("#vtyDialog").dialog({
      autoOpen: false,
      height: 300,
      width: 480,
      modal: true,
      close: function() {
  $(this).dialog("close");
      }
    });

    $("#interfaceAddDialog").dialog({
      autoOpen: false,
      height: 300,
      width: 480,
      modal: true,
      close: function() {
  $(this).dialog("close");
      }
    });

    $("#httpAddDialog").dialog({
      autoOpen: false,
      height: 300,
      width: 480,
      modal: true,
      close: function() {
  $(this).dialog("close");
      }
    });

    $("#dialogACLInterface").dialog({
      autoOpen: false,
      height: 670,
      width: 750,
      modal: true,
      close: function() {
  $(this).dialog("close");
      }
    });

    $("#dialogACL").dialog({
      autoOpen: false,
      height: 670,
      width: 700,
      modal: true,
      buttons: [{
    id: "aclDialogOk",
    text: $.i18n.prop("ok"),
          click: function(event) {
            $("#dialogACL").dialog("close");
            blockPage("Applying");
            setTimeout(function(){
              try {
    var stdAclName = $("#aclNameInput").val();
//    var stdAclIp = $("#addressSelect").val();
//    var stdIpAddr = $("#aclIPAddress").val();
//    var stdAclWildMask = $("#aclWildCardMask").val();
//    var extdAclSrcIp = $("#srcIPSelect").val();
//    var extdAclDestIp = $("#destIPSelect").val();
//    var extdSrcIPAddr = $("#sourceIpInput").val();
//    var extdSrcmask = $("#sourceMaskInput").val();
//    var extdDestIPAddr = $("#deskIPInput").val();
//    var extdDestmask = $("#destMaskInput").val();
    var protocol = $("#aclProtocol").val();
    var portSrc = $("#srcPortAny").val();
    var portDst = $("#dstPortAny").val();
    var portSrcVal = $("#srcPortInput").val();
    var portDstVal = $("#dstPortInput").val();
    var aclNameValidation = aclKeyup();
    if (aclNameValidation) {
      $("#aclNameErrorSpan").addClass("hint--top");
      $("#aclNameErrorSpan").attr("data-hint", $.i18n.prop("aclError"));
      $("#aclNameInput").addClass("highlightTextBox");
                  $.unblockUI();
                  $("#dialogACL").dialog("open");
    } else if (stdAclName.length <= 0) {
        $("#aclNameErrorSpan").addClass("hint--top");
        $("#aclNameErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#aclNameInput").addClass("highlightTextBox");
        $.unblockUI();
        $("#dialogACL").dialog("open");
    } else if (protocol == "tcp" || protocol == "udp"){
      if (portSrc != "any" && portDst != "any"){
        if(tcpOrUdpcheck(portSrcVal) && tcpOrUdpcheck(portDstVal)){
          checkIpAddressValidation();
        } else {
          if (portSrcVal.length <= 0) {
      if (portSrcVal.length <= 0) {
        $("#srcPortErrorSpan").addClass("hint--top");
        $("#srcPortErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#srcPortInput").addClass("highlightTextBox");
        $.unblockUI();
        $("#dialogACL").dialog("open");
      } else {
        $("#srcPortErrorSpan").addClass("hint--top");
        $("#srcPortErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
        $("#srcPortInput").addClass("highlightTextBox");
        $.unblockUI();
        $("#dialogACL").dialog("open");
      }
          } else {
      if (portDstVal.length <=0) {
        $("#dstPortErrorSpan").addClass("hint--top");
        $("#dstPortErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
        $("#dstPortInput").addClass("highlightTextBox");
        $.unblockUI();
        $("#dialogACL").dialog("open");
      } else {
        $("#dstPortErrorSpan").addClass("hint--top");
        $("#dstPortErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
        $("#dstPortInput").addClass("highlightTextBox");
        $.unblockUI();
        $("#dialogACL").dialog("open");
      }
          }
        }
      } else if(portSrc != "any" && portDst == "any") {
        if(tcpOrUdpcheck(portSrcVal)){
          checkIpAddressValidation();
        } else {
          if (portSrcVal.length <= 0) {
      $("#srcPortErrorSpan").addClass("hint--top");
      $("#srcPortErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
      $("#srcPortInput").addClass("highlightTextBox");
      $.unblockUI();
      $("#dialogACL").dialog("open");
          } else {
      $("#srcPortErrorSpan").addClass("hint--top");
      $("#srcPortErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
      $("#srcPortInput").addClass("highlightTextBox");
      $.unblockUI();
      $("#dialogACL").dialog("open");
          }
        }
      } else if(portSrc == "any" && portDst != "any") {
        if(tcpOrUdpcheck(portDstVal)){
          checkIpAddressValidation();
        } else {
          if (portDstVal.length <=0) {
      $("#dstPortErrorSpan").addClass("hint--top");
      $("#dstPortErrorSpan").attr("data-hint", $.i18n.prop("fieldIsEmpty"));
      $("#dstPortInput").addClass("highlightTextBox");
      $.unblockUI();
      $("#dialogACL").dialog("open");
          } else {
      $("#dstPortErrorSpan").addClass("hint--top");
      $("#dstPortErrorSpan").attr("data-hint", $.i18n.prop("notValidPort"));
      $("#dstPortInput").addClass("highlightTextBox");
      $.unblockUI();
      $("#dialogACL").dialog("open");
          }
        }
      } else {
        checkIpAddressValidation();
      }
    } else {
      checkIpAddressValidation();
    }
              } catch (error) {
                $("#dialogACL").dialog("open");
                $('#aclErrorMessage').html(error.errorResponse);
                $('#aclRuleError').show();
    $.unblockUI();
                return false;
              }
        event.preventDefault();
            }, 1000);
          }}, {
          id: "aclDialogCancel",
          text: $.i18n.prop("cancel"),
          "class": 'entranslationSizeReplace',
          click: function() {
            $(this).dialog("close");
          }
        }
      ],
      close: function() {
  $(this).dialog("close");
      }
    });

    $("#cloneACL")
      .button()
      .click(function(e) {
  var selectedRows = $("#aclTable tbody input:checkbox:checked").length;
  $("#aclRuleError").hide();
  if (selectedRows == 1) {
    $("#dialogACL").dialog("open");
    $("#dialogACL").dialog("option", "title", $.i18n.prop("cloneACLHeading"));
    $('#aclDialogForm').resetForm();
    $("#srcPort").empty();
    $("#dstPort").empty();
    editOrClone();
  } else if(selectedRows >1){
    $("#selectOneRow").dialog("open");
  } else {
    $("#rowSelect").dialog("open");
  }
  e.preventDefault();
  return false;
      }
    );

    $("#addACL")
      .button()
      .click(function(e) {
  var selectedRows = $("#aclTable tbody input:checkbox:checked").length;
  $('#aclDialogForm').resetForm();
  $("#aclRuleError").hide();
  uiValidator();
  if (selectedRows == 1) {
    //editing acl
    $("#dialogACL").dialog("open");
    $("#dialogACL").dialog("option", "title", $.i18n.prop("editACLHeading"));
    $('#aclDialogForm').resetForm();
    $('#aclProtocol option[value="ip"]').attr("selected", "selected");
    $("#srcPort").empty();
    $("#dstPort").empty();
    editOrClone();
  } else {
    //adding acl
    $("#dialogACL").dialog("open");
    $("#dialogACL").dialog("option", "title", $.i18n.prop("addACLHeading"));
    $('#aclDialogForm').resetForm();
    $('input:radio[name=aclType][value="standard"]').prop('disabled', false);
    $('input:radio[name=aclType][value="extended"]').prop('disabled', false);
    $('#aclNameInput').prop('disabled',false);
    $("#ruleRow").show();
          $('input[name=aclType]:checked').val();
    $("#aclStdIPAdd").show();
    $("#aclIPAddressRow").hide();
          $("#aclNameRow").show();
    $("#sourceIpRow").hide();
    $("#sourceMaskRow").hide();
          $("#destIpRow").hide();
    $("#destMaskRow").hide();
    $("#protocolRow").hide();
          $("#srcportRow").hide();
    $("#destportRow").hide();
    $('#aclSelectRule option[value="permit"]').attr("selected", "selected");
          $('#addressSelect option[value="Any"]').attr("selected", "selected");
          $('#aclProtocol option[value="ip"]').attr("selected", "selected");
  }
  e.preventDefault();
  return false;
      }
    );

    $("#deleteACL")
      .button()
      .click(function(e) {
  //var aclname,sourceip,type,protocol,sourcemask,rule,destip,destmask;
  //var arr=[];
  var selectedRows = $("#aclTable tbody input:checkbox:checked").length;
        $td = $('#aclTable tr.hilite').closest('tr').children('td');
        if (selectedRows == 0) {
          $.unblockUI();
          $("#rowSelect").dialog("open");
    e.preventDefault();
    return false;
        } else {
          $("#rowDelete").dialog("open");
        }
        e.preventDefault();
  return false;
      }
    );

    $("#applyMapButton")
      .button()
      .click(function(e) {
		$('#addedPopupButton').hide();
	    $('#addedInterfacePopupButton').hide();  
        $("#dialogACLInterface").dialog("close");
            blockPage("Applying");
            e.preventDefault();
            setTimeout(function(){
              try {
    var response;
    var httpCheck = false;
    $("#dialogACLInterface").dialog("close");
    var $tr = $("#dialogACLInterface").dialog("option", "title");
    var value = $tr.split(":");
    var aclname = value[1].trim();
//    var type = value[5].trim();
    var vtyCount = $(".vtyMultiplediv").find("div.vtyroutediv").length;
    var interfaceCount = $(".interfaceMultiplediv").find("div.intfaceroutediv").length;
    if($("#httpEnable").is(':checked')){
      httpCheck = true;  // checked
    }
    if (vtyCount > 0 || interfaceCount > 0|| httpCheck === true) {
      if (vtyCount > 0) {
        var configCommand1="";
        $(".vtyMultiplediv").find("div.in").each(function(){
          var vtyVal = $(this).find("div.vtyroutediv").text().split("-");
          if (vtyVal.length > 1) {
      var low = Number(vtyVal[0]);
      var high = Number(vtyVal[1]);
      configCommand1 =configCommand1+"line vty "+low+" "+high+"\n";
          } else {
      var vtyIntegerVal = Number(vtyVal);
      configCommand1 =configCommand1+"line vty "+vtyIntegerVal+"\n";
          }
          configCommand1 = configCommand1 + "\n access-class " + aclname + " " + $(this).find("div.vtyInputdiv").text().trim()+"\n";
          configCommand1 = configCommand1 + "\n exit"+"\n";
        });
        $(".vtyMultiplediv").find("div.out").each(function(){
          var vtyVal = $(this).find("div.vtyroutediv").text().split("-");
          if (vtyVal.length > 1) {
      var low = Number(vtyVal[0]);
      var high = Number(vtyVal[1]);
      configCommand1 =configCommand1+"line vty "+low+" "+high+"\n";
          } else {
      var vtyIntegerVal = Number(vtyVal);
      configCommand1 =configCommand1+"line vty "+vtyIntegerVal+"\n";
          }
          configCommand1 = configCommand1 + "\n access-class " + aclname + " " + $(this).find("div.vtyInputdiv").text().trim()+"\n";
          configCommand1 = configCommand1 + "\n exit"+"\n";
        });
        response = deviceCommunicator.getConfigCmdOutput(configCommand1, false);
      }
      if (interfaceCount > 0) {
        var configCommand="";
        $(".interfaceMultiplediv").find("div.in").each(function(){
          configCommand =configCommand+"interface "+ $(this).find("div.intfaceroutediv").text()+"\n";
          configCommand = configCommand + "\n ip access-group " + aclname + " " + $(this).find("div.intfaceInputdiv").text().trim()+"\n";
          configCommand = configCommand + "\n exit"+"\n";
        });
        $(".interfaceMultiplediv").find("div.out").each(function(){
          configCommand =configCommand+"interface "+ $(this).find("div.intfaceroutediv").text()+"\n";
          configCommand = configCommand + "\n ip access-group " + aclname + " " + $(this).find("div.intfaceInputdiv").text().trim()+"\n";
          configCommand = configCommand + "\n exit"+"\n";
        });
        response = deviceCommunicator.getConfigCmdOutput(configCommand, false);
      }
      if (httpCheck === true) {
        var configCommand2="";
        configCommand2 ="ip http access-class "+ aclname;
        response = deviceCommunicator.getConfigCmdOutput(configCommand2, false);
      }
      refresh();
      $.unblockUI();
      deviceCommunicator.doWriteMemory();
    } else {
	  $('#addedPopupButton').hide();
	  $('#addedInterfacePopupButton').hide(); 	
      $("#dialogACLInterface").dialog("open");
      $("#aclMapNotification").dialog("open");
      $.unblockUI();
    }
        }catch(error){
	$('#addedPopupButton').hide();
	$('#addedInterfacePopupButton').hide();		
    $("#dialogACLInterface").dialog("open");
    $('#aclBindErrorMessage').html(error.errorResponse);
    $('#aclBindError').show();
    $('#aclInterfaceDialogForm').resetForm();
    $('.interfaceMultipleDiv').empty();
    $.unblockUI();
                return false;
        }
        e.preventDefault();
          }, 1000);
      });
  }

  return {
    aclLoading: aclLoading
  };
}());
/*! 
 * jQuery Steps v1.0.7 - 05/07/2014
 * Copyright (c) 2014 Rafael Staib (http://www.jquery-steps.com)
 * Licensed under MIT http://www.opensource.org/licenses/MIT
 */
;(function ($, undefined)
{
$.fn.extend({
    _aria: function (name, value)
    {
        return this.attr("aria-" + name, value);
    },

    _removeAria: function (name)
    {
        return this.removeAttr("aria-" + name);
    },

    _enableAria: function (enable)
    {
        return (enable == null || enable) ? 
            this.removeClass("disabled")._aria("disabled", "false") : 
            this.addClass("disabled")._aria("disabled", "true");
    },

    _showAria: function (show)
    {
        return (show == null || show) ? 
            this.show()._aria("hidden", "false") : 
            this.hide()._aria("hidden", "true");
    },

    _selectAria: function (select)
    {
        return (select == null || select) ? 
            this.addClass("current")._aria("selected", "true") : 
            this.removeClass("current")._aria("selected", "false");
    },

    _id: function (id)
    {
        return (id) ? this.attr("id", id) : this.attr("id");
    }
});

if (!String.prototype.format)
{
    String.prototype.format = function()
    {
        var args = (arguments.length === 1 && $.isArray(arguments[0])) ? arguments[0] : arguments;
        var formattedString = this;
        for (var i = 0; i < args.length; i++)
        {
            var pattern = new RegExp("\\{" + i + "\\}", "gm");
            formattedString = formattedString.replace(pattern, args[i]);
        }
        return formattedString;
    };
}

/**
 * A global unique id count.
 *
 * @static
 * @private
 * @property _uniqueId
 * @type Integer
 **/
var _uniqueId = 0;

/**
 * The plugin prefix for cookies.
 *
 * @final
 * @private
 * @property _cookiePrefix
 * @type String
 **/
var _cookiePrefix = "jQu3ry_5teps_St@te_";

/**
 * Suffix for the unique tab id.
 *
 * @final
 * @private
 * @property _tabSuffix
 * @type String
 * @since 0.9.7
 **/
var _tabSuffix = "-t-";

/**
 * Suffix for the unique tabpanel id.
 *
 * @final
 * @private
 * @property _tabpanelSuffix
 * @type String
 * @since 0.9.7
 **/
var _tabpanelSuffix = "-p-";

/**
 * Suffix for the unique title id.
 *
 * @final
 * @private
 * @property _titleSuffix
 * @type String
 * @since 0.9.7
 **/
var _titleSuffix = "-h-";

/**
 * An error message for an "index out of range" error.
 *
 * @final
 * @private
 * @property _indexOutOfRangeErrorMessage
 * @type String
 **/
var _indexOutOfRangeErrorMessage = "Index out of range.";

/**
 * An error message for an "missing corresponding element" error.
 *
 * @final
 * @private
 * @property _missingCorrespondingElementErrorMessage
 * @type String
 **/
var _missingCorrespondingElementErrorMessage = "One or more corresponding step {0} are missing.";

/**
 * Adds a step to the cache.
 *
 * @static
 * @private
 * @method addStepToCache
 * @param wizard {Object} A jQuery wizard object
 * @param step {Object} The step object to add
 **/
function addStepToCache(wizard, step)
{
    getSteps(wizard).push(step);
}

function analyzeData(wizard, options, state)
{
    var stepTitles = wizard.children(options.headerTag),
        stepContents = wizard.children(options.bodyTag);

    // Validate content
    if (stepTitles.length > stepContents.length)
    {
        throwError(_missingCorrespondingElementErrorMessage, "contents");
    }
    else if (stepTitles.length < stepContents.length)
    {
        throwError(_missingCorrespondingElementErrorMessage, "titles");
    }
        
    var startIndex = options.startIndex;

    state.stepCount = stepTitles.length;

    // Tries to load the saved state (step position)
    if (options.saveState && $.cookie)
    {
        var savedState = $.cookie(_cookiePrefix + getUniqueId(wizard));
        // Sets the saved position to the start index if not undefined or out of range 
        var savedIndex = parseInt(savedState, 0);
        if (!isNaN(savedIndex) && savedIndex < state.stepCount)
        {
            startIndex = savedIndex;
        }
    }

    state.currentIndex = startIndex;

    stepTitles.each(function (index)
    {
        var item = $(this), // item == header
            content = stepContents.eq(index),
            modeData = content.data("mode"),
            mode = (modeData == null) ? contentMode.html : getValidEnumValue(contentMode,
                (/^\s*$/.test(modeData) || isNaN(modeData)) ? modeData : parseInt(modeData, 0)),
            contentUrl = (mode === contentMode.html || content.data("url") === undefined) ?
                "" : content.data("url"),
            contentLoaded = (mode !== contentMode.html && content.data("loaded") === "1"),
            step = $.extend({}, stepModel, {
                title: item.html(),
                content: (mode === contentMode.html) ? content.html() : "",
                contentUrl: contentUrl,
                contentMode: mode,
                contentLoaded: contentLoaded
            });

        addStepToCache(wizard, step);
    });
}

/**
 * Triggers the onCanceled event.
 *
 * @static
 * @private
 * @method cancel
 * @param wizard {Object} The jQuery wizard object
 **/
function cancel(wizard)
{
    wizard.triggerHandler("canceled");
}

function decreaseCurrentIndexBy(state, decreaseBy)
{
    return state.currentIndex - decreaseBy;
}

/**
 * Removes the control functionality completely and transforms the current state to the initial HTML structure.
 *
 * @static
 * @private
 * @method destroy
 * @param wizard {Object} A jQuery wizard object
 **/
function destroy(wizard, options)
{
    var eventNamespace = getEventNamespace(wizard);

    // Remove virtual data objects from the wizard
    wizard.unbind(eventNamespace).removeData("uid").removeData("options")
        .removeData("state").removeData("steps").removeData("eventNamespace")
        .find(".actions a").unbind(eventNamespace);

    // Remove attributes and CSS classes from the wizard
    wizard.removeClass(options.clearFixCssClass + " vertical");

    var contents = wizard.find(".content > *");

    // Remove virtual data objects from panels and their titles
    contents.removeData("loaded").removeData("mode").removeData("url");

    // Remove attributes, CSS classes and reset inline styles on all panels and their titles
    contents.removeAttr("id").removeAttr("role").removeAttr("tabindex")
        .removeAttr("class").removeAttr("style")._removeAria("labelledby")
        ._removeAria("hidden");

    // Empty panels if the mode is set to 'async' or 'iframe'
    wizard.find(".content > [data-mode='async'],.content > [data-mode='iframe']").empty();

    var wizardSubstitute = $("<{0} class=\"{1}\"></{0}>".format(wizard.get(0).tagName, wizard.attr("class")));

    var wizardId = wizard._id();
    if (wizardId != null && wizardId !== "")
    {
        wizardSubstitute._id(wizardId);
    }

    wizardSubstitute.html(wizard.find(".content").html());
    wizard.after(wizardSubstitute);
    wizard.remove();

    return wizardSubstitute;
}

/**
 * Triggers the onFinishing and onFinished event.
 *
 * @static
 * @private
 * @method finishStep
 * @param wizard {Object} The jQuery wizard object
 * @param state {Object} The state container of the current wizard
 **/
function finishStep(wizard, state)
{
    var currentStep = wizard.find(".steps li").eq(state.currentIndex);

    if (wizard.triggerHandler("finishing", [state.currentIndex]))
    {
        currentStep.addClass("done").removeClass("error");
        wizard.triggerHandler("finished", [state.currentIndex]);
    }
    else
    {
        currentStep.addClass("error");
    }
}

/**
 * Gets or creates if not exist an unique event namespace for the given wizard instance.
 *
 * @static
 * @private
 * @method getEventNamespace
 * @param wizard {Object} A jQuery wizard object
 * @return {String} Returns the unique event namespace for the given wizard
 */
function getEventNamespace(wizard)
{
    var eventNamespace = wizard.data("eventNamespace");

    if (eventNamespace == null)
    {
        eventNamespace = "." + getUniqueId(wizard);
        wizard.data("eventNamespace", eventNamespace);
    }

    return eventNamespace;
}

function getStepAnchor(wizard, index)
{
    var uniqueId = getUniqueId(wizard);

    return wizard.find("#" + uniqueId + _tabSuffix + index);
}

function getStepPanel(wizard, index)
{
    var uniqueId = getUniqueId(wizard);

    return wizard.find("#" + uniqueId + _tabpanelSuffix + index);
}

function getStepTitle(wizard, index)
{
    var uniqueId = getUniqueId(wizard);

    return wizard.find("#" + uniqueId + _titleSuffix + index);
}

function getOptions(wizard)
{
    return wizard.data("options");
}

function getState(wizard)
{
    return wizard.data("state");
}

function getSteps(wizard)
{
    return wizard.data("steps");
}

/**
 * Gets a specific step object by index.
 *
 * @static
 * @private
 * @method getStep
 * @param index {Integer} An integer that belongs to the position of a step
 * @return {Object} A specific step object
 **/
function getStep(wizard, index)
{
    var steps = getSteps(wizard);

    if (index < 0 || index >= steps.length)
    {
        throwError(_indexOutOfRangeErrorMessage);
    }

    return steps[index];
}

/**
 * Gets or creates if not exist an unique id from the given wizard instance.
 *
 * @static
 * @private
 * @method getUniqueId
 * @param wizard {Object} A jQuery wizard object
 * @return {String} Returns the unique id for the given wizard
 */
function getUniqueId(wizard)
{
    var uniqueId = wizard.data("uid");

    if (uniqueId == null)
    {
        uniqueId = wizard._id();
        if (uniqueId == null)
        {
            uniqueId = "steps-uid-".concat(_uniqueId);
            wizard._id(uniqueId);
        }

        _uniqueId++;
        wizard.data("uid", uniqueId);
    }

    return uniqueId;
}

/**
 * Gets a valid enum value by checking a specific enum key or value.
 * 
 * @static
 * @private
 * @method getValidEnumValue
 * @param enumType {Object} Type of enum
 * @param keyOrValue {Object} Key as `String` or value as `Integer` to check for
 */
function getValidEnumValue(enumType, keyOrValue)
{
    validateArgument("enumType", enumType);
    validateArgument("keyOrValue", keyOrValue);

    // Is key
    if (typeof keyOrValue === "string")
    {
        var value = enumType[keyOrValue];
        if (value === undefined)
        {
            throwError("The enum key '{0}' does not exist.", keyOrValue);
        }

        return value;
    }
    // Is value
    else if (typeof keyOrValue === "number")
    {
        for (var key in enumType)
        {
            if (enumType[key] === keyOrValue)
            {
                return keyOrValue;
            }
        }

        throwError("Invalid enum value '{0}'.", keyOrValue);
    }
    // Type is not supported
    else
    {
        throwError("Invalid key or value type.");
    }
}

/**
 * Routes to the next step.
 *
 * @static
 * @private
 * @method goToNextStep
 * @param wizard {Object} The jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @return {Boolean} Indicates whether the action executed
 **/
function goToNextStep(wizard, options, state)
{
    return paginationClick(wizard, options, state, increaseCurrentIndexBy(state, 1));
}

/**
 * Routes to the previous step.
 *
 * @static
 * @private
 * @method goToPreviousStep
 * @param wizard {Object} The jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @return {Boolean} Indicates whether the action executed
 **/
function goToPreviousStep(wizard, options, state)
{
    return paginationClick(wizard, options, state, decreaseCurrentIndexBy(state, 1));
}

/**
 * Routes to a specific step by a given index.
 *
 * @static
 * @private
 * @method goToStep
 * @param wizard {Object} The jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param index {Integer} The position (zero-based) to route to
 * @return {Boolean} Indicates whether the action succeeded or failed
 **/
function goToStep(wizard, options, state, index)
{
    if (index < 0 || index >= state.stepCount)
    {
        throwError(_indexOutOfRangeErrorMessage);
    }

    if (options.forceMoveForward && index < state.currentIndex)
    {
        return;
    }

    var oldIndex = state.currentIndex;
    if (wizard.triggerHandler("stepChanging", [state.currentIndex, index]))
    {
        // Save new state
        state.currentIndex = index;
        saveCurrentStateToCookie(wizard, options, state);

        // Change visualisation
        refreshStepNavigation(wizard, options, state, oldIndex);
        refreshPagination(wizard, options, state);
        loadAsyncContent(wizard, options, state);
        startTransitionEffect(wizard, options, state, index, oldIndex);

        wizard.triggerHandler("stepChanged", [index, oldIndex]);
    }
    else
    {
        wizard.find(".steps li").eq(oldIndex).addClass("error");
    }

    return true;
}

function increaseCurrentIndexBy(state, increaseBy)
{
    return state.currentIndex + increaseBy;
}

/**
 * Initializes the component.
 *
 * @static
 * @private
 * @method initialize
 * @param options {Object} The component settings
 **/
function initialize(options)
{
    /*jshint -W040 */
    var opts = $.extend(true, {}, defaults, options);

    return this.each(function ()
    {
        var wizard = $(this);
        var state = {
            currentIndex: opts.startIndex,
            currentStep: null,
            stepCount: 0,
            transitionElement: null
        };

        // Create data container
        wizard.data("options", opts);
        wizard.data("state", state);
        wizard.data("steps", []);

        analyzeData(wizard, opts, state);
        render(wizard, opts, state);
        registerEvents(wizard, opts);

        // Trigger focus
        if (opts.autoFocus && _uniqueId === 0)
        {
            getStepAnchor(wizard, opts.startIndex).focus();
        }
    });
}

/**
 * Inserts a new step to a specific position.
 *
 * @static
 * @private
 * @method insertStep
 * @param wizard {Object} The jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param index {Integer} The position (zero-based) to add
 * @param step {Object} The step object to add
 * @example
 *     $("#wizard").steps().insert(0, {
 *         title: "Title",
 *         content: "", // optional
 *         contentMode: "async", // optional
 *         contentUrl: "/Content/Step/1" // optional
 *     });
 * @chainable
 **/
function insertStep(wizard, options, state, index, step)
{
    if (index < 0 || index > state.stepCount)
    {
        throwError(_indexOutOfRangeErrorMessage);
    }

    // TODO: Validate step object

    // Change data
    step = $.extend({}, stepModel, step);
    insertStepToCache(wizard, index, step);
    if (state.currentIndex !== state.stepCount && state.currentIndex >= index)
    {
        state.currentIndex++;
        saveCurrentStateToCookie(wizard, options, state);
    }
    state.stepCount++;

    var contentContainer = wizard.find(".content"),
        header = $("<{0}>{1}</{0}>".format(options.headerTag, step.title)),
        body = $("<{0}></{0}>".format(options.bodyTag));

    if (step.contentMode == null || step.contentMode === contentMode.html)
    {
        body.html(step.content);
    }

    if (index === 0)
    {
        contentContainer.prepend(body).prepend(header);
    }
    else
    {
        getStepPanel(wizard, (index - 1)).after(body).after(header);
    }

    renderBody(wizard, state, body, index);
    renderTitle(wizard, options, state, header, index);
    refreshSteps(wizard, options, state, index);
    if (index === state.currentIndex)
    {
        refreshStepNavigation(wizard, options, state);
    }
    refreshPagination(wizard, options, state);

    return wizard;
}

/**
 * Inserts a step object to the cache at a specific position.
 *
 * @static
 * @private
 * @method insertStepToCache
 * @param wizard {Object} A jQuery wizard object
 * @param index {Integer} The position (zero-based) to add
 * @param step {Object} The step object to add
 **/
function insertStepToCache(wizard, index, step)
{
    getSteps(wizard).splice(index, 0, step);
}

/**
 * Handles the keyup DOM event for pagination.
 *
 * @static
 * @private
 * @event keyup
 * @param event {Object} An event object
 */
function keyUpHandler(event)
{
    var wizard = $(this),
        options = getOptions(wizard),
        state = getState(wizard);

    if (options.suppressPaginationOnFocus && wizard.find(":focus").is(":input"))
    {
        event.preventDefault();
        return false;
    }

    var keyCodes = { left: 37, right: 39 };
    if (event.keyCode === keyCodes.left)
    {
        event.preventDefault();
        goToPreviousStep(wizard, options, state);
    }
    else if (event.keyCode === keyCodes.right)
    {
        event.preventDefault();
        goToNextStep(wizard, options, state);
    }
}

/**
 * Loads and includes async content.
 *
 * @static
 * @private
 * @method loadAsyncContent
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 */
function loadAsyncContent(wizard, options, state)
{
    if (state.stepCount > 0)
    {
        var currentStep = getStep(wizard, state.currentIndex);

        if (!options.enableContentCache || !currentStep.contentLoaded)
        {
            switch (getValidEnumValue(contentMode, currentStep.contentMode))
            {
                case contentMode.iframe:
                    wizard.find(".content > .body").eq(state.currentIndex).empty()
                        .html("<iframe src=\"" + currentStep.contentUrl + "\" frameborder=\"0\" scrolling=\"no\" />")
                        .data("loaded", "1");
                    break;

                case contentMode.async:
                    var currentStepContent = getStepPanel(wizard, state.currentIndex)._aria("busy", "true")
                        .empty().append(renderTemplate(options.loadingTemplate, { text: options.labels.loading }));

                    $.ajax({ url: currentStep.contentUrl, cache: false }).done(function (data)
                    {
                        currentStepContent.empty().html(data)._aria("busy", "false").data("loaded", "1");
                    });
                    break;
            }
        }
    }
}

/**
 * Fires the action next or previous click event.
 *
 * @static
 * @private
 * @method paginationClick
 * @param wizard {Object} The jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param index {Integer} The position (zero-based) to route to
 * @return {Boolean} Indicates whether the event fired successfully or not
 **/
function paginationClick(wizard, options, state, index)
{
    var oldIndex = state.currentIndex;

    if (index >= 0 && index < state.stepCount && !(options.forceMoveForward && index < state.currentIndex))
    {
        var anchor = getStepAnchor(wizard, index),
            parent = anchor.parent(),
            isDisabled = parent.hasClass("disabled");

        // Enable the step to make the anchor clickable!
        parent._enableAria();
        anchor.click();

        // An error occured
        if (oldIndex === state.currentIndex && isDisabled)
        {
            // Disable the step again if current index has not changed; prevents click action.
            parent._enableAria(false);
            return false;
        }

        return true;
    }

    return false;
}

/**
 * Fires when a pagination click happens.
 *
 * @static
 * @private
 * @event click
 * @param event {Object} An event object
 */
function paginationClickHandler(event)
{
    event.preventDefault();

    var anchor = $(this),
        wizard = anchor.parent().parent().parent().parent(),
        options = getOptions(wizard),
        state = getState(wizard),
        href = anchor.attr("href");

    switch (href.substring(href.lastIndexOf("#") + 1))
    {
        case "cancel":
            cancel(wizard);
            break;

        case "finish":
			var featureId=wizard.attr('id');
			if(featureId=="wizard"){
			configureVpn.onFinish(event);
			}else if(featureId=="wizardDmvpnHub"){
			configureVpn.onFinishDmvpnHub(event);	
			}else if(featureId=="wizardSiteToSite"){
				configureVpn.ipsecOnFinish(event);
                        }  else if(featureId=="wizardRemoteAccess") {
				configureVpn.remoteAccessVpnOnFinish(event);
			}
            finishStep(wizard, state);
            break;

        case "next":
            goToNextStep(wizard, options, state);
            break;

        case "previous":
            goToPreviousStep(wizard, options, state);
            break;
    }
}

/**
 * Refreshs the visualization state for the entire pagination.
 *
 * @static
 * @private
 * @method refreshPagination
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 */
function refreshPagination(wizard, options, state)
{
    if (options.enablePagination)
    {
        var finish = wizard.find(".actions a[href$='#finish']").parent(),
            next = wizard.find(".actions a[href$='#next']").parent();

        if (!options.forceMoveForward)
        {
            var previous = wizard.find(".actions a[href$='#previous']").parent();
            previous._enableAria(state.currentIndex > 0);
        }

        if (options.enableFinishButton && options.showFinishButtonAlways)
        {
            finish._enableAria(state.stepCount > 0);
            next._enableAria(state.stepCount > 1 && state.stepCount > (state.currentIndex + 1));
        }
        else
        {
            finish._showAria(options.enableFinishButton && state.stepCount === (state.currentIndex + 1));
            next._showAria(state.stepCount === 0 || state.stepCount > (state.currentIndex + 1)).
                _enableAria(state.stepCount > (state.currentIndex + 1) || !options.enableFinishButton);
        }
    }
}

/**
 * Refreshs the visualization state for the step navigation (tabs).
 *
 * @static
 * @private
 * @method refreshStepNavigation
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param [oldIndex] {Integer} The index of the prior step
 */
function refreshStepNavigation(wizard, options, state, oldIndex)
{
    var currentOrNewStepAnchor = getStepAnchor(wizard, state.currentIndex),
        currentInfo = $("<span class=\"current-info audible\">" + options.labels.current + " </span>"),
        stepTitles = wizard.find(".content > .title");

    if (oldIndex != null)
    {
        var oldStepAnchor = getStepAnchor(wizard, oldIndex);
        oldStepAnchor.parent().addClass("done").removeClass("error")._selectAria(false);
        stepTitles.eq(oldIndex).removeClass("current").next(".body").removeClass("current");
        currentInfo = oldStepAnchor.find(".current-info");
        currentOrNewStepAnchor.focus();
    }

    currentOrNewStepAnchor.prepend(currentInfo).parent()._selectAria().removeClass("done")._enableAria();
    stepTitles.eq(state.currentIndex).addClass("current").next(".body").addClass("current");
}

/**
 * Refreshes step buttons and their related titles beyond a certain position.
 *
 * @static
 * @private
 * @method refreshSteps
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param index {Integer} The start point for refreshing ids
 */
function refreshSteps(wizard, options, state, index)
{
    var uniqueId = getUniqueId(wizard);

    for (var i = index; i < state.stepCount; i++)
    {
        var uniqueStepId = uniqueId + _tabSuffix + i,
            uniqueBodyId = uniqueId + _tabpanelSuffix + i,
            uniqueHeaderId = uniqueId + _titleSuffix + i,
            title = wizard.find(".title").eq(i)._id(uniqueHeaderId);

        wizard.find(".steps a").eq(i)._id(uniqueStepId)
            ._aria("controls", uniqueBodyId).attr("href", "#" + uniqueHeaderId)
            .html(renderTemplate(options.titleTemplate, { index: i + 1, title: title.html() }));
        wizard.find(".body").eq(i)._id(uniqueBodyId)
            ._aria("labelledby", uniqueHeaderId);
    }
}

function registerEvents(wizard, options)
{
    var eventNamespace = getEventNamespace(wizard);

    wizard.bind("canceled" + eventNamespace, options.onCanceled);
    wizard.bind("finishing" + eventNamespace, options.onFinishing);
    wizard.bind("finished" + eventNamespace, options.onFinished);
    wizard.bind("stepChanging" + eventNamespace, options.onStepChanging);
    wizard.bind("stepChanged" + eventNamespace, options.onStepChanged);

    if (options.enableKeyNavigation)
    {
        wizard.bind("keyup" + eventNamespace, keyUpHandler);
    }

    wizard.find(".actions a").bind("click" + eventNamespace, paginationClickHandler);
}

/**
 * Removes a specific step by an given index.
 *
 * @static
 * @private
 * @method removeStep
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param index {Integer} The position (zero-based) of the step to remove
 * @return Indecates whether the item is removed.
 **/
function removeStep(wizard, options, state, index)
{
    // Index out of range and try deleting current item will return false.
    if (index < 0 || index >= state.stepCount || state.currentIndex === index)
    {
        return false;
    }

    // Change data
    removeStepFromCache(wizard, index);
    if (state.currentIndex > index)
    {
        state.currentIndex--;
        saveCurrentStateToCookie(wizard, options, state);
    }
    state.stepCount--;

    getStepTitle(wizard, index).remove();
    getStepPanel(wizard, index).remove();
    getStepAnchor(wizard, index).parent().remove();

    // Set the "first" class to the new first step button 
    if (index === 0)
    {
        wizard.find(".steps li").first().addClass("first");
    }

    // Set the "last" class to the new last step button 
    if (index === state.stepCount)
    {
        wizard.find(".steps li").eq(index).addClass("last");
    }

    refreshSteps(wizard, options, state, index);
    refreshPagination(wizard, options, state);

    return true;
}

function removeStepFromCache(wizard, index)
{
    getSteps(wizard).splice(index, 1);
}

/**
 * Transforms the base html structure to a more sensible html structure.
 *
 * @static
 * @private
 * @method render
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 **/
function render(wizard, options, state)
{
    // Create a content wrapper and copy HTML from the intial wizard structure
    var wrapperTemplate = "<{0} class=\"{1}\">{2}</{0}>",
        orientation = getValidEnumValue(stepsOrientation, options.stepsOrientation),
        verticalCssClass = (orientation === stepsOrientation.vertical) ? " vertical" : "",
        contentWrapper = $(wrapperTemplate.format(options.contentContainerTag, "content " + options.clearFixCssClass, wizard.html())),
        stepsWrapper = $(wrapperTemplate.format(options.stepsContainerTag, "steps " + options.clearFixCssClass, "<ul role=\"tablist\"></ul>")),
        stepTitles = contentWrapper.children(options.headerTag),
        stepContents = contentWrapper.children(options.bodyTag);

    // Transform the wizard wrapper and remove the inner HTML
    wizard.attr("role", "application").empty().append(stepsWrapper).append(contentWrapper)
        .addClass(options.cssClass + " " + options.clearFixCssClass + verticalCssClass);

    // Add WIA-ARIA support
    stepContents.each(function (index)
    {
        renderBody(wizard, state, $(this), index);
    });

    stepTitles.each(function (index)
    {
        renderTitle(wizard, options, state, $(this), index);
    });

    refreshStepNavigation(wizard, options, state);
    renderPagination(wizard, options, state);
}

/**
 * Transforms the body to a proper tabpanel.
 *
 * @static
 * @private
 * @method renderBody
 * @param wizard {Object} A jQuery wizard object
 * @param body {Object} A jQuery body object
 * @param index {Integer} The position of the body
 */
function renderBody(wizard, state, body, index)
{
    var uniqueId = getUniqueId(wizard),
        uniqueBodyId = uniqueId + _tabpanelSuffix + index,
        uniqueHeaderId = uniqueId + _titleSuffix + index;

    body._id(uniqueBodyId).attr("role", "tabpanel")._aria("labelledby", uniqueHeaderId)
        .addClass("body")._showAria(state.currentIndex === index);
}

/**
 * Renders a pagination if enabled.
 *
 * @static
 * @private
 * @method renderPagination
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 */
function renderPagination(wizard, options, state)
{
    if (options.enablePagination)
    {
        var pagination = "<{0} class=\"actions {1}\"><ul role=\"menu\" aria-label=\"{2}\">{3}</ul></{0}>",
            buttonTemplate = "<li><a href=\"#{0}\" role=\"menuitem\">{1}</a></li>",
            buttons = "";

        if (!options.forceMoveForward)
        {
           // buttons += buttonTemplate.format("previous", options.labels.previous);
           buttons += buttonTemplate.format("previous", $.i18n.prop("wizardBtnPrev"));
        }

       //buttons += buttonTemplate.format("next", options.labels.next);
        buttons += buttonTemplate.format("next", $.i18n.prop("wizardBtnNext"));

        if (options.enableFinishButton)
        {
           // buttons += buttonTemplate.format("finish", options.labels.finish);
            buttons += buttonTemplate.format("finish", $.i18n.prop("finish"));
        }

        if (options.enableCancelButton)
        {
           // buttons += buttonTemplate.format("cancel", options.labels.cancel);
            buttons += buttonTemplate.format("cancel", $.i18n.prop("cancel"));
        }

        wizard.append(pagination.format(options.actionContainerTag, options.clearFixCssClass,
            options.labels.pagination, buttons));

        refreshPagination(wizard, options, state);
        loadAsyncContent(wizard, options, state);
    }
}

/**
 * Renders a template and replaces all placeholder.
 *
 * @static
 * @private
 * @method renderTemplate
 * @param template {String} A template
 * @param substitutes {Object} A list of substitute
 * @return {String} The rendered template
 */
function renderTemplate(template, substitutes)
{
    var matches = template.match(/#([a-z]*)#/gi);

    for (var i = 0; i < matches.length; i++)
    {
        var match = matches[i], 
            key = match.substring(1, match.length - 1);

        if (substitutes[key] === undefined)
        {
            throwError("The key '{0}' does not exist in the substitute collection!", key);
        }

        template = template.replace(match, substitutes[key]);
    }

    return template;
}

/**
 * Transforms the title to a step item button.
 *
 * @static
 * @private
 * @method renderTitle
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 * @param header {Object} A jQuery header object
 * @param index {Integer} The position of the header
 */
function renderTitle(wizard, options, state, header, index)
{
    var uniqueId = getUniqueId(wizard),
        uniqueStepId = uniqueId + _tabSuffix + index,
        uniqueBodyId = uniqueId + _tabpanelSuffix + index,
        uniqueHeaderId = uniqueId + _titleSuffix + index,
        stepCollection = wizard.find(".steps > ul"),
        title = renderTemplate(options.titleTemplate, {
            index: index + 1,
            title: header.html()
        }),
        stepItem = $("<li role=\"tab\"><a id=\"" + uniqueStepId + "\" href=\"#" + uniqueHeaderId + 
            "\" aria-controls=\"" + uniqueBodyId + "\">" + title + "</a></li>");
        
    stepItem._enableAria(options.enableAllSteps || state.currentIndex > index);

    if (state.currentIndex > index)
    {
        stepItem.addClass("done");
    }

    header._id(uniqueHeaderId).attr("tabindex", "-1").addClass("title");

    if (index === 0)
    {
        stepCollection.prepend(stepItem);
    }
    else
    {
        stepCollection.find("li").eq(index - 1).after(stepItem);
    }

    // Set the "first" class to the new first step button
    if (index === 0)
    {
        stepCollection.find("li").removeClass("first").eq(index).addClass("first");
    }

    // Set the "last" class to the new last step button
    if (index === (state.stepCount - 1))
    {
        stepCollection.find("li").removeClass("last").eq(index).addClass("last");
    }

    // Register click event
    stepItem.children("a").bind("click" + getEventNamespace(wizard), stepClickHandler);
}

/**
 * Saves the current state to a cookie.
 *
 * @static
 * @private
 * @method saveCurrentStateToCookie
 * @param wizard {Object} A jQuery wizard object
 * @param options {Object} Settings of the current wizard
 * @param state {Object} The state container of the current wizard
 */
function saveCurrentStateToCookie(wizard, options, state)
{
    if (options.saveState && $.cookie)
    {
        $.cookie(_cookiePrefix + getUniqueId(wizard), state.currentIndex);
    }
}

function startTransitionEffect(wizard, options, state, index, oldIndex)
{
    var stepContents = wizard.find(".content > .body"),
        effect = getValidEnumValue(transitionEffect, options.transitionEffect),
        effectSpeed = options.transitionEffectSpeed,
        newStep = stepContents.eq(index),
        currentStep = stepContents.eq(oldIndex);

    switch (effect)
    {
        case transitionEffect.fade:
        case transitionEffect.slide:
            var hide = (effect === transitionEffect.fade) ? "fadeOut" : "slideUp",
                show = (effect === transitionEffect.fade) ? "fadeIn" : "slideDown";

            state.transitionElement = newStep;
            currentStep[hide](effectSpeed, function ()
            {
                var wizard = $(this)._showAria(false).parent().parent(),
                    state = getState(wizard);

                if (state.transitionElement)
                {
                    state.transitionElement[show](effectSpeed, function ()
                    {
                        $(this)._showAria();
                    });
                    state.transitionElement = null;
                }
            }).promise();
            break;

        case transitionEffect.slideLeft:
            var outerWidth = currentStep.outerWidth(true),
                posFadeOut = (index > oldIndex) ? -(outerWidth) : outerWidth,
                posFadeIn = (index > oldIndex) ? outerWidth : -(outerWidth);

            currentStep.animate({ left: posFadeOut }, effectSpeed, 
                function () { $(this)._showAria(false); }).promise();
            newStep.css("left", posFadeIn + "px")._showAria()
                .animate({ left: 0 }, effectSpeed).promise();
            break;

        default:
            currentStep._showAria(false);
            newStep._showAria();
            break;
    }
}

/**
 * Fires when a step click happens.
 *
 * @static
 * @private
 * @event click
 * @param event {Object} An event object
 */
function stepClickHandler(event)
{
    event.preventDefault();

    var anchor = $(this),
        wizard = anchor.parent().parent().parent().parent(),
        options = getOptions(wizard),
        state = getState(wizard),
        oldIndex = state.currentIndex;

    if (anchor.parent().is(":not(.disabled):not(.current)"))
    {
        var href = anchor.attr("href"),
            position = parseInt(href.substring(href.lastIndexOf("-") + 1), 0);

        goToStep(wizard, options, state, position);
    }

    // If nothing has changed
    if (oldIndex === state.currentIndex)
    {
        getStepAnchor(wizard, oldIndex).focus();
        return false;
    }
}

function throwError(message)
{
    if (arguments.length > 1)
    {
        message = message.format(Array.prototype.slice.call(arguments, 1));
    }

    throw new Error(message);
}

/**
 * Checks an argument for null or undefined and throws an error if one check applies.
 *
 * @static
 * @private
 * @method validateArgument
 * @param argumentName {String} The name of the given argument
 * @param argumentValue {Object} The argument itself
 */
function validateArgument(argumentName, argumentValue)
{
    if (argumentValue == null)
    {
        throwError("The argument '{0}' is null or undefined.", argumentName);
    }
}

/**
 * Represents a jQuery wizard plugin.
 *
 * @class steps
 * @constructor
 * @param [method={}] The name of the method as `String` or an JSON object for initialization
 * @param [params=]* {Array} Additional arguments for a method call
 * @chainable
 **/
$.fn.steps = function (method)
{
    if ($.fn.steps[method])
    {
        return $.fn.steps[method].apply(this, Array.prototype.slice.call(arguments, 1));
    }
    else if (typeof method === "object" || !method)
    {
        return initialize.apply(this, arguments);
    }
    else
    {
        $.error("Method " + method + " does not exist on jQuery.steps");
    }
};

/**
 * Adds a new step.
 *
 * @method add
 * @param step {Object} The step object to add
 * @chainable
 **/
$.fn.steps.add = function (step)
{
    var state = getState(this);
    return insertStep(this, getOptions(this), state, state.stepCount, step);
};

/**
 * Removes the control functionality completely and transforms the current state to the initial HTML structure.
 *
 * @method destroy
 * @chainable
 **/
$.fn.steps.destroy = function ()
{
    return destroy(this, getOptions(this));
};

/**
 * Triggers the onFinishing and onFinished event.
 *
 * @method finish
 **/
$.fn.steps.finish = function ()
{
    finishStep(this, getState(this));
};

/**
 * Gets the current step index.
 *
 * @method getCurrentIndex
 * @return {Integer} The actual step index (zero-based)
 * @for steps
 **/
$.fn.steps.getCurrentIndex = function ()
{
    return getState(this).currentIndex;
};

/**
 * Gets the current step object.
 *
 * @method getCurrentStep
 * @return {Object} The actual step object
 **/
$.fn.steps.getCurrentStep = function ()
{
    return getStep(this, getState(this).currentIndex);
};

/**
 * Gets a specific step object by index.
 *
 * @method getStep
 * @param index {Integer} An integer that belongs to the position of a step
 * @return {Object} A specific step object
 **/
$.fn.steps.getStep = function (index)
{
    return getStep(this, index);
};

/**
 * Inserts a new step to a specific position.
 *
 * @method insert
 * @param index {Integer} The position (zero-based) to add
 * @param step {Object} The step object to add
 * @example
 *     $("#wizard").steps().insert(0, {
 *         title: "Title",
 *         content: "", // optional
 *         contentMode: "async", // optional
 *         contentUrl: "/Content/Step/1" // optional
 *     });
 * @chainable
 **/
$.fn.steps.insert = function (index, step)
{
    return insertStep(this, getOptions(this), getState(this), index, step);
};

/**
 * Routes to the next step.
 *
 * @method next
 * @return {Boolean} Indicates whether the action executed
 **/
$.fn.steps.next = function ()
{
    return goToNextStep(this, getOptions(this), getState(this));
};

/**
 * Routes to the previous step.
 *
 * @method previous
 * @return {Boolean} Indicates whether the action executed
 **/
$.fn.steps.previous = function ()
{
    return goToPreviousStep(this, getOptions(this), getState(this));
};

/**
 * Removes a specific step by an given index.
 *
 * @method remove
 * @param index {Integer} The position (zero-based) of the step to remove
 * @return Indecates whether the item is removed.
 **/
$.fn.steps.remove = function (index)
{
    return removeStep(this, getOptions(this), getState(this), index);
};

/**
 * Sets a specific step object by index.
 *
 * @method setStep
 * @param index {Integer} An integer that belongs to the position of a step
 * @param step {Object} The step object to change
 **/
$.fn.steps.setStep = function (index, step)
{
    throw new Error("Not yet implemented!");
};

/**
 * Skips an certain amount of steps.
 *
 * @method skip
 * @param count {Integer} The amount of steps that should be skipped
 * @return {Boolean} Indicates whether the action executed
 **/
$.fn.steps.skip = function (count)
{
    throw new Error("Not yet implemented!");
};

/**
 * An enum represents the different content types of a step and their loading mechanisms.
 *
 * @class contentMode
 * @for steps
 **/
var contentMode = $.fn.steps.contentMode = {
    /**
     * HTML embedded content
     *
     * @readOnly
     * @property html
     * @type Integer
     * @for contentMode
     **/
    html: 0,

    /**
     * IFrame embedded content
     *
     * @readOnly
     * @property iframe
     * @type Integer
     * @for contentMode
     **/
    iframe: 1,

    /**
     * Async embedded content
     *
     * @readOnly
     * @property async
     * @type Integer
     * @for contentMode
     **/
    async: 2
};

/**
 * An enum represents the orientation of the steps navigation.
 *
 * @class stepsOrientation
 * @for steps
 **/
var stepsOrientation = $.fn.steps.stepsOrientation = {
    /**
     * Horizontal orientation
     *
     * @readOnly
     * @property horizontal
     * @type Integer
     * @for stepsOrientation
     **/
    horizontal: 0,

    /**
     * Vertical orientation
     *
     * @readOnly
     * @property vertical
     * @type Integer
     * @for stepsOrientation
     **/
    vertical: 1
};

/**
 * An enum that represents the various transition animations.
 *
 * @class transitionEffect
 * @for steps
 **/
var transitionEffect = $.fn.steps.transitionEffect = {
    /**
     * No transition animation
     *
     * @readOnly
     * @property none
     * @type Integer
     * @for transitionEffect
     **/
    none: 0,

    /**
     * Fade in transition
     *
     * @readOnly
     * @property fade
     * @type Integer
     * @for transitionEffect
     **/
    fade: 1,

    /**
     * Slide up transition
     *
     * @readOnly
     * @property slide
     * @type Integer
     * @for transitionEffect
     **/
    slide: 2,

    /**
     * Slide left transition
     *
     * @readOnly
     * @property slideLeft
     * @type Integer
     * @for transitionEffect
     **/
    slideLeft: 3
};

var stepModel = $.fn.steps.stepModel = {
    title: "",
    content: "",
    contentUrl: "",
    contentMode: contentMode.html,
    contentLoaded: false
};

/**
 * An object that represents the default settings.
 * There are two possibities to override the sub-properties.
 * Either by doing it generally (global) or on initialization.
 *
 * @static
 * @class defaults
 * @for steps
 * @example
 *   // Global approach
 *   $.steps.defaults.headerTag = "h3";
 * @example
 *   // Initialization approach
 *   $("#wizard").steps({ headerTag: "h3" });
 **/
 var originalHeight = "" ;
 
var defaults = $.fn.steps.defaults = {
    /**
     * The header tag is used to find the step button text within the declared wizard area.
     *
     * @property headerTag
     * @type String
     * @default "h1"
     * @for defaults
     **/
    headerTag: "h1",

    /**
     * The body tag is used to find the step content within the declared wizard area.
     *
     * @property bodyTag
     * @type String
     * @default "div"
     * @for defaults
     **/
    bodyTag: "div",

    /**
     * The content container tag which will be used to wrap all step contents.
     *
     * @property contentContainerTag
     * @type String
     * @default "div"
     * @for defaults
     **/
    contentContainerTag: "div",

    /**
     * The action container tag which will be used to wrap the pagination navigation.
     *
     * @property actionContainerTag
     * @type String
     * @default "div"
     * @for defaults
     **/
    actionContainerTag: "div",

    /**
     * The steps container tag which will be used to wrap the steps navigation.
     *
     * @property stepsContainerTag
     * @type String
     * @default "div"
     * @for defaults
     **/
    stepsContainerTag: "div",

    /**
     * The css class which will be added to the outer component wrapper.
     *
     * @property cssClass
     * @type String
     * @default "wizard"
     * @for defaults
     * @example
     *     <div class="wizard">
     *         ...
     *     </div>
     **/
    cssClass: "wizard",

    /**
     * The css class which will be used for floating scenarios.
     *
     * @property clearFixCssClass
     * @type String
     * @default "clearfix"
     * @for defaults
     **/
    clearFixCssClass: "clearfix",

    /**
     * Determines whether the steps are vertically or horizontally oriented.
     *
     * @property stepsOrientation
     * @type stepsOrientation
     * @default horizontal
     * @for defaults
     * @since 1.0.0
     **/
    stepsOrientation: stepsOrientation.horizontal,

    /*
     * Tempplates
     */

    /**
     * The title template which will be used to create a step button.
     *
     * @property titleTemplate
     * @type String
     * @default "<span class=\"number\">#index#.</span> #title#"
     * @for defaults
     **/
    titleTemplate: "<span class=\"number\"></span> #title#",

    /**
     * The loading template which will be used to create the loading animation.
     *
     * @property loadingTemplate
     * @type String
     * @default "<span class=\"spinner\"></span> #text#"
     * @for defaults
     **/
    loadingTemplate: "<span class=\"spinner\"></span> #text#",

    /*
     * Behaviour
     */

    /**
     * Sets the focus to the first wizard instance in order to enable the key navigation from the begining if `true`. 
     *
     * @property autoFocus
     * @type Boolean
     * @default false
     * @for defaults
     * @since 0.9.4
     **/
    autoFocus: false,

    /**
     * Enables all steps from the begining if `true` (all steps are clickable).
     *
     * @property enableAllSteps
     * @type Boolean
     * @default false
     * @for defaults
     **/
    enableAllSteps: false,

    /**
     * Enables keyboard navigation if `true` (arrow left and arrow right).
     *
     * @property enableKeyNavigation
     * @type Boolean
     * @default true
     * @for defaults
     **/
    enableKeyNavigation: true,

    /**
     * Enables pagination if `true`.
     *
     * @property enablePagination
     * @type Boolean
     * @default true
     * @for defaults
     **/
    enablePagination: true,

    /**
     * Suppresses pagination if a form field is focused.
     *
     * @property suppressPaginationOnFocus
     * @type Boolean
     * @default true
     * @for defaults
     **/
    suppressPaginationOnFocus: true,

    /**
     * Enables cache for async loaded or iframe embedded content.
     *
     * @property enableContentCache
     * @type Boolean
     * @default true
     * @for defaults
     **/
    enableContentCache: true,

    /**
     * Shows the cancel button if enabled.
     *
     * @property enableCancelButton
     * @type Boolean
     * @default false
     * @for defaults
     **/
    enableCancelButton: false,

    /**
     * Shows the finish button if enabled.
     *
     * @property enableFinishButton
     * @type Boolean
     * @default true
     * @for defaults
     **/
    enableFinishButton: true,

    /**
     * Not yet implemented.
     *
     * @property preloadContent
     * @type Boolean
     * @default false
     * @for defaults
     **/
    preloadContent: false,

    /**
     * Shows the finish button always (on each step; right beside the next button) if `true`. 
     * Otherwise the next button will be replaced by the finish button if the last step becomes active.
     *
     * @property showFinishButtonAlways
     * @type Boolean
     * @default false
     * @for defaults
     **/
    showFinishButtonAlways: false,

    /**
     * Prevents jumping to a previous step.
     *
     * @property forceMoveForward
     * @type Boolean
     * @default false
     * @for defaults
     **/
    forceMoveForward: false,

    /**
     * Saves the current state (step position) to a cookie.
     * By coming next time the last active step becomes activated.
     *
     * @property saveState
     * @type Boolean
     * @default false
     * @for defaults
     **/
    saveState: false,

    /**
     * The position to start on (zero-based).
     *
     * @property startIndex
     * @type Integer
     * @default 0
     * @for defaults
     **/
    startIndex: 0,

    /*
     * Animation Effect Configuration
     */

    /**
     * The animation effect which will be used for step transitions.
     *
     * @property transitionEffect
     * @type transitionEffect
     * @default none
     * @for defaults
     **/
    transitionEffect: transitionEffect.none,

    /**
     * Animation speed for step transitions (in milliseconds).
     *
     * @property transitionEffectSpeed
     * @type Integer
     * @default 200
     * @for defaults
     **/
    transitionEffectSpeed: 200,

    /*
     * Events
     */

    /**
     * Fires before the step changes and can be used to prevent step changing by returning `false`. 
     * Very useful for form validation. 
     *
     * @property onStepChanging
     * @type Event
     * @default function (event, currentIndex, newIndex) { return true; }
     * @for defaults
     **/
    onStepChanging: function (event, currentIndex, newIndex) { 
		if(currentIndex == 0){
            if ($("#vpnType").val() == 'dmvpnSpoke') {
				originalHeight = $("div.content.clearfix").height();
				var ip1 = $("#tunnelIp").val(),
				ip2 = $("#tunnelAddr").val(),
				ip3 = $("#backupTunnelIP").val(),
				mask = $("#tunnelMask").val();
				primayWanList = configureFirewall.getInterfacesInZone("WAN");
				if(primayWanList.length >= 2){
					$("#tunnelIp").removeClass("requiredSameSubnetDmvpn");
				}else{
					$("#tunnelIp").removeClass("requiredTipRipSameSubnet");
				}
				if(($('#utmForm').valid()) && (configureVpn.isInSameSubnet(ip1,ip2,ip3,mask))){
					return true;
				}else{
					configureVpn.isInSameSubnet(ip1,ip2,ip3,mask)
					return false;
				}
            }else if ($("#vpnType").val() == 'siteTosite'){
				if(($('#s2sTunnelIP').valid())&&($('#s2sTunnelMask').valid())){
					$('#ipsecForm').removeClass("error");
					return true;
				}else{
					return false;
				}	
		    } else //if ($("#vpnType").val() == 'siteTosite')
            {
				if(($('#utmForm').valid())){
					return true;
				}else{
					return false;
				}
            }
		}else if(currentIndex == 1){
			if(newIndex == 0){
				return true;
			}else if(($("#vpnType").val() == 'siteTosite')){
				if($('#peerAddr').valid()){
				$('#ipsecForm').removeClass("error");
			    return true;	
				}else{
				return false;	
				}				
			}
			else if($('#utmForm').valid()){
				return true;
			}
		}else{
			if(newIndex < 2){
				return true;
			}
			return false;
		}	
	},

    /**
     * Fires after the step has change. 
     *
     * @property onStepChanged
     * @type Event
     * @default function (event, currentIndex, priorIndex) { }
     * @for defaults
     **/
    onStepChanged: function (event, currentIndex, priorIndex) {
		if(currentIndex == 0){
			$(".wizard .content").css({'min-height':originalHeight});
		}else{
			$(".wizard .content").css({'min-height':'240px'});
		}
	},

    /**
     * Fires after cancelation. 
     *
     * @property onCanceled
     * @type Event
     * @default function (event) { }
     * @for defaults
     **/
    onCanceled: function (event) { },

    /**
     * Fires before finishing and can be used to prevent completion by returning `false`. 
     * Very useful for form validation. 
     *
     * @property onFinishing
     * @type Event
     * @default function (event, currentIndex) { return true; }
     * @for defaults
     **/
    onFinishing: function (event, currentIndex) { return true; },

    /**
     * Fires after completion. 
     *
     * @property onFinished
     * @type Event
     * @default function (event, currentIndex) { }
     * @for defaults
     **/
    onFinished: function (event, currentIndex) { },

    /**
     * Contains all labels. 
     *
     * @property labels
     * @type Object
     * @for defaults
     **/
    labels: {
        /**
         * Label for the cancel button.
         *
         * @property cancel
         * @type String
         * @default "Cancel"
         * @for defaults
         **/
        cancel: "Cancel",

        /**
         * This label is important for accessability reasons.
         * Indicates which step is activated.
         *
         * @property current
         * @type String
         * @default "current step:"
         * @for defaults
         **/
        current: "current step:",

        /**
         * This label is important for accessability reasons and describes the kind of navigation.
         *
         * @property pagination
         * @type String
         * @default "Pagination"
         * @for defaults
         * @since 0.9.7
         **/
        pagination: "Pagination",

        /**
         * Label for the finish button.
         *
         * @property finish
         * @type String
         * @default "Finish"
         * @for defaults
         **/
        finish: "Finish",

        /**
         * Label for the next button.
         *
         * @property next
         * @type String
         * @default "Next"
         * @for defaults
         **/
        next: "Next",

        /**
         * Label for the previous button.
         *
         * @property previous
         * @type String
         * @default "Previous"
         * @for defaults
         **/
        previous: "Previous",

        /**
         * Label for the loading animation.
         *
         * @property loading
         * @type String
         * @default "Loading ..."
         * @for defaults
         **/
        loading: "Loading ..."
         },
	buttons: {
        /**
         * Label for the cancel button.
         *
         * @property cancel
         * @type String
         * @default "Cancel"
         * @for defaults
         **/
        cancel: "Cancel",

        /**
         * This label is important for accessability reasons.
         * Indicates which step is activated.
         *
         * @property current
         * @type String
         * @default "current step:"
         * @for defaults
         **/
        finish: "Finish",

		apply: "Apply",
        /**
         * Label for the next button.
         *
         * @property next
         * @type String
         * @default "Next"
         * @for defaults
         **/
        next: "Next",

        /**
         * Label for the previous button.
         *
         * @property previous
         * @type String
         * @default "Previous"
         * @for defaults
         **/
        previous: "Previous",
    }
};
})(jQuery);